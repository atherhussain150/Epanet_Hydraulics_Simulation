// Copyright 2010 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// {{PRE_JSES}}

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

var arguments_ = [];
var thisProgram = './this.program';
var quit_ = function(status, toThrow) {
  throw toThrow;
};

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_HAS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;
ENVIRONMENT_IS_WEB = typeof window === 'object';
ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
// A web environment like Electron.js can have Node enabled, so we must
// distinguish between Node-enabled environments and Node environments per se.
// This will allow the former to do things like mount NODEFS.
// Extended check using process.versions fixes issue #8816.
// (Also makes redundant the original check that 'require' is a function.)
ENVIRONMENT_HAS_NODE = typeof process === 'object' && typeof process.versions === 'object' && typeof process.versions.node === 'string';
ENVIRONMENT_IS_NODE = ENVIRONMENT_HAS_NODE && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (Module['ENVIRONMENT']) {
  throw new Error('Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -s ENVIRONMENT=web or -s ENVIRONMENT=node)');
}



// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  }
  return scriptDirectory + path;
}

// Hooks that are implemented differently in different runtime environments.
var read_,
    readAsync,
    readBinary,
    setWindowTitle;

var nodeFS;
var nodePath;

if (ENVIRONMENT_IS_NODE) {
  scriptDirectory = __dirname + '/';


  read_ = function shell_read(filename, binary) {
    var ret = tryParseAsDataURI(filename);
    if (ret) {
      return binary ? ret : ret.toString();
    }
    if (!nodeFS) nodeFS = require('fs');
    if (!nodePath) nodePath = require('path');
    filename = nodePath['normalize'](filename);
    return nodeFS['readFileSync'](filename, binary ? null : 'utf8');
  };

  readBinary = function readBinary(filename) {
    var ret = read_(filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };




  if (process['argv'].length > 1) {
    thisProgram = process['argv'][1].replace(/\\/g, '/');
  }

  arguments_ = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  process['on']('unhandledRejection', abort);

  quit_ = function(status) {
    process['exit'](status);
  };

  Module['inspect'] = function () { return '[Emscripten Module object]'; };


} else
if (ENVIRONMENT_IS_SHELL) {


  if (typeof read != 'undefined') {
    read_ = function shell_read(f) {
      var data = tryParseAsDataURI(f);
      if (data) {
        return intArrayToString(data);
      }
      return read(f);
    };
  }

  readBinary = function readBinary(f) {
    var data;
    data = tryParseAsDataURI(f);
    if (data) {
      return data;
    }
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    arguments_ = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    arguments_ = arguments;
  }

  if (typeof quit === 'function') {
    quit_ = function(status) {
      quit(status);
    };
  }

  if (typeof print !== 'undefined') {
    // Prefer to use print/printErr where they exist, as they usually work better.
    if (typeof console === 'undefined') console = {};
    console.log = print;
    console.warn = console.error = typeof printErr !== 'undefined' ? printErr : print;
  }
} else

// Note that this includes Node.js workers when relevant (pthreads is enabled).
// Node.js workers are detected as a combination of ENVIRONMENT_IS_WORKER and
// ENVIRONMENT_HAS_NODE.
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled
    scriptDirectory = self.location.href;
  } else if (document.currentScript) { // web
    scriptDirectory = document.currentScript.src;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  if (scriptDirectory.indexOf('blob:') !== 0) {
    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf('/')+1);
  } else {
    scriptDirectory = '';
  }


  // Differentiate the Web Worker from the Node Worker case, as reading must
  // be done differently.
  {


  read_ = function shell_read(url) {
    try {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
    } catch (err) {
      var data = tryParseAsDataURI(url);
      if (data) {
        return intArrayToString(data);
      }
      throw err;
    }
  };

  if (ENVIRONMENT_IS_WORKER) {
    readBinary = function readBinary(url) {
      try {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(xhr.response);
      } catch (err) {
        var data = tryParseAsDataURI(url);
        if (data) {
          return data;
        }
        throw err;
      }
    };
  }

  readAsync = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      var data = tryParseAsDataURI(url);
      if (data) {
        onload(data.buffer);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };




  }

  setWindowTitle = function(title) { document.title = title };
} else
{
  throw new Error('environment detection error');
}


// Set up the out() and err() hooks, which are how we can print to stdout or
// stderr, respectively.
var out = Module['print'] || console.log.bind(console);
var err = Module['printErr'] || console.warn.bind(console);

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = null;

// Emit code to handle expected values on the Module object. This applies Module.x
// to the proper local x. This has two benefits: first, we only emit it if it is
// expected to arrive, and second, by using a local everywhere else that can be
// minified.
if (Module['arguments']) arguments_ = Module['arguments'];if (!Object.getOwnPropertyDescriptor(Module, 'arguments')) Object.defineProperty(Module, 'arguments', { configurable: true, get: function() { abort('Module.arguments has been replaced with plain arguments_') } });
if (Module['thisProgram']) thisProgram = Module['thisProgram'];if (!Object.getOwnPropertyDescriptor(Module, 'thisProgram')) Object.defineProperty(Module, 'thisProgram', { configurable: true, get: function() { abort('Module.thisProgram has been replaced with plain thisProgram') } });
if (Module['quit']) quit_ = Module['quit'];if (!Object.getOwnPropertyDescriptor(Module, 'quit')) Object.defineProperty(Module, 'quit', { configurable: true, get: function() { abort('Module.quit has been replaced with plain quit_') } });

// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message
// Assertions on removed incoming Module JS APIs.
assert(typeof Module['memoryInitializerPrefixURL'] === 'undefined', 'Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['pthreadMainPrefixURL'] === 'undefined', 'Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['cdInitializerPrefixURL'] === 'undefined', 'Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['filePackagePrefixURL'] === 'undefined', 'Module.filePackagePrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['read'] === 'undefined', 'Module.read option was removed (modify read_ in JS)');
assert(typeof Module['readAsync'] === 'undefined', 'Module.readAsync option was removed (modify readAsync in JS)');
assert(typeof Module['readBinary'] === 'undefined', 'Module.readBinary option was removed (modify readBinary in JS)');
assert(typeof Module['setWindowTitle'] === 'undefined', 'Module.setWindowTitle option was removed (modify setWindowTitle in JS)');
if (!Object.getOwnPropertyDescriptor(Module, 'read')) Object.defineProperty(Module, 'read', { configurable: true, get: function() { abort('Module.read has been replaced with plain read_') } });
if (!Object.getOwnPropertyDescriptor(Module, 'readAsync')) Object.defineProperty(Module, 'readAsync', { configurable: true, get: function() { abort('Module.readAsync has been replaced with plain readAsync') } });
if (!Object.getOwnPropertyDescriptor(Module, 'readBinary')) Object.defineProperty(Module, 'readBinary', { configurable: true, get: function() { abort('Module.readBinary has been replaced with plain readBinary') } });
// TODO: add when SDL2 is fixed if (!Object.getOwnPropertyDescriptor(Module, 'setWindowTitle')) Object.defineProperty(Module, 'setWindowTitle', { configurable: true, get: function() { abort('Module.setWindowTitle has been replaced with plain setWindowTitle') } });
var IDBFS = 'IDBFS is no longer included by default; build with -lidbfs.js';
var PROXYFS = 'PROXYFS is no longer included by default; build with -lproxyfs.js';
var WORKERFS = 'WORKERFS is no longer included by default; build with -lworkerfs.js';
var NODEFS = 'NODEFS is no longer included by default; build with -lnodefs.js';


// TODO remove when SDL2 is fixed (also see above)



// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;

// stack management, and other functionality that is provided by the compiled code,
// should not be used before it is ready
stackSave = stackRestore = stackAlloc = function() {
  abort('cannot use the stack before compiled code is ready to run, and has provided stack access');
};

function staticAlloc(size) {
  abort('staticAlloc is no longer available at runtime; instead, perform static allocations at compile time (using makeStaticAlloc)');
}

function dynamicAlloc(size) {
  assert(DYNAMICTOP_PTR);
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  if (end > _emscripten_get_heap_size()) {
    abort('failure to dynamicAlloc - memory growth etc. is not supported there, call malloc/sbrk directly');
  }
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  return Math.ceil(size / factor) * factor;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 === 0, 'getNativeTypeSize invalid bits ' + bits + ', type ' + type);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    err(text);
  }
}

var asm2wasmImports = { // special asm2wasm imports
    "f64-rem": function(x, y) {
        return x % y;
    },
    "debugger": function() {
        debugger;
    }
};



var jsCallStartIndex = 1;
var functionPointers = new Array(0);


// 'sig' parameter is required for the llvm backend but only when func is not
// already a WebAssembly function.
function addFunction(func, sig) {
  assert(typeof func !== 'undefined');


  var base = 0;
  for (var i = base; i < base + 0; i++) {
    if (!functionPointers[i]) {
      functionPointers[i] = func;
      return jsCallStartIndex + i;
    }
  }
  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';

}

function removeFunction(index) {

  functionPointers[index-jsCallStartIndex] = null;
}

var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

function dynCall(sig, ptr, args) {
  if (args && args.length) {
    assert(args.length == sig.length-1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    assert(sig.length == 1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].call(null, ptr);
  }
}

var tempRet0 = 0;

var setTempRet0 = function(value) {
  tempRet0 = value;
};

var getTempRet0 = function() {
  return tempRet0;
};

function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';
}

var Runtime = {
  // helpful errors
  getTempRet0: function() { abort('getTempRet0() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  staticAlloc: function() { abort('staticAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  stackAlloc: function() { abort('stackAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 8;




// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html


var wasmBinary;if (Module['wasmBinary']) wasmBinary = Module['wasmBinary'];if (!Object.getOwnPropertyDescriptor(Module, 'wasmBinary')) Object.defineProperty(Module, 'wasmBinary', { configurable: true, get: function() { abort('Module.wasmBinary has been replaced with plain wasmBinary') } });
var noExitRuntime;if (Module['noExitRuntime']) noExitRuntime = Module['noExitRuntime'];if (!Object.getOwnPropertyDescriptor(Module, 'noExitRuntime')) Object.defineProperty(Module, 'noExitRuntime', { configurable: true, get: function() { abort('Module.noExitRuntime has been replaced with plain noExitRuntime') } });




// In MINIMAL_RUNTIME, setValue() and getValue() are only available when building with safe heap enabled, for heap safety checking.
// In traditional runtime, setValue() and getValue() are always available (although their use is highly discouraged due to perf penalties)

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}





// Wasm globals

var wasmMemory;

// In fastcomp asm.js, we don't need a wasm Table at all.
// In the wasm backend, we polyfill the WebAssembly object,
// so this creates a (non-native-wasm) table for us.


//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

// C calling interface.
function ccall(ident, returnType, argTypes, args, opts) {
  // For fast lookup of conversion functions
  var toC = {
    'string': function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    },
    'array': function(arr) {
      var ret = stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    }
  };

  function convertReturnValue(ret) {
    if (returnType === 'string') return UTF8ToString(ret);
    if (returnType === 'boolean') return Boolean(ret);
    return ret;
  }

  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);

  ret = convertReturnValue(ret);
  if (stack !== 0) stackRestore(stack);
  return ret;
}

function cwrap(ident, returnType, argTypes, opts) {
  return function() {
    return ccall(ident, returnType, argTypes, arguments, opts);
  }
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_DYNAMIC = 2; // Cannot be freed except through sbrk
var ALLOC_NONE = 3; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc,
    stackAlloc,
    dynamicAlloc][allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}




/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  abort("this function has been removed - you should use UTF8ToString(ptr, maxBytesToRead) instead!");
}

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAPU8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}


// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;

/**
 * @param {number} idx
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ArrayToString(u8Array, idx, maxBytesToRead) {
  var endIdx = idx + maxBytesToRead;
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  // (As a tiny code save trick, compare endPtr against endIdx using a negation, so that undefined means Infinity)
  while (u8Array[endPtr] && !(endPtr >= endIdx)) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var str = '';
    // If building with TextDecoder, we have already computed the string length above, so test loop end condition against that
    while (idx < endPtr) {
      // For UTF8 byte structure, see:
      // http://en.wikipedia.org/wiki/UTF-8#Description
      // https://www.ietf.org/rfc/rfc2279.txt
      // https://tools.ietf.org/html/rfc3629
      var u0 = u8Array[idx++];
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      var u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      var u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        if ((u0 & 0xF8) != 0xF0) warnOnce('Invalid UTF-8 leading byte 0x' + u0.toString(16) + ' encountered when deserializing a UTF-8 string on the asm.js/wasm heap to a JS string!');
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (u8Array[idx++] & 63);
      }

      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
  return str;
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns a
// copy of that string as a Javascript String object.
// maxBytesToRead: an optional length that specifies the maximum number of bytes to read. You can omit
//                 this parameter to scan the string until the first \0 byte. If maxBytesToRead is
//                 passed, and the string at [ptr, ptr+maxBytesToReadr[ contains a null byte in the
//                 middle, then the string will cut short at that byte index (i.e. maxBytesToRead will
//                 not produce a string of exact length [ptr, ptr+maxBytesToRead[)
//                 N.B. mixing frequent uses of UTF8ToString() with and without maxBytesToRead may
//                 throw JS JIT optimizations off, so it is worth to consider consistently using one
//                 style or the other.
/**
 * @param {number} ptr
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ToString(ptr, maxBytesToRead) {
  return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array.
//                    This count should include the null terminator,
//                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) {
      var u1 = str.charCodeAt(++i);
      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
    }
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 3 >= endIdx) break;
      if (u >= 0x200000) warnOnce('Invalid Unicode code point 0x' + u.toString(16) + ' encountered when serializing a JS string to an UTF-8 string on the asm.js/wasm heap! (Valid unicode code points should be in range 0-0x1FFFFF).');
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.
function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) ++len;
    else if (u <= 0x7FF) len += 2;
    else if (u <= 0xFFFF) len += 3;
    else len += 4;
  }
  return len;
}


// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}




// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBufferAndViews(buf) {
  buffer = buf;
  Module['HEAP8'] = HEAP8 = new Int8Array(buf);
  Module['HEAP16'] = HEAP16 = new Int16Array(buf);
  Module['HEAP32'] = HEAP32 = new Int32Array(buf);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buf);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buf);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buf);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buf);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buf);
}

var STATIC_BASE = 8,
    STACK_BASE = 21424,
    STACKTOP = STACK_BASE,
    STACK_MAX = 5264304,
    DYNAMIC_BASE = 5264304,
    DYNAMICTOP_PTR = 21232;

assert(STACK_BASE % 16 === 0, 'stack must start aligned');
assert(DYNAMIC_BASE % 16 === 0, 'heap must start aligned');



var TOTAL_STACK = 5242880;
if (Module['TOTAL_STACK']) assert(TOTAL_STACK === Module['TOTAL_STACK'], 'the stack size can no longer be determined at runtime')

var INITIAL_TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;if (!Object.getOwnPropertyDescriptor(Module, 'TOTAL_MEMORY')) Object.defineProperty(Module, 'TOTAL_MEMORY', { configurable: true, get: function() { abort('Module.TOTAL_MEMORY has been replaced with plain INITIAL_TOTAL_MEMORY') } });

assert(INITIAL_TOTAL_MEMORY >= TOTAL_STACK, 'TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + INITIAL_TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');






// In standalone mode, the wasm creates the memory, and the user can't provide it.
// In non-standalone/normal mode, we create the memory here.

// Create the main memory. (Note: this isn't used in STANDALONE_WASM mode since the wasm
// memory is created in the wasm, not in JS.)

  if (Module['buffer']) {
    buffer = Module['buffer'];
  }
  else {
    buffer = new ArrayBuffer(INITIAL_TOTAL_MEMORY);
  }


// If the user provides an incorrect length, just use that length instead rather than providing the user to
// specifically provide the memory length with Module['TOTAL_MEMORY'].
INITIAL_TOTAL_MEMORY = buffer.byteLength;
updateGlobalBufferAndViews(buffer);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;




// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
  // Also test the global address 0 for integrity.
  // We don't do this with ASan because ASan does its own checks for this.
  HEAP32[0] = 0x63736d65; /* 'emsc' */
}

function checkStackCookie() {
  var cookie1 = HEAPU32[(STACK_MAX >> 2)-1];
  var cookie2 = HEAPU32[(STACK_MAX >> 2)-2];
  if (cookie1 != 0x02135467 || cookie2 != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + cookie2.toString(16) + ' ' + cookie1.toString(16));
  }
  // Also test the global address 0 for integrity.
  // We don't do this with ASan because ASan does its own checks for this.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) abort('Runtime error: The application has corrupted its heap memory area (address zero)!');
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - stackSave() + allocSize) + ' bytes available!');
}




// Endianness check (note: assumes compiler arch was little-endian)
(function() {
  var h16 = new Int16Array(1);
  var h8 = new Int8Array(h16.buffer);
  h16[0] = 0x6373;
  if (h8[0] !== 0x73 || h8[1] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';
})();

function abortFnPtrError(ptr, sig) {
	abort("Invalid function pointer " + ptr + " called with signature '" + sig + "'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this). Build with ASSERTIONS=2 for more info.");
}



function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {

  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPRERUN__);
}

function initRuntime() {
  checkStackCookie();
  assert(!runtimeInitialized);
  runtimeInitialized = true;
  if (!Module["noFSInit"] && !FS.init.initialized) FS.init();
TTY.init();
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  FS.ignorePermissions = false;
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();

  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


assert(Math.imul, 'This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.fround, 'This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.clz32, 'This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.trunc, 'This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;



// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            err('still waiting on run dependencies:');
          }
          err('dependency: ' + dep);
        }
        if (shown) {
          err('(end of list)');
        }
      }, 10000);
    }
  } else {
    err('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    err('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  what += '';
  out(what);
  err(what);

  ABORT = true;
  EXITSTATUS = 1;

  var output = 'abort(' + what + ') at ' + stackTrace();
  what = output;

  // Throw a wasm runtime error, because a JS error might be seen as a foreign
  // exception, which means we'd run destructors on it. We need the error to
  // simply make the program stop.
  throw what;
}


var memoryInitializer = null;







// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}






// Globals used by JS i64 conversions
var tempDouble;
var tempI64;

// === Body ===

var ASM_CONSTS = [];





// STATICTOP = STATIC_BASE + 21416;
/* global initializers */  __ATINIT__.push({ func: function() { globalCtors() } });


memoryInitializer = "data:application/octet-stream;base64,";





/* no memory initializer */
var tempDoublePtr = 21408
assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
}

function copyTempDouble(ptr) {
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];
  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];
  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];
  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];
}

// {{PRE_LIBRARY}}


  function demangle(func) {
      warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
      return func;
    }

  function demangleAll(text) {
      var regex =
        /\b__Z[\w\d_]+/g;
      return text.replace(regex,
        function(x) {
          var y = demangle(x);
          return x === y ? x : (y + ' [' + x + ']');
        });
    }

  function jsStackTrace() {
      var err = new Error();
      if (!err.stack) {
        // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
        // so try that as a special-case.
        try {
          throw new Error(0);
        } catch(e) {
          err = e;
        }
        if (!err.stack) {
          return '(no stack trace available)';
        }
      }
      return err.stack.toString();
    }

  function stackTrace() {
      var js = jsStackTrace();
      if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
      return demangleAll(js);
    }

  
  var ENV={};function ___buildEnvironment(environ) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = 'web_user';
        ENV['LOGNAME'] = 'web_user';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/web_user';
        // Browser language detection #8751
        ENV['LANG'] = ((typeof navigator === 'object' && navigator.languages && navigator.languages[0]) || 'C').replace('-', '_') + '.UTF-8';
        ENV['_'] = thisProgram;
        // Allocate memory.
        poolPtr = getMemory(TOTAL_ENV_SIZE);
        envPtr = getMemory(MAX_ENV_VALUES * 4);
        HEAP32[((envPtr)>>2)]=poolPtr;
        HEAP32[((environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in ENV) {
        if (typeof ENV[key] === 'string') {
          var line = key + '=' + ENV[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }

  
  
  function _emscripten_get_now() { abort() }
  
  function _emscripten_get_now_is_monotonic() {
      // return whether emscripten_get_now is guaranteed monotonic; the Date.now
      // implementation is not :(
      return (0
        || ENVIRONMENT_IS_NODE
        || (typeof dateNow !== 'undefined')
        || (typeof performance === 'object' && performance && typeof performance['now'] === 'function')
        );
    }
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else err('failed to set errno from JS');
      return value;
    }function _clock_gettime(clk_id, tp) {
      // int clock_gettime(clockid_t clk_id, struct timespec *tp);
      var now;
      if (clk_id === 0) {
        now = Date.now();
      } else if (clk_id === 1 && _emscripten_get_now_is_monotonic()) {
        now = _emscripten_get_now();
      } else {
        ___setErrNo(28);
        return -1;
      }
      HEAP32[((tp)>>2)]=(now/1000)|0; // seconds
      HEAP32[(((tp)+(4))>>2)]=((now % 1000)*1000*1000)|0; // nanoseconds
      return 0;
    }function ___clock_gettime(a0,a1
  /*``*/) {
  return _clock_gettime(a0,a1);
  }

  function ___gxx_personality_v0() {
    }

  function ___lock() {}

  
    

  
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      }};
  
  
  var PATH_FS={resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH_FS.resolve(from).substr(1);
        to = PATH_FS.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(43);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(60);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(29);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(6);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(60);
          }
          try {
            for (var i = 0; i < length; i++) {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            }
          } catch (e) {
            throw new FS.ErrnoError(29);
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = Buffer.alloc ? Buffer.alloc(BUFSIZE) : new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              try {
                bytesRead = nodeFS.readSync(process.stdin.fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
            } else
            if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(63);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        var prevCapacity = node.contents ? node.contents.length : 0;
        if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
        // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
        // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
        // avoid overshooting the allocation cap by a very large margin.
        var CAPACITY_DOUBLING_MAX = 1024 * 1024;
        newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
        if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
        var oldContents = node.contents;
        node.contents = new Uint8Array(newCapacity); // Allocate new storage.
        if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
        return;
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[44];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(55);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(55);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(28);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          // The data buffer should be a typed array view
          assert(!(buffer instanceof ArrayBuffer));
          // If the buffer is located in main memory (HEAP), and if
          // memory can grow, we can't hold on to references of the
          // memory buffer, as they may get invalidated. That means we
          // need to do copy its contents.
          if (buffer.buffer === HEAP8.buffer) {
            // FIXME: this is inefficient as the file packager may have
            //        copied the data into memory already - we may want to
            //        integrate more there and let the file packager loading
            //        code be able to query if memory growth is on or off.
            if (canOwn) {
              warnOnce('file packager has copied file data into memory, but in memory growth we are forced to copy it again (see --no-heap-copy)');
            }
            canOwn = false;
          }
  
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {
            position += stream.position;
          } else if (whence === 2) {
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(28);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          // The data buffer should be a typed array view
          assert(!(buffer instanceof ArrayBuffer));
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(43);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                contents.buffer === buffer.buffer ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            // malloc() can lead to growing the heap. If targeting the heap, we need to
            // re-acquire the heap buffer object in case growth had occurred.
            var fromHeap = (buffer.buffer == HEAP8.buffer);
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(48);
            }
            (fromHeap ? HEAP8 : buffer).set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(43);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var ERRNO_MESSAGES={0:"Success",1:"Arg list too long",2:"Permission denied",3:"Address already in use",4:"Address not available",5:"Address family not supported by protocol family",6:"No more processes",7:"Socket already connected",8:"Bad file number",9:"Trying to read unreadable message",10:"Mount device busy",11:"Operation canceled",12:"No children",13:"Connection aborted",14:"Connection refused",15:"Connection reset by peer",16:"File locking deadlock error",17:"Destination address required",18:"Math arg out of domain of func",19:"Quota exceeded",20:"File exists",21:"Bad address",22:"File too large",23:"Host is unreachable",24:"Identifier removed",25:"Illegal byte sequence",26:"Connection already in progress",27:"Interrupted system call",28:"Invalid argument",29:"I/O error",30:"Socket is already connected",31:"Is a directory",32:"Too many symbolic links",33:"Too many open files",34:"Too many links",35:"Message too long",36:"Multihop attempted",37:"File or path name too long",38:"Network interface is not configured",39:"Connection reset by network",40:"Network is unreachable",41:"Too many open files in system",42:"No buffer space available",43:"No such device",44:"No such file or directory",45:"Exec format error",46:"No record locks available",47:"The link has been severed",48:"Not enough core",49:"No message of desired type",50:"Protocol not available",51:"No space left on device",52:"Function not implemented",53:"Socket is not connected",54:"Not a directory",55:"Directory not empty",56:"State not recoverable",57:"Socket operation on non-socket",59:"Not a typewriter",60:"No such device or address",61:"Value too large for defined data type",62:"Previous owner died",63:"Not super-user",64:"Broken pipe",65:"Protocol error",66:"Unknown protocol",67:"Protocol wrong type for socket",68:"Math result not representable",69:"Read only file system",70:"Illegal seek",71:"No such process",72:"Stale file handle",73:"Connection timed out",74:"Text file busy",75:"Cross-device link",100:"Device not a stream",101:"Bad font file fmt",102:"Invalid slot",103:"Invalid request code",104:"No anode",105:"Block device required",106:"Channel number out of range",107:"Level 3 halted",108:"Level 3 reset",109:"Link number out of range",110:"Protocol driver not attached",111:"No CSI structure available",112:"Level 2 halted",113:"Invalid exchange",114:"Invalid request descriptor",115:"Exchange full",116:"No data (for no delay io)",117:"Timer expired",118:"Out of streams resources",119:"Machine is not on the network",120:"Package not installed",121:"The object is remote",122:"Advertise error",123:"Srmount error",124:"Communication error on send",125:"Cross mount point (not really error)",126:"Given log. name not unique",127:"f.d. invalid for this operation",128:"Remote address changed",129:"Can   access a needed shared lib",130:"Accessing a corrupted shared lib",131:".lib section in a.out corrupted",132:"Attempting to link in too many libs",133:"Attempting to exec a shared library",135:"Streams pipe error",136:"Too many users",137:"Socket type not supported",138:"Not supported",139:"Protocol family not supported",140:"Can't send after socket shutdown",141:"Too many references",142:"Host is down",148:"No medium (in tape drive)",156:"Level 2 not synchronized"};
  
  var ERRNO_CODES={EPERM:63,ENOENT:44,ESRCH:71,EINTR:27,EIO:29,ENXIO:60,E2BIG:1,ENOEXEC:45,EBADF:8,ECHILD:12,EAGAIN:6,EWOULDBLOCK:6,ENOMEM:48,EACCES:2,EFAULT:21,ENOTBLK:105,EBUSY:10,EEXIST:20,EXDEV:75,ENODEV:43,ENOTDIR:54,EISDIR:31,EINVAL:28,ENFILE:41,EMFILE:33,ENOTTY:59,ETXTBSY:74,EFBIG:22,ENOSPC:51,ESPIPE:70,EROFS:69,EMLINK:34,EPIPE:64,EDOM:18,ERANGE:68,ENOMSG:49,EIDRM:24,ECHRNG:106,EL2NSYNC:156,EL3HLT:107,EL3RST:108,ELNRNG:109,EUNATCH:110,ENOCSI:111,EL2HLT:112,EDEADLK:16,ENOLCK:46,EBADE:113,EBADR:114,EXFULL:115,ENOANO:104,EBADRQC:103,EBADSLT:102,EDEADLOCK:16,EBFONT:101,ENOSTR:100,ENODATA:116,ETIME:117,ENOSR:118,ENONET:119,ENOPKG:120,EREMOTE:121,ENOLINK:47,EADV:122,ESRMNT:123,ECOMM:124,EPROTO:65,EMULTIHOP:36,EDOTDOT:125,EBADMSG:9,ENOTUNIQ:126,EBADFD:127,EREMCHG:128,ELIBACC:129,ELIBBAD:130,ELIBSCN:131,ELIBMAX:132,ELIBEXEC:133,ENOSYS:52,ENOTEMPTY:55,ENAMETOOLONG:37,ELOOP:32,EOPNOTSUPP:138,EPFNOSUPPORT:139,ECONNRESET:15,ENOBUFS:42,EAFNOSUPPORT:5,EPROTOTYPE:67,ENOTSOCK:57,ENOPROTOOPT:50,ESHUTDOWN:140,ECONNREFUSED:14,EADDRINUSE:3,ECONNABORTED:13,ENETUNREACH:40,ENETDOWN:38,ETIMEDOUT:73,EHOSTDOWN:142,EHOSTUNREACH:23,EINPROGRESS:26,EALREADY:7,EDESTADDRREQ:17,EMSGSIZE:35,EPROTONOSUPPORT:66,ESOCKTNOSUPPORT:137,EADDRNOTAVAIL:4,ENETRESET:39,EISCONN:30,ENOTCONN:53,ETOOMANYREFS:141,EUSERS:136,EDQUOT:19,ESTALE:72,ENOTSUP:138,ENOMEDIUM:148,EILSEQ:25,EOVERFLOW:61,ECANCELED:11,ENOTRECOVERABLE:56,EOWNERDEAD:62,ESTRPIPE:135};var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH_FS.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(32);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH_FS.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(32);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return 2;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return 2;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return 2;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return 2;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return 20;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return 54;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return 10;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return 31;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return 44;
        }
        if (FS.isLink(node.mode)) {
          return 32;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return 31;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(33);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(70);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        if (typeof type === 'string') {
          // The filesystem was not included, and instead we have an error
          // message stored in the variable.
          throw type;
        }
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(10);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(10);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(54);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(28);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(28);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(63);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function (path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != 20) throw e;
          }
        }
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH_FS.resolve(oldpath)) {
          throw new FS.ErrnoError(44);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(44);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(63);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(10);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(44);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(75);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH_FS.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(28);
        }
        // new path should not be an ancestor of the old path
        relative = PATH_FS.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(55);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(10);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(10);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(54);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(10);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(44);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(28);
        }
        return PATH_FS.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(44);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(63);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(28);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(28);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(28);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(44);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(20);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(44);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(54);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            console.log("FS.trackingDelegate error on read file: " + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
        stream.fd = null;
      },isClosed:function (stream) {
        return stream.fd === null;
      },llseek:function (stream, offset, whence) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(70);
        }
        if (whence != 0 && whence != 1 && whence != 2) {
          throw new FS.ErrnoError(28);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(28);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(8);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(28);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(70);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(28);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(8);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(28);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(70);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+stream.path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(28);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(8);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(43);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(138);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // User requests writing to file (prot & PROT_WRITE != 0).
        // Checking if we have permissions to write to the file unless
        // MAP_PRIVATE flag is set. According to POSIX spec it is possible
        // to write to file opened in read-only mode with MAP_PRIVATE flag,
        // as all modifications will be visible only in the memory of
        // the current process.
        if ((prot & 2) !== 0
            && (flags & 2) === 0
            && (stream.flags & 2097155) !== 2) {
          throw new FS.ErrnoError(2);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(2);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(43);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(59);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        var stream = FS.open(path, opts.flags, opts.mode);
        if (typeof data === 'string') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
        } else if (ArrayBuffer.isView(data)) {
          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
        } else {
          throw new Error('Unsupported data type');
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(44);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(54);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto === 'object' && typeof crypto['getRandomValues'] === 'function') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else
        if (ENVIRONMENT_IS_NODE) {
          // for nodejs with or without crypto support included
          try {
            var crypto_module = require('crypto');
            // nodejs has crypto support
            random_device = function() { return crypto_module['randomBytes'](1)[0]; };
          } catch (e) {
            // nodejs doesn't have crypto support
          }
        } else
        {}
        if (!random_device) {
          // we couldn't find a proper implementation, as Math.random() is not suitable for /dev/random, see emscripten-core/emscripten/pull/7096
          random_device = function() { abort("no cryptographic support found for random_device. consider polyfilling it if you want to use something insecure like Math.random(), e.g. put this in a --pre-js: var crypto = { getRandomValues: function(array) { for (var i = 0; i < array.length; i++) array[i] = (Math.random()*256)|0 } };"); };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(8);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        var stdout = FS.open('/dev/stdout', 'w');
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
  
          // Try to get a maximally helpful stack trace. On Node.js, getting Error.stack
          // now ensures it shows what we want.
          if (this.stack) {
            // Define the stack property for Node.js 4, which otherwise errors on the next line.
            Object.defineProperty(this, "stack", { value: (new Error).stack, writable: true });
            this.stack = demangleAll(this.stack);
          }
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [44].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH_FS.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(6);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (read_) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(read_(obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(29);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        };
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        };
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        };
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(29);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(29);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH_FS.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(8);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -54;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        (tempI64 = [stat.size>>>0,(tempDouble=stat.size,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(40))>>2)]=tempI64[0],HEAP32[(((buf)+(44))>>2)]=tempI64[1]);
        HEAP32[(((buf)+(48))>>2)]=4096;
        HEAP32[(((buf)+(52))>>2)]=stat.blocks;
        HEAP32[(((buf)+(56))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(76))>>2)]=0;
        (tempI64 = [stat.ino>>>0,(tempDouble=stat.ino,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(80))>>2)]=tempI64[0],HEAP32[(((buf)+(84))>>2)]=tempI64[1]);
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -28;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -28;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -28;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        if (!node) {
          return -44;
        }
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -2;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = UTF8ToString(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function (fd) {
        // TODO: when all syscalls use wasi, can remove the next line
        if (fd === undefined) fd = SYSCALLS.get();
        var stream = FS.getStream(fd);
        if (!stream) throw new FS.ErrnoError(8);
        return stream;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall10(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // unlink
      var path = SYSCALLS.getStr();
      FS.unlink(path);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -28;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        /* case 12: Currently in musl F_GETLK64 has same value as F_GETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this */ {
          
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        /* case 13: Currently in musl F_SETLK64 has same value as F_SETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this */
        /* case 14: Currently in musl F_SETLKW64 has same value as F_SETLKW, so omitted to avoid duplicate case blocks. If that changes, uncomment this */
          
          
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -28; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(28);
          return -1;
        default: {
          return -28;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall330(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // dup3
      var old = SYSCALLS.getStreamFromFD(), suggestFD = SYSCALLS.get(), flags = SYSCALLS.get();
      assert(!flags);
      if (old.fd === suggestFD) return -28;
      return SYSCALLS.doDup(old.path, old.flags, suggestFD);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall40(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // rmdir
      var path = SYSCALLS.getStr();
      FS.rmdir(path);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get(); // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21509:
        case 21505: {
          if (!stream.tty) return -59;
          return 0;
        }
        case 21510:
        case 21511:
        case 21512:
        case 21506:
        case 21507:
        case 21508: {
          if (!stream.tty) return -59;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -59;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -59;
          return -28; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -59;
          return 0;
        }
        case 21524: {
          // TODO: technically, this ioctl call should change the window size.
          // but, since emscripten doesn't have any concept of a terminal window
          // yet, we'll just silently throw it away as we do TIOCGWINSZ
          if (!stream.tty) return -59;
          return 0;
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall63(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // dup2
      var old = SYSCALLS.getStreamFromFD(), suggestFD = SYSCALLS.get();
      if (old.fd === suggestFD) return suggestFD;
      return SYSCALLS.doDup(old.path, old.flags, suggestFD);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
   
  
   
  
     

  function ___unlock() {}

  
  function _fd_close(fd) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }function ___wasi_fd_close() {
  return _fd_close.apply(null, arguments)
  }

  
  function _fd_read(fd, iov, iovcnt, pnum) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var num = SYSCALLS.doReadv(stream, iov, iovcnt);
      HEAP32[((pnum)>>2)]=num
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }function ___wasi_fd_read() {
  return _fd_read.apply(null, arguments)
  }

  
  function _fd_seek(fd, offset_low, offset_high, whence, newOffset) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var HIGH_OFFSET = 0x100000000; // 2^32
      // use an unsigned operator on low and shift high by 32-bits
      var offset = offset_high * HIGH_OFFSET + (offset_low >>> 0);
  
      var DOUBLE_LIMIT = 0x20000000000000; // 2^53
      // we also check for equality since DOUBLE_LIMIT + 1 == DOUBLE_LIMIT
      if (offset <= -DOUBLE_LIMIT || offset >= DOUBLE_LIMIT) {
        return -61;
      }
  
      FS.llseek(stream, offset, whence);
      (tempI64 = [stream.position>>>0,(tempDouble=stream.position,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((newOffset)>>2)]=tempI64[0],HEAP32[(((newOffset)+(4))>>2)]=tempI64[1]);
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }function ___wasi_fd_seek() {
  return _fd_seek.apply(null, arguments)
  }

  
  function _fd_write(fd, iov, iovcnt, pnum) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var num = SYSCALLS.doWritev(stream, iov, iovcnt);
      HEAP32[((pnum)>>2)]=num
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }function ___wasi_fd_write() {
  return _fd_write.apply(null, arguments)
  }

  
  function getShiftFromSize(size) {
      switch (size) {
          case 1: return 0;
          case 2: return 1;
          case 4: return 2;
          case 8: return 3;
          default:
              throw new TypeError('Unknown type size: ' + size);
      }
    }
  
  
  
  function embind_init_charCodes() {
      var codes = new Array(256);
      for (var i = 0; i < 256; ++i) {
          codes[i] = String.fromCharCode(i);
      }
      embind_charCodes = codes;
    }var embind_charCodes=undefined;function readLatin1String(ptr) {
      var ret = "";
      var c = ptr;
      while (HEAPU8[c]) {
          ret += embind_charCodes[HEAPU8[c++]];
      }
      return ret;
    }
  
  
  var awaitingDependencies={};
  
  var registeredTypes={};
  
  var typeDependencies={};
  
  
  
  
  
  
  var char_0=48;
  
  var char_9=57;function makeLegalFunctionName(name) {
      if (undefined === name) {
          return '_unknown';
      }
      name = name.replace(/[^a-zA-Z0-9_]/g, '$');
      var f = name.charCodeAt(0);
      if (f >= char_0 && f <= char_9) {
          return '_' + name;
      } else {
          return name;
      }
    }function createNamedFunction(name, body) {
      name = makeLegalFunctionName(name);
      /*jshint evil:true*/
      return new Function(
          "body",
          "return function " + name + "() {\n" +
          "    \"use strict\";" +
          "    return body.apply(this, arguments);\n" +
          "};\n"
      )(body);
    }function extendError(baseErrorType, errorName) {
      var errorClass = createNamedFunction(errorName, function(message) {
          this.name = errorName;
          this.message = message;
  
          var stack = (new Error(message)).stack;
          if (stack !== undefined) {
              this.stack = this.toString() + '\n' +
                  stack.replace(/^Error(:[^\n]*)?\n/, '');
          }
      });
      errorClass.prototype = Object.create(baseErrorType.prototype);
      errorClass.prototype.constructor = errorClass;
      errorClass.prototype.toString = function() {
          if (this.message === undefined) {
              return this.name;
          } else {
              return this.name + ': ' + this.message;
          }
      };
  
      return errorClass;
    }var BindingError=undefined;function throwBindingError(message) {
      throw new BindingError(message);
    }
  
  
  
  var InternalError=undefined;function throwInternalError(message) {
      throw new InternalError(message);
    }function whenDependentTypesAreResolved(myTypes, dependentTypes, getTypeConverters) {
      myTypes.forEach(function(type) {
          typeDependencies[type] = dependentTypes;
      });
  
      function onComplete(typeConverters) {
          var myTypeConverters = getTypeConverters(typeConverters);
          if (myTypeConverters.length !== myTypes.length) {
              throwInternalError('Mismatched type converter count');
          }
          for (var i = 0; i < myTypes.length; ++i) {
              registerType(myTypes[i], myTypeConverters[i]);
          }
      }
  
      var typeConverters = new Array(dependentTypes.length);
      var unregisteredTypes = [];
      var registered = 0;
      dependentTypes.forEach(function(dt, i) {
          if (registeredTypes.hasOwnProperty(dt)) {
              typeConverters[i] = registeredTypes[dt];
          } else {
              unregisteredTypes.push(dt);
              if (!awaitingDependencies.hasOwnProperty(dt)) {
                  awaitingDependencies[dt] = [];
              }
              awaitingDependencies[dt].push(function() {
                  typeConverters[i] = registeredTypes[dt];
                  ++registered;
                  if (registered === unregisteredTypes.length) {
                      onComplete(typeConverters);
                  }
              });
          }
      });
      if (0 === unregisteredTypes.length) {
          onComplete(typeConverters);
      }
    }function registerType(rawType, registeredInstance, options) {
      options = options || {};
  
      if (!('argPackAdvance' in registeredInstance)) {
          throw new TypeError('registerType registeredInstance requires argPackAdvance');
      }
  
      var name = registeredInstance.name;
      if (!rawType) {
          throwBindingError('type "' + name + '" must have a positive integer typeid pointer');
      }
      if (registeredTypes.hasOwnProperty(rawType)) {
          if (options.ignoreDuplicateRegistrations) {
              return;
          } else {
              throwBindingError("Cannot register type '" + name + "' twice");
          }
      }
  
      registeredTypes[rawType] = registeredInstance;
      delete typeDependencies[rawType];
  
      if (awaitingDependencies.hasOwnProperty(rawType)) {
          var callbacks = awaitingDependencies[rawType];
          delete awaitingDependencies[rawType];
          callbacks.forEach(function(cb) {
              cb();
          });
      }
    }function __embind_register_bool(rawType, name, size, trueValue, falseValue) {
      var shift = getShiftFromSize(size);
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(wt) {
              // ambiguous emscripten ABI: sometimes return values are
              // true or false, and sometimes integers (0 or 1)
              return !!wt;
          },
          'toWireType': function(destructors, o) {
              return o ? trueValue : falseValue;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': function(pointer) {
              // TODO: if heap is fixed (like in asm.js) this could be executed outside
              var heap;
              if (size === 1) {
                  heap = HEAP8;
              } else if (size === 2) {
                  heap = HEAP16;
              } else if (size === 4) {
                  heap = HEAP32;
              } else {
                  throw new TypeError("Unknown boolean type size: " + name);
              }
              return this['fromWireType'](heap[pointer >> shift]);
          },
          destructorFunction: null, // This type does not need a destructor
      });
    }

  
  
  
  function ClassHandle_isAliasOf(other) {
      if (!(this instanceof ClassHandle)) {
          return false;
      }
      if (!(other instanceof ClassHandle)) {
          return false;
      }
  
      var leftClass = this.$$.ptrType.registeredClass;
      var left = this.$$.ptr;
      var rightClass = other.$$.ptrType.registeredClass;
      var right = other.$$.ptr;
  
      while (leftClass.baseClass) {
          left = leftClass.upcast(left);
          leftClass = leftClass.baseClass;
      }
  
      while (rightClass.baseClass) {
          right = rightClass.upcast(right);
          rightClass = rightClass.baseClass;
      }
  
      return leftClass === rightClass && left === right;
    }
  
  
  function shallowCopyInternalPointer(o) {
      return {
          count: o.count,
          deleteScheduled: o.deleteScheduled,
          preservePointerOnDelete: o.preservePointerOnDelete,
          ptr: o.ptr,
          ptrType: o.ptrType,
          smartPtr: o.smartPtr,
          smartPtrType: o.smartPtrType,
      };
    }
  
  function throwInstanceAlreadyDeleted(obj) {
      function getInstanceTypeName(handle) {
        return handle.$$.ptrType.registeredClass.name;
      }
      throwBindingError(getInstanceTypeName(obj) + ' instance already deleted');
    }
  
  
  var finalizationGroup=false;
  
  function detachFinalizer(handle) {}
  
  
  function runDestructor($$) {
      if ($$.smartPtr) {
          $$.smartPtrType.rawDestructor($$.smartPtr);
      } else {
          $$.ptrType.registeredClass.rawDestructor($$.ptr);
      }
    }function releaseClassHandle($$) {
      $$.count.value -= 1;
      var toDelete = 0 === $$.count.value;
      if (toDelete) {
          runDestructor($$);
      }
    }function attachFinalizer(handle) {
      if ('undefined' === typeof FinalizationGroup) {
          attachFinalizer = function (handle) { return handle; };
          return handle;
      }
      // If the running environment has a FinalizationGroup (see
      // https://github.com/tc39/proposal-weakrefs), then attach finalizers
      // for class handles.  We check for the presence of FinalizationGroup
      // at run-time, not build-time.
      finalizationGroup = new FinalizationGroup(function (iter) {
          for (var result = iter.next(); !result.done; result = iter.next()) {
              var $$ = result.value;
              if (!$$.ptr) {
                  console.warn('object already deleted: ' + $$.ptr);
              } else {
                  releaseClassHandle($$);
              }
          }
      });
      attachFinalizer = function(handle) {
          finalizationGroup.register(handle, handle.$$, handle.$$);
          return handle;
      };
      detachFinalizer = function(handle) {
          finalizationGroup.unregister(handle.$$);
      };
      return attachFinalizer(handle);
    }function ClassHandle_clone() {
      if (!this.$$.ptr) {
          throwInstanceAlreadyDeleted(this);
      }
  
      if (this.$$.preservePointerOnDelete) {
          this.$$.count.value += 1;
          return this;
      } else {
          var clone = attachFinalizer(Object.create(Object.getPrototypeOf(this), {
              $$: {
                  value: shallowCopyInternalPointer(this.$$),
              }
          }));
  
          clone.$$.count.value += 1;
          clone.$$.deleteScheduled = false;
          return clone;
      }
    }
  
  function ClassHandle_delete() {
      if (!this.$$.ptr) {
          throwInstanceAlreadyDeleted(this);
      }
  
      if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
          throwBindingError('Object already scheduled for deletion');
      }
  
      detachFinalizer(this);
      releaseClassHandle(this.$$);
  
      if (!this.$$.preservePointerOnDelete) {
          this.$$.smartPtr = undefined;
          this.$$.ptr = undefined;
      }
    }
  
  function ClassHandle_isDeleted() {
      return !this.$$.ptr;
    }
  
  
  var delayFunction=undefined;
  
  var deletionQueue=[];
  
  function flushPendingDeletes() {
      while (deletionQueue.length) {
          var obj = deletionQueue.pop();
          obj.$$.deleteScheduled = false;
          obj['delete']();
      }
    }function ClassHandle_deleteLater() {
      if (!this.$$.ptr) {
          throwInstanceAlreadyDeleted(this);
      }
      if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
          throwBindingError('Object already scheduled for deletion');
      }
      deletionQueue.push(this);
      if (deletionQueue.length === 1 && delayFunction) {
          delayFunction(flushPendingDeletes);
      }
      this.$$.deleteScheduled = true;
      return this;
    }function init_ClassHandle() {
      ClassHandle.prototype['isAliasOf'] = ClassHandle_isAliasOf;
      ClassHandle.prototype['clone'] = ClassHandle_clone;
      ClassHandle.prototype['delete'] = ClassHandle_delete;
      ClassHandle.prototype['isDeleted'] = ClassHandle_isDeleted;
      ClassHandle.prototype['deleteLater'] = ClassHandle_deleteLater;
    }function ClassHandle() {
    }
  
  var registeredPointers={};
  
  
  function ensureOverloadTable(proto, methodName, humanName) {
      if (undefined === proto[methodName].overloadTable) {
          var prevFunc = proto[methodName];
          // Inject an overload resolver function that routes to the appropriate overload based on the number of arguments.
          proto[methodName] = function() {
              // TODO This check can be removed in -O3 level "unsafe" optimizations.
              if (!proto[methodName].overloadTable.hasOwnProperty(arguments.length)) {
                  throwBindingError("Function '" + humanName + "' called with an invalid number of arguments (" + arguments.length + ") - expects one of (" + proto[methodName].overloadTable + ")!");
              }
              return proto[methodName].overloadTable[arguments.length].apply(this, arguments);
          };
          // Move the previous function into the overload table.
          proto[methodName].overloadTable = [];
          proto[methodName].overloadTable[prevFunc.argCount] = prevFunc;
      }
    }function exposePublicSymbol(name, value, numArguments) {
      if (Module.hasOwnProperty(name)) {
          if (undefined === numArguments || (undefined !== Module[name].overloadTable && undefined !== Module[name].overloadTable[numArguments])) {
              throwBindingError("Cannot register public name '" + name + "' twice");
          }
  
          // We are exposing a function with the same name as an existing function. Create an overload table and a function selector
          // that routes between the two.
          ensureOverloadTable(Module, name, name);
          if (Module.hasOwnProperty(numArguments)) {
              throwBindingError("Cannot register multiple overloads of a function with the same number of arguments (" + numArguments + ")!");
          }
          // Add the new function into the overload table.
          Module[name].overloadTable[numArguments] = value;
      }
      else {
          Module[name] = value;
          if (undefined !== numArguments) {
              Module[name].numArguments = numArguments;
          }
      }
    }
  
  function RegisteredClass(
      name,
      constructor,
      instancePrototype,
      rawDestructor,
      baseClass,
      getActualType,
      upcast,
      downcast
    ) {
      this.name = name;
      this.constructor = constructor;
      this.instancePrototype = instancePrototype;
      this.rawDestructor = rawDestructor;
      this.baseClass = baseClass;
      this.getActualType = getActualType;
      this.upcast = upcast;
      this.downcast = downcast;
      this.pureVirtualFunctions = [];
    }
  
  
  
  function upcastPointer(ptr, ptrClass, desiredClass) {
      while (ptrClass !== desiredClass) {
          if (!ptrClass.upcast) {
              throwBindingError("Expected null or instance of " + desiredClass.name + ", got an instance of " + ptrClass.name);
          }
          ptr = ptrClass.upcast(ptr);
          ptrClass = ptrClass.baseClass;
      }
      return ptr;
    }function constNoSmartPtrRawPointerToWireType(destructors, handle) {
      if (handle === null) {
          if (this.isReference) {
              throwBindingError('null is not a valid ' + this.name);
          }
          return 0;
      }
  
      if (!handle.$$) {
          throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
          throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
      return ptr;
    }
  
  function genericPointerToWireType(destructors, handle) {
      var ptr;
      if (handle === null) {
          if (this.isReference) {
              throwBindingError('null is not a valid ' + this.name);
          }
  
          if (this.isSmartPointer) {
              ptr = this.rawConstructor();
              if (destructors !== null) {
                  destructors.push(this.rawDestructor, ptr);
              }
              return ptr;
          } else {
              return 0;
          }
      }
  
      if (!handle.$$) {
          throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
          throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      if (!this.isConst && handle.$$.ptrType.isConst) {
          throwBindingError('Cannot convert argument of type ' + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + ' to parameter type ' + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
  
      if (this.isSmartPointer) {
          // TODO: this is not strictly true
          // We could support BY_EMVAL conversions from raw pointers to smart pointers
          // because the smart pointer can hold a reference to the handle
          if (undefined === handle.$$.smartPtr) {
              throwBindingError('Passing raw pointer to smart pointer is illegal');
          }
  
          switch (this.sharingPolicy) {
              case 0: // NONE
                  // no upcasting
                  if (handle.$$.smartPtrType === this) {
                      ptr = handle.$$.smartPtr;
                  } else {
                      throwBindingError('Cannot convert argument of type ' + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + ' to parameter type ' + this.name);
                  }
                  break;
  
              case 1: // INTRUSIVE
                  ptr = handle.$$.smartPtr;
                  break;
  
              case 2: // BY_EMVAL
                  if (handle.$$.smartPtrType === this) {
                      ptr = handle.$$.smartPtr;
                  } else {
                      var clonedHandle = handle['clone']();
                      ptr = this.rawShare(
                          ptr,
                          __emval_register(function() {
                              clonedHandle['delete']();
                          })
                      );
                      if (destructors !== null) {
                          destructors.push(this.rawDestructor, ptr);
                      }
                  }
                  break;
  
              default:
                  throwBindingError('Unsupporting sharing policy');
          }
      }
      return ptr;
    }
  
  function nonConstNoSmartPtrRawPointerToWireType(destructors, handle) {
      if (handle === null) {
          if (this.isReference) {
              throwBindingError('null is not a valid ' + this.name);
          }
          return 0;
      }
  
      if (!handle.$$) {
          throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
          throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      if (handle.$$.ptrType.isConst) {
          throwBindingError('Cannot convert argument of type ' + handle.$$.ptrType.name + ' to parameter type ' + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
      return ptr;
    }
  
  
  function simpleReadValueFromPointer(pointer) {
      return this['fromWireType'](HEAPU32[pointer >> 2]);
    }
  
  function RegisteredPointer_getPointee(ptr) {
      if (this.rawGetPointee) {
          ptr = this.rawGetPointee(ptr);
      }
      return ptr;
    }
  
  function RegisteredPointer_destructor(ptr) {
      if (this.rawDestructor) {
          this.rawDestructor(ptr);
      }
    }
  
  function RegisteredPointer_deleteObject(handle) {
      if (handle !== null) {
          handle['delete']();
      }
    }
  
  
  function downcastPointer(ptr, ptrClass, desiredClass) {
      if (ptrClass === desiredClass) {
          return ptr;
      }
      if (undefined === desiredClass.baseClass) {
          return null; // no conversion
      }
  
      var rv = downcastPointer(ptr, ptrClass, desiredClass.baseClass);
      if (rv === null) {
          return null;
      }
      return desiredClass.downcast(rv);
    }
  
  
  
  
  function getInheritedInstanceCount() {
      return Object.keys(registeredInstances).length;
    }
  
  function getLiveInheritedInstances() {
      var rv = [];
      for (var k in registeredInstances) {
          if (registeredInstances.hasOwnProperty(k)) {
              rv.push(registeredInstances[k]);
          }
      }
      return rv;
    }
  
  function setDelayFunction(fn) {
      delayFunction = fn;
      if (deletionQueue.length && delayFunction) {
          delayFunction(flushPendingDeletes);
      }
    }function init_embind() {
      Module['getInheritedInstanceCount'] = getInheritedInstanceCount;
      Module['getLiveInheritedInstances'] = getLiveInheritedInstances;
      Module['flushPendingDeletes'] = flushPendingDeletes;
      Module['setDelayFunction'] = setDelayFunction;
    }var registeredInstances={};
  
  function getBasestPointer(class_, ptr) {
      if (ptr === undefined) {
          throwBindingError('ptr should not be undefined');
      }
      while (class_.baseClass) {
          ptr = class_.upcast(ptr);
          class_ = class_.baseClass;
      }
      return ptr;
    }function getInheritedInstance(class_, ptr) {
      ptr = getBasestPointer(class_, ptr);
      return registeredInstances[ptr];
    }
  
  function makeClassHandle(prototype, record) {
      if (!record.ptrType || !record.ptr) {
          throwInternalError('makeClassHandle requires ptr and ptrType');
      }
      var hasSmartPtrType = !!record.smartPtrType;
      var hasSmartPtr = !!record.smartPtr;
      if (hasSmartPtrType !== hasSmartPtr) {
          throwInternalError('Both smartPtrType and smartPtr must be specified');
      }
      record.count = { value: 1 };
      return attachFinalizer(Object.create(prototype, {
          $$: {
              value: record,
          },
      }));
    }function RegisteredPointer_fromWireType(ptr) {
      // ptr is a raw pointer (or a raw smartpointer)
  
      // rawPointer is a maybe-null raw pointer
      var rawPointer = this.getPointee(ptr);
      if (!rawPointer) {
          this.destructor(ptr);
          return null;
      }
  
      var registeredInstance = getInheritedInstance(this.registeredClass, rawPointer);
      if (undefined !== registeredInstance) {
          // JS object has been neutered, time to repopulate it
          if (0 === registeredInstance.$$.count.value) {
              registeredInstance.$$.ptr = rawPointer;
              registeredInstance.$$.smartPtr = ptr;
              return registeredInstance['clone']();
          } else {
              // else, just increment reference count on existing object
              // it already has a reference to the smart pointer
              var rv = registeredInstance['clone']();
              this.destructor(ptr);
              return rv;
          }
      }
  
      function makeDefaultHandle() {
          if (this.isSmartPointer) {
              return makeClassHandle(this.registeredClass.instancePrototype, {
                  ptrType: this.pointeeType,
                  ptr: rawPointer,
                  smartPtrType: this,
                  smartPtr: ptr,
              });
          } else {
              return makeClassHandle(this.registeredClass.instancePrototype, {
                  ptrType: this,
                  ptr: ptr,
              });
          }
      }
  
      var actualType = this.registeredClass.getActualType(rawPointer);
      var registeredPointerRecord = registeredPointers[actualType];
      if (!registeredPointerRecord) {
          return makeDefaultHandle.call(this);
      }
  
      var toType;
      if (this.isConst) {
          toType = registeredPointerRecord.constPointerType;
      } else {
          toType = registeredPointerRecord.pointerType;
      }
      var dp = downcastPointer(
          rawPointer,
          this.registeredClass,
          toType.registeredClass);
      if (dp === null) {
          return makeDefaultHandle.call(this);
      }
      if (this.isSmartPointer) {
          return makeClassHandle(toType.registeredClass.instancePrototype, {
              ptrType: toType,
              ptr: dp,
              smartPtrType: this,
              smartPtr: ptr,
          });
      } else {
          return makeClassHandle(toType.registeredClass.instancePrototype, {
              ptrType: toType,
              ptr: dp,
          });
      }
    }function init_RegisteredPointer() {
      RegisteredPointer.prototype.getPointee = RegisteredPointer_getPointee;
      RegisteredPointer.prototype.destructor = RegisteredPointer_destructor;
      RegisteredPointer.prototype['argPackAdvance'] = 8;
      RegisteredPointer.prototype['readValueFromPointer'] = simpleReadValueFromPointer;
      RegisteredPointer.prototype['deleteObject'] = RegisteredPointer_deleteObject;
      RegisteredPointer.prototype['fromWireType'] = RegisteredPointer_fromWireType;
    }function RegisteredPointer(
      name,
      registeredClass,
      isReference,
      isConst,
  
      // smart pointer properties
      isSmartPointer,
      pointeeType,
      sharingPolicy,
      rawGetPointee,
      rawConstructor,
      rawShare,
      rawDestructor
    ) {
      this.name = name;
      this.registeredClass = registeredClass;
      this.isReference = isReference;
      this.isConst = isConst;
  
      // smart pointer properties
      this.isSmartPointer = isSmartPointer;
      this.pointeeType = pointeeType;
      this.sharingPolicy = sharingPolicy;
      this.rawGetPointee = rawGetPointee;
      this.rawConstructor = rawConstructor;
      this.rawShare = rawShare;
      this.rawDestructor = rawDestructor;
  
      if (!isSmartPointer && registeredClass.baseClass === undefined) {
          if (isConst) {
              this['toWireType'] = constNoSmartPtrRawPointerToWireType;
              this.destructorFunction = null;
          } else {
              this['toWireType'] = nonConstNoSmartPtrRawPointerToWireType;
              this.destructorFunction = null;
          }
      } else {
          this['toWireType'] = genericPointerToWireType;
          // Here we must leave this.destructorFunction undefined, since whether genericPointerToWireType returns
          // a pointer that needs to be freed up is runtime-dependent, and cannot be evaluated at registration time.
          // TODO: Create an alternative mechanism that allows removing the use of var destructors = []; array in
          //       craftInvokerFunction altogether.
      }
    }
  
  function replacePublicSymbol(name, value, numArguments) {
      if (!Module.hasOwnProperty(name)) {
          throwInternalError('Replacing nonexistant public symbol');
      }
      // If there's an overload table for this symbol, replace the symbol in the overload table instead.
      if (undefined !== Module[name].overloadTable && undefined !== numArguments) {
          Module[name].overloadTable[numArguments] = value;
      }
      else {
          Module[name] = value;
          Module[name].argCount = numArguments;
      }
    }
  
  function embind__requireFunction(signature, rawFunction) {
      signature = readLatin1String(signature);
  
      function makeDynCaller(dynCall) {
          var args = [];
          for (var i = 1; i < signature.length; ++i) {
              args.push('a' + i);
          }
  
          var name = 'dynCall_' + signature + '_' + rawFunction;
          var body = 'return function ' + name + '(' + args.join(', ') + ') {\n';
          body    += '    return dynCall(rawFunction' + (args.length ? ', ' : '') + args.join(', ') + ');\n';
          body    += '};\n';
  
          return (new Function('dynCall', 'rawFunction', body))(dynCall, rawFunction);
      }
  
      var fp;
      if (Module['FUNCTION_TABLE_' + signature] !== undefined) {
          fp = Module['FUNCTION_TABLE_' + signature][rawFunction];
      } else if (typeof FUNCTION_TABLE !== "undefined") {
          fp = FUNCTION_TABLE[rawFunction];
      } else {
          // asm.js does not give direct access to the function tables,
          // and thus we must go through the dynCall interface which allows
          // calling into a signature's function table by pointer value.
          //
          // https://github.com/dherman/asm.js/issues/83
          //
          // This has three main penalties:
          // - dynCall is another function call in the path from JavaScript to C++.
          // - JITs may not predict through the function table indirection at runtime.
          var dc = Module['dynCall_' + signature];
          if (dc === undefined) {
              // We will always enter this branch if the signature
              // contains 'f' and PRECISE_F32 is not enabled.
              //
              // Try again, replacing 'f' with 'd'.
              dc = Module['dynCall_' + signature.replace(/f/g, 'd')];
              if (dc === undefined) {
                  throwBindingError("No dynCall invoker for signature: " + signature);
              }
          }
          fp = makeDynCaller(dc);
      }
  
      if (typeof fp !== "function") {
          throwBindingError("unknown function pointer with signature " + signature + ": " + rawFunction);
      }
      return fp;
    }
  
  
  var UnboundTypeError=undefined;
  
  function getTypeName(type) {
      var ptr = ___getTypeName(type);
      var rv = readLatin1String(ptr);
      _free(ptr);
      return rv;
    }function throwUnboundTypeError(message, types) {
      var unboundTypes = [];
      var seen = {};
      function visit(type) {
          if (seen[type]) {
              return;
          }
          if (registeredTypes[type]) {
              return;
          }
          if (typeDependencies[type]) {
              typeDependencies[type].forEach(visit);
              return;
          }
          unboundTypes.push(type);
          seen[type] = true;
      }
      types.forEach(visit);
  
      throw new UnboundTypeError(message + ': ' + unboundTypes.map(getTypeName).join([', ']));
    }function __embind_register_class(
      rawType,
      rawPointerType,
      rawConstPointerType,
      baseClassRawType,
      getActualTypeSignature,
      getActualType,
      upcastSignature,
      upcast,
      downcastSignature,
      downcast,
      name,
      destructorSignature,
      rawDestructor
    ) {
      name = readLatin1String(name);
      getActualType = embind__requireFunction(getActualTypeSignature, getActualType);
      if (upcast) {
          upcast = embind__requireFunction(upcastSignature, upcast);
      }
      if (downcast) {
          downcast = embind__requireFunction(downcastSignature, downcast);
      }
      rawDestructor = embind__requireFunction(destructorSignature, rawDestructor);
      var legalFunctionName = makeLegalFunctionName(name);
  
      exposePublicSymbol(legalFunctionName, function() {
          // this code cannot run if baseClassRawType is zero
          throwUnboundTypeError('Cannot construct ' + name + ' due to unbound types', [baseClassRawType]);
      });
  
      whenDependentTypesAreResolved(
          [rawType, rawPointerType, rawConstPointerType],
          baseClassRawType ? [baseClassRawType] : [],
          function(base) {
              base = base[0];
  
              var baseClass;
              var basePrototype;
              if (baseClassRawType) {
                  baseClass = base.registeredClass;
                  basePrototype = baseClass.instancePrototype;
              } else {
                  basePrototype = ClassHandle.prototype;
              }
  
              var constructor = createNamedFunction(legalFunctionName, function() {
                  if (Object.getPrototypeOf(this) !== instancePrototype) {
                      throw new BindingError("Use 'new' to construct " + name);
                  }
                  if (undefined === registeredClass.constructor_body) {
                      throw new BindingError(name + " has no accessible constructor");
                  }
                  var body = registeredClass.constructor_body[arguments.length];
                  if (undefined === body) {
                      throw new BindingError("Tried to invoke ctor of " + name + " with invalid number of parameters (" + arguments.length + ") - expected (" + Object.keys(registeredClass.constructor_body).toString() + ") parameters instead!");
                  }
                  return body.apply(this, arguments);
              });
  
              var instancePrototype = Object.create(basePrototype, {
                  constructor: { value: constructor },
              });
  
              constructor.prototype = instancePrototype;
  
              var registeredClass = new RegisteredClass(
                  name,
                  constructor,
                  instancePrototype,
                  rawDestructor,
                  baseClass,
                  getActualType,
                  upcast,
                  downcast);
  
              var referenceConverter = new RegisteredPointer(
                  name,
                  registeredClass,
                  true,
                  false,
                  false);
  
              var pointerConverter = new RegisteredPointer(
                  name + '*',
                  registeredClass,
                  false,
                  false,
                  false);
  
              var constPointerConverter = new RegisteredPointer(
                  name + ' const*',
                  registeredClass,
                  false,
                  true,
                  false);
  
              registeredPointers[rawType] = {
                  pointerType: pointerConverter,
                  constPointerType: constPointerConverter
              };
  
              replacePublicSymbol(legalFunctionName, constructor);
  
              return [referenceConverter, pointerConverter, constPointerConverter];
          }
      );
    }

  
  function heap32VectorToArray(count, firstElement) {
      var array = [];
      for (var i = 0; i < count; i++) {
          array.push(HEAP32[(firstElement >> 2) + i]);
      }
      return array;
    }
  
  function runDestructors(destructors) {
      while (destructors.length) {
          var ptr = destructors.pop();
          var del = destructors.pop();
          del(ptr);
      }
    }function __embind_register_class_constructor(
      rawClassType,
      argCount,
      rawArgTypesAddr,
      invokerSignature,
      invoker,
      rawConstructor
    ) {
      assert(argCount > 0);
      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      invoker = embind__requireFunction(invokerSignature, invoker);
      var args = [rawConstructor];
      var destructors = [];
  
      whenDependentTypesAreResolved([], [rawClassType], function(classType) {
          classType = classType[0];
          var humanName = 'constructor ' + classType.name;
  
          if (undefined === classType.registeredClass.constructor_body) {
              classType.registeredClass.constructor_body = [];
          }
          if (undefined !== classType.registeredClass.constructor_body[argCount - 1]) {
              throw new BindingError("Cannot register multiple constructors with identical number of parameters (" + (argCount-1) + ") for class '" + classType.name + "'! Overload resolution is currently only performed using the parameter count, not actual type info!");
          }
          classType.registeredClass.constructor_body[argCount - 1] = function unboundTypeHandler() {
              throwUnboundTypeError('Cannot construct ' + classType.name + ' due to unbound types', rawArgTypes);
          };
  
          whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
              classType.registeredClass.constructor_body[argCount - 1] = function constructor_body() {
                  if (arguments.length !== argCount - 1) {
                      throwBindingError(humanName + ' called with ' + arguments.length + ' arguments, expected ' + (argCount-1));
                  }
                  destructors.length = 0;
                  args.length = argCount;
                  for (var i = 1; i < argCount; ++i) {
                      args[i] = argTypes[i]['toWireType'](destructors, arguments[i - 1]);
                  }
  
                  var ptr = invoker.apply(null, args);
                  runDestructors(destructors);
  
                  return argTypes[0]['fromWireType'](ptr);
              };
              return [];
          });
          return [];
      });
    }

  
  
  function new_(constructor, argumentList) {
      if (!(constructor instanceof Function)) {
          throw new TypeError('new_ called with constructor type ' + typeof(constructor) + " which is not a function");
      }
  
      /*
       * Previously, the following line was just:
  
       function dummy() {};
  
       * Unfortunately, Chrome was preserving 'dummy' as the object's name, even though at creation, the 'dummy' has the
       * correct constructor name.  Thus, objects created with IMVU.new would show up in the debugger as 'dummy', which
       * isn't very helpful.  Using IMVU.createNamedFunction addresses the issue.  Doublely-unfortunately, there's no way
       * to write a test for this behavior.  -NRD 2013.02.22
       */
      var dummy = createNamedFunction(constructor.name || 'unknownFunctionName', function(){});
      dummy.prototype = constructor.prototype;
      var obj = new dummy;
  
      var r = constructor.apply(obj, argumentList);
      return (r instanceof Object) ? r : obj;
    }function craftInvokerFunction(humanName, argTypes, classType, cppInvokerFunc, cppTargetFunc) {
      // humanName: a human-readable string name for the function to be generated.
      // argTypes: An array that contains the embind type objects for all types in the function signature.
      //    argTypes[0] is the type object for the function return value.
      //    argTypes[1] is the type object for function this object/class type, or null if not crafting an invoker for a class method.
      //    argTypes[2...] are the actual function parameters.
      // classType: The embind type object for the class to be bound, or null if this is not a method of a class.
      // cppInvokerFunc: JS Function object to the C++-side function that interops into C++ code.
      // cppTargetFunc: Function pointer (an integer to FUNCTION_TABLE) to the target C++ function the cppInvokerFunc will end up calling.
      var argCount = argTypes.length;
  
      if (argCount < 2) {
          throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!");
      }
  
      var isClassMethodFunc = (argTypes[1] !== null && classType !== null);
  
      // Free functions with signature "void function()" do not need an invoker that marshalls between wire types.
  // TODO: This omits argument count check - enable only at -O3 or similar.
  //    if (ENABLE_UNSAFE_OPTS && argCount == 2 && argTypes[0].name == "void" && !isClassMethodFunc) {
  //       return FUNCTION_TABLE[fn];
  //    }
  
  
      // Determine if we need to use a dynamic stack to store the destructors for the function parameters.
      // TODO: Remove this completely once all function invokers are being dynamically generated.
      var needsDestructorStack = false;
  
      for(var i = 1; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here.
          if (argTypes[i] !== null && argTypes[i].destructorFunction === undefined) { // The type does not define a destructor function - must use dynamic stack
              needsDestructorStack = true;
              break;
          }
      }
  
      var returns = (argTypes[0].name !== "void");
  
      var argsList = "";
      var argsListWired = "";
      for(var i = 0; i < argCount - 2; ++i) {
          argsList += (i!==0?", ":"")+"arg"+i;
          argsListWired += (i!==0?", ":"")+"arg"+i+"Wired";
      }
  
      var invokerFnBody =
          "return function "+makeLegalFunctionName(humanName)+"("+argsList+") {\n" +
          "if (arguments.length !== "+(argCount - 2)+") {\n" +
              "throwBindingError('function "+humanName+" called with ' + arguments.length + ' arguments, expected "+(argCount - 2)+" args!');\n" +
          "}\n";
  
  
      if (needsDestructorStack) {
          invokerFnBody +=
              "var destructors = [];\n";
      }
  
      var dtorStack = needsDestructorStack ? "destructors" : "null";
      var args1 = ["throwBindingError", "invoker", "fn", "runDestructors", "retType", "classParam"];
      var args2 = [throwBindingError, cppInvokerFunc, cppTargetFunc, runDestructors, argTypes[0], argTypes[1]];
  
  
      if (isClassMethodFunc) {
          invokerFnBody += "var thisWired = classParam.toWireType("+dtorStack+", this);\n";
      }
  
      for(var i = 0; i < argCount - 2; ++i) {
          invokerFnBody += "var arg"+i+"Wired = argType"+i+".toWireType("+dtorStack+", arg"+i+"); // "+argTypes[i+2].name+"\n";
          args1.push("argType"+i);
          args2.push(argTypes[i+2]);
      }
  
      if (isClassMethodFunc) {
          argsListWired = "thisWired" + (argsListWired.length > 0 ? ", " : "") + argsListWired;
      }
  
      invokerFnBody +=
          (returns?"var rv = ":"") + "invoker(fn"+(argsListWired.length>0?", ":"")+argsListWired+");\n";
  
      if (needsDestructorStack) {
          invokerFnBody += "runDestructors(destructors);\n";
      } else {
          for(var i = isClassMethodFunc?1:2; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here. Also skip class type if not a method.
              var paramName = (i === 1 ? "thisWired" : ("arg"+(i - 2)+"Wired"));
              if (argTypes[i].destructorFunction !== null) {
                  invokerFnBody += paramName+"_dtor("+paramName+"); // "+argTypes[i].name+"\n";
                  args1.push(paramName+"_dtor");
                  args2.push(argTypes[i].destructorFunction);
              }
          }
      }
  
      if (returns) {
          invokerFnBody += "var ret = retType.fromWireType(rv);\n" +
                           "return ret;\n";
      } else {
      }
      invokerFnBody += "}\n";
  
      args1.push(invokerFnBody);
  
      var invokerFunction = new_(Function, args1).apply(null, args2);
      return invokerFunction;
    }function __embind_register_class_function(
      rawClassType,
      methodName,
      argCount,
      rawArgTypesAddr, // [ReturnType, ThisType, Args...]
      invokerSignature,
      rawInvoker,
      context,
      isPureVirtual
    ) {
      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      methodName = readLatin1String(methodName);
      rawInvoker = embind__requireFunction(invokerSignature, rawInvoker);
  
      whenDependentTypesAreResolved([], [rawClassType], function(classType) {
          classType = classType[0];
          var humanName = classType.name + '.' + methodName;
  
          if (isPureVirtual) {
              classType.registeredClass.pureVirtualFunctions.push(methodName);
          }
  
          function unboundTypesHandler() {
              throwUnboundTypeError('Cannot call ' + humanName + ' due to unbound types', rawArgTypes);
          }
  
          var proto = classType.registeredClass.instancePrototype;
          var method = proto[methodName];
          if (undefined === method || (undefined === method.overloadTable && method.className !== classType.name && method.argCount === argCount - 2)) {
              // This is the first overload to be registered, OR we are replacing a function in the base class with a function in the derived class.
              unboundTypesHandler.argCount = argCount - 2;
              unboundTypesHandler.className = classType.name;
              proto[methodName] = unboundTypesHandler;
          } else {
              // There was an existing function with the same name registered. Set up a function overload routing table.
              ensureOverloadTable(proto, methodName, humanName);
              proto[methodName].overloadTable[argCount - 2] = unboundTypesHandler;
          }
  
          whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
  
              var memberFunction = craftInvokerFunction(humanName, argTypes, classType, rawInvoker, context);
  
              // Replace the initial unbound-handler-stub function with the appropriate member function, now that all types
              // are resolved. If multiple overloads are registered for this function, the function goes into an overload table.
              if (undefined === proto[methodName].overloadTable) {
                  // Set argCount in case an overload is registered later
                  memberFunction.argCount = argCount - 2;
                  proto[methodName] = memberFunction;
              } else {
                  proto[methodName].overloadTable[argCount - 2] = memberFunction;
              }
  
              return [];
          });
          return [];
      });
    }

  
  
  var emval_free_list=[];
  
  var emval_handle_array=[{},{value:undefined},{value:null},{value:true},{value:false}];function __emval_decref(handle) {
      if (handle > 4 && 0 === --emval_handle_array[handle].refcount) {
          emval_handle_array[handle] = undefined;
          emval_free_list.push(handle);
      }
    }
  
  
  
  function count_emval_handles() {
      var count = 0;
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              ++count;
          }
      }
      return count;
    }
  
  function get_first_emval() {
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              return emval_handle_array[i];
          }
      }
      return null;
    }function init_emval() {
      Module['count_emval_handles'] = count_emval_handles;
      Module['get_first_emval'] = get_first_emval;
    }function __emval_register(value) {
  
      switch(value){
        case undefined :{ return 1; }
        case null :{ return 2; }
        case true :{ return 3; }
        case false :{ return 4; }
        default:{
          var handle = emval_free_list.length ?
              emval_free_list.pop() :
              emval_handle_array.length;
  
          emval_handle_array[handle] = {refcount: 1, value: value};
          return handle;
          }
        }
    }function __embind_register_emval(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(handle) {
              var rv = emval_handle_array[handle].value;
              __emval_decref(handle);
              return rv;
          },
          'toWireType': function(destructors, value) {
              return __emval_register(value);
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: null, // This type does not need a destructor
  
          // TODO: do we need a deleteObject here?  write a test where
          // emval is passed into JS via an interface
      });
    }

  
  function _embind_repr(v) {
      if (v === null) {
          return 'null';
      }
      var t = typeof v;
      if (t === 'object' || t === 'array' || t === 'function') {
          return v.toString();
      } else {
          return '' + v;
      }
    }
  
  function floatReadValueFromPointer(name, shift) {
      switch (shift) {
          case 2: return function(pointer) {
              return this['fromWireType'](HEAPF32[pointer >> 2]);
          };
          case 3: return function(pointer) {
              return this['fromWireType'](HEAPF64[pointer >> 3]);
          };
          default:
              throw new TypeError("Unknown float type: " + name);
      }
    }function __embind_register_float(rawType, name, size) {
      var shift = getShiftFromSize(size);
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              return value;
          },
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following if() and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              return value;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': floatReadValueFromPointer(name, shift),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  function __embind_register_function(name, argCount, rawArgTypesAddr, signature, rawInvoker, fn) {
      var argTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      name = readLatin1String(name);
  
      rawInvoker = embind__requireFunction(signature, rawInvoker);
  
      exposePublicSymbol(name, function() {
          throwUnboundTypeError('Cannot call ' + name + ' due to unbound types', argTypes);
      }, argCount - 1);
  
      whenDependentTypesAreResolved([], argTypes, function(argTypes) {
          var invokerArgsArray = [argTypes[0] /* return value */, null /* no class 'this'*/].concat(argTypes.slice(1) /* actual params */);
          replacePublicSymbol(name, craftInvokerFunction(name, invokerArgsArray, null /* no class 'this'*/, rawInvoker, fn), argCount - 1);
          return [];
      });
    }

  
  function integerReadValueFromPointer(name, shift, signed) {
      // integers are quite common, so generate very specialized functions
      switch (shift) {
          case 0: return signed ?
              function readS8FromPointer(pointer) { return HEAP8[pointer]; } :
              function readU8FromPointer(pointer) { return HEAPU8[pointer]; };
          case 1: return signed ?
              function readS16FromPointer(pointer) { return HEAP16[pointer >> 1]; } :
              function readU16FromPointer(pointer) { return HEAPU16[pointer >> 1]; };
          case 2: return signed ?
              function readS32FromPointer(pointer) { return HEAP32[pointer >> 2]; } :
              function readU32FromPointer(pointer) { return HEAPU32[pointer >> 2]; };
          default:
              throw new TypeError("Unknown integer type: " + name);
      }
    }function __embind_register_integer(primitiveType, name, size, minRange, maxRange) {
      name = readLatin1String(name);
      if (maxRange === -1) { // LLVM doesn't have signed and unsigned 32-bit types, so u32 literals come out as 'i32 -1'. Always treat those as max u32.
          maxRange = 4294967295;
      }
  
      var shift = getShiftFromSize(size);
  
      var fromWireType = function(value) {
          return value;
      };
  
      if (minRange === 0) {
          var bitshift = 32 - 8*size;
          fromWireType = function(value) {
              return (value << bitshift) >>> bitshift;
          };
      }
  
      var isUnsignedType = (name.indexOf('unsigned') != -1);
  
      registerType(primitiveType, {
          name: name,
          'fromWireType': fromWireType,
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following two if()s and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              if (value < minRange || value > maxRange) {
                  throw new TypeError('Passing a number "' + _embind_repr(value) + '" from JS side to C/C++ side to an argument of type "' + name + '", which is outside the valid range [' + minRange + ', ' + maxRange + ']!');
              }
              return isUnsignedType ? (value >>> 0) : (value | 0);
          },
          'argPackAdvance': 8,
          'readValueFromPointer': integerReadValueFromPointer(name, shift, minRange !== 0),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  function __embind_register_memory_view(rawType, dataTypeIndex, name) {
      var typeMapping = [
          Int8Array,
          Uint8Array,
          Int16Array,
          Uint16Array,
          Int32Array,
          Uint32Array,
          Float32Array,
          Float64Array,
      ];
  
      var TA = typeMapping[dataTypeIndex];
  
      function decodeMemoryView(handle) {
          handle = handle >> 2;
          var heap = HEAPU32;
          var size = heap[handle]; // in elements
          var data = heap[handle + 1]; // byte offset into emscripten heap
          return new TA(heap['buffer'], data, size);
      }
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': decodeMemoryView,
          'argPackAdvance': 8,
          'readValueFromPointer': decodeMemoryView,
      }, {
          ignoreDuplicateRegistrations: true,
      });
    }

  function __embind_register_std_string(rawType, name) {
      name = readLatin1String(name);
      var stdStringIsUTF8
      //process only std::string bindings with UTF8 support, in contrast to e.g. std::basic_string<unsigned char>
      = (name === "std::string");
  
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              var length = HEAPU32[value >> 2];
  
              var str;
              if(stdStringIsUTF8) {
                  //ensure null termination at one-past-end byte if not present yet
                  var endChar = HEAPU8[value + 4 + length];
                  var endCharSwap = 0;
                  if(endChar != 0)
                  {
                    endCharSwap = endChar;
                    HEAPU8[value + 4 + length] = 0;
                  }
  
                  var decodeStartPtr = value + 4;
                  //looping here to support possible embedded '0' bytes
                  for (var i = 0; i <= length; ++i) {
                    var currentBytePtr = value + 4 + i;
                    if(HEAPU8[currentBytePtr] == 0)
                    {
                      var stringSegment = UTF8ToString(decodeStartPtr);
                      if(str === undefined)
                        str = stringSegment;
                      else
                      {
                        str += String.fromCharCode(0);
                        str += stringSegment;
                      }
                      decodeStartPtr = currentBytePtr + 1;
                    }
                  }
  
                  if(endCharSwap != 0)
                    HEAPU8[value + 4 + length] = endCharSwap;
              } else {
                  var a = new Array(length);
                  for (var i = 0; i < length; ++i) {
                      a[i] = String.fromCharCode(HEAPU8[value + 4 + i]);
                  }
                  str = a.join('');
              }
  
              _free(value);
  
              return str;
          },
          'toWireType': function(destructors, value) {
              if (value instanceof ArrayBuffer) {
                  value = new Uint8Array(value);
              }
  
              var getLength;
              var valueIsOfTypeString = (typeof value === 'string');
  
              if (!(valueIsOfTypeString || value instanceof Uint8Array || value instanceof Uint8ClampedArray || value instanceof Int8Array)) {
                  throwBindingError('Cannot pass non-string to std::string');
              }
              if (stdStringIsUTF8 && valueIsOfTypeString) {
                  getLength = function() {return lengthBytesUTF8(value);};
              } else {
                  getLength = function() {return value.length;};
              }
  
              // assumes 4-byte alignment
              var length = getLength();
              var ptr = _malloc(4 + length + 1);
              HEAPU32[ptr >> 2] = length;
  
              if (stdStringIsUTF8 && valueIsOfTypeString) {
                  stringToUTF8(value, ptr + 4, length + 1);
              } else {
                  if(valueIsOfTypeString) {
                      for (var i = 0; i < length; ++i) {
                          var charCode = value.charCodeAt(i);
                          if (charCode > 255) {
                              _free(ptr);
                              throwBindingError('String has UTF-16 code units that do not fit in 8 bits');
                          }
                          HEAPU8[ptr + 4 + i] = charCode;
                      }
                  } else {
                      for (var i = 0; i < length; ++i) {
                          HEAPU8[ptr + 4 + i] = value[i];
                      }
                  }
              }
  
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  function __embind_register_std_wstring(rawType, charSize, name) {
      // nb. do not cache HEAPU16 and HEAPU32, they may be destroyed by emscripten_resize_heap().
      name = readLatin1String(name);
      var getHeap, shift;
      if (charSize === 2) {
          getHeap = function() { return HEAPU16; };
          shift = 1;
      } else if (charSize === 4) {
          getHeap = function() { return HEAPU32; };
          shift = 2;
      }
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              var HEAP = getHeap();
              var length = HEAPU32[value >> 2];
              var a = new Array(length);
              var start = (value + 4) >> shift;
              for (var i = 0; i < length; ++i) {
                  a[i] = String.fromCharCode(HEAP[start + i]);
              }
              _free(value);
              return a.join('');
          },
          'toWireType': function(destructors, value) {
              // assumes 4-byte alignment
              var length = value.length;
              var ptr = _malloc(4 + length * charSize);
              var HEAP = getHeap();
              HEAPU32[ptr >> 2] = length;
              var start = (ptr + 4) >> shift;
              for (var i = 0; i < length; ++i) {
                  HEAP[start + i] = value.charCodeAt(i);
              }
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  function __embind_register_void(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          isVoid: true, // void return values can be optimized out sometimes
          name: name,
          'argPackAdvance': 0,
          'fromWireType': function() {
              return undefined;
          },
          'toWireType': function(destructors, o) {
              // TODO: assert if anything else is given?
              return undefined;
          },
      });
    }

  function _abort() {
      abort();
    }

   

   

  
  var ___tm_current=21264;
  
  
  
  var ___tm_timezone=(stringToUTF8("GMT", 21312, 4), 21312);
  
  function _tzset() {
      // TODO: Use (malleable) environment variables instead of system settings.
      if (_tzset.called) return;
      _tzset.called = true;
  
      // timezone is specified as seconds west of UTC ("The external variable
      // `timezone` shall be set to the difference, in seconds, between
      // Coordinated Universal Time (UTC) and local standard time."), the same
      // as returned by getTimezoneOffset().
      // See http://pubs.opengroup.org/onlinepubs/009695399/functions/tzset.html
      HEAP32[((__get_timezone())>>2)]=(new Date()).getTimezoneOffset() * 60;
  
      var currentYear = new Date().getFullYear();
      var winter = new Date(currentYear, 0, 1);
      var summer = new Date(currentYear, 6, 1);
      HEAP32[((__get_daylight())>>2)]=Number(winter.getTimezoneOffset() != summer.getTimezoneOffset());
  
      function extractZone(date) {
        var match = date.toTimeString().match(/\(([A-Za-z ]+)\)$/);
        return match ? match[1] : "GMT";
      };
      var winterName = extractZone(winter);
      var summerName = extractZone(summer);
      var winterNamePtr = allocate(intArrayFromString(winterName), 'i8', ALLOC_NORMAL);
      var summerNamePtr = allocate(intArrayFromString(summerName), 'i8', ALLOC_NORMAL);
      if (summer.getTimezoneOffset() < winter.getTimezoneOffset()) {
        // Northern hemisphere
        HEAP32[((__get_tzname())>>2)]=winterNamePtr;
        HEAP32[(((__get_tzname())+(4))>>2)]=summerNamePtr;
      } else {
        HEAP32[((__get_tzname())>>2)]=summerNamePtr;
        HEAP32[(((__get_tzname())+(4))>>2)]=winterNamePtr;
      }
    }function _localtime_r(time, tmPtr) {
      _tzset();
      var date = new Date(HEAP32[((time)>>2)]*1000);
      HEAP32[((tmPtr)>>2)]=date.getSeconds();
      HEAP32[(((tmPtr)+(4))>>2)]=date.getMinutes();
      HEAP32[(((tmPtr)+(8))>>2)]=date.getHours();
      HEAP32[(((tmPtr)+(12))>>2)]=date.getDate();
      HEAP32[(((tmPtr)+(16))>>2)]=date.getMonth();
      HEAP32[(((tmPtr)+(20))>>2)]=date.getFullYear()-1900;
      HEAP32[(((tmPtr)+(24))>>2)]=date.getDay();
  
      var start = new Date(date.getFullYear(), 0, 1);
      var yday = ((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24))|0;
      HEAP32[(((tmPtr)+(28))>>2)]=yday;
      HEAP32[(((tmPtr)+(36))>>2)]=-(date.getTimezoneOffset() * 60);
  
      // Attention: DST is in December in South, and some regions don't have DST at all.
      var summerOffset = new Date(date.getFullYear(), 6, 1).getTimezoneOffset();
      var winterOffset = start.getTimezoneOffset();
      var dst = (summerOffset != winterOffset && date.getTimezoneOffset() == Math.min(winterOffset, summerOffset))|0;
      HEAP32[(((tmPtr)+(32))>>2)]=dst;
  
      var zonePtr = HEAP32[(((__get_tzname())+(dst ? 4 : 0))>>2)];
      HEAP32[(((tmPtr)+(40))>>2)]=zonePtr;
  
      return tmPtr;
    }
  
  
  var ___tm_formatted=21328;
  
  function _mktime(tmPtr) {
      _tzset();
      var date = new Date(HEAP32[(((tmPtr)+(20))>>2)] + 1900,
                          HEAP32[(((tmPtr)+(16))>>2)],
                          HEAP32[(((tmPtr)+(12))>>2)],
                          HEAP32[(((tmPtr)+(8))>>2)],
                          HEAP32[(((tmPtr)+(4))>>2)],
                          HEAP32[((tmPtr)>>2)],
                          0);
  
      // There's an ambiguous hour when the time goes back; the tm_isdst field is
      // used to disambiguate it.  Date() basically guesses, so we fix it up if it
      // guessed wrong, or fill in tm_isdst with the guess if it's -1.
      var dst = HEAP32[(((tmPtr)+(32))>>2)];
      var guessedOffset = date.getTimezoneOffset();
      var start = new Date(date.getFullYear(), 0, 1);
      var summerOffset = new Date(date.getFullYear(), 6, 1).getTimezoneOffset();
      var winterOffset = start.getTimezoneOffset();
      var dstOffset = Math.min(winterOffset, summerOffset); // DST is in December in South
      if (dst < 0) {
        // Attention: some regions don't have DST at all.
        HEAP32[(((tmPtr)+(32))>>2)]=Number(summerOffset != winterOffset && dstOffset == guessedOffset);
      } else if ((dst > 0) != (dstOffset == guessedOffset)) {
        var nonDstOffset = Math.max(winterOffset, summerOffset);
        var trueOffset = dst > 0 ? dstOffset : nonDstOffset;
        // Don't try setMinutes(date.getMinutes() + ...) -- it's messed up.
        date.setTime(date.getTime() + (trueOffset - guessedOffset)*60000);
      }
  
      HEAP32[(((tmPtr)+(24))>>2)]=date.getDay();
      var yday = ((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24))|0;
      HEAP32[(((tmPtr)+(28))>>2)]=yday;
  
      return (date.getTime() / 1000)|0;
    }function _asctime_r(tmPtr, buf) {
      var date = {
        tm_sec: HEAP32[((tmPtr)>>2)],
        tm_min: HEAP32[(((tmPtr)+(4))>>2)],
        tm_hour: HEAP32[(((tmPtr)+(8))>>2)],
        tm_mday: HEAP32[(((tmPtr)+(12))>>2)],
        tm_mon: HEAP32[(((tmPtr)+(16))>>2)],
        tm_year: HEAP32[(((tmPtr)+(20))>>2)],
        tm_wday: HEAP32[(((tmPtr)+(24))>>2)]
      };
      var days = [ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" ];
      var months = [ "Jan", "Feb", "Mar", "Apr", "May", "Jun",
                     "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" ];
      var s = days[date.tm_wday] + ' ' + months[date.tm_mon] +
          (date.tm_mday < 10 ? '  ' : ' ') + date.tm_mday +
          (date.tm_hour < 10 ? ' 0' : ' ') + date.tm_hour +
          (date.tm_min < 10 ? ':0' : ':') + date.tm_min +
          (date.tm_sec < 10 ? ':0' : ':') + date.tm_sec +
          ' ' + (1900 + date.tm_year) + "\n";
  
      // asctime_r is specced to behave in an undefined manner if the algorithm would attempt
      // to write out more than 26 bytes (including the null terminator).
      // See http://pubs.opengroup.org/onlinepubs/9699919799/functions/asctime.html
      // Our undefined behavior is to truncate the write to at most 26 bytes, including null terminator.
      stringToUTF8(s, buf, 26);
      return buf;
    }function _ctime_r(time, buf) {
      var stack = stackSave();
      var rv = _asctime_r(_localtime_r(time, stackAlloc(44)), buf);
      stackRestore(stack);
      return rv;
    }function _ctime(timer) {
      return _ctime_r(timer, ___tm_current);
    }

  function _emscripten_get_heap_size() {
      return HEAP8.length;
    }

   

  
  function abortOnCannotGrowMemory(requestedSize) {
      abort('Cannot enlarge memory arrays to size ' + requestedSize + ' bytes (OOM). Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + HEAP8.length + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
    }
  
  function emscripten_realloc_buffer(size) {
      try {
        var newBuffer = new ArrayBuffer(size);
        if (newBuffer.byteLength != size) return /*undefined, allocation did not succeed*/;
        new Int8Array(newBuffer).set(HEAP8);
        _emscripten_replace_memory(newBuffer);
        updateGlobalBufferAndViews(newBuffer);
        return 1 /*success*/;
      } catch(e) {
        console.error('emscripten_realloc_buffer: Attempted to grow heap from ' + buffer.byteLength  + ' bytes to ' + size + ' bytes, but got error: ' + e);
      }
    }function _emscripten_resize_heap(requestedSize) {
      var oldSize = _emscripten_get_heap_size();
      // With pthreads, races can happen (another thread might increase the size in between), so return a failure, and let the caller retry.
      assert(requestedSize > oldSize);
  
  
      var PAGE_MULTIPLE = 16777216;
      var LIMIT = 2147483648 - PAGE_MULTIPLE; // We can do one page short of 2GB as theoretical maximum.
  
      if (requestedSize > LIMIT) {
        err('Cannot enlarge memory, asked to go up to ' + requestedSize + ' bytes, but the limit is ' + LIMIT + ' bytes!');
        return false;
      }
  
      var MIN_TOTAL_MEMORY = 16777216;
      var newSize = Math.max(oldSize, MIN_TOTAL_MEMORY); // So the loop below will not be infinite, and minimum asm.js memory size is 16MB.
  
      // TODO: see realloc_buffer - for PTHREADS we may want to decrease these jumps
      while (newSize < requestedSize) { // Keep incrementing the heap size as long as it's less than what is requested.
        if (newSize <= 536870912) {
          newSize = alignUp(2 * newSize, PAGE_MULTIPLE); // Simple heuristic: double until 1GB...
        } else {
          // ..., but after that, add smaller increments towards 2GB, which we cannot reach
          newSize = Math.min(alignUp((3 * newSize + 2147483648) / 4, PAGE_MULTIPLE), LIMIT);
        }
  
        if (newSize === oldSize) {
          warnOnce('Cannot ask for more memory since we reached the practical limit in browsers (which is just below 2GB), so the request would have failed. Requesting only ' + HEAP8.length);
        }
      }
  
  
  
      var replacement = emscripten_realloc_buffer(newSize);
      if (!replacement) {
        err('Failed to grow the heap from ' + oldSize + ' bytes to ' + newSize + ' bytes, not enough memory!');
        return false;
      }
  
      err('Warning: Enlarging memory arrays, this is not fast! ' + [oldSize, newSize]);
  
  
      return true;
    }



  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
    }
  
   

   

  function _puts(s) {
      // extra effort to support puts, even without a filesystem. very partial, very hackish
      var result = UTF8ToString(s);
      var string = result.substr(0);
      if (string[string.length-1] === '\n') string = string.substr(0, string.length-1); // remove a final \n, as Module.print will do that
      out(string);
      return result.length;
    }

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

if (ENVIRONMENT_IS_NODE) {
    _emscripten_get_now = function _emscripten_get_now_actual() {
      var t = process['hrtime']();
      return t[0] * 1e3 + t[1] / 1e6;
    };
  } else if (typeof dateNow !== 'undefined') {
    _emscripten_get_now = dateNow;
  } else if (typeof performance === 'object' && performance && typeof performance['now'] === 'function') {
    _emscripten_get_now = function() { return performance['now'](); };
  } else {
    _emscripten_get_now = Date.now;
  };
FS.staticInit();Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;;
embind_init_charCodes();
BindingError = Module['BindingError'] = extendError(Error, 'BindingError');;
InternalError = Module['InternalError'] = extendError(Error, 'InternalError');;
init_ClassHandle();
init_RegisteredPointer();
init_embind();;
UnboundTypeError = Module['UnboundTypeError'] = extendError(Error, 'UnboundTypeError');;
init_emval();;
var ASSERTIONS = true;

// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}


// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149

// This code was written by Tyler Akins and has been placed in the
// public domain.  It would be nice if you left this header intact.
// Base64 code from Tyler Akins -- http://rumkin.com

/**
 * Decodes a base64 string.
 * @param {String} input The string to decode.
 */
var decodeBase64 = typeof atob === 'function' ? atob : function (input) {
  var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  var output = '';
  var chr1, chr2, chr3;
  var enc1, enc2, enc3, enc4;
  var i = 0;
  // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
  do {
    enc1 = keyStr.indexOf(input.charAt(i++));
    enc2 = keyStr.indexOf(input.charAt(i++));
    enc3 = keyStr.indexOf(input.charAt(i++));
    enc4 = keyStr.indexOf(input.charAt(i++));

    chr1 = (enc1 << 2) | (enc2 >> 4);
    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
    chr3 = ((enc3 & 3) << 6) | enc4;

    output = output + String.fromCharCode(chr1);

    if (enc3 !== 64) {
      output = output + String.fromCharCode(chr2);
    }
    if (enc4 !== 64) {
      output = output + String.fromCharCode(chr3);
    }
  } while (i < input.length);
  return output;
};

// Converts a string of base64 into a byte array.
// Throws error on invalid input.
function intArrayFromBase64(s) {
  if (typeof ENVIRONMENT_IS_NODE === 'boolean' && ENVIRONMENT_IS_NODE) {
    var buf;
    try {
      buf = Buffer.from(s, 'base64');
    } catch (_) {
      buf = new Buffer(s, 'base64');
    }
    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
  }

  try {
    var decoded = decodeBase64(s);
    var bytes = new Uint8Array(decoded.length);
    for (var i = 0 ; i < decoded.length ; ++i) {
      bytes[i] = decoded.charCodeAt(i);
    }
    return bytes;
  } catch (_) {
    throw new Error('Converting base64 string to bytes failed.');
  }
}

// If filename is a base64 data URI, parses and returns data (Buffer on node,
// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
function tryParseAsDataURI(filename) {
  if (!isDataURI(filename)) {
    return;
  }

  return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}


// ASM_LIBRARY EXTERN PRIMITIVES: Math_imul,Math_clz32,Int8Array,Int32Array

function nullFunc_i(x) { abortFnPtrError(x, 'i'); }
function nullFunc_ii(x) { abortFnPtrError(x, 'ii'); }
function nullFunc_iii(x) { abortFnPtrError(x, 'iii'); }
function nullFunc_iiid(x) { abortFnPtrError(x, 'iiid'); }
function nullFunc_iiidd(x) { abortFnPtrError(x, 'iiidd'); }
function nullFunc_iiiddd(x) { abortFnPtrError(x, 'iiiddd'); }
function nullFunc_iiidddd(x) { abortFnPtrError(x, 'iiidddd'); }
function nullFunc_iiiddddddi(x) { abortFnPtrError(x, 'iiiddddddi'); }
function nullFunc_iiiddi(x) { abortFnPtrError(x, 'iiiddi'); }
function nullFunc_iiidii(x) { abortFnPtrError(x, 'iiidii'); }
function nullFunc_iiii(x) { abortFnPtrError(x, 'iiii'); }
function nullFunc_iiiid(x) { abortFnPtrError(x, 'iiiid'); }
function nullFunc_iiiidd(x) { abortFnPtrError(x, 'iiiidd'); }
function nullFunc_iiiiddd(x) { abortFnPtrError(x, 'iiiiddd'); }
function nullFunc_iiiidddd(x) { abortFnPtrError(x, 'iiiidddd'); }
function nullFunc_iiiiddddddi(x) { abortFnPtrError(x, 'iiiiddddddi'); }
function nullFunc_iiiiddi(x) { abortFnPtrError(x, 'iiiiddi'); }
function nullFunc_iiiididi(x) { abortFnPtrError(x, 'iiiididi'); }
function nullFunc_iiiidii(x) { abortFnPtrError(x, 'iiiidii'); }
function nullFunc_iiiii(x) { abortFnPtrError(x, 'iiiii'); }
function nullFunc_iiiiid(x) { abortFnPtrError(x, 'iiiiid'); }
function nullFunc_iiiiidd(x) { abortFnPtrError(x, 'iiiiidd'); }
function nullFunc_iiiiidid(x) { abortFnPtrError(x, 'iiiiidid'); }
function nullFunc_iiiiididi(x) { abortFnPtrError(x, 'iiiiididi'); }
function nullFunc_iiiiii(x) { abortFnPtrError(x, 'iiiiii'); }
function nullFunc_iiiiiid(x) { abortFnPtrError(x, 'iiiiiid'); }
function nullFunc_iiiiiidid(x) { abortFnPtrError(x, 'iiiiiidid'); }
function nullFunc_iiiiiii(x) { abortFnPtrError(x, 'iiiiiii'); }
function nullFunc_iiiiiiid(x) { abortFnPtrError(x, 'iiiiiiid'); }
function nullFunc_iiiiiiii(x) { abortFnPtrError(x, 'iiiiiiii'); }
function nullFunc_iiiiiiiii(x) { abortFnPtrError(x, 'iiiiiiiii'); }
function nullFunc_iiiiiiiiiid(x) { abortFnPtrError(x, 'iiiiiiiiiid'); }
function nullFunc_iiiiiiiiiii(x) { abortFnPtrError(x, 'iiiiiiiiiii'); }
function nullFunc_iiiiiiiiiiid(x) { abortFnPtrError(x, 'iiiiiiiiiiid'); }
function nullFunc_iiiiiiiiiiii(x) { abortFnPtrError(x, 'iiiiiiiiiiii'); }
function nullFunc_vi(x) { abortFnPtrError(x, 'vi'); }
function nullFunc_viiii(x) { abortFnPtrError(x, 'viiii'); }
function nullFunc_viiiii(x) { abortFnPtrError(x, 'viiiii'); }
function nullFunc_viiiiii(x) { abortFnPtrError(x, 'viiiiii'); }

var asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

var asmLibraryArg = { "ClassHandle": ClassHandle, "ClassHandle_clone": ClassHandle_clone, "ClassHandle_delete": ClassHandle_delete, "ClassHandle_deleteLater": ClassHandle_deleteLater, "ClassHandle_isAliasOf": ClassHandle_isAliasOf, "ClassHandle_isDeleted": ClassHandle_isDeleted, "RegisteredClass": RegisteredClass, "RegisteredPointer": RegisteredPointer, "RegisteredPointer_deleteObject": RegisteredPointer_deleteObject, "RegisteredPointer_destructor": RegisteredPointer_destructor, "RegisteredPointer_fromWireType": RegisteredPointer_fromWireType, "RegisteredPointer_getPointee": RegisteredPointer_getPointee, "___buildEnvironment": ___buildEnvironment, "___clock_gettime": ___clock_gettime, "___gxx_personality_v0": ___gxx_personality_v0, "___lock": ___lock, "___setErrNo": ___setErrNo, "___syscall10": ___syscall10, "___syscall221": ___syscall221, "___syscall330": ___syscall330, "___syscall40": ___syscall40, "___syscall5": ___syscall5, "___syscall54": ___syscall54, "___syscall63": ___syscall63, "___unlock": ___unlock, "___wasi_fd_close": ___wasi_fd_close, "___wasi_fd_read": ___wasi_fd_read, "___wasi_fd_seek": ___wasi_fd_seek, "___wasi_fd_write": ___wasi_fd_write, "__embind_register_bool": __embind_register_bool, "__embind_register_class": __embind_register_class, "__embind_register_class_constructor": __embind_register_class_constructor, "__embind_register_class_function": __embind_register_class_function, "__embind_register_emval": __embind_register_emval, "__embind_register_float": __embind_register_float, "__embind_register_function": __embind_register_function, "__embind_register_integer": __embind_register_integer, "__embind_register_memory_view": __embind_register_memory_view, "__embind_register_std_string": __embind_register_std_string, "__embind_register_std_wstring": __embind_register_std_wstring, "__embind_register_void": __embind_register_void, "__emval_decref": __emval_decref, "__emval_register": __emval_register, "_abort": _abort, "_asctime_r": _asctime_r, "_clock_gettime": _clock_gettime, "_ctime": _ctime, "_ctime_r": _ctime_r, "_embind_repr": _embind_repr, "_emscripten_get_heap_size": _emscripten_get_heap_size, "_emscripten_get_now": _emscripten_get_now, "_emscripten_get_now_is_monotonic": _emscripten_get_now_is_monotonic, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_emscripten_resize_heap": _emscripten_resize_heap, "_fd_close": _fd_close, "_fd_read": _fd_read, "_fd_seek": _fd_seek, "_fd_write": _fd_write, "_localtime_r": _localtime_r, "_mktime": _mktime, "_puts": _puts, "_time": _time, "_tzset": _tzset, "abort": abort, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "abortStackOverflow": abortStackOverflow, "attachFinalizer": attachFinalizer, "constNoSmartPtrRawPointerToWireType": constNoSmartPtrRawPointerToWireType, "count_emval_handles": count_emval_handles, "craftInvokerFunction": craftInvokerFunction, "createNamedFunction": createNamedFunction, "demangle": demangle, "demangleAll": demangleAll, "detachFinalizer": detachFinalizer, "downcastPointer": downcastPointer, "embind__requireFunction": embind__requireFunction, "embind_init_charCodes": embind_init_charCodes, "emscripten_realloc_buffer": emscripten_realloc_buffer, "ensureOverloadTable": ensureOverloadTable, "exposePublicSymbol": exposePublicSymbol, "extendError": extendError, "floatReadValueFromPointer": floatReadValueFromPointer, "flushPendingDeletes": flushPendingDeletes, "genericPointerToWireType": genericPointerToWireType, "getBasestPointer": getBasestPointer, "getInheritedInstance": getInheritedInstance, "getInheritedInstanceCount": getInheritedInstanceCount, "getLiveInheritedInstances": getLiveInheritedInstances, "getShiftFromSize": getShiftFromSize, "getTempRet0": getTempRet0, "getTypeName": getTypeName, "get_first_emval": get_first_emval, "heap32VectorToArray": heap32VectorToArray, "init_ClassHandle": init_ClassHandle, "init_RegisteredPointer": init_RegisteredPointer, "init_embind": init_embind, "init_emval": init_emval, "integerReadValueFromPointer": integerReadValueFromPointer, "jsStackTrace": jsStackTrace, "makeClassHandle": makeClassHandle, "makeLegalFunctionName": makeLegalFunctionName, "new_": new_, "nonConstNoSmartPtrRawPointerToWireType": nonConstNoSmartPtrRawPointerToWireType, "nullFunc_i": nullFunc_i, "nullFunc_ii": nullFunc_ii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiid": nullFunc_iiid, "nullFunc_iiidd": nullFunc_iiidd, "nullFunc_iiiddd": nullFunc_iiiddd, "nullFunc_iiidddd": nullFunc_iiidddd, "nullFunc_iiiddddddi": nullFunc_iiiddddddi, "nullFunc_iiiddi": nullFunc_iiiddi, "nullFunc_iiidii": nullFunc_iiidii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_iiiid": nullFunc_iiiid, "nullFunc_iiiidd": nullFunc_iiiidd, "nullFunc_iiiiddd": nullFunc_iiiiddd, "nullFunc_iiiidddd": nullFunc_iiiidddd, "nullFunc_iiiiddddddi": nullFunc_iiiiddddddi, "nullFunc_iiiiddi": nullFunc_iiiiddi, "nullFunc_iiiididi": nullFunc_iiiididi, "nullFunc_iiiidii": nullFunc_iiiidii, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_iiiiid": nullFunc_iiiiid, "nullFunc_iiiiidd": nullFunc_iiiiidd, "nullFunc_iiiiidid": nullFunc_iiiiidid, "nullFunc_iiiiididi": nullFunc_iiiiididi, "nullFunc_iiiiii": nullFunc_iiiiii, "nullFunc_iiiiiid": nullFunc_iiiiiid, "nullFunc_iiiiiidid": nullFunc_iiiiiidid, "nullFunc_iiiiiii": nullFunc_iiiiiii, "nullFunc_iiiiiiid": nullFunc_iiiiiiid, "nullFunc_iiiiiiii": nullFunc_iiiiiiii, "nullFunc_iiiiiiiii": nullFunc_iiiiiiiii, "nullFunc_iiiiiiiiiid": nullFunc_iiiiiiiiiid, "nullFunc_iiiiiiiiiii": nullFunc_iiiiiiiiiii, "nullFunc_iiiiiiiiiiid": nullFunc_iiiiiiiiiiid, "nullFunc_iiiiiiiiiiii": nullFunc_iiiiiiiiiiii, "nullFunc_vi": nullFunc_vi, "nullFunc_viiii": nullFunc_viiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "readLatin1String": readLatin1String, "registerType": registerType, "releaseClassHandle": releaseClassHandle, "replacePublicSymbol": replacePublicSymbol, "runDestructor": runDestructor, "runDestructors": runDestructors, "setDelayFunction": setDelayFunction, "setTempRet0": setTempRet0, "shallowCopyInternalPointer": shallowCopyInternalPointer, "simpleReadValueFromPointer": simpleReadValueFromPointer, "stackTrace": stackTrace, "tempDoublePtr": tempDoublePtr, "throwBindingError": throwBindingError, "throwInstanceAlreadyDeleted": throwInstanceAlreadyDeleted, "throwInternalError": throwInternalError, "throwUnboundTypeError": throwUnboundTypeError, "upcastPointer": upcastPointer, "whenDependentTypesAreResolved": whenDependentTypesAreResolved };
// EMSCRIPTEN_START_ASM
var asm = (/** @suppress {uselessCode} */ function(global, env, buffer) {
'almost asm';

  var HEAP8 = new global.Int8Array(buffer),
  HEAP16 = new global.Int16Array(buffer),
  HEAP32 = new global.Int32Array(buffer),
  HEAPU8 = new global.Uint8Array(buffer),
  HEAPU16 = new global.Uint16Array(buffer),
  HEAPF32 = new global.Float32Array(buffer),
  HEAPF64 = new global.Float64Array(buffer),
  tempDoublePtr=env.tempDoublePtr|0,
  __THREW__ = 0,
  threwValue = 0,
  setjmpId = 0,
  tempInt = 0,
  tempBigInt = 0,
  tempBigIntS = 0,
  tempValue = 0,
  tempDouble = 0.0,
  nan = global.NaN,
  inf = global.Infinity,
  Math_abs=global.Math.abs,
  Math_sqrt=global.Math.sqrt,
  Math_pow=global.Math.pow,
  Math_log=global.Math.log,
  Math_imul=global.Math.imul,
  Math_clz32=global.Math.clz32,
  abort=env.abort,
  setTempRet0=env.setTempRet0,
  getTempRet0=env.getTempRet0,
  abortStackOverflow=env.abortStackOverflow,
  nullFunc_i=env.nullFunc_i,
  nullFunc_ii=env.nullFunc_ii,
  nullFunc_iii=env.nullFunc_iii,
  nullFunc_iiid=env.nullFunc_iiid,
  nullFunc_iiidd=env.nullFunc_iiidd,
  nullFunc_iiiddd=env.nullFunc_iiiddd,
  nullFunc_iiidddd=env.nullFunc_iiidddd,
  nullFunc_iiiddddddi=env.nullFunc_iiiddddddi,
  nullFunc_iiiddi=env.nullFunc_iiiddi,
  nullFunc_iiidii=env.nullFunc_iiidii,
  nullFunc_iiii=env.nullFunc_iiii,
  nullFunc_iiiid=env.nullFunc_iiiid,
  nullFunc_iiiidd=env.nullFunc_iiiidd,
  nullFunc_iiiiddd=env.nullFunc_iiiiddd,
  nullFunc_iiiidddd=env.nullFunc_iiiidddd,
  nullFunc_iiiiddddddi=env.nullFunc_iiiiddddddi,
  nullFunc_iiiiddi=env.nullFunc_iiiiddi,
  nullFunc_iiiididi=env.nullFunc_iiiididi,
  nullFunc_iiiidii=env.nullFunc_iiiidii,
  nullFunc_iiiii=env.nullFunc_iiiii,
  nullFunc_iiiiid=env.nullFunc_iiiiid,
  nullFunc_iiiiidd=env.nullFunc_iiiiidd,
  nullFunc_iiiiidid=env.nullFunc_iiiiidid,
  nullFunc_iiiiididi=env.nullFunc_iiiiididi,
  nullFunc_iiiiii=env.nullFunc_iiiiii,
  nullFunc_iiiiiid=env.nullFunc_iiiiiid,
  nullFunc_iiiiiidid=env.nullFunc_iiiiiidid,
  nullFunc_iiiiiii=env.nullFunc_iiiiiii,
  nullFunc_iiiiiiid=env.nullFunc_iiiiiiid,
  nullFunc_iiiiiiii=env.nullFunc_iiiiiiii,
  nullFunc_iiiiiiiii=env.nullFunc_iiiiiiiii,
  nullFunc_iiiiiiiiiid=env.nullFunc_iiiiiiiiiid,
  nullFunc_iiiiiiiiiii=env.nullFunc_iiiiiiiiiii,
  nullFunc_iiiiiiiiiiid=env.nullFunc_iiiiiiiiiiid,
  nullFunc_iiiiiiiiiiii=env.nullFunc_iiiiiiiiiiii,
  nullFunc_vi=env.nullFunc_vi,
  nullFunc_viiii=env.nullFunc_viiii,
  nullFunc_viiiii=env.nullFunc_viiiii,
  nullFunc_viiiiii=env.nullFunc_viiiiii,
  ClassHandle=env.ClassHandle,
  ClassHandle_clone=env.ClassHandle_clone,
  ClassHandle_delete=env.ClassHandle_delete,
  ClassHandle_deleteLater=env.ClassHandle_deleteLater,
  ClassHandle_isAliasOf=env.ClassHandle_isAliasOf,
  ClassHandle_isDeleted=env.ClassHandle_isDeleted,
  RegisteredClass=env.RegisteredClass,
  RegisteredPointer=env.RegisteredPointer,
  RegisteredPointer_deleteObject=env.RegisteredPointer_deleteObject,
  RegisteredPointer_destructor=env.RegisteredPointer_destructor,
  RegisteredPointer_fromWireType=env.RegisteredPointer_fromWireType,
  RegisteredPointer_getPointee=env.RegisteredPointer_getPointee,
  ___buildEnvironment=env.___buildEnvironment,
  ___clock_gettime=env.___clock_gettime,
  ___gxx_personality_v0=env.___gxx_personality_v0,
  ___lock=env.___lock,
  ___setErrNo=env.___setErrNo,
  ___syscall10=env.___syscall10,
  ___syscall221=env.___syscall221,
  ___syscall330=env.___syscall330,
  ___syscall40=env.___syscall40,
  ___syscall5=env.___syscall5,
  ___syscall54=env.___syscall54,
  ___syscall63=env.___syscall63,
  ___unlock=env.___unlock,
  ___wasi_fd_close=env.___wasi_fd_close,
  ___wasi_fd_read=env.___wasi_fd_read,
  ___wasi_fd_seek=env.___wasi_fd_seek,
  ___wasi_fd_write=env.___wasi_fd_write,
  __embind_register_bool=env.__embind_register_bool,
  __embind_register_class=env.__embind_register_class,
  __embind_register_class_constructor=env.__embind_register_class_constructor,
  __embind_register_class_function=env.__embind_register_class_function,
  __embind_register_emval=env.__embind_register_emval,
  __embind_register_float=env.__embind_register_float,
  __embind_register_function=env.__embind_register_function,
  __embind_register_integer=env.__embind_register_integer,
  __embind_register_memory_view=env.__embind_register_memory_view,
  __embind_register_std_string=env.__embind_register_std_string,
  __embind_register_std_wstring=env.__embind_register_std_wstring,
  __embind_register_void=env.__embind_register_void,
  __emval_decref=env.__emval_decref,
  __emval_register=env.__emval_register,
  _abort=env._abort,
  _asctime_r=env._asctime_r,
  _clock_gettime=env._clock_gettime,
  _ctime=env._ctime,
  _ctime_r=env._ctime_r,
  _embind_repr=env._embind_repr,
  _emscripten_get_heap_size=env._emscripten_get_heap_size,
  _emscripten_get_now=env._emscripten_get_now,
  _emscripten_get_now_is_monotonic=env._emscripten_get_now_is_monotonic,
  _emscripten_memcpy_big=env._emscripten_memcpy_big,
  _emscripten_resize_heap=env._emscripten_resize_heap,
  _fd_close=env._fd_close,
  _fd_read=env._fd_read,
  _fd_seek=env._fd_seek,
  _fd_write=env._fd_write,
  _localtime_r=env._localtime_r,
  _mktime=env._mktime,
  _puts=env._puts,
  _time=env._time,
  _tzset=env._tzset,
  abortOnCannotGrowMemory=env.abortOnCannotGrowMemory,
  attachFinalizer=env.attachFinalizer,
  constNoSmartPtrRawPointerToWireType=env.constNoSmartPtrRawPointerToWireType,
  count_emval_handles=env.count_emval_handles,
  craftInvokerFunction=env.craftInvokerFunction,
  createNamedFunction=env.createNamedFunction,
  demangle=env.demangle,
  demangleAll=env.demangleAll,
  detachFinalizer=env.detachFinalizer,
  downcastPointer=env.downcastPointer,
  embind__requireFunction=env.embind__requireFunction,
  embind_init_charCodes=env.embind_init_charCodes,
  emscripten_realloc_buffer=env.emscripten_realloc_buffer,
  ensureOverloadTable=env.ensureOverloadTable,
  exposePublicSymbol=env.exposePublicSymbol,
  extendError=env.extendError,
  floatReadValueFromPointer=env.floatReadValueFromPointer,
  flushPendingDeletes=env.flushPendingDeletes,
  genericPointerToWireType=env.genericPointerToWireType,
  getBasestPointer=env.getBasestPointer,
  getInheritedInstance=env.getInheritedInstance,
  getInheritedInstanceCount=env.getInheritedInstanceCount,
  getLiveInheritedInstances=env.getLiveInheritedInstances,
  getShiftFromSize=env.getShiftFromSize,
  getTypeName=env.getTypeName,
  get_first_emval=env.get_first_emval,
  heap32VectorToArray=env.heap32VectorToArray,
  init_ClassHandle=env.init_ClassHandle,
  init_RegisteredPointer=env.init_RegisteredPointer,
  init_embind=env.init_embind,
  init_emval=env.init_emval,
  integerReadValueFromPointer=env.integerReadValueFromPointer,
  jsStackTrace=env.jsStackTrace,
  makeClassHandle=env.makeClassHandle,
  makeLegalFunctionName=env.makeLegalFunctionName,
  new_=env.new_,
  nonConstNoSmartPtrRawPointerToWireType=env.nonConstNoSmartPtrRawPointerToWireType,
  readLatin1String=env.readLatin1String,
  registerType=env.registerType,
  releaseClassHandle=env.releaseClassHandle,
  replacePublicSymbol=env.replacePublicSymbol,
  runDestructor=env.runDestructor,
  runDestructors=env.runDestructors,
  setDelayFunction=env.setDelayFunction,
  shallowCopyInternalPointer=env.shallowCopyInternalPointer,
  simpleReadValueFromPointer=env.simpleReadValueFromPointer,
  stackTrace=env.stackTrace,
  throwBindingError=env.throwBindingError,
  throwInstanceAlreadyDeleted=env.throwInstanceAlreadyDeleted,
  throwInternalError=env.throwInternalError,
  throwUnboundTypeError=env.throwUnboundTypeError,
  upcastPointer=env.upcastPointer,
  whenDependentTypesAreResolved=env.whenDependentTypesAreResolved,
  STACKTOP = 21424,
  STACK_MAX = 5264304,
  tempFloat = 0.0;

function _emscripten_replace_memory(newBuffer) {
  HEAP8 = new Int8Array(newBuffer);
  HEAPU8 = new Uint8Array(newBuffer);
  HEAP16 = new Int16Array(newBuffer);
  HEAPU16 = new Uint16Array(newBuffer);
  HEAP32 = new Int32Array(newBuffer);
  HEAPF32 = new Float32Array(newBuffer);
  HEAPF64 = new Float64Array(newBuffer);

  buffer = newBuffer;
  return true;
}

// EMSCRIPTEN_START_FUNCS
  function globalCtors() {
    __GLOBAL__sub_I_epanet_wrapper_cpp();
    ___emscripten_environ_constructor();
    __GLOBAL__sub_I_bind_cpp();
  }
function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
    if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(size|0);

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function _EN_createproject($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_calloc(1,6624)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = ((($1)) + 5836|0);
 _getTmpName($3);
 $4 = ((($1)) + 6096|0);
 _getTmpName($4);
 $5 = ((($1)) + 6356|0);
 _getTmpName($5);
 HEAP32[$0>>2] = $1;
 return;
}
function _EN_deleteproject($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + 5072|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if (!($4)) {
  _EN_close($0);
 }
 $5 = ((($0)) + 5836|0);
 _remove($5);
 $6 = ((($0)) + 6096|0);
 _remove($6);
 $7 = ((($0)) + 6356|0);
 _remove($7);
 _free($0);
 return;
}
function _EN_close($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 5072|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if (!($3)) {
  _writetime($0,4525);
 }
 _freedata($0);
 _closeoutfile($0);
 $4 = ((($0)) + 92|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  _fclose($5);
  HEAP32[$4>>2] = 0;
 }
 $7 = ((($0)) + 1200|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 $10 = ($8|0)==(2712|0);
 $or$cond = $9 | $10;
 if (!($or$cond)) {
  _fclose($8);
  HEAP32[$7>>2] = 0;
 }
 $11 = ((($0)) + 4220|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0|0);
 if (!($13)) {
  _fclose($12);
  HEAP32[$11>>2] = 0;
 }
 HEAP32[$1>>2] = 0;
 $14 = ((($0)) + 4524|0);
 HEAP32[$14>>2] = 0;
 $15 = ((($0)) + 4192|0);
 HEAP32[$15>>2] = 0;
 $16 = ((($0)) + 4604|0);
 HEAP32[$16>>2] = 0;
 $17 = ((($0)) + 4196|0);
 HEAP32[$17>>2] = 0;
 return;
}
function _EN_runproject($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $5 = (_EN_open($0,$1,$2,$3)|0);
 $6 = ((($0)) + 6616|0);
 HEAP32[$6>>2] = $4;
 $7 = ((($0)) + 4188|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0);
 if ($9) {
  $$0 = $5;
  label = 4;
 } else {
  $10 = ($5|0)>(100);
  if ($10) {
   $20 = $5;
  } else {
   $11 = (_EN_solveH($0)|0);
   $$0 = $11;
   label = 4;
  }
 }
 if ((label|0) == 4) {
  $12 = ($$0|0)>(100);
  if ($12) {
   $20 = $$0;
  } else {
   $13 = (_EN_solveQ($0)|0);
   $14 = ($13|0)>(100);
   if ($14) {
    $20 = $13;
   } else {
    $15 = (_EN_report($0)|0);
    $20 = $15;
   }
  }
 }
 _EN_close($0);
 $16 = ((($0)) + 5076|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)!=(0);
 $19 = ($20|0)<($17|0);
 $or$cond = $18 & $19;
 $$1 = $or$cond ? $17 : $20;
 return ($$1|0);
}
function _EN_open($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$01 = 0, $$013 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 5072|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 4524|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($0)) + 4604|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($0)) + 4192|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($0)) + 4196|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($0)) + 5076|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($0)) + 1224|0);
 HEAP32[$10>>2] = 1;
 $11 = ((($0)) + 1212|0);
 HEAP32[$11>>2] = 1;
 _initpointers($0);
 $12 = (_openfiles($0,$1,$2,$3)|0);
 $13 = ($12|0)>(0);
 if ($13) {
  _errmsg($0,$12);
  $$0 = $12;
  return ($$0|0);
 }
 $14 = ((($0)) + 6616|0);
 $15 = HEAP32[$14>>2]|0;
 _writewin($15,4456);
 $16 = (_netsize($0)|0);
 $17 = ($16|0)>(100);
 if ($17) {
  $28 = $16;
 } else {
  $18 = (_allocdata($0)|0);
  $19 = ($18|0)>(100);
  if ($19) {
   $28 = $18;
  } else {
   $20 = (_getdata($0)|0);
   $28 = $20;
  }
 }
 $21 = ((($0)) + 92|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)==(0|0);
 if (!($23)) {
  _fclose($22);
  HEAP32[$21>>2] = 0;
 }
 $24 = ((($0)) + 4188|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)==(0);
 if ($26) {
  $27 = ($28|0)>(100);
  if ($27) {
   $$013 = $28;
  } else {
   $29 = (_openhydfile($0)|0);
   $$01 = $29;
   label = 11;
  }
 } else {
  $$01 = $28;
  label = 11;
 }
 if ((label|0) == 11) {
  $30 = ($$01|0)==(0);
  if ($30) {
   $31 = ((($0)) + 1220|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($32|0)==(0);
   if (!($33)) {
    _writesummary($0);
   }
   _writetime($0,4507);
   HEAP32[$4>>2] = 1;
   $$0 = 0;
   return ($$0|0);
  } else {
   $$013 = $$01;
  }
 }
 _errmsg($0,$$013);
 $$0 = $$013;
 return ($$0|0);
}
function _EN_solveH($0) {
 $0 = $0|0;
 var $$0 = 0, $$2 = 0, $$pr$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = sp + 16|0;
 $2 = sp + 12|0;
 $3 = (_EN_openH($0)|0);
 $4 = ($3|0)==(0);
 L1: do {
  if ($4) {
   $5 = (_EN_initH($0,1)|0);
   $6 = ($5|0)==(0);
   if ($6) {
    $7 = ((($0)) + 5080|0);
    $8 = ((($0)) + 1256|0);
    $9 = ((($0)) + 1172|0);
    $10 = ((($0)) + 6616|0);
    $$0 = 0;
    while(1) {
     $11 = HEAP32[$9>>2]|0;
     $12 = (_clocktime($8,$11)|0);
     HEAP32[$vararg_buffer>>2] = $12;
     _sprintf($7,4543,$vararg_buffer);
     HEAP32[$vararg_buffer1>>2] = $8;
     _sprintf($7,4549,$vararg_buffer1);
     $13 = HEAP32[$10>>2]|0;
     _writewin($13,$7);
     HEAP32[$2>>2] = 0;
     $14 = ($$0|0)>(100);
     if ($14) {
      $$2 = $$0;
      break L1;
     }
     $15 = (_EN_runH($0,$1)|0);
     $16 = ($15|0)>(100);
     if ($16) {
      $$2 = $15;
      break L1;
     }
     $17 = (_EN_nextH($0,$2)|0);
     $$pr$pre = HEAP32[$2>>2]|0;
     $18 = ($$pr$pre|0)>(0);
     if ($18) {
      $$0 = $17;
     } else {
      $$2 = $17;
      break;
     }
    }
   } else {
    $$2 = $5;
   }
  } else {
   $$2 = $3;
  }
 } while(0);
 (_EN_closeH($0)|0);
 $19 = ((($0)) + 5076|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($$2|0)<($20|0);
 $spec$select = $21 ? $20 : $$2;
 STACKTOP = sp;return ($spec$select|0);
}
function _EN_solveQ($0) {
 $0 = $0|0;
 var $$0 = 0, $$2 = 0, $$pr$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = sp + 16|0;
 $2 = sp + 12|0;
 $3 = (_EN_openQ($0)|0);
 $4 = ($3|0)==(0);
 L1: do {
  if ($4) {
   $5 = (_EN_initQ($0,1)|0);
   $6 = ((($0)) + 4600|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)==(0);
   if ($8) {
    $9 = ((($0)) + 6616|0);
    $10 = HEAP32[$9>>2]|0;
    _writewin($10,4595);
   }
   $11 = ($5|0)==(0);
   if ($11) {
    $12 = ((($0)) + 5080|0);
    $13 = ((($0)) + 1256|0);
    $14 = ((($0)) + 1172|0);
    $15 = ((($0)) + 6616|0);
    $$0 = 0;
    while(1) {
     $16 = HEAP32[$14>>2]|0;
     $17 = (_clocktime($13,$16)|0);
     HEAP32[$vararg_buffer>>2] = $17;
     _sprintf($12,4543,$vararg_buffer);
     $18 = HEAP32[$6>>2]|0;
     $19 = ($18|0)==(0);
     if (!($19)) {
      HEAP32[$vararg_buffer1>>2] = $13;
      _sprintf($12,4646,$vararg_buffer1);
      $20 = HEAP32[$15>>2]|0;
      _writewin($20,$12);
     }
     HEAP32[$2>>2] = 0;
     $21 = ($$0|0)>(100);
     if ($21) {
      $$2 = $$0;
      break L1;
     }
     $22 = (_EN_runQ($0,$1)|0);
     $23 = ($22|0)>(100);
     if ($23) {
      $$2 = $22;
      break L1;
     }
     $24 = (_EN_nextQ($0,$2)|0);
     $$pr$pre = HEAP32[$2>>2]|0;
     $25 = ($$pr$pre|0)>(0);
     if ($25) {
      $$0 = $24;
     } else {
      $$2 = $24;
      break;
     }
    }
   } else {
    $$2 = $5;
   }
  } else {
   $$2 = $3;
  }
 } while(0);
 (_EN_closeQ($0)|0);
 STACKTOP = sp;return ($$2|0);
}
function _EN_report($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4196|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  $$0 = 106;
  return ($$0|0);
 }
 $4 = ((($0)) + 6616|0);
 $5 = HEAP32[$4>>2]|0;
 _writewin($5,4692);
 $6 = (_writereport($0)|0);
 $7 = ($6|0)==(0);
 if ($7) {
  $$0 = 0;
  return ($$0|0);
 }
 _errmsg($0,$6);
 $$0 = $6;
 return ($$0|0);
}
function _EN_init($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($0)) + 5072|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($0)) + 4524|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($0)) + 4604|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($0)) + 4192|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($0)) + 4196|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($0)) + 5076|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($0)) + 1224|0);
 HEAP32[$11>>2] = 1;
 $12 = ((($0)) + 1212|0);
 HEAP32[$12>>2] = 1;
 $13 = ($3>>>0)>(9);
 $14 = ($4>>>0)>(2);
 $15 = $14 | $13;
 if ($15) {
  $$0 = 251;
  return ($$0|0);
 }
 $16 = (_openfiles($0,21208,$1,$2)|0);
 _initpointers($0);
 $17 = ($16|0)>(100);
 if ($17) {
  $$0 = $16;
  return ($$0|0);
 }
 $18 = (_netsize($0)|0);
 $19 = ($18|0)>(100);
 if ($19) {
  $$0 = $18;
  return ($$0|0);
 }
 $20 = (_allocdata($0)|0);
 $21 = ($20|0)==(0);
 if (!($21)) {
  $$0 = $20;
  return ($$0|0);
 }
 _setdefaults($0);
 $22 = ((($0)) + 1120|0);
 HEAP32[$22>>2] = $3;
 $23 = ((($0)) + 4500|0);
 HEAP32[$23>>2] = $4;
 _adjustdata($0);
 $24 = ((($0)) + 1200|0);
 _initreport($24);
 _initunits($0);
 (_inittanks($0)|0);
 _convertunits($0);
 $25 = ((($0)) + 1096|0);
 HEAP32[$25>>2] = 0;
 HEAP32[$5>>2] = 1;
 $$0 = 0;
 return ($$0|0);
}
function _EN_gettitle($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 5072|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  $$0 = 102;
  return ($$0|0);
 }
 $7 = ((($0)) + 5336|0);
 (_strncpy($1,$7,79)|0);
 $8 = ((($0)) + 5416|0);
 (_strncpy($2,$8,79)|0);
 $9 = ((($0)) + 5496|0);
 (_strncpy($3,$9,79)|0);
 $$0 = 0;
 return ($$0|0);
}
function _EN_settitle($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 5072|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  $$0 = 102;
  return ($$0|0);
 }
 $7 = ((($0)) + 5336|0);
 (_strncpy($7,$1,79)|0);
 $8 = ((($0)) + 5416|0);
 (_strncpy($8,$2,79)|0);
 $9 = ((($0)) + 5496|0);
 (_strncpy($9,$3,79)|0);
 $$0 = 0;
 return ($$0|0);
}
function _EN_getcount($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 5072|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 L1: do {
  if ($5) {
   $$0 = 102;
  } else {
   switch ($1|0) {
   case 0:  {
    $6 = HEAP32[$0>>2]|0;
    HEAP32[$2>>2] = $6;
    $$0 = 0;
    break L1;
    break;
   }
   case 1:  {
    $7 = ((($0)) + 4|0);
    $8 = HEAP32[$7>>2]|0;
    HEAP32[$2>>2] = $8;
    $$0 = 0;
    break L1;
    break;
   }
   case 2:  {
    $9 = ((($0)) + 12|0);
    $10 = HEAP32[$9>>2]|0;
    HEAP32[$2>>2] = $10;
    $$0 = 0;
    break L1;
    break;
   }
   case 3:  {
    $11 = ((($0)) + 36|0);
    $12 = HEAP32[$11>>2]|0;
    HEAP32[$2>>2] = $12;
    $$0 = 0;
    break L1;
    break;
   }
   case 4:  {
    $13 = ((($0)) + 40|0);
    $14 = HEAP32[$13>>2]|0;
    HEAP32[$2>>2] = $14;
    $$0 = 0;
    break L1;
    break;
   }
   case 5:  {
    $15 = ((($0)) + 28|0);
    $16 = HEAP32[$15>>2]|0;
    HEAP32[$2>>2] = $16;
    $$0 = 0;
    break L1;
    break;
   }
   case 6:  {
    $17 = ((($0)) + 32|0);
    $18 = HEAP32[$17>>2]|0;
    HEAP32[$2>>2] = $18;
    $$0 = 0;
    break L1;
    break;
   }
   default: {
    $$0 = 251;
    break L1;
   }
   }
  }
 } while(0);
 return ($$0|0);
}
function _EN_saveinpfile($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 5072|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $$0 = 102;
  return ($$0|0);
 }
 $5 = (_saveinpfile($0,$1)|0);
 $$0 = $5;
 return ($$0|0);
}
function _EN_openH($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4524|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($0)) + 4192|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 5072|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  $$0 = 102;
  return ($$0|0);
 }
 $6 = ((($0)) + 4188|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0);
 if ($8) {
  $$0 = 107;
  return ($$0|0);
 }
 $9 = (_openhyd($0)|0);
 $10 = ($9|0)==(0);
 if ($10) {
  HEAP32[$1>>2] = 1;
  $$0 = 0;
  return ($$0|0);
 } else {
  _errmsg($0,$9);
  $$0 = $9;
  return ($$0|0);
 }
 return (0)|0;
}
function _EN_initH($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4192|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 5076|0);
 HEAP32[$3>>2] = 0;
 $4 = (($1|0) / 10)&-1;
 $5 = ((($0)) + 4524|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 if ($7) {
  $$0 = 103;
  return ($$0|0);
 }
 $8 = Math_imul($4, -10)|0;
 $9 = (($8) + ($1))|0;
 $10 = ((($0)) + 4200|0);
 HEAP32[$10>>2] = 0;
 $11 = ($9|0)>(0);
 do {
  if ($11) {
   $12 = (_openhydfile($0)|0);
   $13 = ($12|0)==(0);
   if ($13) {
    HEAP32[$10>>2] = 1;
    break;
   }
   _errmsg($0,$12);
   $$0 = $12;
   return ($$0|0);
  }
 } while(0);
 _inithyd($0,$4);
 $14 = ((($0)) + 1228|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)>(0);
 if (!($16)) {
  $$0 = 0;
  return ($$0|0);
 }
 _writeheader($0,0,0);
 $$0 = 0;
 return ($$0|0);
}
function _EN_runH($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$1>>2] = 0;
 $2 = ((($0)) + 4524|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $$0 = 103;
 } else {
  $5 = (_runhyd($0,$1)|0);
  $6 = ($5|0)==(0);
  if ($6) {
   $$0 = 0;
  } else {
   _errmsg($0,$5);
   $$0 = $5;
  }
 }
 return ($$0|0);
}
function _EN_nextH($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$1>>2] = 0;
 $2 = ((($0)) + 4524|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $$0 = 103;
  } else {
   $5 = (_nexthyd($0,$1)|0);
   $6 = ($5|0)==(0);
   if (!($6)) {
    _errmsg($0,$5);
    $$0 = $5;
    break;
   }
   $7 = ((($0)) + 4200|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)==(0);
   if ($9) {
    $$0 = 0;
   } else {
    $10 = HEAP32[$1>>2]|0;
    $11 = ($10|0)==(0);
    if ($11) {
     $12 = ((($0)) + 4192|0);
     HEAP32[$12>>2] = 1;
     $$0 = 0;
    } else {
     $$0 = 0;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function _EN_closeH($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 5072|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  $$0 = 102;
  return ($$0|0);
 }
 $4 = ((($0)) + 4524|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if (!($6)) {
  _closehyd($0);
 }
 HEAP32[$4>>2] = 0;
 $$0 = 0;
 return ($$0|0);
}
function _EN_saveH($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4192|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  $$0 = 104;
  return ($$0|0);
 }
 $4 = ((($0)) + 4600|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$4>>2] = 0;
 $6 = (_EN_solveQ($0)|0);
 HEAP32[$4>>2] = $5;
 $7 = ($6|0)==(0);
 if ($7) {
  $$0 = 0;
  return ($$0|0);
 }
 _errmsg($0,$6);
 $$0 = $6;
 return ($$0|0);
}
function _EN_savehydfile($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4220|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 104;
  return ($$0|0);
 }
 $5 = ((($0)) + 4192|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 if ($7) {
  $$0 = 104;
  return ($$0|0);
 }
 $8 = (_fopen($1,8707)|0);
 $9 = ($8|0)==(0|0);
 if ($9) {
  $$0 = 305;
  return ($$0|0);
 }
 $10 = HEAP32[$2>>2]|0;
 _fseek($10,0,0);
 while(1) {
  $11 = (_fgetc($10)|0);
  $12 = ($11|0)==(-1);
  if ($12) {
   break;
  }
  _fputc($11,$8);
 }
 _fclose($8);
 $$0 = 0;
 return ($$0|0);
}
function _EN_usehydfile($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 5072|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $$0 = 102;
  return ($$0|0);
 }
 $5 = ((($0)) + 4524|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 if (!($7)) {
  $$0 = 108;
  return ($$0|0);
 }
 $8 = ((($0)) + 3664|0);
 (_strncpy($8,$1,259)|0);
 $9 = ((($0)) + 4188|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($0)) + 4192|0);
 HEAP32[$10>>2] = 1;
 $11 = (_openhydfile($0)|0);
 $12 = ($11|0)==(0);
 if ($12) {
  $$0 = 0;
  return ($$0|0);
 }
 (_strcpy($8,21208)|0);
 HEAP32[$9>>2] = 2;
 HEAP32[$10>>2] = 0;
 $$0 = $11;
 return ($$0|0);
}
function _EN_openQ($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4604|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($0)) + 4196|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 5072|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  $$0 = 102;
  return ($$0|0);
 }
 $6 = ((($0)) + 4524|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0);
 if ($8) {
  $9 = ((($0)) + 4192|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0);
  if ($11) {
   $$0 = 104;
   return ($$0|0);
  }
 }
 $12 = (_openqual($0)|0);
 $13 = ($12|0)==(0);
 if ($13) {
  HEAP32[$1>>2] = 1;
  $$0 = 0;
  return ($$0|0);
 } else {
  _errmsg($0,$12);
  $$0 = $12;
  return ($$0|0);
 }
 return (0)|0;
}
function _EN_initQ($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4604|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $$0 = 105;
  return ($$0|0);
 }
 _initqual($0);
 $5 = ((($0)) + 4196|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($0)) + 4200|0);
 HEAP32[$6>>2] = 0;
 $7 = ($1|0)==(0);
 if ($7) {
  $$0 = 0;
  return ($$0|0);
 }
 $8 = (_openoutfile($0)|0);
 $9 = ($8|0)==(0);
 if (!($9)) {
  $$0 = $8;
  return ($$0|0);
 }
 HEAP32[$6>>2] = 1;
 $$0 = 0;
 return ($$0|0);
}
function _EN_runQ($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$1>>2] = 0;
 $2 = ((($0)) + 4604|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $$0 = 105;
 } else {
  $5 = (_runqual($0,$1)|0);
  $6 = ($5|0)==(0);
  if ($6) {
   $$0 = 0;
  } else {
   _errmsg($0,$5);
   $$0 = $5;
  }
 }
 return ($$0|0);
}
function _EN_nextQ($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$1>>2] = 0;
 $2 = ((($0)) + 4604|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $$0 = 105;
  } else {
   $5 = (_nextqual($0,$1)|0);
   $6 = ($5|0)==(0);
   if (!($6)) {
    _errmsg($0,$5);
    $$0 = $5;
    break;
   }
   $7 = ((($0)) + 4200|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)==(0);
   if ($9) {
    $$0 = 0;
   } else {
    $10 = HEAP32[$1>>2]|0;
    $11 = ($10|0)==(0);
    if ($11) {
     $12 = ((($0)) + 4196|0);
     HEAP32[$12>>2] = 1;
     $$0 = 0;
    } else {
     $$0 = 0;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function _EN_closeQ($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 5072|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  $$0 = 102;
  return ($$0|0);
 }
 _closequal($0);
 $4 = ((($0)) + 4604|0);
 HEAP32[$4>>2] = 0;
 _closeoutfile($0);
 $$0 = 0;
 return ($$0|0);
}
function _EN_stepQ($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$1>>2] = 0;
 $2 = ((($0)) + 4604|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $$0 = 105;
  } else {
   $5 = (_stepqual($0,$1)|0);
   $6 = ($5|0)==(0);
   if (!($6)) {
    _errmsg($0,$5);
    $$0 = $5;
    break;
   }
   $7 = ((($0)) + 4200|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)==(0);
   if ($9) {
    $$0 = 0;
   } else {
    $10 = HEAP32[$1>>2]|0;
    $11 = ($10|0)==(0);
    if ($11) {
     $12 = ((($0)) + 4196|0);
     HEAP32[$12>>2] = 1;
     $$0 = 0;
    } else {
     $$0 = 0;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function _EN_writeline($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 5072|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $$0 = 102;
  return ($$0|0);
 }
 _writeline($0,$1);
 $$0 = 0;
 return ($$0|0);
}
function _EN_copyreport($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_copyreport($0,$1)|0);
 return ($2|0);
}
function _EN_clearreport($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_clearreport($0)|0);
 return ($1|0);
}
function _EN_resetreport($0) {
 $0 = $0|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 5072|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  $$0 = 102;
  return ($$0|0);
 }
 $4 = ((($0)) + 1200|0);
 _initreport($4);
 $5 = ((($0)) + 44|0);
 $$01 = 1;
 while(1) {
  $6 = HEAP32[$0>>2]|0;
  $7 = ($$01|0)>($6|0);
  if ($7) {
   break;
  }
  $8 = HEAP32[$5>>2]|0;
  $9 = (((($8) + (($$01*96)|0)|0)) + 80|0);
  HEAP32[$9>>2] = 0;
  $10 = (($$01) + 1)|0;
  $$01 = $10;
 }
 $11 = ((($0)) + 12|0);
 $12 = ((($0)) + 48|0);
 $$1 = 1;
 while(1) {
  $13 = HEAP32[$11>>2]|0;
  $14 = ($$1|0)>($13|0);
  if ($14) {
   $$0 = 0;
   break;
  }
  $15 = HEAP32[$12>>2]|0;
  $16 = (((($15) + ($$1<<7)|0)) + 116|0);
  HEAP32[$16>>2] = 0;
  $17 = (($$1) + 1)|0;
  $$1 = $17;
 }
 return ($$0|0);
}
function _EN_setstatusreport($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)<(3);
 if (!($2)) {
  $$0 = 251;
  return ($$0|0);
 }
 $sext = $1 << 24;
 $3 = $sext >> 24;
 $4 = ((($0)) + 1228|0);
 HEAP32[$4>>2] = $3;
 $$0 = 0;
 return ($$0|0);
}
function _EN_getversion($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = 20200;
 return 0;
}
function _EN_geterror($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$off = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $spec$select = 0, $strlenfirst = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 528|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(528|0);
 $vararg_buffer1 = sp + 520|0;
 $vararg_buffer = sp + 512|0;
 $3 = sp + 256|0;
 $4 = sp;
 _memset(($3|0),0,256)|0;
 _memset(($4|0),0,256)|0;
 switch ($0|0) {
 case 1:  {
  (_strncpy($1,4743,$2)|0);
  break;
 }
 case 2:  {
  (_strncpy($1,4785,$2)|0);
  break;
 }
 case 3:  {
  (_strncpy($1,4832,$2)|0);
  break;
 }
 case 4:  {
  (_strncpy($1,4862,$2)|0);
  break;
 }
 case 5:  {
  (_strncpy($1,4913,$2)|0);
  break;
 }
 case 6:  {
  (_strncpy($1,4957,$2)|0);
  break;
 }
 default: {
  HEAP32[$vararg_buffer>>2] = $0;
  _sprintf($3,4997,$vararg_buffer);
  $5 = ($0|0)>(201);
  if ($5) {
   $6 = ($0|0)<(223);
   $$off = (($0) + -240)|0;
   $7 = ($$off>>>0)<(22);
   $or$cond = $6 | $7;
   if ($or$cond) {
    (_strcat($3,5008)|0);
   }
  }
  $8 = (_geterrmsg($0,$4)|0);
  HEAP32[$vararg_buffer1>>2] = $3;
  $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr4>>2] = $8;
  _snprintf($1,$2,5032,$vararg_buffer1);
 }
 }
 $strlenfirst = HEAP8[$1>>0]|0;
 $9 = ($strlenfirst<<24>>24)==(0);
 $spec$select = $9 ? 251 : 0;
 STACKTOP = sp;return ($spec$select|0);
}
function _EN_getstatistic($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0.0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0;
 var $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($1|0) {
 case 0:  {
  $3 = ((($0)) + 4504|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = (+($4|0));
  HEAPF64[$2>>3] = $5;
  $$0 = 0;
  return ($$0|0);
  break;
 }
 case 1:  {
  $6 = ((($0)) + 4440|0);
  $7 = +HEAPF64[$6>>3];
  HEAPF64[$2>>3] = $7;
  $$0 = 0;
  return ($$0|0);
  break;
 }
 case 2:  {
  $8 = ((($0)) + 4448|0);
  $9 = +HEAPF64[$8>>3];
  $10 = ((($0)) + 4920|0);
  $11 = +HEAPF64[$10>>3];
  $12 = $9 * $11;
  HEAPF64[$2>>3] = $12;
  $$0 = 0;
  return ($$0|0);
  break;
 }
 case 3:  {
  $13 = ((($0)) + 4456|0);
  $14 = +HEAPF64[$13>>3];
  $15 = ((($0)) + 4960|0);
  $16 = +HEAPF64[$15>>3];
  $17 = $14 * $16;
  HEAPF64[$2>>3] = $17;
  $$0 = 0;
  return ($$0|0);
  break;
 }
 case 5:  {
  $18 = ((($0)) + 4532|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (+($19|0));
  HEAPF64[$2>>3] = $20;
  $$0 = 0;
  return ($$0|0);
  break;
 }
 case 6:  {
  $21 = ((($0)) + 4464|0);
  $22 = +HEAPF64[$21>>3];
  HEAPF64[$2>>3] = $22;
  $$0 = 0;
  return ($$0|0);
  break;
 }
 case 4:  {
  $23 = ((($0)) + 4896|0);
  $24 = +HEAPF64[$23>>3];
  HEAPF64[$2>>3] = $24;
  $$0 = 0;
  return ($$0|0);
  break;
 }
 default: {
  HEAPF64[$2>>3] = 0.0;
  $$0 = 251;
  return ($$0|0);
 }
 }
 return (0)|0;
}
function _EN_getresultindex($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAP32[$3>>2] = 0;
 $4 = ((($0)) + 5072|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 L1: do {
  if ($6) {
   $$0 = 102;
  } else {
   switch ($1|0) {
   case 0:  {
    $7 = ($2|0)<(1);
    if ($7) {
     $$0 = 203;
     break L1;
    }
    $8 = HEAP32[$0>>2]|0;
    $9 = ($8|0)<($2|0);
    if ($9) {
     $$0 = 203;
     break L1;
    }
    $10 = ((($0)) + 44|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = (((($11) + (($2*96)|0)|0)) + 84|0);
    $13 = HEAP32[$12>>2]|0;
    HEAP32[$3>>2] = $13;
    $$0 = 0;
    break L1;
    break;
   }
   case 1:  {
    $14 = ($2|0)<(1);
    if ($14) {
     $$0 = 204;
     break L1;
    }
    $15 = ((($0)) + 12|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($16|0)<($2|0);
    if ($17) {
     $$0 = 204;
     break L1;
    }
    $18 = ((($0)) + 48|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = (((($19) + ($2<<7)|0)) + 120|0);
    $21 = HEAP32[$20>>2]|0;
    HEAP32[$3>>2] = $21;
    $$0 = 0;
    break L1;
    break;
   }
   default: {
    $$0 = 251;
    break L1;
   }
   }
  }
 } while(0);
 return ($$0|0);
}
function _EN_getoption($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$1 = 0.0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0;
 var $28 = 0.0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0.0;
 var $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0;
 var $64 = 0.0, $65 = 0, $66 = 0.0, $67 = 0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0.0, $73 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[$2>>3] = 0.0;
 $3 = ((($0)) + 5072|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  $$0 = 102;
  return ($$0|0);
 }
 do {
  switch ($1|0) {
  case 0:  {
   $6 = ((($0)) + 4508|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (+($7|0));
   $$1 = $8;
   break;
  }
  case 1:  {
   $9 = ((($0)) + 4352|0);
   $10 = +HEAPF64[$9>>3];
   $$1 = $10;
   break;
  }
  case 2:  {
   $11 = ((($0)) + 4688|0);
   $12 = +HEAPF64[$11>>3];
   $13 = ((($0)) + 4936|0);
   $14 = +HEAPF64[$13>>3];
   $15 = $12 * $14;
   $$1 = $15;
   break;
  }
  case 3:  {
   $16 = ((($0)) + 4312|0);
   $17 = +HEAPF64[$16>>3];
   $18 = $17 > 0.0;
   if ($18) {
    $19 = 1.0 / $17;
    $$1 = $19;
   } else {
    $$1 = 0.0;
   }
   break;
  }
  case 4:  {
   $20 = ((($0)) + 4344|0);
   $21 = +HEAPF64[$20>>3];
   $$1 = $21;
   break;
  }
  case 5:  {
   $22 = ((($0)) + 4368|0);
   $23 = +HEAPF64[$22>>3];
   $24 = ((($0)) + 4920|0);
   $25 = +HEAPF64[$24>>3];
   $26 = $23 * $25;
   $$1 = $26;
   break;
  }
  case 6:  {
   $27 = ((($0)) + 4360|0);
   $28 = +HEAPF64[$27>>3];
   $29 = ((($0)) + 4960|0);
   $30 = +HEAPF64[$29>>3];
   $31 = $28 * $30;
   $$1 = $31;
   break;
  }
  case 7:  {
   $32 = ((($0)) + 4500|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = (+($33|0));
   $$1 = $34;
   break;
  }
  case 8:  {
   $35 = ((($0)) + 4400|0);
   $36 = +HEAPF64[$35>>3];
   $$1 = $36;
   break;
  }
  case 9:  {
   $37 = ((($0)) + 4416|0);
   $38 = +HEAPF64[$37>>3];
   $$1 = $38;
   break;
  }
  case 10:  {
   $39 = ((($0)) + 4492|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = (+($40|0));
   $$1 = $41;
   break;
  }
  case 11:  {
   $42 = ((($0)) + 4424|0);
   $43 = +HEAPF64[$42>>3];
   $$1 = $43;
   break;
  }
  case 12:  {
   $44 = ((($0)) + 4392|0);
   $45 = +HEAPF64[$44>>3];
   $$1 = $45;
   break;
  }
  case 13:  {
   $46 = ((($0)) + 4384|0);
   $47 = +HEAPF64[$46>>3];
   $48 = $47 / 1.1E-5;
   $$1 = $48;
   break;
  }
  case 14:  {
   $49 = ((($0)) + 4512|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = (+($50|0));
   $$1 = $51;
   break;
  }
  case 15:  {
   $52 = ((($0)) + 4516|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = (+($53|0));
   $$1 = $54;
   break;
  }
  case 16:  {
   $55 = ((($0)) + 4520|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = (+($56|0));
   $$1 = $57;
   break;
  }
  case 17:  {
   $58 = ((($0)) + 4376|0);
   $59 = +HEAPF64[$58>>3];
   $$1 = $59;
   break;
  }
  case 18:  {
   $60 = ((($0)) + 4696|0);
   $61 = +HEAPF64[$60>>3];
   $62 = $61 / 1.3000000000000001E-8;
   $$1 = $62;
   break;
  }
  case 19:  {
   $63 = ((($0)) + 4768|0);
   $64 = +HEAPF64[$63>>3];
   $$1 = $64;
   break;
  }
  case 20:  {
   $65 = ((($0)) + 4776|0);
   $66 = +HEAPF64[$65>>3];
   $$1 = $66;
   break;
  }
  case 21:  {
   $67 = ((($0)) + 4784|0);
   $68 = +HEAPF64[$67>>3];
   $$1 = $68;
   break;
  }
  case 22:  {
   $69 = ((($0)) + 4808|0);
   $70 = +HEAPF64[$69>>3];
   $71 = ((($0)) + 4936|0);
   $72 = +HEAPF64[$71>>3];
   $73 = $70 * $72;
   $$1 = $73;
   break;
  }
  default: {
   $$0 = 251;
   return ($$0|0);
  }
  }
 } while(0);
 HEAPF64[$2>>3] = $$1;
 $$0 = 0;
 return ($$0|0);
}
function _EN_setoption($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 var $$0 = 0, $$01 = 0, $$in = 0.0, $$in$v = 0.0, $$in2 = 0.0, $$in2$v = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0;
 var $24 = 0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0;
 var $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0.0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0.0, $98 = 0.0, $99 = 0, $or$cond = 0, $or$cond4 = 0, $or$cond5 = 0, $spec$store$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ((($0)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 5072|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0);
 L1: do {
  if ($8) {
   $$0 = 102;
  } else {
   $9 = ($1|0)==(14);
   if ($9) {
    $10 = (~~(($2)));
    $11 = ((($0)) + 4512|0);
    $12 = ($10|0)>(-1);
    $spec$store$select = $12 ? $10 : -1;
    HEAP32[$11>>2] = $spec$store$select;
    STACKTOP = sp;return 0;
   }
   $13 = $2 < 0.0;
   if ($13) {
    $$0 = 213;
   } else {
    do {
     switch ($1|0) {
     case 0:  {
      $14 = $2 < 1.0;
      if ($14) {
       $$0 = 213;
       break L1;
      }
      $15 = (~~(($2)));
      $16 = ((($0)) + 4508|0);
      HEAP32[$16>>2] = $15;
      $$0 = 0;
      break L1;
      break;
     }
     case 1:  {
      $17 = $2 < 1.0E-8;
      $18 = $2 > 0.10000000000000001;
      $or$cond = $17 | $18;
      if ($or$cond) {
       $$0 = 213;
       break L1;
      }
      $19 = ((($0)) + 4352|0);
      HEAPF64[$19>>3] = $2;
      $$0 = 0;
      break L1;
      break;
     }
     case 2:  {
      $20 = ((($0)) + 4936|0);
      $21 = +HEAPF64[$20>>3];
      $22 = $2 / $21;
      $23 = ((($0)) + 4688|0);
      HEAPF64[$23>>3] = $22;
      $$0 = 0;
      break L1;
      break;
     }
     case 3:  {
      $24 = !($2 <= 0.0);
      if (!($24)) {
       $$0 = 213;
       break L1;
      }
      $25 = 1.0 / $2;
      $26 = ((($0)) + 4960|0);
      $27 = +HEAPF64[$26>>3];
      $28 = (+Math_pow((+$27),(+$25)));
      $29 = ((($0)) + 4928|0);
      $30 = +HEAPF64[$29>>3];
      $31 = $28 / $30;
      $32 = ((($0)) + 44|0);
      $$01 = 1;
      while(1) {
       $33 = ($$01|0)>($5|0);
       if ($33) {
        break;
       }
       $34 = (_EN_getnodevalue($0,$$01,3,$3)|0);
       $35 = ($34|0)==(0);
       if ($35) {
        $36 = +HEAPF64[$3>>3];
        $37 = $36 > 0.0;
        if ($37) {
         $38 = (+Math_pow((+$36),(+$25)));
         $39 = $31 / $38;
         $40 = HEAP32[$32>>2]|0;
         $41 = (((($40) + (($$01*96)|0)|0)) + 72|0);
         HEAPF64[$41>>3] = $39;
        }
       }
       $42 = (($$01) + 1)|0;
       $$01 = $42;
      }
      $43 = ((($0)) + 4312|0);
      HEAPF64[$43>>3] = $25;
      $$0 = 0;
      break L1;
      break;
     }
     case 4:  {
      $44 = ((($0)) + 4344|0);
      HEAPF64[$44>>3] = $2;
      $$0 = 0;
      break L1;
      break;
     }
     case 5:  {
      $45 = ((($0)) + 4920|0);
      $46 = +HEAPF64[$45>>3];
      $47 = $2 / $46;
      $48 = ((($0)) + 4368|0);
      HEAPF64[$48>>3] = $47;
      $$0 = 0;
      break L1;
      break;
     }
     case 6:  {
      $49 = ((($0)) + 4960|0);
      $50 = +HEAPF64[$49>>3];
      $51 = $2 / $50;
      $52 = ((($0)) + 4360|0);
      HEAPF64[$52>>3] = $51;
      $$0 = 0;
      break L1;
      break;
     }
     case 7:  {
      $53 = ((($0)) + 4524|0);
      $54 = HEAP32[$53>>2]|0;
      $55 = ($54|0)==(0);
      if (!($55)) {
       $$0 = 262;
       break L1;
      }
      $56 = !($2 >= 0.0);
      $$in2$v = $56 ? -0.5 : 0.5;
      $$in2 = $$in2$v + $2;
      $57 = (~~(($$in2)));
      $58 = ($57>>>0)>(2);
      if ($58) {
       $$0 = 213;
       break L1;
      }
      $59 = ((($0)) + 4500|0);
      HEAP32[$59>>2] = $57;
      $60 = ($57|0)==(0);
      $61 = ((($0)) + 4304|0);
      if ($60) {
       HEAPF64[$61>>3] = 1.8520000000000001;
       $$0 = 0;
       break L1;
      } else {
       HEAPF64[$61>>3] = 2.0;
       $$0 = 0;
       break L1;
      }
      break;
     }
     case 8:  {
      $62 = $2 <= 1.0;
      $63 = $2 > 100.0;
      $or$cond4 = $62 | $63;
      if ($or$cond4) {
       $$0 = 213;
       break L1;
      }
      $64 = ((($0)) + 4400|0);
      HEAPF64[$64>>3] = $2;
      $$0 = 0;
      break L1;
      break;
     }
     case 9:  {
      $65 = ((($0)) + 4416|0);
      HEAPF64[$65>>3] = $2;
      $$0 = 0;
      break L1;
      break;
     }
     case 10:  {
      $66 = !($2 >= 0.0);
      $$in$v = $66 ? -0.5 : 0.5;
      $$in = $$in$v + $2;
      $67 = (~~(($$in)));
      $68 = ($67|0)<(0);
      if ($68) {
       $$0 = 205;
       break L1;
      }
      $69 = ((($0)) + 36|0);
      $70 = HEAP32[$69>>2]|0;
      $71 = ($70|0)<($67|0);
      if ($71) {
       $$0 = 205;
       break L1;
      }
      $72 = ((($0)) + 4492|0);
      HEAP32[$72>>2] = $67;
      $$0 = 0;
      break L1;
      break;
     }
     case 11:  {
      $73 = ((($0)) + 4424|0);
      HEAPF64[$73>>3] = $2;
      $$0 = 0;
      break L1;
      break;
     }
     case 12:  {
      $74 = !($2 <= 0.0);
      if (!($74)) {
       $$0 = 213;
       break L1;
      }
      $75 = ((($0)) + 4392|0);
      $76 = +HEAPF64[$75>>3];
      $77 = $2 / $76;
      $78 = ((($0)) + 4928|0);
      $79 = +HEAPF64[$78>>3];
      $80 = $79 * $77;
      HEAPF64[$78>>3] = $80;
      HEAPF64[$75>>3] = $2;
      $$0 = 0;
      break L1;
      break;
     }
     case 13:  {
      $81 = !($2 <= 0.0);
      if (!($81)) {
       $$0 = 213;
       break L1;
      }
      $82 = $2 * 1.1E-5;
      $83 = ((($0)) + 4384|0);
      HEAPF64[$83>>3] = $82;
      $$0 = 0;
      break L1;
      break;
     }
     case 15:  {
      $84 = (~~(($2)));
      $85 = ((($0)) + 4516|0);
      HEAP32[$85>>2] = $84;
      $$0 = 0;
      break L1;
      break;
     }
     case 16:  {
      $86 = (~~(($2)));
      $87 = ((($0)) + 4520|0);
      HEAP32[$87>>2] = $86;
      $$0 = 0;
      break L1;
      break;
     }
     case 17:  {
      $88 = ((($0)) + 4376|0);
      HEAPF64[$88>>3] = $2;
      $$0 = 0;
      break L1;
      break;
     }
     case 18:  {
      $89 = $2 * 1.3000000000000001E-8;
      $90 = ((($0)) + 4696|0);
      HEAPF64[$90>>3] = $89;
      $$0 = 0;
      break L1;
      break;
     }
     case 19:  {
      $91 = ((($0)) + 4768|0);
      HEAPF64[$91>>3] = $2;
      $$0 = 0;
      break L1;
      break;
     }
     case 20:  {
      $92 = $2 == 0.0;
      $93 = $2 == 1.0;
      $or$cond5 = $92 | $93;
      if (!($or$cond5)) {
       $$0 = 213;
       break L1;
      }
      $94 = ((($0)) + 4776|0);
      HEAPF64[$94>>3] = $2;
      $$0 = 0;
      break L1;
      break;
     }
     case 21:  {
      $95 = ((($0)) + 4784|0);
      HEAPF64[$95>>3] = $2;
      $$0 = 0;
      break L1;
      break;
     }
     case 22:  {
      $96 = ((($0)) + 4936|0);
      $97 = +HEAPF64[$96>>3];
      $98 = $2 / $97;
      $99 = ((($0)) + 4808|0);
      HEAPF64[$99>>3] = $98;
      $$0 = 0;
      break L1;
      break;
     }
     default: {
      $$0 = 251;
      break L1;
     }
     }
    } while(0);
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _EN_getnodevalue($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$19 = 0.0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0, $113 = 0.0, $114 = 0.0, $115 = 0;
 var $116 = 0.0, $117 = 0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0.0, $123 = 0, $124 = 0.0, $125 = 0, $126 = 0.0, $127 = 0.0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0.0, $133 = 0.0;
 var $134 = 0.0, $135 = 0.0, $136 = 0, $137 = 0, $138 = 0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0.0, $142 = 0.0, $143 = 0, $144 = 0, $145 = 0, $146 = 0.0, $147 = 0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0.0, $155 = 0, $156 = 0, $157 = 0, $158 = 0.0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0, $165 = 0, $166 = 0, $167 = 0.0, $168 = 0, $169 = 0.0, $17 = 0;
 var $170 = 0.0, $171 = 0.0, $172 = 0.0, $173 = 0, $174 = 0, $175 = 0, $176 = 0.0, $177 = 0, $178 = 0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0, $182 = 0, $183 = 0, $184 = 0.0, $185 = 0.0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0.0, $19 = 0, $190 = 0.0, $191 = 0, $192 = 0.0, $193 = 0.0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0.0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0.0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0.0, $211 = 0, $212 = 0, $213 = 0, $214 = 0.0, $215 = 0.0, $216 = 0.0, $217 = 0, $218 = 0.0, $219 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0.0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0.0, $46 = 0;
 var $47 = 0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0.0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0;
 var $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 44|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($0)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($0)) + 4904|0);
 $11 = ((($0)) + 4256|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($0)) + 4824|0);
 $14 = HEAP32[$13>>2]|0;
 HEAPF64[$3>>3] = 0.0;
 $15 = ((($0)) + 5072|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)==(0);
 if ($17) {
  $$0 = 102;
  return ($$0|0);
 }
 $18 = ($1|0)<(1);
 if ($18) {
  $$0 = 203;
  return ($$0|0);
 }
 $19 = HEAP32[$0>>2]|0;
 $20 = ($19|0)<($1|0);
 if ($20) {
  $$0 = 203;
  return ($$0|0);
 }
 L10: do {
  switch ($2|0) {
  case 0:  {
   $21 = (((($5) + (($1*96)|0)|0)) + 48|0);
   $22 = +HEAPF64[$21>>3];
   $23 = +HEAPF64[$10>>3];
   $24 = $22 * $23;
   $$19 = $24;
   break;
  }
  case 1:  {
   $25 = ($9|0)<($1|0);
   if ($25) {
    $$19 = 0.0;
   } else {
    $26 = (((($5) + (($1*96)|0)|0)) + 56|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ($27|0)==(0|0);
    if ($28) {
     $$19 = 0.0;
    } else {
     $29 = +HEAPF64[$27>>3];
     $30 = ((($0)) + 4960|0);
     $31 = +HEAPF64[$30>>3];
     $32 = $29 * $31;
     $$19 = $32;
    }
   }
   break;
  }
  case 2:  {
   $33 = ($9|0)<($1|0);
   if ($33) {
    $40 = (($1) - ($9))|0;
    $41 = (((($7) + (($40*120)|0)|0)) + 88|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = (+($42|0));
    $$19 = $43;
    break L10;
   }
   $34 = (((($5) + (($1*96)|0)|0)) + 56|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($35|0)==(0|0);
   if ($36) {
    $$19 = 0.0;
   } else {
    $37 = ((($35)) + 8|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = (+($38|0));
    $$19 = $39;
   }
   break;
  }
  case 3:  {
   $44 = (((($5) + (($1*96)|0)|0)) + 72|0);
   $45 = +HEAPF64[$44>>3];
   $46 = $45 > 0.0;
   if ($46) {
    $47 = ((($0)) + 4960|0);
    $48 = +HEAPF64[$47>>3];
    $49 = ((($0)) + 4928|0);
    $50 = +HEAPF64[$49>>3];
    $51 = $50 * $45;
    $52 = ((($0)) + 4312|0);
    $53 = +HEAPF64[$52>>3];
    $54 = 1.0 / $53;
    $55 = (+Math_pow((+$51),(+$54)));
    $56 = $48 / $55;
    $$19 = $56;
   } else {
    $$19 = 0.0;
   }
   break;
  }
  case 4:  {
   $57 = (((($5) + (($1*96)|0)|0)) + 64|0);
   $58 = +HEAPF64[$57>>3];
   $59 = ((($0)) + 4936|0);
   $60 = +HEAPF64[$59>>3];
   $61 = $58 * $60;
   $$19 = $61;
   break;
  }
  case 6: case 13: case 7: case 5:  {
   $62 = (((($5) + (($1*96)|0)|0)) + 60|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = ($63|0)==(0|0);
   if ($64) {
    $$0 = 240;
    return ($$0|0);
   }
   switch ($2|0) {
   case 5:  {
    $65 = +HEAPF64[$63>>3];
    $$19 = $65;
    break L10;
    break;
   }
   case 13:  {
    $66 = ((($63)) + 16|0);
    $67 = +HEAPF64[$66>>3];
    $68 = $67 * 60.0;
    $$19 = $68;
    break L10;
    break;
   }
   case 6:  {
    $69 = ((($63)) + 8|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = (+($70|0));
    $$19 = $71;
    break L10;
    break;
   }
   default: {
    $72 = ((($63)) + 24|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = (+($73>>>0));
    $$19 = $74;
    break L10;
   }
   }
   break;
  }
  case 8:  {
   $75 = ($9|0)<($1|0);
   if ($75) {
    $76 = (($1) - ($9))|0;
    $77 = (((($7) + (($76*120)|0)|0)) + 32|0);
    $78 = +HEAPF64[$77>>3];
    $79 = (((($5) + (($1*96)|0)|0)) + 48|0);
    $80 = +HEAPF64[$79>>3];
    $81 = $78 - $80;
    $82 = +HEAPF64[$10>>3];
    $83 = $81 * $82;
    $$19 = $83;
    break L10;
   } else {
    $$0 = 0;
    return ($$0|0);
   }
   break;
  }
  case 14:  {
   $84 = ($9|0)<($1|0);
   if ($84) {
    $85 = (($1) - ($9))|0;
    $86 = (((($7) + (($85*120)|0)|0)) + 56|0);
    $87 = +HEAPF64[$86>>3];
    $88 = ((($0)) + 5040|0);
    $89 = +HEAPF64[$88>>3];
    $90 = $87 * $89;
    $$19 = $90;
   } else {
    $$19 = 0.0;
   }
   break;
  }
  case 15:  {
   $91 = ($9|0)<($1|0);
   if ($91) {
    $92 = (($1) - ($9))|0;
    $93 = (((($7) + (($92*120)|0)|0)) + 96|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = (+($94>>>0));
    $$19 = $95;
   } else {
    $$19 = 0.0;
   }
   break;
  }
  case 16:  {
   $96 = ($9|0)<($1|0);
   if ($96) {
    $97 = (($1) - ($9))|0;
    $98 = (((($7) + (($97*120)|0)|0)) + 104|0);
    $99 = +HEAPF64[$98>>3];
    $100 = ((($0)) + 5040|0);
    $101 = +HEAPF64[$100>>3];
    $102 = $99 * $101;
    $$19 = $102;
   } else {
    $$19 = 0.0;
   }
   break;
  }
  case 9:  {
   $103 = ((($0)) + 4260|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = (($104) + ($1<<3)|0);
   $106 = +HEAPF64[$105>>3];
   $107 = ((($0)) + 4960|0);
   $108 = +HEAPF64[$107>>3];
   $109 = $106 * $108;
   $$19 = $109;
   break;
  }
  case 10:  {
   $110 = (($12) + ($1<<3)|0);
   $111 = +HEAPF64[$110>>3];
   $112 = ((($0)) + 4920|0);
   $113 = +HEAPF64[$112>>3];
   $114 = $111 * $113;
   $$19 = $114;
   break;
  }
  case 11:  {
   $115 = (($12) + ($1<<3)|0);
   $116 = +HEAPF64[$115>>3];
   $117 = (((($5) + (($1*96)|0)|0)) + 48|0);
   $118 = +HEAPF64[$117>>3];
   $119 = $116 - $118;
   $120 = ((($0)) + 4928|0);
   $121 = +HEAPF64[$120>>3];
   $122 = $119 * $121;
   $$19 = $122;
   break;
  }
  case 12:  {
   $123 = (($14) + ($1<<3)|0);
   $124 = +HEAPF64[$123>>3];
   $125 = ((($0)) + 4936|0);
   $126 = +HEAPF64[$125>>3];
   $127 = $124 * $126;
   $$19 = $127;
   break;
  }
  case 17:  {
   $128 = ($9|0)<($1|0);
   if ($128) {
    $129 = (($1) - ($9))|0;
    $130 = (((($7) + (($129*120)|0)|0)) + 8|0);
    $131 = +HEAPF64[$130>>3];
    $132 = $131 * 1.2732395447351628;
    $133 = (+Math_sqrt((+$132)));
    $134 = +HEAPF64[$10>>3];
    $135 = $133 * $134;
    $$19 = $135;
   } else {
    $$19 = 0.0;
   }
   break;
  }
  case 18:  {
   $136 = ($9|0)<($1|0);
   if ($136) {
    $137 = (($1) - ($9))|0;
    $138 = (((($7) + (($137*120)|0)|0)) + 40|0);
    $139 = +HEAPF64[$138>>3];
    $140 = ((($0)) + 5040|0);
    $141 = +HEAPF64[$140>>3];
    $142 = $139 * $141;
    $$19 = $142;
   } else {
    $$19 = 0.0;
   }
   break;
  }
  case 25:  {
   $143 = ($9|0)<($1|0);
   if ($143) {
    $144 = (($1) - ($9))|0;
    $145 = (((($7) + (($144*120)|0)|0)) + 48|0);
    $146 = +HEAPF64[$145>>3];
    $147 = ((($0)) + 5040|0);
    $148 = +HEAPF64[$147>>3];
    $149 = $146 * $148;
    $$19 = $149;
   } else {
    $$19 = 0.0;
   }
   break;
  }
  case 19:  {
   $150 = ($9|0)<($1|0);
   if ($150) {
    $151 = (($1) - ($9))|0;
    $152 = (((($7) + (($151*120)|0)|0)) + 92|0);
    $153 = HEAP32[$152>>2]|0;
    $154 = (+($153|0));
    $$19 = $154;
   } else {
    $$19 = 0.0;
   }
   break;
  }
  case 20:  {
   $155 = ($9|0)<($1|0);
   if ($155) {
    $156 = (($1) - ($9))|0;
    $157 = (((($7) + (($156*120)|0)|0)) + 16|0);
    $158 = +HEAPF64[$157>>3];
    $159 = (((($5) + (($1*96)|0)|0)) + 48|0);
    $160 = +HEAPF64[$159>>3];
    $161 = $158 - $160;
    $162 = +HEAPF64[$10>>3];
    $163 = $161 * $162;
    $$19 = $163;
   } else {
    $$19 = 0.0;
   }
   break;
  }
  case 21:  {
   $164 = ($9|0)<($1|0);
   if ($164) {
    $165 = (($1) - ($9))|0;
    $166 = (((($7) + (($165*120)|0)|0)) + 24|0);
    $167 = +HEAPF64[$166>>3];
    $168 = (((($5) + (($1*96)|0)|0)) + 48|0);
    $169 = +HEAPF64[$168>>3];
    $170 = $167 - $169;
    $171 = +HEAPF64[$10>>3];
    $172 = $170 * $171;
    $$19 = $172;
   } else {
    $$19 = 0.0;
   }
   break;
  }
  case 22:  {
   $173 = ($9|0)<($1|0);
   if ($173) {
    $174 = (($1) - ($9))|0;
    $175 = (((($7) + (($174*120)|0)|0)) + 48|0);
    $176 = +HEAPF64[$175>>3];
    $177 = $176 > 0.0;
    if ($177) {
     $178 = (((($7) + (($174*120)|0)|0)) + 104|0);
     $179 = +HEAPF64[$178>>3];
     $180 = $179 / $176;
     $$19 = $180;
    } else {
     $$19 = 1.0;
    }
   } else {
    $$19 = 1.0;
   }
   break;
  }
  case 23:  {
   $181 = ($9|0)<($1|0);
   if ($181) {
    $182 = (($1) - ($9))|0;
    $183 = (((($7) + (($182*120)|0)|0)) + 64|0);
    $184 = +HEAPF64[$183>>3];
    $185 = $184 * 86400.0;
    $$19 = $185;
   } else {
    $$19 = 0.0;
   }
   break;
  }
  case 24:  {
   $186 = ($9|0)<($1|0);
   if ($186) {
    $187 = (($1) - ($9))|0;
    $188 = (($12) + ($1<<3)|0);
    $189 = +HEAPF64[$188>>3];
    $190 = (+_tankvolume($0,$187,$189));
    $191 = ((($0)) + 5040|0);
    $192 = +HEAPF64[$191>>3];
    $193 = $190 * $192;
    $$19 = $193;
    break L10;
   } else {
    $$0 = 0;
    return ($$0|0);
   }
   break;
  }
  case 26:  {
   $194 = (((($5) + (($1*96)|0)|0)) + 88|0);
   $195 = HEAP32[$194>>2]|0;
   $196 = ($195|0)==(2);
   if ($196) {
    $197 = (($1) - ($9))|0;
    $198 = (((($7) + (($197*120)|0)|0)) + 112|0);
    $199 = HEAP32[$198>>2]|0;
    $200 = (+($199|0));
    $$19 = $200;
    break L10;
   } else {
    $$0 = 0;
    return ($$0|0);
   }
   break;
  }
  case 27:  {
   $201 = ($9|0)<($1|0);
   if ($201) {
    $$0 = 0;
    return ($$0|0);
   }
   $202 = ((($0)) + 4264|0);
   $203 = HEAP32[$202>>2]|0;
   $204 = (($203) + ($1<<3)|0);
   $205 = +HEAPF64[$204>>3];
   $206 = $205 < 0.0;
   if ($206) {
    $$0 = 0;
    return ($$0|0);
   } else {
    $207 = ((($0)) + 4260|0);
    $208 = HEAP32[$207>>2]|0;
    $209 = (($208) + ($1<<3)|0);
    $210 = +HEAPF64[$209>>3];
    $211 = ((($0)) + 4268|0);
    $212 = HEAP32[$211>>2]|0;
    $213 = (($212) + ($1<<3)|0);
    $214 = +HEAPF64[$213>>3];
    $215 = $210 - $214;
    $216 = $205 - $215;
    $217 = ((($0)) + 4960|0);
    $218 = +HEAPF64[$217>>3];
    $219 = $216 * $218;
    $$19 = $219;
    break L10;
   }
   break;
  }
  default: {
   $$0 = 251;
   return ($$0|0);
  }
  }
 } while(0);
 HEAPF64[$3>>3] = $$19;
 $$0 = 0;
 return ($$0|0);
}
function _EN_getflowunits($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$1>>2] = -1;
 $2 = ((($0)) + 5072|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $$0 = 102;
  return ($$0|0);
 }
 $5 = ((($0)) + 1120|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$1>>2] = $6;
 $$0 = 0;
 return ($$0|0);
}
function _EN_setflowunits($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$01 = 0.0, $$02 = 0.0, $$03 = 0, $$04 = 0, $$off = 0, $$pre = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, $switch = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4904|0);
 $3 = ((($0)) + 5072|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  $$0 = 102;
  return ($$0|0);
 }
 $6 = ((($0)) + 4960|0);
 $7 = +HEAPF64[$6>>3];
 $8 = ((($0)) + 5040|0);
 $9 = +HEAPF64[$8>>3];
 $10 = ((($0)) + 4920|0);
 $11 = +HEAPF64[$10>>3];
 $12 = +HEAPF64[$2>>3];
 $13 = ((($0)) + 1120|0);
 HEAP32[$13>>2] = $1;
 $$off = (($1) + -5)|0;
 $switch = ($$off>>>0)<(5);
 $14 = ((($0)) + 1116|0);
 if ($switch) {
  HEAP32[$14>>2] = 1;
  $16 = ((($0)) + 1124|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)==(0);
  if ($18) {
   HEAP32[$16>>2] = 2;
  }
 } else {
  HEAP32[$14>>2] = 0;
  $15 = ((($0)) + 1124|0);
  HEAP32[$15>>2] = 0;
 }
 _initunits($0);
 $19 = ((($0)) + 40|0);
 $20 = ((($0)) + 68|0);
 $$04 = 1;
 while(1) {
  $21 = HEAP32[$19>>2]|0;
  $22 = ($$04|0)>($21|0);
  if ($22) {
   $$0 = 0;
   break;
  }
  $23 = HEAP32[$20>>2]|0;
  $24 = (((($23) + (($$04*56)|0)|0)) + 36|0);
  $25 = HEAP32[$24>>2]|0;
  switch ($25|0) {
  case 0:  {
   $26 = +HEAPF64[$2>>3];
   $27 = $12 / $26;
   $28 = +HEAPF64[$8>>3];
   $29 = $9 / $28;
   $$01 = $29;$$02 = $27;
   break;
  }
  case 1: case 3:  {
   $30 = +HEAPF64[$6>>3];
   $31 = $7 / $30;
   $32 = +HEAPF64[$10>>3];
   $33 = $11 / $32;
   $$01 = $33;$$02 = $31;
   break;
  }
  case 2:  {
   $34 = +HEAPF64[$6>>3];
   $35 = $7 / $34;
   $$01 = 1.0;$$02 = $35;
   break;
  }
  default: {
   $$01 = 1.0;$$02 = 1.0;
  }
  }
  $$03 = 0;$37 = $23;
  while(1) {
   $36 = (((($37) + (($$04*56)|0)|0)) + 40|0);
   $38 = HEAP32[$36>>2]|0;
   $39 = ($$03|0)<($38|0);
   if (!($39)) {
    break;
   }
   $40 = (((($37) + (($$04*56)|0)|0)) + 48|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = (($41) + ($$03<<3)|0);
   $43 = +HEAPF64[$42>>3];
   $44 = $43 / $$02;
   HEAPF64[$42>>3] = $44;
   $45 = HEAP32[$20>>2]|0;
   $46 = (((($45) + (($$04*56)|0)|0)) + 52|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (($47) + ($$03<<3)|0);
   $49 = +HEAPF64[$48>>3];
   $50 = $49 / $$01;
   HEAPF64[$48>>3] = $50;
   $51 = (($$03) + 1)|0;
   $$pre = HEAP32[$20>>2]|0;
   $$03 = $51;$37 = $$pre;
  }
  $52 = (($$04) + 1)|0;
  $$04 = $52;
 }
 return ($$0|0);
}
function _EN_gettimeparam($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 5072|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  $$0 = 102;
  return ($$0|0);
 }
 $6 = ($1>>>0)>(15);
 if ($6) {
  $$0 = 251;
  return ($$0|0);
 }
 do {
  switch ($1|0) {
  case 0:  {
   $7 = ((($0)) + 1192|0);
   $8 = HEAP32[$7>>2]|0;
   HEAP32[$2>>2] = $8;
   break;
  }
  case 1:  {
   $9 = ((($0)) + 1148|0);
   $10 = HEAP32[$9>>2]|0;
   HEAP32[$2>>2] = $10;
   break;
  }
  case 2:  {
   $11 = ((($0)) + 1180|0);
   $12 = HEAP32[$11>>2]|0;
   HEAP32[$2>>2] = $12;
   break;
  }
  case 3:  {
   $13 = ((($0)) + 1152|0);
   $14 = HEAP32[$13>>2]|0;
   HEAP32[$2>>2] = $14;
   break;
  }
  case 4:  {
   $15 = ((($0)) + 1156|0);
   $16 = HEAP32[$15>>2]|0;
   HEAP32[$2>>2] = $16;
   break;
  }
  case 5:  {
   $17 = ((($0)) + 1160|0);
   $18 = HEAP32[$17>>2]|0;
   HEAP32[$2>>2] = $18;
   break;
  }
  case 6:  {
   $19 = ((($0)) + 1164|0);
   $20 = HEAP32[$19>>2]|0;
   HEAP32[$2>>2] = $20;
   break;
  }
  case 7:  {
   $21 = ((($0)) + 1188|0);
   $22 = HEAP32[$21>>2]|0;
   HEAP32[$2>>2] = $22;
   break;
  }
  case 8:  {
   $23 = ((($0)) + 1216|0);
   $24 = HEAP32[$23>>2]|0;
   HEAP32[$2>>2] = $24;
   break;
  }
  case 9:  {
   $25 = ((($0)) + 1204|0);
   $26 = HEAP32[$25>>2]|0;
   HEAP32[$2>>2] = $26;
   break;
  }
  case 10:  {
   $27 = ((($0)) + 1144|0);
   $28 = HEAP32[$27>>2]|0;
   HEAP32[$2>>2] = $28;
   break;
  }
  case 11:  {
   $29 = ((($0)) + 1172|0);
   $30 = HEAP32[$29>>2]|0;
   HEAP32[$2>>2] = $30;
   break;
  }
  case 12:  {
   $31 = ((($0)) + 1184|0);
   $32 = HEAP32[$31>>2]|0;
   HEAP32[$2>>2] = $32;
   break;
  }
  case 13:  {
   break;
  }
  case 14:  {
   $33 = ((($0)) + 1148|0);
   $34 = HEAP32[$33>>2]|0;
   HEAP32[$2>>2] = $34;
   (_tanktimestep($0,$2)|0);
   break;
  }
  case 15:  {
   $35 = ((($0)) + 1148|0);
   $36 = HEAP32[$35>>2]|0;
   HEAP32[$2>>2] = $36;
   $37 = (_tanktimestep($0,$2)|0);
   HEAP32[$2>>2] = $37;
   break;
  }
  default: {
   $$0 = 251;
   return ($$0|0);
  }
  }
 } while(0);
 $$0 = 0;
 return ($$0|0);
}
function _EN_settimeparam($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0 = 0, $$10 = 0, $$11 = 0, $$9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 5072|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 L1: do {
  if ($5) {
   $$0 = 102;
  } else {
   $6 = ($2|0)<(0);
   if ($6) {
    $$0 = 213;
   } else {
    do {
     switch ($1|0) {
     case 0:  {
      $7 = ((($0)) + 1192|0);
      HEAP32[$7>>2] = $2;
      $8 = ((($0)) + 1164|0);
      $9 = HEAP32[$8>>2]|0;
      $10 = ($9|0)>($2|0);
      if (!($10)) {
       $$0 = 0;
       break L1;
      }
      HEAP32[$8>>2] = 0;
      $$0 = 0;
      break L1;
      break;
     }
     case 1:  {
      $11 = ($2|0)==(0);
      if ($11) {
       $$0 = 213;
       break L1;
      }
      $12 = ((($0)) + 1148|0);
      HEAP32[$12>>2] = $2;
      $13 = ((($0)) + 1152|0);
      $14 = HEAP32[$13>>2]|0;
      $15 = ($14|0)>($2|0);
      $$ = $15 ? $2 : $14;
      HEAP32[$12>>2] = $$;
      $16 = ((($0)) + 1160|0);
      $17 = HEAP32[$16>>2]|0;
      $18 = ($17|0)>($$|0);
      $19 = $18 ? $$ : $17;
      HEAP32[$12>>2] = $19;
      $20 = ((($0)) + 1180|0);
      $21 = HEAP32[$20>>2]|0;
      $22 = ($21|0)>($19|0);
      $$9 = $22 ? $19 : $21;
      HEAP32[$20>>2] = $$9;
      $$0 = 0;
      break L1;
      break;
     }
     case 2:  {
      $23 = ($2|0)==(0);
      if ($23) {
       $$0 = 213;
       break L1;
      }
      $24 = ((($0)) + 1180|0);
      HEAP32[$24>>2] = $2;
      $25 = ((($0)) + 1148|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)<($2|0);
      $$10 = $27 ? $26 : $2;
      HEAP32[$24>>2] = $$10;
      $$0 = 0;
      break L1;
      break;
     }
     case 3:  {
      $28 = ($2|0)==(0);
      if ($28) {
       $$0 = 213;
       break L1;
      }
      $29 = ((($0)) + 1152|0);
      HEAP32[$29>>2] = $2;
      $30 = ((($0)) + 1148|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = ($31|0)>($2|0);
      if (!($32)) {
       $$0 = 0;
       break L1;
      }
      HEAP32[$30>>2] = $2;
      $$0 = 0;
      break L1;
      break;
     }
     case 4:  {
      $33 = ((($0)) + 1156|0);
      HEAP32[$33>>2] = $2;
      $$0 = 0;
      break L1;
      break;
     }
     case 5:  {
      $34 = ($2|0)==(0);
      if ($34) {
       $$0 = 213;
       break L1;
      }
      $35 = ((($0)) + 1160|0);
      HEAP32[$35>>2] = $2;
      $36 = ((($0)) + 1148|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ($37|0)>($2|0);
      if (!($38)) {
       $$0 = 0;
       break L1;
      }
      HEAP32[$36>>2] = $2;
      $$0 = 0;
      break L1;
      break;
     }
     case 6:  {
      $39 = ((($0)) + 1164|0);
      $40 = HEAP32[$39>>2]|0;
      $41 = ((($0)) + 1192|0);
      $42 = HEAP32[$41>>2]|0;
      $43 = ($40|0)>($42|0);
      if ($43) {
       $$0 = 213;
       break L1;
      }
      HEAP32[$39>>2] = $2;
      $$0 = 0;
      break L1;
      break;
     }
     case 7:  {
      $44 = ($2|0)==(0);
      if ($44) {
       $$0 = 213;
       break L1;
      }
      $45 = ((($0)) + 1188|0);
      HEAP32[$45>>2] = $2;
      $46 = ((($0)) + 1148|0);
      $47 = HEAP32[$46>>2]|0;
      $48 = ($47|0)<($2|0);
      $$11 = $48 ? $47 : $2;
      HEAP32[$45>>2] = $$11;
      $$0 = 0;
      break L1;
      break;
     }
     case 8:  {
      $49 = ($2|0)>(4);
      if ($49) {
       $$0 = 213;
       break L1;
      }
      $sext = $2 << 24;
      $50 = $sext >> 24;
      $51 = ((($0)) + 1216|0);
      HEAP32[$51>>2] = $50;
      $$0 = 0;
      break L1;
      break;
     }
     case 11:  {
      $52 = ((($0)) + 1172|0);
      HEAP32[$52>>2] = $2;
      $$0 = 0;
      break L1;
      break;
     }
     case 12:  {
      $53 = ((($0)) + 1184|0);
      HEAP32[$53>>2] = $2;
      $$0 = 0;
      break L1;
      break;
     }
     default: {
      $$0 = 251;
      break L1;
     }
     }
    } while(0);
   }
  }
 } while(0);
 return ($$0|0);
}
function _EN_getqualinfo($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 (_EN_getqualtype($0,$1,$4)|0);
 $5 = ((($0)) + 4600|0);
 $6 = HEAP32[$5>>2]|0;
 switch ($6|0) {
 case 1:  {
  $7 = ((($0)) + 4624|0);
  (_strncpy($2,$7,31)|0);
  $8 = ((($0)) + 4656|0);
  (_strncpy($3,$8,31)|0);
  return;
  break;
 }
 case 3:  {
  (_strncpy($2,8657,31)|0);
  (_strncpy($3,8663,31)|0);
  return;
  break;
 }
 case 2:  {
  (_strncpy($2,8653,31)|0);
  (_strncpy($3,8670,31)|0);
  return;
  break;
 }
 default: {
  (_strncpy($2,21208,31)|0);
  (_strncpy($3,21208,31)|0);
  return;
 }
 }
}
function _EN_getqualtype($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 5072|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  $$0 = 102;
  return ($$0|0);
 }
 $6 = ((($0)) + 4600|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$1>>2] = $7;
 $8 = HEAP32[$6>>2]|0;
 $9 = ($8|0)==(3);
 if (!($9)) {
  $$0 = 0;
  return ($$0|0);
 }
 $10 = ((($0)) + 4616|0);
 $11 = HEAP32[$10>>2]|0;
 HEAP32[$2>>2] = $11;
 $$0 = 0;
 return ($$0|0);
}
function _EN_setqualtype($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$01 = 0.0, $$02 = 0, $$idx = 0, $$idx$val = 0, $$idx3 = 0, $$idx3$val = 0, $$pre = 0, $$pre4 = 0, $$pre5 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0;
 var $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $or$cond6 = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($0)) + 5072|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 if ($7) {
  $$0 = 102;
  return ($$0|0);
 }
 $8 = ((($0)) + 4604|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if (!($10)) {
  $$0 = 262;
  return ($$0|0);
 }
 $11 = ($1>>>0)>(3);
 if ($11) {
  $$0 = 251;
  return ($$0|0);
 }
 $12 = ($1|0)==(3);
 if ($12) {
  $$idx = ((($0)) + 80|0);
  $$idx$val = HEAP32[$$idx>>2]|0;
  $13 = (_findnode($$idx$val,$4)|0);
  $14 = ($13|0)==(0);
  if ($14) {
   $$0 = 212;
   return ($$0|0);
  }
 }
 $15 = ((($0)) + 4600|0);
 $16 = HEAP32[$15>>2]|0;
 HEAP32[$15>>2] = $1;
 $17 = ((($0)) + 4936|0);
 $18 = +HEAPF64[$17>>3];
 $19 = ((($0)) + 4688|0);
 $20 = +HEAPF64[$19>>3];
 $21 = $20 * $18;
 HEAPF64[$19>>3] = $21;
 $22 = ($1|0)==(1);
 if ($22) {
  $23 = ((($0)) + 4624|0);
  (_strncpy($23,$2,31)|0);
  $24 = ((($0)) + 4656|0);
  (_strncpy($24,$3,31)|0);
  $25 = ((($0)) + 2200|0);
  (_strncpy($25,$24,31)|0);
  $26 = ((($0)) + 2992|0);
  (_strncpy($26,$24,31)|0);
  (_strcat($26,8054)|0);
  $$pre = HEAP32[$15>>2]|0;
  $$01 = 0.035314475403467882;$28 = $$pre;
 } else {
  $$01 = 1.0;$28 = $1;
 }
 $27 = ($28|0)==(3);
 do {
  if ($27) {
   $$idx3 = ((($0)) + 80|0);
   $$idx3$val = HEAP32[$$idx3>>2]|0;
   $29 = (_findnode($$idx3$val,$4)|0);
   $30 = ((($0)) + 4616|0);
   HEAP32[$30>>2] = $29;
   $31 = ($29|0)==(0);
   if ($31) {
    $$0 = 212;
    return ($$0|0);
   } else {
    $32 = ((($0)) + 4624|0);
    (_strncpy($32,8657,31)|0);
    $33 = ((($0)) + 4656|0);
    (_strncpy($33,8663,31)|0);
    $34 = ((($0)) + 2200|0);
    (_strcpy($34,8663)|0);
    $$pre4 = HEAP32[$15>>2]|0;
    $36 = $$pre4;
    break;
   }
  } else {
   $36 = $28;
  }
 } while(0);
 $35 = ($36|0)==(2);
 if ($35) {
  $37 = ((($0)) + 4624|0);
  (_strncpy($37,8653,31)|0);
  $38 = ((($0)) + 4656|0);
  (_strncpy($38,8670,31)|0);
  $39 = ((($0)) + 2200|0);
  (_strcpy($39,8670)|0);
  $$pre5 = HEAP32[$15>>2]|0;
  $41 = $$pre5;
 } else {
  $41 = $36;
 }
 $40 = $41 & -2;
 $switch = ($40|0)==(2);
 $42 = ($16|0)==(1);
 $or$cond6 = $switch & $42;
 L26: do {
  if ($or$cond6) {
   $43 = ((($0)) + 44|0);
   $$02 = 1;
   while(1) {
    $44 = HEAP32[$0>>2]|0;
    $45 = ($$02|0)>($44|0);
    if ($45) {
     break L26;
    }
    $46 = +HEAPF64[$17>>3];
    $47 = HEAP32[$43>>2]|0;
    $48 = (((($47) + (($$02*96)|0)|0)) + 64|0);
    $49 = +HEAPF64[$48>>3];
    $50 = $49 * $46;
    HEAPF64[$48>>3] = $50;
    $51 = (($$02) + 1)|0;
    $$02 = $51;
   }
  }
 } while(0);
 HEAPF64[$17>>3] = $$01;
 $52 = ((($0)) + 4984|0);
 HEAPF64[$52>>3] = $$01;
 $53 = ((($0)) + 5008|0);
 HEAPF64[$53>>3] = $$01;
 $54 = +HEAPF64[$19>>3];
 $55 = $54 / $$01;
 HEAPF64[$19>>3] = $55;
 $$0 = 0;
 return ($$0|0);
}
function _EN_addnode($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0.0, $$0 = 0, $$01 = 0, $$02 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre6 = 0, $$pre7 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $storemerge = 0, $storemerge3 = 0, $storemerge4 = 0, $storemerge5 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = ((($0)) + 4256|0);
 HEAP32[$3>>2] = 0;
 $6 = ((($0)) + 5072|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0);
 if ($8) {
  $$0 = 102;
  STACKTOP = sp;return ($$0|0);
 }
 $9 = ((($0)) + 4524|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0);
 if (!($11)) {
  $$0 = 262;
  STACKTOP = sp;return ($$0|0);
 }
 $12 = ((($0)) + 4604|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0);
 if (!($14)) {
  $$0 = 262;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = (_namevalid($1)|0);
 $16 = ($15|0)==(0);
 if ($16) {
  $$0 = 252;
  STACKTOP = sp;return ($$0|0);
 }
 $17 = (_EN_getnodeindex($0,$1,$4)|0);
 $18 = ($17|0)==(0);
 if ($18) {
  $$0 = 215;
  STACKTOP = sp;return ($$0|0);
 }
 $19 = ($2>>>0)>(2);
 if ($19) {
  $$0 = 251;
  STACKTOP = sp;return ($$0|0);
 }
 $20 = HEAP32[$0>>2]|0;
 $21 = ($20*96)|0;
 $22 = (($21) + 192)|0;
 $23 = ((($0)) + 44|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (_realloc($24,$22)|0);
 HEAP32[$23>>2] = $25;
 $26 = HEAP32[$0>>2]|0;
 $27 = $26 << 3;
 $28 = (($27) + 16)|0;
 $29 = ((($0)) + 4260|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (_realloc($30,$28)|0);
 HEAP32[$29>>2] = $31;
 $32 = ((($0)) + 4824|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (_realloc($33,$28)|0);
 HEAP32[$32>>2] = $34;
 $35 = HEAP32[$5>>2]|0;
 $36 = (_realloc($35,$28)|0);
 HEAP32[$5>>2] = $36;
 $37 = ($2|0)==(0);
 $38 = HEAP32[$0>>2]|0;
 if ($37) {
  $39 = ((($0)) + 8|0);
  $40 = ((($0)) + 80|0);
  $storemerge = $38;
  while(1) {
   $41 = HEAP32[$39>>2]|0;
   $42 = ($storemerge|0)>($41|0);
   if (!($42)) {
    break;
   }
   $43 = HEAP32[$40>>2]|0;
   $44 = HEAP32[$23>>2]|0;
   $45 = (($44) + (($storemerge*96)|0)|0);
   $46 = (($storemerge) + 1)|0;
   _hashtable_update($43,$45,$46);
   $47 = HEAP32[$23>>2]|0;
   $48 = (($47) + (($46*96)|0)|0);
   $49 = (($47) + (($storemerge*96)|0)|0);
   dest=$48; src=$49; stop=dest+96|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
   $50 = (($storemerge) + -1)|0;
   $storemerge = $50;
  }
  HEAP32[$4>>2] = $storemerge;
  $51 = (($41) + 1)|0;
  HEAP32[$39>>2] = $51;
  $52 = HEAP32[$23>>2]|0;
  $53 = (($52) + (($51*96)|0)|0);
  $54 = (((($52) + (($51*96)|0)|0)) + 56|0);
  HEAP32[$54>>2] = 0;
  (_adddemand($53,0.0,0,0)|0);
  $55 = ((($0)) + 4|0);
  $56 = ((($0)) + 52|0);
  $storemerge3 = 1;
  while(1) {
   $57 = HEAP32[$55>>2]|0;
   $58 = ($storemerge3|0)>($57|0);
   if ($58) {
    break;
   }
   $59 = HEAP32[$56>>2]|0;
   $60 = (($59) + (($storemerge3*120)|0)|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = (($61) + 1)|0;
   HEAP32[$60>>2] = $62;
   $63 = (($storemerge3) + 1)|0;
   $storemerge3 = $63;
  }
  HEAP32[$4>>2] = $storemerge3;
  $64 = ((($0)) + 12|0);
  $65 = ((($0)) + 48|0);
  $storemerge4 = 1;
  while(1) {
   $66 = HEAP32[$64>>2]|0;
   $67 = ($storemerge4|0)>($66|0);
   if ($67) {
    break;
   }
   $68 = HEAP32[$65>>2]|0;
   $69 = (((($68) + ($storemerge4<<7)|0)) + 32|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = HEAP32[$39>>2]|0;
   $72 = ($70|0)<($71|0);
   if ($72) {
    $75 = $68;$78 = $71;
   } else {
    $73 = (($70) + 1)|0;
    HEAP32[$69>>2] = $73;
    $$pre = HEAP32[$65>>2]|0;
    $$pre6 = HEAP32[$39>>2]|0;
    $75 = $$pre;$78 = $$pre6;
   }
   $74 = (((($75) + ($storemerge4<<7)|0)) + 36|0);
   $76 = HEAP32[$74>>2]|0;
   $77 = ($76|0)<($78|0);
   if (!($77)) {
    $79 = (($76) + 1)|0;
    HEAP32[$74>>2] = $79;
   }
   $80 = (($storemerge4) + 1)|0;
   $storemerge4 = $80;
  }
  HEAP32[$4>>2] = $storemerge4;
  $81 = ((($0)) + 28|0);
  $82 = ((($0)) + 72|0);
  $storemerge5 = 1;
  while(1) {
   $83 = HEAP32[$81>>2]|0;
   $84 = ($storemerge5|0)>($83|0);
   if ($84) {
    break;
   }
   $85 = HEAP32[$82>>2]|0;
   $86 = (((($85) + (($storemerge5*40)|0)|0)) + 4|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = HEAP32[$39>>2]|0;
   $89 = ($87|0)<($88|0);
   if (!($89)) {
    $90 = (($87) + 1)|0;
    HEAP32[$86>>2] = $90;
   }
   $91 = (($storemerge5) + 1)|0;
   $storemerge5 = $91;
  }
  HEAP32[$4>>2] = $storemerge5;
  _adjusttankrules($0);
  $$01 = $53;$$02 = $51;$$pre$phiZ2D = $40;
 } else {
  $92 = (($38) + 1)|0;
  $93 = HEAP32[$23>>2]|0;
  $94 = (($93) + (($92*96)|0)|0);
  $95 = (((($93) + (($92*96)|0)|0)) + 56|0);
  HEAP32[$95>>2] = 0;
  $96 = ((($0)) + 4|0);
  $97 = HEAP32[$96>>2]|0;
  $98 = (($97) + 1)|0;
  HEAP32[$96>>2] = $98;
  $99 = ((($0)) + 52|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = ($97*120)|0;
  $102 = (($101) + 240)|0;
  $103 = (_realloc($100,$102)|0);
  HEAP32[$99>>2] = $103;
  $104 = HEAP32[$96>>2]|0;
  $105 = (($103) + (($104*120)|0)|0);
  HEAP32[$105>>2] = $92;
  $106 = (((($103) + (($104*120)|0)|0)) + 88|0);
  HEAP32[$106>>2] = 0;
  $107 = ($2|0)==(2);
  $$ = $107 ? 1.0 : 0.0;
  $108 = (((($103) + (($104*120)|0)|0)) + 8|0);
  HEAPF64[$108>>3] = $$;
  $109 = (((($103) + (($104*120)|0)|0)) + 16|0);
  $110 = (((($103) + (($104*120)|0)|0)) + 104|0);
  dest=$109; stop=dest+84|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  HEAPF64[$110>>3] = 1.0E+4;
  $111 = (((($103) + (($104*120)|0)|0)) + 112|0);
  HEAP32[$111>>2] = 0;
  $$pre7 = ((($0)) + 80|0);
  $$01 = $94;$$02 = $92;$$pre$phiZ2D = $$pre7;
 }
 $112 = HEAP32[$0>>2]|0;
 $113 = (($112) + 1)|0;
 HEAP32[$0>>2] = $113;
 $114 = ((($0)) + 1060|0);
 HEAP32[$114>>2] = $113;
 (_strncpy($$01,$1,31)|0);
 $115 = ((($$01)) + 88|0);
 HEAP32[$115>>2] = $2;
 $116 = ((($$01)) + 48|0);
 HEAPF64[$116>>3] = 0.0;
 $117 = ((($$01)) + 60|0);
 $118 = ((($$01)) + 32|0);
 ;HEAP32[$117>>2]=0|0;HEAP32[$117+4>>2]=0|0;HEAP32[$117+8>>2]=0|0;HEAP32[$117+12>>2]=0|0;HEAP32[$117+16>>2]=0|0;HEAP32[$117+20>>2]=0|0;HEAP32[$117+24>>2]=0|0;
 HEAPF64[$118>>3] = -1.0E+10;
 $119 = ((($$01)) + 40|0);
 HEAPF64[$119>>3] = -1.0E+10;
 $120 = ((($$01)) + 92|0);
 HEAP32[$120>>2] = 0;
 $121 = HEAP32[$$pre$phiZ2D>>2]|0;
 _hashtable_insert($121,$$01,$$02);
 HEAP32[$3>>2] = $$02;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _EN_getnodeindex($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$idx = 0, $$idx$val = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 5072|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  return 102;
 } else {
  $$idx = ((($0)) + 80|0);
  $$idx$val = HEAP32[$$idx>>2]|0;
  $6 = (_findnode($$idx$val,$1)|0);
  HEAP32[$2>>2] = $6;
  $7 = ($6|0)==(0);
  $spec$select = $7 ? 203 : 0;
  return ($spec$select|0);
 }
 return (0)|0;
}
function _EN_deletenode($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$2 = 0, $$3 = 0, $$4 = 0, $$5 = 0, $$6 = 0, $$7 = 0, $$pre = 0, $$pre$phi6Z2D = 0, $$pre$phiZ2D = 0, $$pre4 = 0, $$pre5 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ((($0)) + 5072|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  $$0 = 102;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = ((($0)) + 4524|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0);
 if (!($9)) {
  $$0 = 262;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = ((($0)) + 4604|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0);
 if (!($12)) {
  $$0 = 262;
  STACKTOP = sp;return ($$0|0);
 }
 $13 = ($1|0)<(1);
 if ($13) {
  $$0 = 203;
  STACKTOP = sp;return ($$0|0);
 }
 $14 = HEAP32[$0>>2]|0;
 $15 = ($14|0)<($1|0);
 if ($15) {
  $$0 = 203;
  STACKTOP = sp;return ($$0|0);
 }
 $16 = ($2>>>0)>(1);
 if ($16) {
  $$0 = 251;
  STACKTOP = sp;return ($$0|0);
 }
 $17 = ((($0)) + 4616|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==($1|0);
 if ($19) {
  $$0 = 260;
  STACKTOP = sp;return ($$0|0);
 }
 $20 = ($2|0)==(1);
 L22: do {
  if ($20) {
   $21 = (_incontrols($0,0,$1)|0);
   $22 = ($21|0)==(0);
   if (!($22)) {
    $$0 = 261;
    STACKTOP = sp;return ($$0|0);
   }
   $23 = ((($0)) + 12|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ((($0)) + 48|0);
   $$01 = 1;
   while(1) {
    $26 = ($$01|0)>($24|0);
    if ($26) {
     break L22;
    }
    $27 = HEAP32[$25>>2]|0;
    $28 = (((($27) + ($$01<<7)|0)) + 32|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = ($29|0)==($1|0);
    if ($30) {
     $$0 = 259;
     label = 55;
     break;
    }
    $31 = (((($27) + ($$01<<7)|0)) + 36|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = ($32|0)==($1|0);
    if ($33) {
     $$0 = 259;
     label = 55;
     break;
    }
    $34 = (($$01) + 1)|0;
    $$01 = $34;
   }
   if ((label|0) == 55) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $35 = ((($0)) + 44|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (($36) + (($1*96)|0)|0);
 (_EN_getnodetype($0,$1,$3)|0);
 $38 = ((($0)) + 80|0);
 $39 = HEAP32[$38>>2]|0;
 _hashtable_delete($39,$37);
 _freedemands($37);
 $40 = (((($36) + (($1*96)|0)|0)) + 60|0);
 $41 = HEAP32[$40>>2]|0;
 _free($41);
 $42 = (((($36) + (($1*96)|0)|0)) + 92|0);
 $43 = HEAP32[$42>>2]|0;
 _free($43);
 $$1 = $1;
 while(1) {
  $44 = HEAP32[$0>>2]|0;
  $45 = ($$1|0)<($44|0);
  if (!($45)) {
   break;
  }
  $46 = HEAP32[$35>>2]|0;
  $47 = (($$1) + 1)|0;
  $48 = (($46) + (($$1*96)|0)|0);
  $49 = (($46) + (($47*96)|0)|0);
  dest=$48; src=$49; stop=dest+96|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  $50 = HEAP32[$38>>2]|0;
  $51 = HEAP32[$35>>2]|0;
  $52 = (($51) + (($$1*96)|0)|0);
  _hashtable_update($50,$52,$$1);
  $$1 = $47;
 }
 $53 = HEAP32[$3>>2]|0;
 $54 = ($53|0)==(0);
 L40: do {
  if ($54) {
   $$pre4 = ((($0)) + 4|0);
   $$pre5 = ((($0)) + 52|0);
   $$pre$phi6Z2D = $$pre5;$$pre$phiZ2D = $$pre4;
  } else {
   $55 = (_findtank($0,$1)|0);
   $56 = ((($0)) + 4|0);
   $57 = ((($0)) + 52|0);
   $$2 = $55;
   while(1) {
    $58 = HEAP32[$56>>2]|0;
    $59 = ($$2|0)<($58|0);
    if (!($59)) {
     $$pre$phi6Z2D = $57;$$pre$phiZ2D = $56;
     break L40;
    }
    $60 = HEAP32[$57>>2]|0;
    $61 = (($60) + (($$2*120)|0)|0);
    $62 = (($$2) + 1)|0;
    $63 = (($60) + (($62*120)|0)|0);
    dest=$61; src=$63; stop=dest+120|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
    $$2 = $62;
   }
  }
 } while(0);
 $$3 = 1;
 while(1) {
  $64 = HEAP32[$$pre$phiZ2D>>2]|0;
  $65 = ($$3|0)>($64|0);
  if ($65) {
   break;
  }
  $66 = HEAP32[$$pre$phi6Z2D>>2]|0;
  $67 = (($66) + (($$3*120)|0)|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = ($68|0)>($1|0);
  if ($69) {
   $70 = (($68) + -1)|0;
   HEAP32[$67>>2] = $70;
  }
  $71 = (($$3) + 1)|0;
  $$3 = $71;
 }
 $72 = ((($0)) + 12|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = ((($0)) + 48|0);
 $$4 = $73;
 while(1) {
  $75 = ($$4|0)>(0);
  if (!($75)) {
   break;
  }
  $76 = HEAP32[$74>>2]|0;
  $77 = (((($76) + ($$4<<7)|0)) + 32|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = ($78|0)==($1|0);
  if ($79) {
   label = 32;
  } else {
   $80 = (((($76) + ($$4<<7)|0)) + 36|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = ($81|0)==($1|0);
   if ($82) {
    label = 32;
   }
  }
  if ((label|0) == 32) {
   label = 0;
   (_EN_deletelink($0,$$4,0)|0);
  }
  $83 = (($$4) + -1)|0;
  $$4 = $83;
 }
 $$5 = 1;
 while(1) {
  $84 = HEAP32[$72>>2]|0;
  $85 = ($$5|0)>($84|0);
  if ($85) {
   break;
  }
  $86 = HEAP32[$74>>2]|0;
  $87 = (((($86) + ($$5<<7)|0)) + 32|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = ($88|0)>($1|0);
  if ($89) {
   $90 = (($88) + -1)|0;
   HEAP32[$87>>2] = $90;
   $$pre = HEAP32[$74>>2]|0;
   $92 = $$pre;
  } else {
   $92 = $86;
  }
  $91 = (((($92) + ($$5<<7)|0)) + 36|0);
  $93 = HEAP32[$91>>2]|0;
  $94 = ($93|0)>($1|0);
  if ($94) {
   $95 = (($93) + -1)|0;
   HEAP32[$91>>2] = $95;
  }
  $96 = (($$5) + 1)|0;
  $$5 = $96;
 }
 $97 = ((($0)) + 28|0);
 $98 = HEAP32[$97>>2]|0;
 $99 = ((($0)) + 72|0);
 $$6 = $98;
 while(1) {
  $100 = ($$6|0)>(0);
  if (!($100)) {
   break;
  }
  $101 = HEAP32[$99>>2]|0;
  $102 = (((($101) + (($$6*40)|0)|0)) + 4|0);
  $103 = HEAP32[$102>>2]|0;
  $104 = ($103|0)==($1|0);
  if ($104) {
   (_EN_deletecontrol($0,$$6)|0);
  }
  $105 = (($$6) + -1)|0;
  $$6 = $105;
 }
 $$7 = 1;
 while(1) {
  $106 = HEAP32[$97>>2]|0;
  $107 = ($$7|0)>($106|0);
  if ($107) {
   break;
  }
  $108 = HEAP32[$99>>2]|0;
  $109 = (((($108) + (($$7*40)|0)|0)) + 4|0);
  $110 = HEAP32[$109>>2]|0;
  $111 = ($110|0)>($1|0);
  if ($111) {
   $112 = (($110) + -1)|0;
   HEAP32[$109>>2] = $112;
  }
  $113 = (($$7) + 1)|0;
  $$7 = $113;
 }
 _adjustrules($0,6,$1);
 if ($54) {
  $114 = ((($0)) + 8|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = (($115) + -1)|0;
  HEAP32[$114>>2] = $116;
 } else {
  $117 = HEAP32[$$pre$phiZ2D>>2]|0;
  $118 = (($117) + -1)|0;
  HEAP32[$$pre$phiZ2D>>2] = $118;
 }
 $119 = HEAP32[$0>>2]|0;
 $120 = (($119) + -1)|0;
 HEAP32[$0>>2] = $120;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _EN_getnodetype($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $storemerge1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$2>>2] = -1;
 $3 = ((($0)) + 5072|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  $$0 = 102;
  return ($$0|0);
 }
 $6 = ($1|0)<(1);
 if ($6) {
  $$0 = 203;
  return ($$0|0);
 }
 $7 = HEAP32[$0>>2]|0;
 $8 = ($7|0)<($1|0);
 if ($8) {
  $$0 = 203;
  return ($$0|0);
 }
 $9 = ((($0)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)<($1|0);
 if ($11) {
  $12 = ((($0)) + 52|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($1) - ($10))|0;
  $15 = (((($13) + (($14*120)|0)|0)) + 8|0);
  $16 = +HEAPF64[$15>>3];
  $17 = $16 == 0.0;
  if ($17) {
   $storemerge1 = 1;
  } else {
   $storemerge1 = 2;
  }
 } else {
  $storemerge1 = 0;
 }
 HEAP32[$2>>2] = $storemerge1;
 $$0 = 0;
 return ($$0|0);
}
function _EN_deletelink($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$2 = 0, $$3 = 0, $$4 = 0, $$5 = 0, $$6 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ((($0)) + 5072|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  $$0 = 102;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = ((($0)) + 4524|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0);
 if (!($9)) {
  $$0 = 262;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = ((($0)) + 4604|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0);
 if (!($12)) {
  $$0 = 262;
  STACKTOP = sp;return ($$0|0);
 }
 $13 = ($1|0)<(1);
 if ($13) {
  $$0 = 204;
  STACKTOP = sp;return ($$0|0);
 }
 $14 = ((($0)) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)<($1|0);
 if ($16) {
  $$0 = 204;
  STACKTOP = sp;return ($$0|0);
 }
 $17 = ($2>>>0)>(1);
 if ($17) {
  $$0 = 251;
  STACKTOP = sp;return ($$0|0);
 }
 $18 = ($2|0)==(1);
 if ($18) {
  $19 = (_incontrols($0,1,$1)|0);
  $20 = ($19|0)>(0);
  if ($20) {
   $$0 = 261;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $21 = ((($0)) + 48|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($22) + ($1<<7)|0);
 (_EN_getlinktype($0,$1,$3)|0);
 $24 = ((($0)) + 84|0);
 $25 = HEAP32[$24>>2]|0;
 _hashtable_delete($25,$23);
 $26 = (((($22) + ($1<<7)|0)) + 124|0);
 $27 = HEAP32[$26>>2]|0;
 _free($27);
 _freelinkvertices($23);
 $$01 = $1;
 while(1) {
  $28 = HEAP32[$14>>2]|0;
  $29 = ($$01|0)<($28|0);
  if (!($29)) {
   break;
  }
  $30 = HEAP32[$21>>2]|0;
  $31 = (($$01) + 1)|0;
  $32 = (($30) + ($$01<<7)|0);
  $33 = (($30) + ($31<<7)|0);
  dest=$32; src=$33; stop=dest+128|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  $34 = HEAP32[$24>>2]|0;
  $35 = HEAP32[$21>>2]|0;
  $36 = (($35) + ($$01<<7)|0);
  _hashtable_update($34,$36,$$01);
  $$01 = $31;
 }
 $37 = ((($0)) + 20|0);
 $38 = ((($0)) + 56|0);
 $$1 = 1;
 while(1) {
  $39 = HEAP32[$37>>2]|0;
  $40 = ($$1|0)>($39|0);
  if ($40) {
   break;
  }
  $41 = HEAP32[$38>>2]|0;
  $42 = (($41) + ($$1<<7)|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($43|0)>($1|0);
  if ($44) {
   $45 = (($43) + -1)|0;
   HEAP32[$42>>2] = $45;
  }
  $46 = (($$1) + 1)|0;
  $$1 = $46;
 }
 $47 = ((($0)) + 24|0);
 $48 = ((($0)) + 60|0);
 $$2 = 1;
 while(1) {
  $49 = HEAP32[$47>>2]|0;
  $50 = ($$2|0)>($49|0);
  if ($50) {
   break;
  }
  $51 = HEAP32[$48>>2]|0;
  $52 = (($51) + ($$2<<2)|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = ($53|0)>($1|0);
  if ($54) {
   $55 = (($53) + -1)|0;
   HEAP32[$52>>2] = $55;
  }
  $56 = (($$2) + 1)|0;
  $$2 = $56;
 }
 $57 = HEAP32[$3>>2]|0;
 $58 = ($57|0)==(2);
 if ($58) {
  $59 = (_findpump($0,$1)|0);
  $$3 = $59;
  while(1) {
   $60 = HEAP32[$37>>2]|0;
   $61 = ($$3|0)<($60|0);
   if (!($61)) {
    break;
   }
   $62 = HEAP32[$38>>2]|0;
   $63 = (($62) + ($$3<<7)|0);
   $64 = (($$3) + 1)|0;
   $65 = (($62) + ($64<<7)|0);
   dest=$63; src=$65; stop=dest+128|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
   $$3 = $64;
  }
  $66 = (($60) + -1)|0;
  HEAP32[$37>>2] = $66;
 }
 $67 = ($57|0)>(2);
 if ($67) {
  $68 = (_findvalve($0,$1)|0);
  $$4 = $68;
  while(1) {
   $69 = HEAP32[$47>>2]|0;
   $70 = ($$4|0)<($69|0);
   if (!($70)) {
    break;
   }
   $71 = HEAP32[$48>>2]|0;
   $72 = (($$4) + 1)|0;
   $73 = (($71) + ($72<<2)|0);
   $74 = (($71) + ($$4<<2)|0);
   $75 = HEAP32[$73>>2]|0;
   HEAP32[$74>>2] = $75;
   $$4 = $72;
  }
  $76 = (($69) + -1)|0;
  HEAP32[$47>>2] = $76;
 }
 $77 = ((($0)) + 28|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = ((($0)) + 72|0);
 $$5 = $78;
 while(1) {
  $80 = ($$5|0)>(0);
  if (!($80)) {
   break;
  }
  $81 = HEAP32[$79>>2]|0;
  $82 = (($81) + (($$5*40)|0)|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = ($83|0)==($1|0);
  if ($84) {
   (_EN_deletecontrol($0,$$5)|0);
  }
  $85 = (($$5) + -1)|0;
  $$5 = $85;
 }
 $$6 = 1;
 while(1) {
  $86 = HEAP32[$77>>2]|0;
  $87 = ($$6|0)>($86|0);
  if ($87) {
   break;
  }
  $88 = HEAP32[$79>>2]|0;
  $89 = (($88) + (($$6*40)|0)|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = ($90|0)>($1|0);
  if ($91) {
   $92 = (($90) + -1)|0;
   HEAP32[$89>>2] = $92;
  }
  $93 = (($$6) + 1)|0;
  $$6 = $93;
 }
 _adjustrules($0,7,$1);
 $94 = HEAP32[$14>>2]|0;
 $95 = (($94) + -1)|0;
 HEAP32[$14>>2] = $95;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _EN_deletecontrol($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$01 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $2 = ($1|0)<(1);
 if ($2) {
  $$0 = 241;
  return ($$0|0);
 }
 $3 = ((($0)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)<($1|0);
 if ($5) {
  $$0 = 241;
  return ($$0|0);
 }
 $6 = ((($0)) + 72|0);
 $$01 = $1;$8 = $4;
 while(1) {
  $7 = ($$01|0)<($8|0);
  if (!($7)) {
   break;
  }
  $9 = HEAP32[$6>>2]|0;
  $10 = (($9) + (($$01*40)|0)|0);
  $11 = (($$01) + 1)|0;
  $12 = (($9) + (($11*40)|0)|0);
  dest=$10; src=$12; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  $$pre = HEAP32[$3>>2]|0;
  $$01 = $11;$8 = $$pre;
 }
 $13 = (($8) + -1)|0;
 HEAP32[$3>>2] = $13;
 $$0 = 0;
 return ($$0|0);
}
function _EN_getnodeid($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 (_strcpy($2,21208)|0);
 $3 = ((($0)) + 5072|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  $$0 = 102;
  return ($$0|0);
 }
 $6 = ($1|0)<(1);
 if ($6) {
  $$0 = 203;
  return ($$0|0);
 }
 $7 = HEAP32[$0>>2]|0;
 $8 = ($7|0)<($1|0);
 if ($8) {
  $$0 = 203;
  return ($$0|0);
 }
 $9 = ((($0)) + 44|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + (($1*96)|0)|0);
 (_strcpy($2,$11)|0);
 $$0 = 0;
 return ($$0|0);
}
function _EN_setnodeid($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1|0)<(1);
 if ($3) {
  $$0 = 203;
  return ($$0|0);
 }
 $4 = HEAP32[$0>>2]|0;
 $5 = ($4|0)<($1|0);
 if ($5) {
  $$0 = 203;
  return ($$0|0);
 }
 $6 = (_namevalid($2)|0);
 $7 = ($6|0)==(0);
 if ($7) {
  $$0 = 252;
  return ($$0|0);
 }
 $8 = ((($0)) + 80|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_hashtable_find($9,$2)|0);
 $11 = ($10|0)>(0);
 if ($11) {
  $$0 = 215;
  return ($$0|0);
 }
 $12 = ((($0)) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + (($1*96)|0)|0);
 _hashtable_delete($9,$14);
 $15 = HEAP32[$12>>2]|0;
 $16 = (($15) + (($1*96)|0)|0);
 (_strncpy($16,$2,31)|0);
 $17 = HEAP32[$8>>2]|0;
 $18 = HEAP32[$12>>2]|0;
 $19 = (($18) + (($1*96)|0)|0);
 _hashtable_insert($17,$19,$1);
 $$0 = 0;
 return ($$0|0);
}
function _EN_setnodevalue($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 var $$0 = 0, $$01 = 0, $$02 = 0.0, $$in = 0.0, $$in$v = 0.0, $$in3 = 0.0, $$in3$v = 0.0, $$in4 = 0.0, $$in4$v = 0.0, $$in6 = 0.0, $$in6$v = 0.0, $$in7 = 0.0, $$in7$v = 0.0, $$sink = 0.0, $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0, $104 = 0.0;
 var $105 = 0.0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0, $118 = 0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0;
 var $123 = 0, $124 = 0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0.0, $135 = 0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0.0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0.0, $146 = 0.0, $147 = 0, $148 = 0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0, $152 = 0, $153 = 0.0, $154 = 0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0, $159 = 0.0;
 var $16 = 0, $160 = 0.0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0.0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0.0, $175 = 0, $176 = 0, $177 = 0.0;
 var $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0, $181 = 0.0, $182 = 0, $183 = 0, $184 = 0.0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0, $193 = 0.0, $194 = 0.0, $195 = 0;
 var $196 = 0, $197 = 0.0, $198 = 0.0, $199 = 0, $20 = 0, $200 = 0, $201 = 0.0, $202 = 0, $203 = 0.0, $204 = 0.0, $205 = 0.0, $206 = 0, $207 = 0.0, $208 = 0.0, $209 = 0, $21 = 0.0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0.0, $219 = 0, $22 = 0.0, $220 = 0, $221 = 0, $222 = 0, $223 = 0.0, $224 = 0, $225 = 0.0, $226 = 0.0, $227 = 0.0, $228 = 0.0, $229 = 0, $23 = 0, $230 = 0, $231 = 0.0;
 var $232 = 0, $233 = 0, $234 = 0.0, $235 = 0.0, $236 = 0.0, $237 = 0, $238 = 0, $239 = 0, $24 = 0.0, $240 = 0, $241 = 0.0, $242 = 0, $243 = 0, $244 = 0.0, $245 = 0, $246 = 0, $247 = 0.0, $248 = 0.0, $249 = 0, $25 = 0.0;
 var $250 = 0, $251 = 0.0, $252 = 0.0, $253 = 0.0, $254 = 0, $255 = 0.0, $256 = 0.0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0.0, $261 = 0.0, $262 = 0.0, $263 = 0, $264 = 0, $265 = 0.0, $266 = 0.0, $267 = 0.0, $268 = 0.0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0.0, $274 = 0, $275 = 0.0, $276 = 0.0, $277 = 0, $278 = 0.0, $279 = 0.0, $28 = 0.0, $280 = 0, $281 = 0.0, $282 = 0, $283 = 0, $284 = 0.0, $285 = 0, $286 = 0;
 var $287 = 0, $288 = 0, $289 = 0, $29 = 0.0, $290 = 0, $291 = 0, $292 = 0, $293 = 0.0, $294 = 0, $295 = 0.0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0.0, $303 = 0, $304 = 0.0;
 var $305 = 0.0, $306 = 0, $307 = 0.0, $308 = 0.0, $309 = 0, $31 = 0.0, $310 = 0.0, $311 = 0, $312 = 0, $313 = 0.0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0.0, $320 = 0, $321 = 0, $322 = 0;
 var $323 = 0, $324 = 0, $325 = 0, $326 = 0.0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0.0, $331 = 0.0, $332 = 0.0, $333 = 0, $334 = 0.0, $335 = 0.0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0.0, $340 = 0;
 var $341 = 0, $342 = 0.0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0.0, $350 = 0, $351 = 0.0, $352 = 0, $353 = 0, $354 = 0.0, $355 = 0.0, $356 = 0, $357 = 0, $358 = 0, $359 = 0;
 var $36 = 0.0, $360 = 0.0, $361 = 0, $362 = 0.0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0.0, $370 = 0, $371 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $or$cond = 0, $or$cond12 = 0, $or$cond8 = 0, $or$cond9 = 0, $sext = 0, $sext5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 4256|0);
 $5 = ((($0)) + 44|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 52|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($0)) + 36|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($0)) + 4904|0);
 $14 = ((($0)) + 5072|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0);
 if ($16) {
  $$0 = 102;
  return ($$0|0);
 }
 $17 = HEAP32[$0>>2]|0;
 $18 = ($1|0)<(1);
 $19 = ($17|0)<($1|0);
 $or$cond = $18 | $19;
 if ($or$cond) {
  $$0 = 203;
  return ($$0|0);
 }
 do {
  switch ($2|0) {
  case 0:  {
   $20 = ($10|0)<($1|0);
   $21 = +HEAPF64[$13>>3];
   $22 = $3 / $21;
   $23 = (((($6) + (($1*96)|0)|0)) + 48|0);
   if ($20) {
    $24 = +HEAPF64[$23>>3];
    $25 = $22 - $24;
    $26 = (($1) - ($10))|0;
    $27 = (((($8) + (($26*120)|0)|0)) + 32|0);
    $28 = +HEAPF64[$27>>3];
    $29 = $28 + $25;
    HEAPF64[$27>>3] = $29;
    $30 = (((($8) + (($26*120)|0)|0)) + 16|0);
    $31 = +HEAPF64[$30>>3];
    $32 = $31 + $25;
    HEAPF64[$30>>3] = $32;
    $33 = (((($8) + (($26*120)|0)|0)) + 24|0);
    $34 = +HEAPF64[$33>>3];
    $35 = $34 + $25;
    HEAPF64[$33>>3] = $35;
    $36 = +HEAPF64[$23>>3];
    $37 = $36 + $25;
    HEAPF64[$23>>3] = $37;
    $38 = HEAP32[$4>>2]|0;
    $39 = (($38) + ($1<<3)|0);
    $40 = +HEAPF64[$39>>3];
    $41 = $40 + $25;
    HEAPF64[$39>>3] = $41;
    $$0 = 0;
    return ($$0|0);
   } else {
    HEAPF64[$23>>3] = $22;
    $$0 = 0;
    return ($$0|0);
   }
   break;
  }
  case 1:  {
   $42 = ($10|0)<($1|0);
   if ($42) {
    $$0 = 0;
    return ($$0|0);
   }
   $43 = (((($6) + (($1*96)|0)|0)) + 56|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ($44|0)==(0|0);
   if ($45) {
    $$0 = 0;
    return ($$0|0);
   }
   $46 = ((($0)) + 4960|0);
   $47 = +HEAPF64[$46>>3];
   $48 = $3 / $47;
   HEAPF64[$44>>3] = $48;
   $$0 = 0;
   return ($$0|0);
   break;
  }
  case 2:  {
   $49 = !($3 >= 0.0);
   $$in7$v = $49 ? -0.5 : 0.5;
   $$in7 = $$in7$v + $3;
   $50 = (~~(($$in7)));
   $51 = ($50|0)<(0);
   $52 = ($12|0)<($50|0);
   $or$cond8 = $51 | $52;
   if ($or$cond8) {
    $$0 = 205;
    return ($$0|0);
   }
   $53 = ($10|0)<($1|0);
   if ($53) {
    $58 = (($1) - ($10))|0;
    $59 = (((($8) + (($58*120)|0)|0)) + 88|0);
    HEAP32[$59>>2] = $50;
    $$0 = 0;
    return ($$0|0);
   }
   $54 = (((($6) + (($1*96)|0)|0)) + 56|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = ($55|0)==(0|0);
   if ($56) {
    $$0 = 0;
    return ($$0|0);
   }
   $57 = ((($55)) + 8|0);
   HEAP32[$57>>2] = $50;
   $$0 = 0;
   return ($$0|0);
   break;
  }
  case 3:  {
   $60 = ($10|0)<($1|0);
   if ($60) {
    $$0 = 0;
    return ($$0|0);
   }
   $61 = $3 < 0.0;
   if ($61) {
    $$0 = 209;
    return ($$0|0);
   }
   $62 = $3 > 0.0;
   if ($62) {
    $63 = ((($0)) + 4960|0);
    $64 = +HEAPF64[$63>>3];
    $65 = $64 / $3;
    $66 = ((($0)) + 4312|0);
    $67 = +HEAPF64[$66>>3];
    $68 = (+Math_pow((+$65),(+$67)));
    $69 = ((($0)) + 4928|0);
    $70 = +HEAPF64[$69>>3];
    $71 = $68 / $70;
    $$02 = $71;
   } else {
    $$02 = $3;
   }
   $72 = (((($6) + (($1*96)|0)|0)) + 72|0);
   HEAPF64[$72>>3] = $$02;
   $$0 = 0;
   return ($$0|0);
   break;
  }
  case 4:  {
   $73 = $3 < 0.0;
   if ($73) {
    $$0 = 209;
    return ($$0|0);
   }
   $74 = ((($0)) + 4936|0);
   $75 = +HEAPF64[$74>>3];
   $76 = $3 / $75;
   $77 = (((($6) + (($1*96)|0)|0)) + 64|0);
   HEAPF64[$77>>3] = $76;
   $78 = ($10|0)<($1|0);
   if (!($78)) {
    $$0 = 0;
    return ($$0|0);
   }
   $79 = (($1) - ($10))|0;
   $80 = (((($8) + (($79*120)|0)|0)) + 80|0);
   HEAPF64[$80>>3] = $76;
   $$0 = 0;
   return ($$0|0);
   break;
  }
  case 6: case 7: case 5:  {
   $81 = $3 < 0.0;
   if ($81) {
    $$0 = 209;
    return ($$0|0);
   }
   $82 = (((($6) + (($1*96)|0)|0)) + 60|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = ($83|0)==(0|0);
   do {
    if ($84) {
     $85 = (_malloc(32)|0);
     $86 = ($85|0)==(0|0);
     if ($86) {
      $$0 = 101;
      return ($$0|0);
     } else {
      $87 = ((($85)) + 24|0);
      HEAP32[$87>>2] = 0;
      HEAPF64[$85>>3] = 0.0;
      $88 = ((($85)) + 8|0);
      HEAP32[$88>>2] = 0;
      HEAP32[$82>>2] = $85;
      $$01 = $85;
      break;
     }
    } else {
     $$01 = $83;
    }
   } while(0);
   switch ($2|0) {
   case 5:  {
    HEAPF64[$$01>>3] = $3;
    $$0 = 0;
    return ($$0|0);
    break;
   }
   case 6:  {
    $89 = !($3 >= 0.0);
    $$in6$v = $89 ? -0.5 : 0.5;
    $$in6 = $$in6$v + $3;
    $90 = (~~(($$in6)));
    $91 = ($90|0)<(0);
    $92 = ($12|0)<($90|0);
    $or$cond9 = $91 | $92;
    if ($or$cond9) {
     $$0 = 205;
     return ($$0|0);
    }
    $93 = ((($$01)) + 8|0);
    HEAP32[$93>>2] = $90;
    $$0 = 0;
    return ($$0|0);
    break;
   }
   default: {
    $94 = !($3 >= 0.0);
    $$in4$v = $94 ? -0.5 : 0.5;
    $$in4 = $$in4$v + $3;
    $95 = (~~(($$in4)));
    $96 = ($95>>>0)>(3);
    if ($96) {
     $$0 = 251;
     return ($$0|0);
    }
    $sext5 = $95 << 24;
    $97 = $sext5 >> 24;
    $98 = ((($$01)) + 24|0);
    HEAP32[$98>>2] = $97;
    $$0 = 0;
    return ($$0|0);
   }
   }
   break;
  }
  case 8:  {
   $99 = ($10|0)<($1|0);
   if (!($99)) {
    $$0 = 0;
    return ($$0|0);
   }
   $100 = (($1) - ($10))|0;
   $101 = (((($8) + (($100*120)|0)|0)) + 8|0);
   $102 = +HEAPF64[$101>>3];
   $103 = $102 == 0.0;
   if ($103) {
    $104 = +HEAPF64[$13>>3];
    $105 = $3 / $104;
    $106 = (((($8) + (($100*120)|0)|0)) + 32|0);
    HEAPF64[$106>>3] = $105;
    $107 = (((($8) + (($100*120)|0)|0)) + 16|0);
    HEAPF64[$107>>3] = $105;
    $108 = (((($8) + (($100*120)|0)|0)) + 24|0);
    HEAPF64[$108>>3] = $105;
    $109 = (((($6) + (($1*96)|0)|0)) + 48|0);
    HEAPF64[$109>>3] = $105;
    $110 = +HEAPF64[$106>>3];
    $111 = HEAP32[$4>>2]|0;
    $112 = (($111) + ($1<<3)|0);
    HEAPF64[$112>>3] = $110;
    $$0 = 0;
    return ($$0|0);
   }
   $113 = (((($6) + (($1*96)|0)|0)) + 48|0);
   $114 = +HEAPF64[$113>>3];
   $115 = +HEAPF64[$13>>3];
   $116 = $3 / $115;
   $117 = $114 + $116;
   $118 = (((($8) + (($100*120)|0)|0)) + 24|0);
   $119 = +HEAPF64[$118>>3];
   $120 = $117 > $119;
   if ($120) {
    $$0 = 225;
    return ($$0|0);
   }
   $121 = (((($8) + (($100*120)|0)|0)) + 16|0);
   $122 = +HEAPF64[$121>>3];
   $123 = $117 < $122;
   if ($123) {
    $$0 = 225;
    return ($$0|0);
   }
   $124 = (((($8) + (($100*120)|0)|0)) + 32|0);
   HEAPF64[$124>>3] = $117;
   $125 = (+_tankvolume($0,$100,$117));
   $126 = (((($8) + (($100*120)|0)|0)) + 56|0);
   HEAPF64[$126>>3] = $125;
   $127 = (((($8) + (($100*120)|0)|0)) + 72|0);
   HEAPF64[$127>>3] = $125;
   $128 = HEAP32[$4>>2]|0;
   $129 = (($128) + ($1<<3)|0);
   HEAPF64[$129>>3] = $117;
   $$0 = 0;
   return ($$0|0);
   break;
  }
  case 17:  {
   $130 = !($3 <= 0.0);
   if (!($130)) {
    $$0 = 209;
    return ($$0|0);
   }
   $131 = ($10|0)<($1|0);
   if (!($131)) {
    $$0 = 0;
    return ($$0|0);
   }
   $132 = (($1) - ($10))|0;
   $133 = (((($8) + (($132*120)|0)|0)) + 8|0);
   $134 = +HEAPF64[$133>>3];
   $135 = $134 == 0.0;
   if ($135) {
    $$0 = 0;
    return ($$0|0);
   }
   $136 = +HEAPF64[$13>>3];
   $137 = $3 / $136;
   $138 = $137 * $137;
   $139 = $138 * 3.1415926535897931;
   $140 = $139 * 0.25;
   HEAPF64[$133>>3] = $140;
   $141 = (((($8) + (($132*120)|0)|0)) + 92|0);
   $142 = HEAP32[$141>>2]|0;
   $143 = ($142|0)>(0);
   if ($143) {
    HEAP32[$141>>2] = 0;
    $144 = (((($8) + (($132*120)|0)|0)) + 16|0);
    $145 = +HEAPF64[$144>>3];
    $146 = $140 * $145;
    $147 = (((($8) + (($132*120)|0)|0)) + 40|0);
    HEAPF64[$147>>3] = $146;
   }
   $148 = (((($8) + (($132*120)|0)|0)) + 32|0);
   $149 = +HEAPF64[$148>>3];
   $150 = (+_tankvolume($0,$132,$149));
   $151 = (((($8) + (($132*120)|0)|0)) + 56|0);
   HEAPF64[$151>>3] = $150;
   $152 = (((($8) + (($132*120)|0)|0)) + 48|0);
   $153 = +HEAPF64[$152>>3];
   $154 = (((($8) + (($132*120)|0)|0)) + 24|0);
   $155 = +HEAPF64[$154>>3];
   $156 = (+_tankvolume($0,$132,$155));
   HEAPF64[$152>>3] = $156;
   $157 = $156 / $153;
   $158 = (((($8) + (($132*120)|0)|0)) + 104|0);
   $159 = +HEAPF64[$158>>3];
   $160 = $159 * $157;
   HEAPF64[$158>>3] = $160;
   $$0 = 0;
   return ($$0|0);
   break;
  }
  case 18:  {
   $161 = $3 < 0.0;
   if ($161) {
    $$0 = 209;
    return ($$0|0);
   }
   $162 = ($10|0)<($1|0);
   if (!($162)) {
    $$0 = 0;
    return ($$0|0);
   }
   $163 = (($1) - ($10))|0;
   $164 = (((($8) + (($163*120)|0)|0)) + 8|0);
   $165 = +HEAPF64[$164>>3];
   $166 = $165 == 0.0;
   if ($166) {
    $$0 = 0;
    return ($$0|0);
   }
   $167 = (((($8) + (($163*120)|0)|0)) + 92|0);
   $168 = HEAP32[$167>>2]|0;
   $169 = ($168|0)>(0);
   if (!($169)) {
    $188 = $3 == 0.0;
    if ($188) {
     $189 = (((($8) + (($163*120)|0)|0)) + 16|0);
     $190 = +HEAPF64[$189>>3];
     $191 = $165 * $190;
     $$sink = $191;
    } else {
     $192 = ((($0)) + 5040|0);
     $193 = +HEAPF64[$192>>3];
     $194 = $3 / $193;
     $$sink = $194;
    }
    $195 = (((($8) + (($163*120)|0)|0)) + 40|0);
    HEAPF64[$195>>3] = $$sink;
    $196 = (((($8) + (($163*120)|0)|0)) + 32|0);
    $197 = +HEAPF64[$196>>3];
    $198 = (+_tankvolume($0,$163,$197));
    $199 = (((($8) + (($163*120)|0)|0)) + 56|0);
    HEAPF64[$199>>3] = $198;
    $200 = (((($8) + (($163*120)|0)|0)) + 48|0);
    $201 = +HEAPF64[$200>>3];
    $202 = (((($8) + (($163*120)|0)|0)) + 24|0);
    $203 = +HEAPF64[$202>>3];
    $204 = (+_tankvolume($0,$163,$203));
    HEAPF64[$200>>3] = $204;
    $205 = $204 / $201;
    $206 = (((($8) + (($163*120)|0)|0)) + 104|0);
    $207 = +HEAPF64[$206>>3];
    $208 = $207 * $205;
    HEAPF64[$206>>3] = $208;
    $$0 = 0;
    return ($$0|0);
   }
   $170 = ((($0)) + 68|0);
   $171 = HEAP32[$170>>2]|0;
   $172 = (((($171) + (($168*56)|0)|0)) + 52|0);
   $173 = HEAP32[$172>>2]|0;
   $174 = +HEAPF64[$173>>3];
   $175 = $174 > $3;
   if ($175) {
    $$0 = 225;
    return ($$0|0);
   }
   $176 = ((($0)) + 5040|0);
   $177 = +HEAPF64[$176>>3];
   $178 = $3 / $177;
   $179 = (+_tankgrade($0,$163,$178));
   $180 = (((($8) + (($163*120)|0)|0)) + 32|0);
   $181 = +HEAPF64[$180>>3];
   $182 = $179 > $181;
   if ($182) {
    $$0 = 225;
    return ($$0|0);
   }
   $183 = (((($8) + (($163*120)|0)|0)) + 24|0);
   $184 = +HEAPF64[$183>>3];
   $185 = $179 > $184;
   if ($185) {
    $$0 = 225;
    return ($$0|0);
   }
   $186 = (((($8) + (($163*120)|0)|0)) + 16|0);
   HEAPF64[$186>>3] = $179;
   $187 = (((($8) + (($163*120)|0)|0)) + 40|0);
   HEAPF64[$187>>3] = $178;
   $$0 = 0;
   return ($$0|0);
   break;
  }
  case 19:  {
   $209 = !($3 >= 0.0);
   $$in3$v = $209 ? -0.5 : 0.5;
   $$in3 = $$in3$v + $3;
   $210 = (~~(($$in3)));
   $211 = ($210|0)<(1);
   if ($211) {
    $$0 = 205;
    return ($$0|0);
   }
   $212 = ((($0)) + 40|0);
   $213 = HEAP32[$212>>2]|0;
   $214 = ($213|0)<($210|0);
   if ($214) {
    $$0 = 205;
    return ($$0|0);
   }
   $215 = ($10|0)<($1|0);
   if (!($215)) {
    $$0 = 0;
    return ($$0|0);
   }
   $216 = (($1) - ($10))|0;
   $217 = (((($8) + (($216*120)|0)|0)) + 8|0);
   $218 = +HEAPF64[$217>>3];
   $219 = $218 == 0.0;
   if ($219) {
    $$0 = 0;
    return ($$0|0);
   }
   $220 = ((($0)) + 68|0);
   $221 = HEAP32[$220>>2]|0;
   $222 = (((($8) + (($216*120)|0)|0)) + 16|0);
   $223 = +HEAPF64[$222>>3];
   $224 = (((($6) + (($1*96)|0)|0)) + 48|0);
   $225 = +HEAPF64[$224>>3];
   $226 = $223 - $225;
   $227 = +HEAPF64[$13>>3];
   $228 = $226 * $227;
   $229 = (((($221) + (($210*56)|0)|0)) + 48|0);
   $230 = HEAP32[$229>>2]|0;
   $231 = +HEAPF64[$230>>3];
   $232 = $228 < $231;
   if ($232) {
    $$0 = 225;
    return ($$0|0);
   }
   $233 = (((($8) + (($216*120)|0)|0)) + 24|0);
   $234 = +HEAPF64[$233>>3];
   $235 = $234 - $225;
   $236 = $235 * $227;
   $237 = (((($221) + (($210*56)|0)|0)) + 40|0);
   $238 = HEAP32[$237>>2]|0;
   $239 = (($238) + -1)|0;
   $240 = (($230) + ($239<<3)|0);
   $241 = +HEAPF64[$240>>3];
   $242 = $236 > $241;
   if ($242) {
    $$0 = 225;
    return ($$0|0);
   }
   $243 = (((($8) + (($216*120)|0)|0)) + 92|0);
   HEAP32[$243>>2] = $210;
   $244 = (+_tankvolume($0,$216,$223));
   $245 = (((($8) + (($216*120)|0)|0)) + 40|0);
   HEAPF64[$245>>3] = $244;
   $246 = (((($8) + (($216*120)|0)|0)) + 32|0);
   $247 = +HEAPF64[$246>>3];
   $248 = (+_tankvolume($0,$216,$247));
   $249 = (((($8) + (($216*120)|0)|0)) + 56|0);
   HEAPF64[$249>>3] = $248;
   $250 = (((($8) + (($216*120)|0)|0)) + 48|0);
   $251 = +HEAPF64[$250>>3];
   $252 = (+_tankvolume($0,$216,$234));
   HEAPF64[$250>>3] = $252;
   $253 = $252 / $251;
   $254 = (((($8) + (($216*120)|0)|0)) + 104|0);
   $255 = +HEAPF64[$254>>3];
   $256 = $255 * $253;
   HEAPF64[$254>>3] = $256;
   $257 = (((($221) + (($210*56)|0)|0)) + 52|0);
   $258 = HEAP32[$257>>2]|0;
   $259 = (($258) + ($239<<3)|0);
   $260 = +HEAPF64[$259>>3];
   $261 = +HEAPF64[$258>>3];
   $262 = $260 - $261;
   $263 = HEAP32[$229>>2]|0;
   $264 = (($263) + ($239<<3)|0);
   $265 = +HEAPF64[$264>>3];
   $266 = +HEAPF64[$263>>3];
   $267 = $265 - $266;
   $268 = $262 / $267;
   HEAPF64[$217>>3] = $268;
   $$0 = 0;
   return ($$0|0);
   break;
  }
  case 20:  {
   $269 = $3 < 0.0;
   if ($269) {
    $$0 = 209;
    return ($$0|0);
   }
   $270 = ($10|0)<($1|0);
   if (!($270)) {
    $$0 = 0;
    return ($$0|0);
   }
   $271 = (($1) - ($10))|0;
   $272 = (((($8) + (($271*120)|0)|0)) + 8|0);
   $273 = +HEAPF64[$272>>3];
   $274 = $273 == 0.0;
   if ($274) {
    $$0 = 0;
    return ($$0|0);
   }
   $275 = +HEAPF64[$13>>3];
   $276 = $3 / $275;
   $277 = (((($6) + (($1*96)|0)|0)) + 48|0);
   $278 = +HEAPF64[$277>>3];
   $279 = $276 + $278;
   $280 = (((($8) + (($271*120)|0)|0)) + 24|0);
   $281 = +HEAPF64[$280>>3];
   $282 = !($279 >= $281);
   if (!($282)) {
    $$0 = 225;
    return ($$0|0);
   }
   $283 = (((($8) + (($271*120)|0)|0)) + 32|0);
   $284 = +HEAPF64[$283>>3];
   $285 = $279 > $284;
   if ($285) {
    $$0 = 225;
    return ($$0|0);
   }
   $286 = (((($8) + (($271*120)|0)|0)) + 92|0);
   $287 = HEAP32[$286>>2]|0;
   $288 = ($287|0)>(0);
   do {
    if ($288) {
     $289 = ((($0)) + 68|0);
     $290 = HEAP32[$289>>2]|0;
     $291 = (((($290) + (($287*56)|0)|0)) + 48|0);
     $292 = HEAP32[$291>>2]|0;
     $293 = +HEAPF64[$292>>3];
     $294 = $293 > $3;
     if ($294) {
      $$0 = 225;
      return ($$0|0);
     } else {
      $295 = (+_tankvolume($0,$271,$279));
      $296 = (((($8) + (($271*120)|0)|0)) + 40|0);
      HEAPF64[$296>>3] = $295;
      break;
     }
    }
   } while(0);
   $297 = (((($8) + (($271*120)|0)|0)) + 16|0);
   HEAPF64[$297>>3] = $279;
   $$0 = 0;
   return ($$0|0);
   break;
  }
  case 21:  {
   $298 = !($3 <= 0.0);
   if (!($298)) {
    $$0 = 209;
    return ($$0|0);
   }
   $299 = ($10|0)<($1|0);
   if (!($299)) {
    $$0 = 0;
    return ($$0|0);
   }
   $300 = (($1) - ($10))|0;
   $301 = (((($8) + (($300*120)|0)|0)) + 8|0);
   $302 = +HEAPF64[$301>>3];
   $303 = $302 == 0.0;
   if ($303) {
    $$0 = 0;
    return ($$0|0);
   }
   $304 = +HEAPF64[$13>>3];
   $305 = $3 / $304;
   $306 = (((($6) + (($1*96)|0)|0)) + 48|0);
   $307 = +HEAPF64[$306>>3];
   $308 = $305 + $307;
   $309 = (((($8) + (($300*120)|0)|0)) + 16|0);
   $310 = +HEAPF64[$309>>3];
   $311 = $308 < $310;
   if ($311) {
    $$0 = 225;
    return ($$0|0);
   }
   $312 = (((($8) + (($300*120)|0)|0)) + 32|0);
   $313 = +HEAPF64[$312>>3];
   $314 = $308 < $313;
   if ($314) {
    $$0 = 225;
    return ($$0|0);
   }
   $315 = (((($8) + (($300*120)|0)|0)) + 92|0);
   $316 = HEAP32[$315>>2]|0;
   $317 = ($316|0)>(0);
   if ($317) {
    $318 = ((($0)) + 68|0);
    $319 = HEAP32[$318>>2]|0;
    $320 = (((($319) + (($316*56)|0)|0)) + 40|0);
    $321 = HEAP32[$320>>2]|0;
    $322 = (($321) + -1)|0;
    $323 = (((($319) + (($316*56)|0)|0)) + 48|0);
    $324 = HEAP32[$323>>2]|0;
    $325 = (($324) + ($322<<3)|0);
    $326 = +HEAPF64[$325>>3];
    $327 = $326 < $3;
    if ($327) {
     $$0 = 225;
     return ($$0|0);
    }
   }
   $328 = (((($8) + (($300*120)|0)|0)) + 24|0);
   HEAPF64[$328>>3] = $308;
   $329 = (((($8) + (($300*120)|0)|0)) + 48|0);
   $330 = +HEAPF64[$329>>3];
   $331 = (+_tankvolume($0,$300,$308));
   HEAPF64[$329>>3] = $331;
   $332 = $331 / $330;
   $333 = (((($8) + (($300*120)|0)|0)) + 104|0);
   $334 = +HEAPF64[$333>>3];
   $335 = $334 * $332;
   HEAPF64[$333>>3] = $335;
   $$0 = 0;
   return ($$0|0);
   break;
  }
  case 15:  {
   $336 = !($3 >= 0.0);
   $$in$v = $336 ? -0.5 : 0.5;
   $$in = $$in$v + $3;
   $337 = (~~(($$in)));
   $338 = ($10|0)<($1|0);
   if (!($338)) {
    $$0 = 0;
    return ($$0|0);
   }
   $339 = ($337>>>0)>(3);
   if ($339) {
    $$0 = 251;
    return ($$0|0);
   }
   $340 = (($1) - ($10))|0;
   $341 = (((($8) + (($340*120)|0)|0)) + 8|0);
   $342 = +HEAPF64[$341>>3];
   $343 = $342 > 0.0;
   if (!($343)) {
    $$0 = 0;
    return ($$0|0);
   }
   $sext = $337 << 24;
   $344 = $sext >> 24;
   $345 = (((($8) + (($340*120)|0)|0)) + 96|0);
   HEAP32[$345>>2] = $344;
   $$0 = 0;
   return ($$0|0);
   break;
  }
  case 22:  {
   $346 = ($10|0)<($1|0);
   if (!($346)) {
    $$0 = 0;
    return ($$0|0);
   }
   $347 = $3 < 0.0;
   $348 = $3 > 1.0;
   $or$cond12 = $347 | $348;
   if ($or$cond12) {
    $$0 = 209;
    return ($$0|0);
   }
   $349 = (($1) - ($10))|0;
   $350 = (((($8) + (($349*120)|0)|0)) + 8|0);
   $351 = +HEAPF64[$350>>3];
   $352 = $351 > 0.0;
   if (!($352)) {
    $$0 = 0;
    return ($$0|0);
   }
   $353 = (((($8) + (($349*120)|0)|0)) + 48|0);
   $354 = +HEAPF64[$353>>3];
   $355 = $354 * $3;
   $356 = (((($8) + (($349*120)|0)|0)) + 104|0);
   HEAPF64[$356>>3] = $355;
   $$0 = 0;
   return ($$0|0);
   break;
  }
  case 23:  {
   $357 = ($10|0)<($1|0);
   if (!($357)) {
    $$0 = 0;
    return ($$0|0);
   }
   $358 = (($1) - ($10))|0;
   $359 = (((($8) + (($358*120)|0)|0)) + 8|0);
   $360 = +HEAPF64[$359>>3];
   $361 = $360 > 0.0;
   if (!($361)) {
    $$0 = 0;
    return ($$0|0);
   }
   $362 = $3 / 86400.0;
   $363 = (((($8) + (($358*120)|0)|0)) + 64|0);
   HEAPF64[$363>>3] = $362;
   $364 = ((($0)) + 4608|0);
   HEAP32[$364>>2] = 1;
   $$0 = 0;
   return ($$0|0);
   break;
  }
  case 26:  {
   $365 = (((($6) + (($1*96)|0)|0)) + 88|0);
   $366 = HEAP32[$365>>2]|0;
   $367 = ($366|0)==(2);
   if (!($367)) {
    $$0 = 0;
    return ($$0|0);
   }
   $368 = $3 != 0.0;
   $369 = $368&1;
   $370 = (($1) - ($10))|0;
   $371 = (((($8) + (($370*120)|0)|0)) + 112|0);
   HEAP32[$371>>2] = $369;
   $$0 = 0;
   return ($$0|0);
   break;
  }
  default: {
   $$0 = 251;
   return ($$0|0);
  }
  }
 } while(0);
 return (0)|0;
}
function _EN_setjuncdata($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = +$3;
 $4 = $4|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $strlenfirst = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $5 = sp;
 HEAP32[$5>>2] = 0;
 $6 = ((($0)) + 5072|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0);
 if ($8) {
  $$0 = 102;
  STACKTOP = sp;return ($$0|0);
 }
 $9 = ($1|0)<(1);
 if ($9) {
  $$0 = 203;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = ((($0)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)<($1|0);
 if ($12) {
  $$0 = 203;
  STACKTOP = sp;return ($$0|0);
 }
 $13 = ($4|0)==(0|0);
 if (!($13)) {
  $strlenfirst = HEAP8[$4>>0]|0;
  $14 = ($strlenfirst<<24>>24)==(0);
  if (!($14)) {
   $15 = (_EN_getpatternindex($0,$4,$5)|0);
   $16 = ($15|0)>(0);
   if ($16) {
    $$0 = 205;
    STACKTOP = sp;return ($$0|0);
   }
  }
 }
 $17 = ((($0)) + 44|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($0)) + 4960|0);
 $20 = +HEAPF64[$19>>3];
 $21 = $3 / $20;
 $22 = (((($18) + (($1*96)|0)|0)) + 56|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==(0|0);
 if ($24) {
  $28 = (($18) + (($1*96)|0)|0);
  $29 = HEAP32[$5>>2]|0;
  $30 = (_adddemand($28,$21,$29,0)|0);
  $31 = ($30|0)==(0);
  if ($31) {
   $$0 = 101;
   STACKTOP = sp;return ($$0|0);
  }
 } else {
  HEAPF64[$23>>3] = $21;
  $25 = HEAP32[$5>>2]|0;
  $26 = HEAP32[$22>>2]|0;
  $27 = ((($26)) + 8|0);
  HEAP32[$27>>2] = $25;
 }
 $32 = ((($0)) + 4904|0);
 $33 = +HEAPF64[$32>>3];
 $34 = $2 / $33;
 $35 = (((($18) + (($1*96)|0)|0)) + 48|0);
 HEAPF64[$35>>3] = $34;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _EN_getpatternindex($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$01 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 5072|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  $$0 = 102;
  return ($$0|0);
 }
 $6 = ((($0)) + 36|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($0)) + 64|0);
 $$01 = 1;
 while(1) {
  $9 = ($$01|0)>($7|0);
  if ($9) {
   label = 7;
   break;
  }
  $10 = HEAP32[$8>>2]|0;
  $11 = (($10) + (($$01*44)|0)|0);
  $12 = (_strcmp($1,$11)|0);
  $13 = ($12|0)==(0);
  if ($13) {
   label = 5;
   break;
  }
  $14 = (($$01) + 1)|0;
  $$01 = $14;
 }
 if ((label|0) == 5) {
  HEAP32[$2>>2] = $$01;
  $$0 = 0;
  return ($$0|0);
 }
 else if ((label|0) == 7) {
  HEAP32[$2>>2] = 0;
  $$0 = 205;
  return ($$0|0);
 }
 return (0)|0;
}
function _EN_settankdata($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 $6 = +$6;
 $7 = +$7;
 $8 = $8|0;
 var $$0 = 0, $$01 = 0.0, $$03 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0.0, $48 = 0, $49 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0.0, $69 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0.0, $93 = 0, $94 = 0.0, $95 = 0, $96 = 0.0, $97 = 0, $or$cond = 0, $or$cond5 = 0, $or$cond6 = 0, $or$cond7 = 0, $or$cond8 = 0, $strlenfirst = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $9 = ((($0)) + 4904|0);
 $10 = ((($0)) + 52|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($0)) + 5072|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0);
 if ($14) {
  $$0 = 102;
  return ($$0|0);
 }
 $15 = ((($0)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)<($1|0);
 if (!($17)) {
  $$0 = 203;
  return ($$0|0);
 }
 $18 = HEAP32[$0>>2]|0;
 $19 = ($18|0)<($1|0);
 if ($19) {
  $$0 = 203;
  return ($$0|0);
 }
 $20 = (($1) - ($16))|0;
 $21 = (((($11) + (($20*120)|0)|0)) + 8|0);
 $22 = +HEAPF64[$21>>3];
 $23 = $22 == 0.0;
 if ($23) {
  $$0 = 0;
  return ($$0|0);
 }
 $24 = $3 < 0.0;
 $25 = $4 < 0.0;
 $or$cond = $24 | $25;
 $26 = $5 < 0.0;
 $or$cond5 = $or$cond | $26;
 if ($or$cond5) {
  $$0 = 209;
  return ($$0|0);
 }
 $27 = $4 > $3;
 $28 = $4 > $5;
 $or$cond6 = $27 | $28;
 $29 = $3 > $5;
 $or$cond7 = $or$cond6 | $29;
 if ($or$cond7) {
  $$0 = 225;
  return ($$0|0);
 }
 $30 = $6 < 0.0;
 $31 = $7 < 0.0;
 $or$cond8 = $30 | $31;
 if ($or$cond8) {
  $$0 = 209;
  return ($$0|0);
 }
 $strlenfirst = HEAP8[$8>>0]|0;
 $32 = ($strlenfirst<<24>>24)==(0);
 do {
  if ($32) {
   $60 = $6 * 3.1415926535897931;
   $61 = $60 * $6;
   $62 = $61 * 0.25;
   $$01 = $62;$$1 = 0;
  } else {
   $33 = ((($0)) + 40|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = ((($0)) + 68|0);
   $$03 = 1;
   while(1) {
    $36 = ($$03|0)>($34|0);
    if ($36) {
     $$0 = 206;
     label = 23;
     break;
    }
    $37 = HEAP32[$35>>2]|0;
    $38 = (($37) + (($$03*56)|0)|0);
    $39 = (_strcmp($8,$38)|0);
    $40 = ($39|0)==(0);
    if ($40) {
     break;
    }
    $41 = (($$03) + 1)|0;
    $$03 = $41;
   }
   if ((label|0) == 23) {
    return ($$0|0);
   }
   $42 = (((($37) + (($$03*56)|0)|0)) + 40|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = (($43) + -1)|0;
   $45 = (((($37) + (($$03*56)|0)|0)) + 48|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = +HEAPF64[$46>>3];
   $48 = $47 > $4;
   if ($48) {
    $$0 = 225;
    return ($$0|0);
   }
   $49 = (($46) + ($44<<3)|0);
   $50 = +HEAPF64[$49>>3];
   $51 = $50 < $5;
   if ($51) {
    $$0 = 225;
    return ($$0|0);
   } else {
    $52 = (((($37) + (($$03*56)|0)|0)) + 52|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = (($53) + ($44<<3)|0);
    $55 = +HEAPF64[$54>>3];
    $56 = +HEAPF64[$53>>3];
    $57 = $55 - $56;
    $58 = $50 - $47;
    $59 = $57 / $58;
    $$01 = $59;$$1 = $$03;
    break;
   }
  }
 } while(0);
 $63 = ((($0)) + 44|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = (($11) + (($20*120)|0)|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = (((($64) + (($66*96)|0)|0)) + 48|0);
 HEAPF64[$67>>3] = $2;
 $68 = +HEAPF64[$9>>3];
 $69 = $$01 / $68;
 $70 = $69 / $68;
 HEAPF64[$21>>3] = $70;
 $71 = +HEAPF64[$9>>3];
 $72 = $3 / $71;
 $73 = $72 + $2;
 $74 = (((($11) + (($20*120)|0)|0)) + 32|0);
 HEAPF64[$74>>3] = $73;
 $75 = +HEAPF64[$9>>3];
 $76 = $4 / $75;
 $77 = $76 + $2;
 $78 = (((($11) + (($20*120)|0)|0)) + 16|0);
 HEAPF64[$78>>3] = $77;
 $79 = +HEAPF64[$9>>3];
 $80 = $5 / $79;
 $81 = $80 + $2;
 $82 = (((($11) + (($20*120)|0)|0)) + 24|0);
 HEAPF64[$82>>3] = $81;
 $83 = (((($11) + (($20*120)|0)|0)) + 92|0);
 HEAP32[$83>>2] = $$1;
 $84 = ($$1|0)==(0);
 do {
  if ($84) {
   $85 = $7 > 0.0;
   if ($85) {
    $86 = ((($0)) + 5040|0);
    $87 = +HEAPF64[$86>>3];
    $88 = $7 / $87;
    $89 = (((($11) + (($20*120)|0)|0)) + 40|0);
    HEAPF64[$89>>3] = $88;
    break;
   } else {
    $90 = $70 * $77;
    $91 = (((($11) + (($20*120)|0)|0)) + 40|0);
    HEAPF64[$91>>3] = $90;
    break;
   }
  } else {
   $92 = (+_tankvolume($0,$20,$77));
   $93 = (((($11) + (($20*120)|0)|0)) + 40|0);
   HEAPF64[$93>>3] = $92;
  }
 } while(0);
 $94 = (+_tankvolume($0,$20,$73));
 $95 = (((($11) + (($20*120)|0)|0)) + 56|0);
 HEAPF64[$95>>3] = $94;
 $96 = (+_tankvolume($0,$20,$81));
 $97 = (((($11) + (($20*120)|0)|0)) + 48|0);
 HEAPF64[$97>>3] = $96;
 $$0 = 0;
 return ($$0|0);
}
function _EN_getcoord($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 5072|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  $$0 = 102;
  return ($$0|0);
 }
 $7 = ($1|0)<(1);
 if ($7) {
  $$0 = 203;
  return ($$0|0);
 }
 $8 = HEAP32[$0>>2]|0;
 $9 = ($8|0)<($1|0);
 if ($9) {
  $$0 = 203;
  return ($$0|0);
 }
 $10 = ((($0)) + 44|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (((($11) + (($1*96)|0)|0)) + 32|0);
 $13 = +HEAPF64[$12>>3];
 $14 = $13 == -1.0E+10;
 if ($14) {
  $$0 = 254;
  return ($$0|0);
 }
 $15 = (((($11) + (($1*96)|0)|0)) + 40|0);
 $16 = +HEAPF64[$15>>3];
 $17 = $16 == -1.0E+10;
 if ($17) {
  $$0 = 254;
  return ($$0|0);
 }
 HEAPF64[$2>>3] = $13;
 $18 = +HEAPF64[$15>>3];
 HEAPF64[$3>>3] = $18;
 $$0 = 0;
 return ($$0|0);
}
function _EN_setcoord($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = +$3;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 5072|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  $$0 = 102;
  return ($$0|0);
 }
 $7 = ($1|0)<(1);
 if ($7) {
  $$0 = 203;
  return ($$0|0);
 }
 $8 = HEAP32[$0>>2]|0;
 $9 = ($8|0)<($1|0);
 if ($9) {
  $$0 = 203;
  return ($$0|0);
 }
 $10 = ((($0)) + 44|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (((($11) + (($1*96)|0)|0)) + 32|0);
 HEAPF64[$12>>3] = $2;
 $13 = (((($11) + (($1*96)|0)|0)) + 40|0);
 HEAPF64[$13>>3] = $3;
 $$0 = 0;
 return ($$0|0);
}
function _EN_getdemandmodel($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($0)) + 4496|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$1>>2] = $6;
 $7 = ((($0)) + 4328|0);
 $8 = +HEAPF64[$7>>3];
 $9 = ((($0)) + 4928|0);
 $10 = +HEAPF64[$9>>3];
 $11 = $8 * $10;
 HEAPF64[$2>>3] = $11;
 $12 = ((($0)) + 4336|0);
 $13 = +HEAPF64[$12>>3];
 $14 = +HEAPF64[$9>>3];
 $15 = $13 * $14;
 HEAPF64[$3>>3] = $15;
 $16 = ((($0)) + 4320|0);
 $17 = +HEAPF64[$16>>3];
 HEAPF64[$4>>3] = $17;
 return;
}
function _EN_setdemandmodel($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $or$cond1 = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ($1>>>0)>(1);
 if ($5) {
  $$0 = 251;
  return ($$0|0);
 }
 $6 = ($1|0)==(1);
 if ($6) {
  $7 = $4 <= 0.0;
  $8 = $2 < 0.0;
  $or$cond1 = $7 | $8;
  $9 = $3 - $2;
  $10 = $9 < 0.10000000000000001;
  $or$cond3 = $or$cond1 | $10;
  if ($or$cond3) {
   $$0 = 208;
   return ($$0|0);
  }
 }
 $11 = ((($0)) + 4496|0);
 HEAP32[$11>>2] = $1;
 $12 = ((($0)) + 4928|0);
 $13 = +HEAPF64[$12>>3];
 $14 = $2 / $13;
 $15 = ((($0)) + 4328|0);
 HEAPF64[$15>>3] = $14;
 $16 = $3 / $13;
 $17 = ((($0)) + 4336|0);
 HEAPF64[$17>>3] = $16;
 $18 = ((($0)) + 4320|0);
 HEAPF64[$18>>3] = $4;
 $$0 = 0;
 return ($$0|0);
}
function _EN_adddemand($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, $strlenfirst = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $5 = sp;
 HEAP32[$5>>2] = 0;
 $6 = ((($0)) + 5072|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0);
 if ($8) {
  $$0 = 102;
  STACKTOP = sp;return ($$0|0);
 }
 $9 = ($1|0)<(1);
 if ($9) {
  $$0 = 203;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = HEAP32[$0>>2]|0;
 $11 = ($10|0)<($1|0);
 if ($11) {
  $$0 = 203;
  STACKTOP = sp;return ($$0|0);
 }
 $12 = ($3|0)==(0|0);
 if (!($12)) {
  $strlenfirst = HEAP8[$3>>0]|0;
  $13 = ($strlenfirst<<24>>24)==(0);
  if (!($13)) {
   $14 = (_EN_getpatternindex($0,$3,$5)|0);
   $15 = ($14|0)>(0);
   if ($15) {
    $$0 = 205;
    STACKTOP = sp;return ($$0|0);
   }
  }
 }
 $16 = ((($0)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)<($1|0);
 if ($18) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $19 = ((($0)) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($20) + (($1*96)|0)|0);
  $22 = ((($0)) + 4960|0);
  $23 = +HEAPF64[$22>>3];
  $24 = $2 / $23;
  $25 = HEAP32[$5>>2]|0;
  $26 = (_adddemand($21,$24,$25,$4)|0);
  $27 = ($26|0)==(0);
  $spec$select = $27 ? 101 : 0;
  STACKTOP = sp;return ($spec$select|0);
 }
 return (0)|0;
}
function _EN_deletedemand($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$02$phi = 0, $$03 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 5072|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  $$0 = 102;
  return ($$0|0);
 }
 $6 = ($1|0)<(1);
 if ($6) {
  $$0 = 203;
  return ($$0|0);
 }
 $7 = HEAP32[$0>>2]|0;
 $8 = ($7|0)<($1|0);
 if ($8) {
  $$0 = 203;
  return ($$0|0);
 }
 $9 = ((($0)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)<($1|0);
 if ($11) {
  $$0 = 0;
  return ($$0|0);
 }
 $12 = ((($0)) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (((($13) + (($1*96)|0)|0)) + 56|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0|0);
 if ($16) {
  $$0 = 253;
  return ($$0|0);
 }
 $17 = ($2|0)==(1);
 if ($17) {
  $18 = ((($15)) + 16|0);
  $19 = HEAP32[$18>>2]|0;
  HEAP32[$14>>2] = $19;
  $20 = ((($15)) + 12|0);
  $21 = HEAP32[$20>>2]|0;
  _free($21);
  _free($15);
  $$0 = 0;
  return ($$0|0);
 }
 $$01 = 1;$$02 = $15;$$03 = $15;
 while(1) {
  $22 = ($$03|0)==(0|0);
  if ($22) {
   $$0 = 253;
   label = 13;
   break;
  }
  $23 = ($$01|0)<($2|0);
  $24 = ((($$03)) + 16|0);
  if (!($23)) {
   break;
  }
  $25 = HEAP32[$24>>2]|0;
  $26 = (($$01) + 1)|0;
  $$02$phi = $$03;$$01 = $26;$$03 = $25;$$02 = $$02$phi;
 }
 if ((label|0) == 13) {
  return ($$0|0);
 }
 $27 = HEAP32[$24>>2]|0;
 $28 = ((($$02)) + 16|0);
 HEAP32[$28>>2] = $27;
 $29 = ((($$03)) + 12|0);
 $30 = HEAP32[$29>>2]|0;
 _free($30);
 _free($$03);
 $$0 = 0;
 return ($$0|0);
}
function _EN_getdemandindex($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$03 = 0, $$05 = 0, $$05$in = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $strlenfirst = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$3>>2] = 0;
 $4 = ((($0)) + 5072|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  $$0 = 102;
  return ($$0|0);
 }
 $7 = ($1|0)<(1);
 if ($7) {
  $$0 = 203;
  return ($$0|0);
 }
 $8 = HEAP32[$0>>2]|0;
 $9 = ($8|0)<($1|0);
 if ($9) {
  $$0 = 203;
  return ($$0|0);
 }
 $10 = ($2|0)==(0|0);
 if ($10) {
  $$0 = 253;
  return ($$0|0);
 }
 $strlenfirst = HEAP8[$2>>0]|0;
 $11 = ($strlenfirst<<24>>24)==(0);
 $12 = ((($0)) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (((($13) + (($1*96)|0)|0)) + 56|0);
 $$03 = 0;$$05$in = $14;
 while(1) {
  $$05 = HEAP32[$$05$in>>2]|0;
  $15 = ($$05|0)==(0|0);
  if ($15) {
   $$0 = 253;
   label = 12;
   break;
  }
  $16 = (($$03) + 1)|0;
  $17 = ((($$05)) + 12|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)==(0|0);
  if ($19) {
   if ($11) {
    break;
   }
  } else {
   $20 = (_strcmp($18,$2)|0);
   $21 = ($20|0)==(0);
   if ($21) {
    break;
   }
  }
  $22 = ((($$05)) + 16|0);
  $$03 = $16;$$05$in = $22;
 }
 if ((label|0) == 12) {
  return ($$0|0);
 }
 HEAP32[$3>>2] = $16;
 $$0 = 0;
 return ($$0|0);
}
function _EN_getnumdemands($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$02$in = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 5072|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  $$0 = 102;
  return ($$0|0);
 }
 $6 = ($1|0)<(1);
 if ($6) {
  $$0 = 203;
  return ($$0|0);
 }
 $7 = HEAP32[$0>>2]|0;
 $8 = ($7|0)<($1|0);
 if ($8) {
  $$0 = 203;
  return ($$0|0);
 }
 $9 = ((($0)) + 44|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (((($10) + (($1*96)|0)|0)) + 56|0);
 $$01 = 0;$$02$in = $11;
 while(1) {
  $$02 = HEAP32[$$02$in>>2]|0;
  $12 = ($$02|0)==(0|0);
  if ($12) {
   break;
  }
  $13 = (($$01) + 1)|0;
  $14 = ((($$02)) + 16|0);
  $$01 = $13;$$02$in = $14;
 }
 HEAP32[$2>>2] = $$01;
 $$0 = 0;
 return ($$0|0);
}
function _EN_getbasedemand($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[$3>>3] = 0.0;
 $4 = ((($0)) + 5072|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  $$0 = 102;
  return ($$0|0);
 }
 $7 = ($1|0)<(1);
 if ($7) {
  $$0 = 203;
  return ($$0|0);
 }
 $8 = HEAP32[$0>>2]|0;
 $9 = ($8|0)<($1|0);
 if ($9) {
  $$0 = 203;
  return ($$0|0);
 }
 $10 = ((($0)) + 44|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (((($11) + (($1*96)|0)|0)) + 56|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (_finddemand($13,$2)|0);
 $15 = ($14|0)==(0|0);
 if ($15) {
  $$0 = 253;
  return ($$0|0);
 }
 $16 = +HEAPF64[$14>>3];
 $17 = ((($0)) + 4960|0);
 $18 = +HEAPF64[$17>>3];
 $19 = $16 * $18;
 HEAPF64[$3>>3] = $19;
 $$0 = 0;
 return ($$0|0);
}
function _EN_setbasedemand($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 5072|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  $$0 = 102;
  return ($$0|0);
 }
 $7 = ($1|0)<(1);
 if ($7) {
  $$0 = 203;
  return ($$0|0);
 }
 $8 = HEAP32[$0>>2]|0;
 $9 = ($8|0)<($1|0);
 if ($9) {
  $$0 = 203;
  return ($$0|0);
 }
 $10 = ((($0)) + 44|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (((($11) + (($1*96)|0)|0)) + 56|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (_finddemand($13,$2)|0);
 $15 = ($14|0)==(0|0);
 if ($15) {
  $$0 = 253;
  return ($$0|0);
 }
 $16 = ((($0)) + 4960|0);
 $17 = +HEAPF64[$16>>3];
 $18 = $3 / $17;
 HEAPF64[$14>>3] = $18;
 $$0 = 0;
 return ($$0|0);
}
function _EN_getdemandname($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 (_strcpy($3,21208)|0);
 $4 = ((($0)) + 5072|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  $$0 = 102;
  return ($$0|0);
 }
 $7 = ($1|0)<(1);
 if ($7) {
  $$0 = 203;
  return ($$0|0);
 }
 $8 = ((($0)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)<($1|0);
 if ($10) {
  $$0 = 203;
  return ($$0|0);
 }
 $11 = ((($0)) + 44|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (((($12) + (($1*96)|0)|0)) + 56|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_finddemand($14,$2)|0);
 $16 = ($15|0)==(0|0);
 if ($16) {
  $$0 = 253;
  return ($$0|0);
 }
 $17 = ((($15)) + 12|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(0|0);
 if ($19) {
  $$0 = 0;
  return ($$0|0);
 }
 (_strcpy($3,$18)|0);
 $$0 = 0;
 return ($$0|0);
}
function _EN_setdemandname($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 5072|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  $$0 = 102;
  return ($$0|0);
 }
 $7 = ($1|0)<(1);
 if ($7) {
  $$0 = 203;
  return ($$0|0);
 }
 $8 = ((($0)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)<($1|0);
 if ($10) {
  $$0 = 203;
  return ($$0|0);
 }
 $11 = ((($0)) + 44|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (((($12) + (($1*96)|0)|0)) + 56|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_finddemand($14,$2)|0);
 $16 = ($15|0)==(0|0);
 if ($16) {
  $$0 = 253;
  return ($$0|0);
 }
 $17 = ((($15)) + 12|0);
 $18 = (_xstrcpy($17,$3,31)|0);
 HEAP32[$17>>2] = $18;
 $$0 = 0;
 return ($$0|0);
}
function _EN_getdemandpattern($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$3>>2] = 0;
 $4 = ((($0)) + 5072|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  $$0 = 102;
  return ($$0|0);
 }
 $7 = ($1|0)<(1);
 if ($7) {
  $$0 = 203;
  return ($$0|0);
 }
 $8 = HEAP32[$0>>2]|0;
 $9 = ($8|0)<($1|0);
 if ($9) {
  $$0 = 203;
  return ($$0|0);
 }
 $10 = ((($0)) + 44|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (((($11) + (($1*96)|0)|0)) + 56|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (_finddemand($13,$2)|0);
 $15 = ($14|0)==(0|0);
 if ($15) {
  $$0 = 253;
  return ($$0|0);
 }
 $16 = ((($14)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 HEAP32[$3>>2] = $17;
 $$0 = 0;
 return ($$0|0);
}
function _EN_setdemandpattern($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 5072|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  $$0 = 102;
 } else {
  $7 = ($1|0)<(1);
  if ($7) {
   $$0 = 203;
  } else {
   $8 = HEAP32[$0>>2]|0;
   $9 = ($8|0)<($1|0);
   if ($9) {
    $$0 = 203;
   } else {
    $10 = ($3|0)<(0);
    if ($10) {
     $$0 = 205;
    } else {
     $11 = ((($0)) + 36|0);
     $12 = HEAP32[$11>>2]|0;
     $13 = ($12|0)<($3|0);
     if ($13) {
      $$0 = 205;
     } else {
      $14 = ((($0)) + 44|0);
      $15 = HEAP32[$14>>2]|0;
      $16 = (((($15) + (($1*96)|0)|0)) + 56|0);
      $17 = HEAP32[$16>>2]|0;
      $18 = (_finddemand($17,$2)|0);
      $19 = ($18|0)==(0|0);
      if ($19) {
       $$0 = 253;
      } else {
       $20 = ((($18)) + 8|0);
       HEAP32[$20>>2] = $3;
       $$0 = 0;
      }
     }
    }
   }
  }
 }
 return ($$0|0);
}
function _EN_addlink($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $or$cond2 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $6 = sp;
 HEAP32[$5>>2] = 0;
 $7 = ((($0)) + 5072|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0);
 if ($9) {
  $$0 = 102;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = ((($0)) + 4524|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0);
 if (!($12)) {
  $$0 = 262;
  STACKTOP = sp;return ($$0|0);
 }
 $13 = ((($0)) + 4604|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(0);
 if (!($15)) {
  $$0 = 262;
  STACKTOP = sp;return ($$0|0);
 }
 $16 = (_namevalid($1)|0);
 $17 = ($16|0)==(0);
 if ($17) {
  $$0 = 252;
  STACKTOP = sp;return ($$0|0);
 }
 $18 = (_EN_getlinkindex($0,$1,$6)|0);
 $19 = ($18|0)==(0);
 if ($19) {
  $$0 = 215;
  STACKTOP = sp;return ($$0|0);
 }
 $20 = ($2>>>0)>(8);
 if ($20) {
  $$0 = 251;
  STACKTOP = sp;return ($$0|0);
 }
 $21 = ((($0)) + 80|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (_hashtable_find($22,$3)|0);
 $24 = (_hashtable_find($22,$4)|0);
 $25 = ($23|0)==(0);
 $26 = ($24|0)==(0);
 $or$cond2 = $25 | $26;
 if ($or$cond2) {
  $$0 = 203;
  STACKTOP = sp;return ($$0|0);
 }
 $27 = ($2|0)>(2);
 if ($27) {
  $28 = (_valvecheck($0,0,$2,$23,$24)|0);
  $29 = ($28|0)==(0);
  if (!($29)) {
   $$0 = $28;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $30 = ((($0)) + 12|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (($31) + 1)|0;
 HEAP32[$30>>2] = $32;
 $33 = ((($0)) + 1064|0);
 HEAP32[$33>>2] = $32;
 $34 = $31 << 7;
 $35 = (($34) + 256)|0;
 $36 = ((($0)) + 48|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = (_realloc($37,$35)|0);
 HEAP32[$36>>2] = $38;
 $39 = $31 << 3;
 $40 = (($39) + 16)|0;
 $41 = ((($0)) + 4272|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = (_realloc($42,$40)|0);
 HEAP32[$41>>2] = $43;
 $44 = ((($0)) + 4276|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = (_realloc($45,$40)|0);
 HEAP32[$44>>2] = $46;
 $47 = $31 << 2;
 $48 = (($47) + 8)|0;
 $49 = ((($0)) + 4536|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = (_realloc($50,$48)|0);
 HEAP32[$49>>2] = $51;
 $52 = HEAP32[$36>>2]|0;
 $53 = (($52) + ($32<<7)|0);
 (_strncpy($53,$1,31)|0);
 $54 = ($2|0)<(2);
 do {
  if ($54) {
   $55 = ((($0)) + 16|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = (($56) + 1)|0;
   HEAP32[$55>>2] = $57;
  } else {
   $58 = ($2|0)==(2);
   if ($58) {
    $59 = ((($0)) + 20|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = (($60) + 1)|0;
    HEAP32[$59>>2] = $61;
    $62 = $60 << 7;
    $63 = (($62) + 256)|0;
    $64 = ((($0)) + 56|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = (_realloc($65,$63)|0);
    HEAP32[$64>>2] = $66;
    $67 = HEAP32[$59>>2]|0;
    $68 = (($66) + ($67<<7)|0);
    HEAP32[$68>>2] = $32;
    $69 = (((($66) + ($67<<7)|0)) + 4|0);
    HEAP32[$69>>2] = 3;
    $70 = (((($66) + ($67<<7)|0)) + 8|0);
    $71 = (((($66) + ($67<<7)|0)) + 120|0);
    dest=$70; stop=dest+72|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
    HEAPF64[$71>>3] = -1.0E+10;
    break;
   } else {
    $72 = ((($0)) + 24|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = (($73) + 1)|0;
    HEAP32[$72>>2] = $74;
    $75 = $73 << 2;
    $76 = (($75) + 8)|0;
    $77 = ((($0)) + 60|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = (_realloc($78,$76)|0);
    HEAP32[$77>>2] = $79;
    $80 = HEAP32[$72>>2]|0;
    $81 = (($79) + ($80<<2)|0);
    HEAP32[$81>>2] = $32;
    break;
   }
  }
 } while(0);
 $82 = (((($52) + ($32<<7)|0)) + 104|0);
 HEAP32[$82>>2] = $2;
 $83 = (((($52) + ($32<<7)|0)) + 32|0);
 HEAP32[$83>>2] = $23;
 $84 = (((($52) + ($32<<7)|0)) + 36|0);
 HEAP32[$84>>2] = $24;
 $85 = (((($52) + ($32<<7)|0)) + 108|0);
 HEAP32[$85>>2] = 3;
 $86 = ($2|0)==(2);
 do {
  if ($86) {
   $87 = (((($52) + ($32<<7)|0)) + 56|0);
   HEAPF64[$87>>3] = 1.0;
   $88 = (((($52) + ($32<<7)|0)) + 64|0);
   HEAPF64[$88>>3] = 0.0;
   $89 = (((($52) + ($32<<7)|0)) + 48|0);
   HEAPF64[$89>>3] = 0.0;
  } else {
   $90 = ((($0)) + 4952|0);
   $91 = +HEAPF64[$90>>3];
   $92 = 10.0 / $91;
   $93 = (((($52) + ($32<<7)|0)) + 40|0);
   HEAPF64[$93>>3] = $92;
   if (!($54)) {
    $102 = (((($52) + ($32<<7)|0)) + 48|0);
    ;HEAP32[$102>>2]=0|0;HEAP32[$102+4>>2]=0|0;HEAP32[$102+8>>2]=0|0;HEAP32[$102+12>>2]=0|0;HEAP32[$102+16>>2]=0|0;HEAP32[$102+20>>2]=0|0;
    HEAP32[$85>>2] = 4;
    break;
   }
   $94 = ((($0)) + 4500|0);
   $95 = HEAP32[$94>>2]|0;
   switch ($95|0) {
   case 0:  {
    $96 = (((($52) + ($32<<7)|0)) + 56|0);
    HEAPF64[$96>>3] = 130.0;
    break;
   }
   case 1:  {
    $97 = (((($52) + ($32<<7)|0)) + 56|0);
    HEAPF64[$97>>3] = 5.0000000000000001E-4;
    break;
   }
   case 2:  {
    $98 = (((($52) + ($32<<7)|0)) + 56|0);
    HEAPF64[$98>>3] = 0.01;
    break;
   }
   default: {
    $99 = (((($52) + ($32<<7)|0)) + 56|0);
    HEAPF64[$99>>3] = 1.0;
   }
   }
   $100 = (((($52) + ($32<<7)|0)) + 64|0);
   HEAPF64[$100>>3] = 0.0;
   $101 = (((($52) + ($32<<7)|0)) + 48|0);
   HEAPF64[$101>>3] = 330.0;
  }
 } while(0);
 $103 = (((($52) + ($32<<7)|0)) + 72|0);
 $104 = (((($52) + ($32<<7)|0)) + 112|0);
 $105 = ((($0)) + 84|0);
 ;HEAP32[$103>>2]=0|0;HEAP32[$103+4>>2]=0|0;HEAP32[$103+8>>2]=0|0;HEAP32[$103+12>>2]=0|0;HEAP32[$103+16>>2]=0|0;HEAP32[$103+20>>2]=0|0;HEAP32[$103+24>>2]=0|0;HEAP32[$103+28>>2]=0|0;
 ;HEAP32[$104>>2]=0|0;HEAP32[$104+4>>2]=0|0;HEAP32[$104+8>>2]=0|0;HEAP32[$104+12>>2]=0|0;
 $106 = HEAP32[$105>>2]|0;
 _hashtable_insert($106,$53,$32);
 HEAP32[$5>>2] = $32;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _EN_getlinkindex($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$idx = 0, $$idx$val = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 5072|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  return 102;
 } else {
  $$idx = ((($0)) + 84|0);
  $$idx$val = HEAP32[$$idx>>2]|0;
  $6 = (_findlink($$idx$val,$1)|0);
  HEAP32[$2>>2] = $6;
  $7 = ($6|0)==(0);
  $spec$select = $7 ? 204 : 0;
  return ($spec$select|0);
 }
 return (0)|0;
}
function _EN_getlinktype($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$2>>2] = -1;
 $3 = ((($0)) + 5072|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  $$0 = 102;
  return ($$0|0);
 }
 $6 = ($1|0)<(1);
 if ($6) {
  $$0 = 204;
  return ($$0|0);
 }
 $7 = ((($0)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)<($1|0);
 if ($9) {
  $$0 = 204;
  return ($$0|0);
 }
 $10 = ((($0)) + 48|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (((($11) + ($1<<7)|0)) + 104|0);
 $13 = HEAP32[$12>>2]|0;
 HEAP32[$2>>2] = $13;
 $$0 = 0;
 return ($$0|0);
}
function _EN_getlinkid($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 (_strcpy($2,21208)|0);
 $3 = ((($0)) + 5072|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  $$0 = 102;
  return ($$0|0);
 }
 $6 = ($1|0)<(1);
 if ($6) {
  $$0 = 204;
  return ($$0|0);
 }
 $7 = ((($0)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)<($1|0);
 if ($9) {
  $$0 = 204;
  return ($$0|0);
 }
 $10 = ((($0)) + 48|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + ($1<<7)|0);
 (_strcpy($2,$12)|0);
 $$0 = 0;
 return ($$0|0);
}
function _EN_setlinkid($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $3 = ($1|0)<(1);
 if ($3) {
  $$0 = 204;
  return ($$0|0);
 }
 $4 = ((($0)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)<($1|0);
 if ($6) {
  $$0 = 204;
  return ($$0|0);
 }
 $7 = (_namevalid($2)|0);
 $8 = ($7|0)==(0);
 if ($8) {
  $$0 = 252;
  return ($$0|0);
 }
 $9 = ((($0)) + 84|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_hashtable_find($10,$2)|0);
 $12 = ($11|0)>(0);
 if ($12) {
  $$0 = 215;
  return ($$0|0);
 }
 $13 = ((($0)) + 48|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + ($1<<7)|0);
 _hashtable_delete($10,$15);
 $16 = HEAP32[$13>>2]|0;
 $17 = (($16) + ($1<<7)|0);
 (_strncpy($17,$2,31)|0);
 $18 = HEAP32[$9>>2]|0;
 $19 = HEAP32[$13>>2]|0;
 $20 = (($19) + ($1<<7)|0);
 _hashtable_insert($18,$20,$1);
 $$0 = 0;
 return ($$0|0);
}
function _EN_setlinktype($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$01 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $or$cond4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $4 = sp + 104|0;
 $5 = sp + 100|0;
 $6 = sp + 64|0;
 $7 = sp + 32|0;
 $8 = sp;
 $9 = sp + 96|0;
 $10 = HEAP32[$1>>2]|0;
 $11 = ((($0)) + 5072|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0);
 do {
  if ($13) {
   $$0 = 102;
  } else {
   $14 = ((($0)) + 4524|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)==(0);
   if ($16) {
    $17 = ((($0)) + 4604|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($18|0)==(0);
    if ($19) {
     $20 = ($2>>>0)>(8);
     $21 = ($3>>>0)>(1);
     $22 = $21 | $20;
     if ($22) {
      $$0 = 251;
     } else {
      $23 = ($10|0)<(1);
      if ($23) {
       $$0 = 204;
      } else {
       $24 = ((($0)) + 12|0);
       $25 = HEAP32[$24>>2]|0;
       $26 = ($10|0)>($25|0);
       if ($26) {
        $$0 = 204;
       } else {
        (_EN_getlinktype($0,$10,$9)|0);
        $27 = HEAP32[$9>>2]|0;
        $28 = ($27|0)==($2|0);
        if ($28) {
         $$0 = 0;
        } else {
         $29 = ($3|0)==(1);
         if ($29) {
          $30 = (_incontrols($0,1,$10)|0);
          $31 = ($30|0)>(0);
          if ($31) {
           $$0 = 261;
           break;
          } else {
           $$01 = $30;
          }
         } else {
          $$01 = $3;
         }
         $32 = ($27|0)<(2);
         $33 = ($2|0)<(2);
         $or$cond4 = $32 & $33;
         if ($or$cond4) {
          $34 = ((($0)) + 48|0);
          $35 = HEAP32[$34>>2]|0;
          $36 = (((($35) + ($10<<7)|0)) + 104|0);
          HEAP32[$36>>2] = $2;
          $37 = ($2|0)==(0);
          if (!($37)) {
           $$0 = 0;
           break;
          }
          $38 = HEAP32[$34>>2]|0;
          $39 = (((($38) + ($10<<7)|0)) + 108|0);
          HEAP32[$39>>2] = 3;
          $$0 = 0;
          break;
         } else {
          (_EN_getlinkid($0,$10,$6)|0);
          (_EN_getlinknodes($0,$10,$4,$5)|0);
          $40 = HEAP32[$4>>2]|0;
          (_EN_getnodeid($0,$40,$7)|0);
          $41 = HEAP32[$5>>2]|0;
          (_EN_getnodeid($0,$41,$8)|0);
          $42 = (_valvecheck($0,$10,$2,$40,$41)|0);
          $43 = ($42|0)==(0);
          if (!($43)) {
           $$0 = $42;
           break;
          }
          (_EN_deletelink($0,$10,$$01)|0);
          $44 = (_EN_addlink($0,$6,$2,$7,$8,$1)|0);
          $$0 = $44;
          break;
         }
        }
       }
      }
     }
    } else {
     $$0 = 262;
    }
   } else {
    $$0 = 262;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _EN_getlinknodes($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$2>>2] = 0;
 HEAP32[$3>>2] = 0;
 $4 = ((($0)) + 5072|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  $$0 = 102;
  return ($$0|0);
 }
 $7 = ($1|0)<(1);
 if ($7) {
  $$0 = 204;
  return ($$0|0);
 }
 $8 = ((($0)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)<($1|0);
 if ($10) {
  $$0 = 204;
  return ($$0|0);
 }
 $11 = ((($0)) + 48|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (((($12) + ($1<<7)|0)) + 32|0);
 $14 = HEAP32[$13>>2]|0;
 HEAP32[$2>>2] = $14;
 $15 = HEAP32[$11>>2]|0;
 $16 = (((($15) + ($1<<7)|0)) + 36|0);
 $17 = HEAP32[$16>>2]|0;
 HEAP32[$3>>2] = $17;
 $$0 = 0;
 return ($$0|0);
}
function _EN_setlinknodes($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 4524|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if (!($6)) {
  $$0 = 262;
  return ($$0|0);
 }
 $7 = ((($0)) + 4604|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0);
 if (!($9)) {
  $$0 = 262;
  return ($$0|0);
 }
 $10 = ($1|0)<(1);
 if ($10) {
  $$0 = 204;
  return ($$0|0);
 }
 $11 = ((($0)) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)<($1|0);
 if ($13) {
  $$0 = 204;
  return ($$0|0);
 }
 $14 = ($2|0)<(0);
 if ($14) {
  $$0 = 203;
  return ($$0|0);
 }
 $15 = HEAP32[$0>>2]|0;
 $16 = ($15|0)<($2|0);
 $17 = ($3|0)<(0);
 $or$cond = $16 | $17;
 $18 = ($15|0)<($3|0);
 $or$cond1 = $or$cond | $18;
 if ($or$cond1) {
  $$0 = 203;
  return ($$0|0);
 }
 $19 = ($2|0)==($3|0);
 if ($19) {
  $$0 = 222;
  return ($$0|0);
 }
 $20 = ((($0)) + 48|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (((($21) + ($1<<7)|0)) + 32|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==($2|0);
 if ($24) {
  $25 = (((($21) + ($1<<7)|0)) + 36|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ($26|0)==($3|0);
  if ($27) {
   $$0 = 0;
   return ($$0|0);
  }
 }
 $28 = (((($21) + ($1<<7)|0)) + 104|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)>(2);
 if ($30) {
  $31 = (_valvecheck($0,$1,$29,$2,$3)|0);
  $32 = ($31|0)==(0);
  if (!($32)) {
   $$0 = $31;
   return ($$0|0);
  }
 }
 HEAP32[$22>>2] = $2;
 $33 = HEAP32[$20>>2]|0;
 $34 = (((($33) + ($1<<7)|0)) + 36|0);
 HEAP32[$34>>2] = $3;
 $$0 = 0;
 return ($$0|0);
}
function _EN_getlinkvalue($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$01 = 0.0, $$pre = 0.0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0.0, $142 = 0, $143 = 0.0, $144 = 0, $145 = 0.0, $146 = 0.0, $147 = 0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0;
 var $151 = 0, $152 = 0.0, $153 = 0.0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0.0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0.0, $175 = 0, $176 = 0, $177 = 0.0, $178 = 0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0, $182 = 0, $183 = 0.0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0.0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0.0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0.0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0.0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0.0, $22 = 0, $220 = 0.0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0.0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0.0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0.0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0;
 var $or$cond = 0, $spec$select = 0.0, $spec$select12 = 0.0, $storemerge10 = 0.0, $storemerge11 = 0.0, $storemerge3 = 0.0, $storemerge5 = 0.0, $storemerge6 = 0.0, $storemerge8 = 0.0, $switch = 0, $switch13 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp + 8|0;
 $5 = sp;
 HEAPF64[$5>>3] = 0.0;
 $6 = ((($0)) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($0)) + 56|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($0)) + 4904|0);
 $11 = ((($0)) + 4272|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($0)) + 4276|0);
 $14 = HEAP32[$13>>2]|0;
 HEAPF64[$3>>3] = 0.0;
 $15 = ((($0)) + 5072|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)==(0);
 if ($17) {
  $$0 = 102;
  STACKTOP = sp;return ($$0|0);
 }
 $18 = ($1|0)<(1);
 if ($18) {
  $$0 = 204;
  STACKTOP = sp;return ($$0|0);
 }
 $19 = ((($0)) + 12|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)<($1|0);
 if ($21) {
  $$0 = 204;
  STACKTOP = sp;return ($$0|0);
 }
 L10: do {
  switch ($2|0) {
  case 0:  {
   $22 = (((($7) + ($1<<7)|0)) + 104|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ($23|0)==(2);
   if ($24) {
    $storemerge11 = 0.0;
   } else {
    $25 = (((($7) + ($1<<7)|0)) + 40|0);
    $26 = +HEAPF64[$25>>3];
    $27 = ((($0)) + 4952|0);
    $28 = +HEAPF64[$27>>3];
    $29 = $26 * $28;
    $storemerge11 = $29;
   }
   HEAPF64[$5>>3] = $storemerge11;
   break;
  }
  case 1:  {
   $30 = (((($7) + ($1<<7)|0)) + 48|0);
   $31 = +HEAPF64[$30>>3];
   $32 = +HEAPF64[$10>>3];
   $33 = $31 * $32;
   HEAPF64[$5>>3] = $33;
   break;
  }
  case 2:  {
   $34 = (((($7) + ($1<<7)|0)) + 104|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($35>>>0)<(2);
   if ($36) {
    $37 = ((($0)) + 4500|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = ($38|0)==(1);
    $40 = (((($7) + ($1<<7)|0)) + 56|0);
    $41 = +HEAPF64[$40>>3];
    if ($39) {
     $42 = +HEAPF64[$10>>3];
     $43 = $42 * 1000.0;
     $44 = $41 * $43;
     $storemerge10 = $44;
    } else {
     $storemerge10 = $41;
    }
   } else {
    $storemerge10 = 0.0;
   }
   HEAPF64[$5>>3] = $storemerge10;
   break;
  }
  case 3:  {
   $45 = (((($7) + ($1<<7)|0)) + 104|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==(2);
   if ($47) {
    $storemerge8 = 0.0;
   } else {
    $48 = (((($7) + ($1<<7)|0)) + 64|0);
    $49 = +HEAPF64[$48>>3];
    HEAPF64[$5>>3] = $49;
    $50 = (((($7) + ($1<<7)|0)) + 40|0);
    $51 = +HEAPF64[$50>>3];
    $52 = $51 * $51;
    $53 = $52 * $52;
    $54 = $53 / 0.025170000000000001;
    $55 = $49 * $54;
    $storemerge8 = $55;
   }
   HEAPF64[$5>>3] = $storemerge8;
   break;
  }
  case 4:  {
   $56 = (((($7) + ($1<<7)|0)) + 108|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = ($57>>>0)<(3);
   $spec$select = $58 ? 0.0 : 1.0;
   HEAPF64[$5>>3] = $spec$select;
   break;
  }
  case 5:  {
   $59 = (((($7) + ($1<<7)|0)) + 104|0);
   $60 = HEAP32[$59>>2]|0;
   $switch = ($60>>>0)<(2);
   if ($switch) {
    $61 = (_EN_getlinkvalue($0,$1,2,$3)|0);
    $$0 = $61;
    STACKTOP = sp;return ($$0|0);
   }
   $62 = (((($7) + ($1<<7)|0)) + 56|0);
   $63 = +HEAPF64[$62>>3];
   HEAPF64[$5>>3] = $63;
   switch ($60|0) {
   case 5: case 4: case 3:  {
    $64 = ((($0)) + 4928|0);
    $65 = +HEAPF64[$64>>3];
    $66 = $63 * $65;
    HEAPF64[$5>>3] = $66;
    break L10;
    break;
   }
   case 6:  {
    $67 = ((($0)) + 4960|0);
    $68 = +HEAPF64[$67>>3];
    $69 = $63 * $68;
    HEAPF64[$5>>3] = $69;
    break L10;
    break;
   }
   default: {
    break L10;
   }
   }
   break;
  }
  case 6:  {
   $70 = (((($7) + ($1<<7)|0)) + 72|0);
   $71 = +HEAPF64[$70>>3];
   $72 = $71 * 86400.0;
   HEAPF64[$5>>3] = $72;
   break;
  }
  case 7:  {
   $73 = (((($7) + ($1<<7)|0)) + 80|0);
   $74 = +HEAPF64[$73>>3];
   $75 = $74 * 86400.0;
   HEAPF64[$5>>3] = $75;
   break;
  }
  case 8:  {
   $76 = ((($0)) + 4536|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = (($77) + ($1<<2)|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = ($79>>>0)<(3);
   if ($80) {
    $storemerge6 = 0.0;
   } else {
    $81 = (($12) + ($1<<3)|0);
    $82 = +HEAPF64[$81>>3];
    $83 = ((($0)) + 4960|0);
    $84 = +HEAPF64[$83>>3];
    $85 = $82 * $84;
    $storemerge6 = $85;
   }
   HEAPF64[$5>>3] = $storemerge6;
   break;
  }
  case 9:  {
   $86 = (((($7) + ($1<<7)|0)) + 104|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = ($87|0)==(2);
   if ($88) {
    $storemerge5 = 0.0;
   } else {
    $89 = ((($0)) + 4536|0);
    $90 = HEAP32[$89>>2]|0;
    $91 = (($90) + ($1<<2)|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ($92>>>0)<(3);
    if ($93) {
     $storemerge5 = 0.0;
    } else {
     $94 = (($12) + ($1<<3)|0);
     $95 = +HEAPF64[$94>>3];
     $96 = $95 < 0.0;
     $97 = - $95;
     $98 = $96 ? $97 : $95;
     $99 = (((($7) + ($1<<7)|0)) + 40|0);
     $100 = +HEAPF64[$99>>3];
     $101 = $100 * $100;
     $102 = $101 * 3.1415926535897931;
     $103 = $102 * 0.25;
     HEAPF64[$4>>3] = $103;
     $104 = $98 / $103;
     $105 = ((($0)) + 4968|0);
     $106 = +HEAPF64[$105>>3];
     $107 = $104 * $106;
     $storemerge5 = $107;
    }
   }
   HEAPF64[$5>>3] = $storemerge5;
   break;
  }
  case 10:  {
   $108 = ((($0)) + 4536|0);
   $109 = HEAP32[$108>>2]|0;
   $110 = (($109) + ($1<<2)|0);
   $111 = HEAP32[$110>>2]|0;
   $112 = ($111>>>0)<(3);
   if ($112) {
    $storemerge3 = 0.0;
   } else {
    $113 = ((($0)) + 4256|0);
    $114 = HEAP32[$113>>2]|0;
    $115 = (((($7) + ($1<<7)|0)) + 32|0);
    $116 = HEAP32[$115>>2]|0;
    $117 = (($114) + ($116<<3)|0);
    $118 = +HEAPF64[$117>>3];
    $119 = (((($7) + ($1<<7)|0)) + 36|0);
    $120 = HEAP32[$119>>2]|0;
    $121 = (($114) + ($120<<3)|0);
    $122 = +HEAPF64[$121>>3];
    $123 = $118 - $122;
    $124 = (((($7) + ($1<<7)|0)) + 104|0);
    $125 = HEAP32[$124>>2]|0;
    $126 = ($125|0)!=(2);
    $127 = $123 < 0.0;
    $or$cond = $126 & $127;
    $128 = - $123;
    $$01 = $or$cond ? $128 : $123;
    $129 = ((($0)) + 4976|0);
    $130 = +HEAPF64[$129>>3];
    $131 = $$01 * $130;
    $storemerge3 = $131;
   }
   HEAPF64[$5>>3] = $storemerge3;
   break;
  }
  case 11:  {
   $132 = ((($0)) + 4536|0);
   $133 = HEAP32[$132>>2]|0;
   $134 = (($133) + ($1<<2)|0);
   $135 = HEAP32[$134>>2]|0;
   $136 = ($135>>>0)<(3);
   $spec$select12 = $136 ? 0.0 : 1.0;
   HEAPF64[$5>>3] = $spec$select12;
   break;
  }
  case 12:  {
   $137 = (((($7) + ($1<<7)|0)) + 104|0);
   $138 = HEAP32[$137>>2]|0;
   $switch13 = ($138>>>0)<(2);
   if ($switch13) {
    $139 = (_EN_getlinkvalue($0,$1,2,$3)|0);
    $$0 = $139;
    STACKTOP = sp;return ($$0|0);
   }
   $140 = (($14) + ($1<<3)|0);
   $141 = +HEAPF64[$140>>3];
   $142 = $141 == -1.0E+10;
   $143 = $142 ? 0.0 : $141;
   HEAPF64[$5>>3] = $143;
   switch ($138|0) {
   case 5: case 4: case 3:  {
    $144 = ((($0)) + 4928|0);
    $145 = +HEAPF64[$144>>3];
    $146 = $143 * $145;
    HEAPF64[$5>>3] = $146;
    break L10;
    break;
   }
   case 6:  {
    $147 = ((($0)) + 4960|0);
    $148 = +HEAPF64[$147>>3];
    $149 = $143 * $148;
    HEAPF64[$5>>3] = $149;
    break L10;
    break;
   }
   default: {
    break L10;
   }
   }
   break;
  }
  case 13:  {
   _getenergy($0,$1,$5,$4);
   break;
  }
  case 14:  {
   $150 = (+_avgqual($0,$1));
   $151 = ((($0)) + 4984|0);
   $152 = +HEAPF64[$151>>3];
   $153 = $150 * $152;
   HEAPF64[$5>>3] = $153;
   break;
  }
  case 15:  {
   $154 = (((($7) + ($1<<7)|0)) + 104|0);
   $155 = HEAP32[$154>>2]|0;
   $156 = ($155|0)==(2);
   if ($156) {
    $157 = (_findpump($0,$1)|0);
    $158 = (((($9) + ($157<<7)|0)) + 64|0);
    $159 = HEAP32[$158>>2]|0;
    $160 = (+($159|0));
    HEAPF64[$5>>3] = $160;
   }
   break;
  }
  case 16:  {
   $161 = ((($0)) + 4536|0);
   $162 = HEAP32[$161>>2]|0;
   $163 = (($162) + ($1<<2)|0);
   $164 = HEAP32[$163>>2]|0;
   $165 = (+($164>>>0));
   HEAPF64[$5>>3] = $165;
   $166 = (((($7) + ($1<<7)|0)) + 104|0);
   $167 = HEAP32[$166>>2]|0;
   $168 = ($167|0)==(2);
   if ($168) {
    $169 = HEAP32[$163>>2]|0;
    $170 = ($169>>>0)>(2);
    if ($170) {
     $171 = (_findpump($0,$1)|0);
     $172 = HEAP32[$11>>2]|0;
     $173 = (($172) + ($1<<3)|0);
     $174 = +HEAPF64[$173>>3];
     $175 = HEAP32[$13>>2]|0;
     $176 = (($175) + ($1<<3)|0);
     $177 = +HEAPF64[$176>>3];
     $178 = (((($9) + ($171<<7)|0)) + 16|0);
     $179 = +HEAPF64[$178>>3];
     $180 = $177 * $179;
     $181 = $174 > $180;
     if ($181) {
      HEAPF64[$5>>3] = 5.0;
      $$pre = +HEAPF64[$173>>3];
      $183 = $$pre;
     } else {
      $183 = $174;
     }
     $182 = $183 < 0.0;
     if ($182) {
      HEAPF64[$5>>3] = 0.0;
     }
    }
   }
   break;
  }
  case 17:  {
   _getenergy($0,$1,$4,$5);
   break;
  }
  case 18:  {
   HEAPF64[$5>>3] = 0.0;
   $184 = (((($7) + ($1<<7)|0)) + 104|0);
   $185 = HEAP32[$184>>2]|0;
   $186 = ($185|0)==(2);
   if ($186) {
    $187 = (_findpump($0,$1)|0);
    $188 = (((($9) + ($187<<7)|0)) + 4|0);
    $189 = HEAP32[$188>>2]|0;
    $190 = ($189|0)==(0);
    if ($190) {
     $191 = (((($7) + ($1<<7)|0)) + 64|0);
     $192 = +HEAPF64[$191>>3];
     HEAPF64[$5>>3] = $192;
    }
   }
   break;
  }
  case 19:  {
   $193 = (((($7) + ($1<<7)|0)) + 104|0);
   $194 = HEAP32[$193>>2]|0;
   $195 = ($194|0)==(2);
   if ($195) {
    $196 = (_findpump($0,$1)|0);
    $197 = (((($9) + ($196<<7)|0)) + 56|0);
    $198 = HEAP32[$197>>2]|0;
    $199 = (+($198|0));
    HEAPF64[$5>>3] = $199;
   }
   break;
  }
  case 20:  {
   $200 = (((($7) + ($1<<7)|0)) + 104|0);
   $201 = HEAP32[$200>>2]|0;
   $202 = ($201|0)==(2);
   if ($202) {
    $203 = (_findpump($0,$1)|0);
    $204 = (((($9) + ($203<<7)|0)) + 60|0);
    $205 = HEAP32[$204>>2]|0;
    $206 = (+($205|0));
    HEAPF64[$5>>3] = $206;
   }
   break;
  }
  case 21:  {
   $207 = (((($7) + ($1<<7)|0)) + 104|0);
   $208 = HEAP32[$207>>2]|0;
   $209 = ($208|0)==(2);
   if ($209) {
    $210 = (_findpump($0,$1)|0);
    $211 = (((($9) + ($210<<7)|0)) + 72|0);
    $212 = +HEAPF64[$211>>3];
    HEAPF64[$5>>3] = $212;
   }
   break;
  }
  case 22:  {
   $213 = (((($7) + ($1<<7)|0)) + 104|0);
   $214 = HEAP32[$213>>2]|0;
   $215 = ($214|0)==(2);
   if ($215) {
    $216 = (_findpump($0,$1)|0);
    $217 = (((($9) + ($216<<7)|0)) + 68|0);
    $218 = HEAP32[$217>>2]|0;
    $219 = (+($218|0));
    HEAPF64[$5>>3] = $219;
   }
   break;
  }
  default: {
   $$0 = 251;
   STACKTOP = sp;return ($$0|0);
  }
  }
 } while(0);
 $220 = +HEAPF64[$5>>3];
 HEAPF64[$3>>3] = $220;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _EN_setlinkvalue($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 var $$0 = 0, $$01 = 0.0, $$in = 0.0, $$in$v = 0.0, $$in2 = 0.0, $$in2$v = 0.0, $$in3 = 0.0, $$in3$v = 0.0, $$in4 = 0.0, $$in4$v = 0.0, $$in5 = 0.0, $$in5$v = 0.0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0.0, $134 = 0.0, $135 = 0, $136 = 0.0, $137 = 0, $138 = 0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0;
 var $143 = 0, $144 = 0.0, $145 = 0.0, $146 = 0, $147 = 0.0, $148 = 0, $149 = 0, $15 = 0, $150 = 0.0, $151 = 0.0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0;
 var $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0.0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0;
 var $81 = 0.0, $82 = 0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $or$cond = 0, $sext$mask = 0, $sext6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 48|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 4904|0);
 $7 = ((($0)) + 4276|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 5072|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0);
 if ($11) {
  $$0 = 102;
  return ($$0|0);
 }
 $12 = ($1|0)<(1);
 if ($12) {
  $$0 = 204;
  return ($$0|0);
 }
 $13 = ((($0)) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)<($1|0);
 if ($15) {
  $$0 = 204;
  return ($$0|0);
 }
 do {
  switch ($2|0) {
  case 0:  {
   $16 = (((($5) + ($1<<7)|0)) + 104|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)==(2);
   if ($18) {
    $$0 = 0;
    return ($$0|0);
   }
   $19 = !($3 <= 0.0);
   if (!($19)) {
    $$0 = 211;
    return ($$0|0);
   }
   $20 = ((($0)) + 4952|0);
   $21 = +HEAPF64[$20>>3];
   $22 = $3 / $21;
   $23 = (((($5) + ($1<<7)|0)) + 40|0);
   $24 = +HEAPF64[$23>>3];
   $25 = $24 / $22;
   $26 = $25 * $25;
   $27 = $26 * $26;
   $28 = (((($5) + ($1<<7)|0)) + 64|0);
   $29 = +HEAPF64[$28>>3];
   $30 = $29 * $27;
   HEAPF64[$28>>3] = $30;
   HEAPF64[$23>>3] = $22;
   _resistcoeff($0,$1);
   $$0 = 0;
   return ($$0|0);
   break;
  }
  case 1:  {
   $31 = (((($5) + ($1<<7)|0)) + 104|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($32>>>0)<(2);
   if (!($33)) {
    $$0 = 0;
    return ($$0|0);
   }
   $34 = !($3 <= 0.0);
   if (!($34)) {
    $$0 = 211;
    return ($$0|0);
   }
   $35 = +HEAPF64[$6>>3];
   $36 = $3 / $35;
   $37 = (((($5) + ($1<<7)|0)) + 48|0);
   HEAPF64[$37>>3] = $36;
   _resistcoeff($0,$1);
   $$0 = 0;
   return ($$0|0);
   break;
  }
  case 2:  {
   $38 = (((($5) + ($1<<7)|0)) + 104|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = ($39>>>0)<(2);
   if (!($40)) {
    $$0 = 0;
    return ($$0|0);
   }
   $41 = !($3 <= 0.0);
   if (!($41)) {
    $$0 = 211;
    return ($$0|0);
   }
   $42 = (((($5) + ($1<<7)|0)) + 56|0);
   HEAPF64[$42>>3] = $3;
   $43 = ((($0)) + 4500|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ($44|0)==(1);
   if ($45) {
    $46 = +HEAPF64[$6>>3];
    $47 = $46 * 1000.0;
    $48 = $3 / $47;
    HEAPF64[$42>>3] = $48;
   }
   _resistcoeff($0,$1);
   $$0 = 0;
   return ($$0|0);
   break;
  }
  case 3:  {
   $49 = (((($5) + ($1<<7)|0)) + 104|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = ($50|0)==(2);
   if ($51) {
    $$0 = 0;
    return ($$0|0);
   }
   $52 = !($3 <= 0.0);
   if (!($52)) {
    $$0 = 211;
    return ($$0|0);
   }
   $53 = $3 * 0.025170000000000001;
   $54 = (((($5) + ($1<<7)|0)) + 40|0);
   $55 = +HEAPF64[$54>>3];
   $56 = $55 * $55;
   $57 = $53 / $56;
   $58 = $57 / $56;
   $59 = (((($5) + ($1<<7)|0)) + 64|0);
   HEAPF64[$59>>3] = $58;
   $$0 = 0;
   return ($$0|0);
   break;
  }
  case 11: case 4:  {
   $60 = (((($5) + ($1<<7)|0)) + 104|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = ($61|0)==(0);
   if ($62) {
    $$0 = 207;
    return ($$0|0);
   }
   $63 = !($3 >= 0.0);
   $$in5$v = $63 ? -0.5 : 0.5;
   $$in5 = $$in5$v + $3;
   $64 = (~~(($$in5)));
   $65 = $64&255;
   $sext$mask = $64 & 128;
   $66 = ($sext$mask|0)!=(0);
   $sext6 = $64 << 24;
   $67 = ($sext6|0)>(16777216);
   $or$cond = $66 | $67;
   if ($or$cond) {
    $$0 = 211;
    return ($$0|0);
   }
   $68 = ($2|0)==(4);
   if ($68) {
    $69 = (((($5) + ($1<<7)|0)) + 108|0);
    $70 = (((($5) + ($1<<7)|0)) + 56|0);
    _setlinkstatus($0,$1,$65,$69,$70);
    $$0 = 0;
    return ($$0|0);
   } else {
    $71 = ((($0)) + 4536|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = (($72) + ($1<<2)|0);
    $74 = (($8) + ($1<<3)|0);
    _setlinkstatus($0,$1,$65,$73,$74);
    $$0 = 0;
    return ($$0|0);
   }
   break;
  }
  case 12: case 5:  {
   $75 = $3 < 0.0;
   if ($75) {
    $$0 = 211;
    return ($$0|0);
   }
   $76 = (((($5) + ($1<<7)|0)) + 104|0);
   $77 = HEAP32[$76>>2]|0;
   switch ($77|0) {
   case 0: case 1:  {
    $78 = (_EN_setlinkvalue($0,$1,2,$3)|0);
    $$0 = $78;
    return ($$0|0);
    break;
   }
   case 7: case 2:  {
    $$01 = $3;
    break;
   }
   case 5: case 4: case 3:  {
    $79 = ((($0)) + 4928|0);
    $80 = +HEAPF64[$79>>3];
    $81 = $3 / $80;
    $$01 = $81;
    break;
   }
   case 6:  {
    $82 = ((($0)) + 4960|0);
    $83 = +HEAPF64[$82>>3];
    $84 = $3 / $83;
    $$01 = $84;
    break;
   }
   case 8:  {
    $$0 = 207;
    return ($$0|0);
    break;
   }
   default: {
    $$0 = 0;
    return ($$0|0);
   }
   }
   $85 = ($2|0)==(5);
   if ($85) {
    $86 = (((($5) + ($1<<7)|0)) + 108|0);
    $87 = (((($5) + ($1<<7)|0)) + 56|0);
    _setlinksetting($0,$1,$$01,$86,$87);
    $$0 = 0;
    return ($$0|0);
   } else {
    $88 = ((($0)) + 4536|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = (($89) + ($1<<2)|0);
    $91 = (($8) + ($1<<3)|0);
    _setlinksetting($0,$1,$$01,$90,$91);
    $$0 = 0;
    return ($$0|0);
   }
   break;
  }
  case 6:  {
   $92 = (((($5) + ($1<<7)|0)) + 104|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = ($93>>>0)<(2);
   if (!($94)) {
    $$0 = 0;
    return ($$0|0);
   }
   $95 = $3 / 86400.0;
   $96 = (((($5) + ($1<<7)|0)) + 72|0);
   HEAPF64[$96>>3] = $95;
   $97 = ((($0)) + 4608|0);
   HEAP32[$97>>2] = 1;
   $$0 = 0;
   return ($$0|0);
   break;
  }
  case 7:  {
   $98 = (((($5) + ($1<<7)|0)) + 104|0);
   $99 = HEAP32[$98>>2]|0;
   $100 = ($99>>>0)<(2);
   if (!($100)) {
    $$0 = 0;
    return ($$0|0);
   }
   $101 = $3 / 86400.0;
   $102 = (((($5) + ($1<<7)|0)) + 80|0);
   HEAPF64[$102>>3] = $101;
   $103 = ((($0)) + 4608|0);
   HEAP32[$103>>2] = 1;
   $$0 = 0;
   return ($$0|0);
   break;
  }
  case 15:  {
   $104 = (((($5) + ($1<<7)|0)) + 104|0);
   $105 = HEAP32[$104>>2]|0;
   $106 = ($105|0)==(2);
   if (!($106)) {
    $$0 = 0;
    return ($$0|0);
   }
   $107 = !($3 >= 0.0);
   $$in4$v = $107 ? -0.5 : 0.5;
   $$in4 = $$in4$v + $3;
   $108 = (~~(($$in4)));
   $109 = ($108|0)<(0);
   if ($109) {
    $$0 = 205;
    return ($$0|0);
   }
   $110 = ((($0)) + 36|0);
   $111 = HEAP32[$110>>2]|0;
   $112 = ($111|0)<($108|0);
   if ($112) {
    $$0 = 205;
    return ($$0|0);
   }
   $113 = (_findpump($0,$1)|0);
   $114 = ((($0)) + 56|0);
   $115 = HEAP32[$114>>2]|0;
   $116 = (((($115) + ($113<<7)|0)) + 64|0);
   HEAP32[$116>>2] = $108;
   $$0 = 0;
   return ($$0|0);
   break;
  }
  case 18:  {
   $117 = (((($5) + ($1<<7)|0)) + 104|0);
   $118 = HEAP32[$117>>2]|0;
   $119 = ($118|0)==(2);
   if (!($119)) {
    $$0 = 0;
    return ($$0|0);
   }
   $120 = !($3 <= 0.0);
   if (!($120)) {
    $$0 = 211;
    return ($$0|0);
   }
   $121 = (_findpump($0,$1)|0);
   $122 = ((($0)) + 56|0);
   $123 = HEAP32[$122>>2]|0;
   $124 = (((($123) + ($121<<7)|0)) + 4|0);
   HEAP32[$124>>2] = 0;
   $125 = HEAP32[$122>>2]|0;
   $126 = (((($125) + ($121<<7)|0)) + 56|0);
   HEAP32[$126>>2] = 0;
   $127 = HEAP32[$4>>2]|0;
   $128 = (((($127) + ($1<<7)|0)) + 64|0);
   HEAPF64[$128>>3] = $3;
   (_updatepumpparams($0,$121)|0);
   $129 = ((($0)) + 5024|0);
   $130 = +HEAPF64[$129>>3];
   $131 = HEAP32[$122>>2]|0;
   $132 = (((($131) + ($121<<7)|0)) + 40|0);
   $133 = +HEAPF64[$132>>3];
   $134 = $133 / $130;
   HEAPF64[$132>>3] = $134;
   $135 = ((($0)) + 4960|0);
   $136 = +HEAPF64[$135>>3];
   $137 = HEAP32[$122>>2]|0;
   $138 = (((($137) + ($121<<7)|0)) + 8|0);
   $139 = +HEAPF64[$138>>3];
   $140 = $139 / $136;
   HEAPF64[$138>>3] = $140;
   $141 = +HEAPF64[$135>>3];
   $142 = HEAP32[$122>>2]|0;
   $143 = (((($142) + ($121<<7)|0)) + 16|0);
   $144 = +HEAPF64[$143>>3];
   $145 = $144 / $141;
   HEAPF64[$143>>3] = $145;
   $146 = ((($0)) + 4920|0);
   $147 = +HEAPF64[$146>>3];
   $148 = HEAP32[$122>>2]|0;
   $149 = (((($148) + ($121<<7)|0)) + 24|0);
   $150 = +HEAPF64[$149>>3];
   $151 = $150 / $147;
   HEAPF64[$149>>3] = $151;
   $$0 = 0;
   return ($$0|0);
   break;
  }
  case 19:  {
   $152 = (((($5) + ($1<<7)|0)) + 104|0);
   $153 = HEAP32[$152>>2]|0;
   $154 = ($153|0)==(2);
   if (!($154)) {
    $$0 = 0;
    return ($$0|0);
   }
   $155 = !($3 >= 0.0);
   $$in3$v = $155 ? -0.5 : 0.5;
   $$in3 = $$in3$v + $3;
   $156 = (~~(($$in3)));
   $157 = (_EN_setheadcurveindex($0,$1,$156)|0);
   $$0 = $157;
   return ($$0|0);
   break;
  }
  case 20:  {
   $158 = (((($5) + ($1<<7)|0)) + 104|0);
   $159 = HEAP32[$158>>2]|0;
   $160 = ($159|0)==(2);
   if (!($160)) {
    $$0 = 0;
    return ($$0|0);
   }
   $161 = !($3 >= 0.0);
   $$in2$v = $161 ? -0.5 : 0.5;
   $$in2 = $$in2$v + $3;
   $162 = (~~(($$in2)));
   $163 = ($162|0)<(0);
   if ($163) {
    $$0 = 205;
    return ($$0|0);
   }
   $164 = ((($0)) + 40|0);
   $165 = HEAP32[$164>>2]|0;
   $166 = ($165|0)<($162|0);
   if ($166) {
    $$0 = 205;
    return ($$0|0);
   }
   $167 = (_findpump($0,$1)|0);
   $168 = ((($0)) + 56|0);
   $169 = HEAP32[$168>>2]|0;
   $170 = (((($169) + ($167<<7)|0)) + 60|0);
   HEAP32[$170>>2] = $162;
   $$0 = 0;
   return ($$0|0);
   break;
  }
  case 21:  {
   $171 = (((($5) + ($1<<7)|0)) + 104|0);
   $172 = HEAP32[$171>>2]|0;
   $173 = ($172|0)==(2);
   if (!($173)) {
    $$0 = 0;
    return ($$0|0);
   }
   $174 = $3 < 0.0;
   if ($174) {
    $$0 = 211;
    return ($$0|0);
   }
   $175 = (_findpump($0,$1)|0);
   $176 = ((($0)) + 56|0);
   $177 = HEAP32[$176>>2]|0;
   $178 = (((($177) + ($175<<7)|0)) + 72|0);
   HEAPF64[$178>>3] = $3;
   $$0 = 0;
   return ($$0|0);
   break;
  }
  case 22:  {
   $179 = (((($5) + ($1<<7)|0)) + 104|0);
   $180 = HEAP32[$179>>2]|0;
   $181 = ($180|0)==(2);
   if (!($181)) {
    $$0 = 0;
    return ($$0|0);
   }
   $182 = !($3 >= 0.0);
   $$in$v = $182 ? -0.5 : 0.5;
   $$in = $$in$v + $3;
   $183 = (~~(($$in)));
   $184 = ($183|0)<(0);
   if ($184) {
    $$0 = 205;
    return ($$0|0);
   }
   $185 = ((($0)) + 36|0);
   $186 = HEAP32[$185>>2]|0;
   $187 = ($186|0)<($183|0);
   if ($187) {
    $$0 = 205;
    return ($$0|0);
   }
   $188 = (_findpump($0,$1)|0);
   $189 = ((($0)) + 56|0);
   $190 = HEAP32[$189>>2]|0;
   $191 = (((($190) + ($188<<7)|0)) + 68|0);
   HEAP32[$191>>2] = $183;
   $$0 = 0;
   return ($$0|0);
   break;
  }
  default: {
   $$0 = 251;
   return ($$0|0);
  }
  }
 } while(0);
 return (0)|0;
}
function _EN_setheadcurveindex($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$pre = 0, $$pre$phi2Z2D = 0, $$pre$phiZ2D = 0, $$pre1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0;
 var $43 = 0.0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0;
 var $61 = 0, $62 = 0.0, $63 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 5072|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  $$0 = 102;
  return ($$0|0);
 }
 $6 = ($1|0)<(1);
 if ($6) {
  $$0 = 204;
  return ($$0|0);
 }
 $7 = ((($0)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)<($1|0);
 if ($9) {
  $$0 = 204;
  return ($$0|0);
 }
 $10 = ((($0)) + 48|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (((($11) + ($1<<7)|0)) + 104|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(2);
 if (!($14)) {
  $$0 = 0;
  return ($$0|0);
 }
 $15 = ($2|0)<(0);
 if ($15) {
  $$0 = 206;
  return ($$0|0);
 }
 $16 = ((($0)) + 40|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)<($2|0);
 if ($18) {
  $$0 = 206;
  return ($$0|0);
 }
 $19 = (_findpump($0,$1)|0);
 $20 = ((($0)) + 56|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (((($21) + ($19<<7)|0)) + 56|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ((($0)) + 68|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (((($25) + (($2*56)|0)|0)) + 36|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (((($21) + ($19<<7)|0)) + 4|0);
 HEAP32[$28>>2] = 3;
 HEAP32[$22>>2] = $2;
 $29 = ($2|0)==(0);
 if ($29) {
  $$0 = 0;
  return ($$0|0);
 }
 $30 = (_updatepumpparams($0,$19)|0);
 $31 = ($30|0)>(0);
 do {
  if ($31) {
   $32 = HEAP32[$24>>2]|0;
   $33 = (((($32) + (($2*56)|0)|0)) + 36|0);
   HEAP32[$33>>2] = $27;
   HEAP32[$28>>2] = 3;
   HEAP32[$22>>2] = $23;
   $34 = ($23|0)==(0);
   if ($34) {
    $$0 = $30;
    return ($$0|0);
   } else {
    (_updatepumpparams($0,$19)|0);
    break;
   }
  }
 } while(0);
 $35 = HEAP32[$28>>2]|0;
 $36 = ($35|0)==(1);
 if ($36) {
  $37 = ((($0)) + 4920|0);
  $38 = +HEAPF64[$37>>3];
  $39 = (((($21) + ($19<<7)|0)) + 32|0);
  $40 = +HEAPF64[$39>>3];
  $41 = $40 / $38;
  HEAPF64[$39>>3] = $41;
  $42 = ((($0)) + 4960|0);
  $43 = +HEAPF64[$42>>3];
  $44 = (((($21) + ($19<<7)|0)) + 48|0);
  $45 = +HEAPF64[$44>>3];
  $46 = (+Math_pow((+$43),(+$45)));
  $47 = +HEAPF64[$37>>3];
  $48 = $46 / $47;
  $49 = (((($21) + ($19<<7)|0)) + 40|0);
  $50 = +HEAPF64[$49>>3];
  $51 = $50 * $48;
  HEAPF64[$49>>3] = $51;
  $$pre$phi2Z2D = $37;$$pre$phiZ2D = $42;
 } else {
  $$pre = ((($0)) + 4960|0);
  $$pre1 = ((($0)) + 4920|0);
  $$pre$phi2Z2D = $$pre1;$$pre$phiZ2D = $$pre;
 }
 $52 = +HEAPF64[$$pre$phiZ2D>>3];
 $53 = (((($21) + ($19<<7)|0)) + 8|0);
 $54 = +HEAPF64[$53>>3];
 $55 = $54 / $52;
 HEAPF64[$53>>3] = $55;
 $56 = +HEAPF64[$$pre$phiZ2D>>3];
 $57 = (((($21) + ($19<<7)|0)) + 16|0);
 $58 = +HEAPF64[$57>>3];
 $59 = $58 / $56;
 HEAPF64[$57>>3] = $59;
 $60 = +HEAPF64[$$pre$phi2Z2D>>3];
 $61 = (((($21) + ($19<<7)|0)) + 24|0);
 $62 = +HEAPF64[$61>>3];
 $63 = $62 / $60;
 HEAPF64[$61>>3] = $63;
 $$0 = $30;
 return ($$0|0);
}
function _EN_setpipedata($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond1 = 0, $or$cond1$not = 0;
 var $or$cond2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($0)) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($0)) + 4904|0);
 $9 = ((($0)) + 5072|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0);
 if ($11) {
  $$0 = 102;
  return ($$0|0);
 }
 $12 = ($1|0)<(1);
 if ($12) {
  $$0 = 204;
  return ($$0|0);
 }
 $13 = ((($0)) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)<($1|0);
 if ($15) {
  $$0 = 204;
  return ($$0|0);
 }
 $16 = (((($7) + ($1<<7)|0)) + 104|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17>>>0)>(1);
 if ($18) {
  $$0 = 0;
  return ($$0|0);
 }
 $19 = !($2 <= 0.0);
 $20 = !($3 <= 0.0);
 $or$cond = $19 & $20;
 $21 = !($4 <= 0.0);
 $or$cond1 = $or$cond & $21;
 $or$cond1$not = $or$cond1 ^ 1;
 $22 = $5 < 0.0;
 $or$cond2 = $22 | $or$cond1$not;
 if ($or$cond2) {
  $$0 = 211;
  return ($$0|0);
 }
 $23 = +HEAPF64[$8>>3];
 $24 = $2 / $23;
 $25 = (((($7) + ($1<<7)|0)) + 48|0);
 HEAPF64[$25>>3] = $24;
 $26 = ((($0)) + 4952|0);
 $27 = +HEAPF64[$26>>3];
 $28 = $3 / $27;
 $29 = (((($7) + ($1<<7)|0)) + 40|0);
 HEAPF64[$29>>3] = $28;
 $30 = (((($7) + ($1<<7)|0)) + 56|0);
 HEAPF64[$30>>3] = $4;
 $31 = ((($0)) + 4500|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)==(1);
 if ($33) {
  $34 = +HEAPF64[$8>>3];
  $35 = $34 * 1000.0;
  $36 = $4 / $35;
  HEAPF64[$30>>3] = $36;
 }
 $37 = $5 * 0.025170000000000001;
 $38 = $28 * $28;
 $39 = $37 / $38;
 $40 = $39 / $38;
 $41 = (((($7) + ($1<<7)|0)) + 64|0);
 HEAPF64[$41>>3] = $40;
 _resistcoeff($0,$1);
 $$0 = 0;
 return ($$0|0);
}
function _EN_getvertexcount($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 48|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$2>>2] = 0;
 $5 = ((($0)) + 5072|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 if ($7) {
  $$0 = 102;
  return ($$0|0);
 }
 $8 = ($1|0)<(1);
 if ($8) {
  $$0 = 204;
  return ($$0|0);
 }
 $9 = ((($0)) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)<($1|0);
 if ($11) {
  $$0 = 204;
  return ($$0|0);
 }
 $12 = (((($4) + ($1<<7)|0)) + 112|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0|0);
 if ($14) {
  $$0 = 0;
  return ($$0|0);
 }
 $15 = ((($13)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 HEAP32[$2>>2] = $16;
 $$0 = 0;
 return ($$0|0);
}
function _EN_getvertex($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($0)) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 HEAPF64[$3>>3] = -1.0E+10;
 HEAPF64[$4>>3] = -1.0E+10;
 $7 = ((($0)) + 5072|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0);
 if ($9) {
  $$0 = 102;
  return ($$0|0);
 }
 $10 = ($1|0)<(1);
 if ($10) {
  $$0 = 204;
  return ($$0|0);
 }
 $11 = ((($0)) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)<($1|0);
 if ($13) {
  $$0 = 204;
  return ($$0|0);
 }
 $14 = (((($6) + ($1<<7)|0)) + 112|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0|0);
 $17 = ($2|0)<(1);
 $or$cond = $16 | $17;
 if ($or$cond) {
  $$0 = 255;
  return ($$0|0);
 }
 $18 = ((($15)) + 8|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)<($2|0);
 if ($20) {
  $$0 = 255;
  return ($$0|0);
 }
 $21 = HEAP32[$15>>2]|0;
 $22 = (($2) + -1)|0;
 $23 = (($21) + ($22<<3)|0);
 $24 = +HEAPF64[$23>>3];
 HEAPF64[$3>>3] = $24;
 $25 = ((($15)) + 4|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($26) + ($22<<3)|0);
 $28 = +HEAPF64[$27>>3];
 HEAPF64[$4>>3] = $28;
 $$0 = 0;
 return ($$0|0);
}
function _EN_setvertices($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$02 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($0)) + 5072|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 if ($7) {
  $$0 = 102;
  return ($$0|0);
 }
 $8 = ($1|0)<(1);
 if ($8) {
  $$0 = 204;
  return ($$0|0);
 }
 $9 = ((($0)) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)<($1|0);
 if ($11) {
  $$0 = 204;
  return ($$0|0);
 }
 $12 = ((($0)) + 48|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + ($1<<7)|0);
 _freelinkvertices($14);
 $$02 = 0;
 while(1) {
  $15 = ($$02|0)<($4|0);
  if (!($15)) {
   $$0 = 0;
   label = 9;
   break;
  }
  $16 = (($2) + ($$02<<3)|0);
  $17 = +HEAPF64[$16>>3];
  $18 = (($3) + ($$02<<3)|0);
  $19 = +HEAPF64[$18>>3];
  $20 = (_addlinkvertex($14,$17,$19)|0);
  $21 = ($20|0)==(0);
  if (!($21)) {
   break;
  }
  $22 = (($$02) + 1)|0;
  $$02 = $22;
 }
 if ((label|0) == 9) {
  return ($$0|0);
 }
 _freelinkvertices($14);
 $$0 = $20;
 return ($$0|0);
}
function _EN_getpumptype($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 48|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 56|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$2>>2] = -1;
 $9 = ((($0)) + 5072|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0);
 if ($11) {
  $$0 = 102;
  return ($$0|0);
 }
 $12 = ($1|0)<(1);
 $13 = ($8|0)<($1|0);
 $or$cond = $12 | $13;
 if ($or$cond) {
  $$0 = 204;
  return ($$0|0);
 }
 $14 = (((($4) + ($1<<7)|0)) + 104|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(2);
 if (!($16)) {
  $$0 = 216;
  return ($$0|0);
 }
 $17 = (_findpump($0,$1)|0);
 $18 = (((($6) + ($17<<7)|0)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 HEAP32[$2>>2] = $19;
 $$0 = 0;
 return ($$0|0);
}
function _EN_getheadcurveindex($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 48|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 56|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$2>>2] = 0;
 $9 = ((($0)) + 5072|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0);
 if ($11) {
  $$0 = 102;
  return ($$0|0);
 }
 $12 = ($1|0)<(1);
 $13 = ($8|0)<($1|0);
 $or$cond = $12 | $13;
 if ($or$cond) {
  $$0 = 204;
  return ($$0|0);
 }
 $14 = (((($4) + ($1<<7)|0)) + 104|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(2);
 if (!($16)) {
  $$0 = 216;
  return ($$0|0);
 }
 $17 = (_findpump($0,$1)|0);
 $18 = (((($6) + ($17<<7)|0)) + 56|0);
 $19 = HEAP32[$18>>2]|0;
 HEAP32[$2>>2] = $19;
 $$0 = 0;
 return ($$0|0);
}
function _EN_addpattern($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = ((($0)) + 5072|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  $$0 = 102;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = (_EN_getpatternindex($0,$1,$2)|0);
 $7 = ($6|0)==(0);
 if ($7) {
  $$0 = 215;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = (_namevalid($1)|0);
 $9 = ($8|0)==(0);
 if ($9) {
  $$0 = 252;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = ((($0)) + 36|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + 1)|0;
 $13 = ((($0)) + 64|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($11*44)|0;
 $16 = (($15) + 88)|0;
 $17 = (_realloc($14,$16)|0);
 HEAP32[$13>>2] = $17;
 $18 = (($17) + (($12*44)|0)|0);
 (_strcpy($18,$1)|0);
 $19 = (((($17) + (($12*44)|0)|0)) + 32|0);
 HEAP32[$19>>2] = 0;
 $20 = (((($17) + (($12*44)|0)|0)) + 36|0);
 HEAP32[$20>>2] = 1;
 $21 = (_calloc(1,8)|0);
 $22 = (((($17) + (($12*44)|0)|0)) + 40|0);
 HEAP32[$22>>2] = $21;
 $23 = ($21|0)==(0|0);
 if ($23) {
  $$0 = 101;
  STACKTOP = sp;return ($$0|0);
 }
 HEAPF64[$21>>3] = 1.0;
 HEAP32[$10>>2] = $12;
 $24 = ((($0)) + 1096|0);
 HEAP32[$24>>2] = $12;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _EN_deletepattern($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$01 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 5072|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $$0 = 102;
  return ($$0|0);
 }
 $5 = ((($0)) + 4524|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 if (!($7)) {
  $$0 = 262;
  return ($$0|0);
 }
 $8 = ((($0)) + 4604|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if (!($10)) {
  $$0 = 262;
  return ($$0|0);
 }
 $11 = ($1|0)<(1);
 if ($11) {
  $$0 = 205;
  return ($$0|0);
 }
 $12 = ((($0)) + 36|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)<($1|0);
 if ($14) {
  $$0 = 205;
  return ($$0|0);
 }
 _adjustpatterns($0,$1);
 $15 = ((($0)) + 4492|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)==($1|0);
 if ($17) {
  HEAP32[$15>>2] = 0;
 } else {
  $18 = ($16|0)>($1|0);
  if ($18) {
   $19 = (($16) + -1)|0;
   HEAP32[$15>>2] = $19;
  }
 }
 $20 = ((($0)) + 64|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (((($21) + (($1*44)|0)|0)) + 40|0);
 $23 = HEAP32[$22>>2]|0;
 _free($23);
 $24 = HEAP32[$20>>2]|0;
 $25 = (((($24) + (($1*44)|0)|0)) + 40|0);
 HEAP32[$25>>2] = 0;
 $26 = HEAP32[$20>>2]|0;
 $27 = (((($26) + (($1*44)|0)|0)) + 32|0);
 $28 = HEAP32[$27>>2]|0;
 _free($28);
 $29 = HEAP32[$20>>2]|0;
 $30 = (((($29) + (($1*44)|0)|0)) + 32|0);
 HEAP32[$30>>2] = 0;
 $$01 = $1;
 while(1) {
  $31 = HEAP32[$12>>2]|0;
  $32 = ($$01|0)<($31|0);
  if (!($32)) {
   break;
  }
  $33 = HEAP32[$20>>2]|0;
  $34 = (($$01) + 1)|0;
  $35 = (($33) + (($$01*44)|0)|0);
  $36 = (($33) + (($34*44)|0)|0);
  dest=$35; src=$36; stop=dest+44|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  $$01 = $34;
 }
 $37 = (($31) + -1)|0;
 HEAP32[$12>>2] = $37;
 $38 = ((($0)) + 1096|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = (($39) + -1)|0;
 HEAP32[$38>>2] = $40;
 $$0 = 0;
 return ($$0|0);
}
function _EN_getpatternid($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 (_strcpy($2,21208)|0);
 $3 = ((($0)) + 5072|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  $$0 = 102;
  return ($$0|0);
 }
 $6 = ($1|0)<(1);
 if ($6) {
  $$0 = 205;
  return ($$0|0);
 }
 $7 = ((($0)) + 36|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)<($1|0);
 if ($9) {
  $$0 = 205;
  return ($$0|0);
 }
 $10 = ((($0)) + 64|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + (($1*44)|0)|0);
 (_strcpy($2,$12)|0);
 $$0 = 0;
 return ($$0|0);
}
function _EN_setpatternid($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$01 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 5072|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  $$0 = 102;
  return ($$0|0);
 }
 $6 = ($1|0)<(1);
 if ($6) {
  $$0 = 205;
  return ($$0|0);
 }
 $7 = ((($0)) + 36|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)<($1|0);
 if ($9) {
  $$0 = 205;
  return ($$0|0);
 }
 $10 = (_namevalid($2)|0);
 $11 = ($10|0)==(0);
 if ($11) {
  $$0 = 252;
  return ($$0|0);
 }
 $12 = ((($0)) + 64|0);
 $$01 = 1;
 while(1) {
  $13 = ($$01|0)>($8|0);
  if ($13) {
   break;
  }
  $14 = ($$01|0)==($1|0);
  if (!($14)) {
   $15 = HEAP32[$12>>2]|0;
   $16 = (($15) + (($$01*44)|0)|0);
   $17 = (_strcmp($2,$16)|0);
   $18 = ($17|0)==(0);
   if ($18) {
    $$0 = 215;
    label = 11;
    break;
   }
  }
  $19 = (($$01) + 1)|0;
  $$01 = $19;
 }
 if ((label|0) == 11) {
  return ($$0|0);
 }
 $20 = HEAP32[$12>>2]|0;
 $21 = (($20) + (($1*44)|0)|0);
 (_strcpy($21,$2)|0);
 $$0 = 0;
 return ($$0|0);
}
function _EN_getpatternlen($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 5072|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  $$0 = 102;
  return ($$0|0);
 }
 $6 = ($1|0)<(1);
 if ($6) {
  $$0 = 205;
  return ($$0|0);
 }
 $7 = ((($0)) + 36|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)<($1|0);
 if ($9) {
  $$0 = 205;
  return ($$0|0);
 }
 $10 = ((($0)) + 64|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (((($11) + (($1*44)|0)|0)) + 36|0);
 $13 = HEAP32[$12>>2]|0;
 HEAP32[$2>>2] = $13;
 $$0 = 0;
 return ($$0|0);
}
function _EN_getpatternvalue($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAPF64[$3>>3] = 0.0;
 $4 = ((($0)) + 5072|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  $$0 = 102;
  return ($$0|0);
 }
 $7 = ($1|0)<(1);
 if ($7) {
  $$0 = 205;
  return ($$0|0);
 }
 $8 = ((($0)) + 36|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)<($1|0);
 if ($10) {
  $$0 = 205;
  return ($$0|0);
 }
 $11 = ($2|0)<(1);
 if ($11) {
  $$0 = 251;
  return ($$0|0);
 }
 $12 = ((($0)) + 64|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (((($13) + (($1*44)|0)|0)) + 36|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)<($2|0);
 if ($16) {
  $$0 = 251;
  return ($$0|0);
 }
 $17 = (((($13) + (($1*44)|0)|0)) + 40|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($2) + -1)|0;
 $20 = (($18) + ($19<<3)|0);
 $21 = +HEAPF64[$20>>3];
 HEAPF64[$3>>3] = $21;
 $$0 = 0;
 return ($$0|0);
}
function _EN_setpatternvalue($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 64|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 5072|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0);
 if ($8) {
  $$0 = 102;
  return ($$0|0);
 }
 $9 = ($1|0)<(1);
 if ($9) {
  $$0 = 205;
  return ($$0|0);
 }
 $10 = ((($0)) + 36|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)<($1|0);
 if ($12) {
  $$0 = 205;
  return ($$0|0);
 }
 $13 = ($2|0)<(1);
 if ($13) {
  $$0 = 251;
  return ($$0|0);
 }
 $14 = (((($5) + (($1*44)|0)|0)) + 36|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)<($2|0);
 if ($16) {
  $$0 = 251;
  return ($$0|0);
 }
 $17 = (((($5) + (($1*44)|0)|0)) + 40|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($2) + -1)|0;
 $20 = (($18) + ($19<<3)|0);
 HEAPF64[$20>>3] = $3;
 $$0 = 0;
 return ($$0|0);
}
function _EN_getaveragepatternvalue($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$01 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 64|0);
 $4 = HEAP32[$3>>2]|0;
 HEAPF64[$2>>3] = 0.0;
 $5 = ((($0)) + 5072|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 if ($7) {
  $$0 = 102;
  return ($$0|0);
 }
 $8 = ($1|0)<(1);
 if ($8) {
  $$0 = 205;
  return ($$0|0);
 }
 $9 = ((($0)) + 36|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)<($1|0);
 if ($11) {
  $$0 = 205;
  return ($$0|0);
 }
 $12 = (((($4) + (($1*44)|0)|0)) + 36|0);
 $13 = (((($4) + (($1*44)|0)|0)) + 40|0);
 $$01 = 0;$20 = 0.0;
 while(1) {
  $14 = HEAP32[$12>>2]|0;
  $15 = ($$01|0)<($14|0);
  if (!($15)) {
   break;
  }
  $16 = HEAP32[$13>>2]|0;
  $17 = (($16) + ($$01<<3)|0);
  $18 = +HEAPF64[$17>>3];
  $19 = $20 + $18;
  HEAPF64[$2>>3] = $19;
  $21 = (($$01) + 1)|0;
  $$01 = $21;$20 = $19;
 }
 $22 = (+($14|0));
 $23 = $20 / $22;
 HEAPF64[$2>>3] = $23;
 $$0 = 0;
 return ($$0|0);
}
function _EN_setpattern($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$01 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 64|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 5072|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0);
 if ($8) {
  $$0 = 102;
  return ($$0|0);
 }
 $9 = ($1|0)<(1);
 if ($9) {
  $$0 = 205;
  return ($$0|0);
 }
 $10 = ((($0)) + 36|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)<($1|0);
 $13 = ($2|0)==(0|0);
 $or$cond = $12 | $13;
 if ($or$cond) {
  $$0 = 205;
  return ($$0|0);
 }
 $14 = ($3|0)<(1);
 if ($14) {
  $$0 = 202;
  return ($$0|0);
 }
 $15 = (((($5) + (($1*44)|0)|0)) + 36|0);
 HEAP32[$15>>2] = $3;
 $16 = (((($5) + (($1*44)|0)|0)) + 40|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $3 << 3;
 $19 = (_realloc($17,$18)|0);
 HEAP32[$16>>2] = $19;
 $20 = ($19|0)==(0|0);
 if ($20) {
  $$0 = 101;
  return ($$0|0);
 }
 $$01 = 0;
 while(1) {
  $exitcond = ($$01|0)==($3|0);
  if ($exitcond) {
   $$0 = 0;
   break;
  }
  $21 = (($2) + ($$01<<3)|0);
  $22 = +HEAPF64[$21>>3];
  $23 = HEAP32[$16>>2]|0;
  $24 = (($23) + ($$01<<3)|0);
  HEAPF64[$24>>3] = $22;
  $25 = (($$01) + 1)|0;
  $$01 = $25;
 }
 return ($$0|0);
}
function _EN_addcurve($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = ((($0)) + 5072|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  $$0 = 102;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = (_EN_getcurveindex($0,$1,$2)|0);
 $7 = ($6|0)==(0);
 if ($7) {
  $$0 = 215;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = (_namevalid($1)|0);
 $9 = ($8|0)==(0);
 if ($9) {
  $$0 = 252;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = ((($0)) + 40|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + 1)|0;
 $13 = ((($0)) + 68|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($11*56)|0;
 $16 = (($15) + 112)|0;
 $17 = (_realloc($14,$16)|0);
 HEAP32[$13>>2] = $17;
 $18 = (($17) + (($12*56)|0)|0);
 (_strcpy($18,$1)|0);
 $19 = (((($17) + (($12*56)|0)|0)) + 32|0);
 HEAP32[$19>>2] = 0;
 $20 = (((($17) + (($12*56)|0)|0)) + 44|0);
 HEAP32[$20>>2] = 1;
 $21 = (((($17) + (($12*56)|0)|0)) + 40|0);
 HEAP32[$21>>2] = 1;
 $22 = (((($17) + (($12*56)|0)|0)) + 36|0);
 HEAP32[$22>>2] = 4;
 $23 = (_calloc(1,8)|0);
 $24 = (((($17) + (($12*56)|0)|0)) + 48|0);
 HEAP32[$24>>2] = $23;
 $25 = (_calloc(1,8)|0);
 $26 = (((($17) + (($12*56)|0)|0)) + 52|0);
 HEAP32[$26>>2] = $25;
 $27 = HEAP32[$24>>2]|0;
 $28 = ($27|0)==(0|0);
 $29 = ($25|0)==(0|0);
 $or$cond = $28 | $29;
 if ($or$cond) {
  _free($27);
  $30 = HEAP32[$26>>2]|0;
  _free($30);
  $$0 = 101;
  STACKTOP = sp;return ($$0|0);
 } else {
  HEAPF64[$27>>3] = 1.0;
  $31 = HEAP32[$26>>2]|0;
  HEAPF64[$31>>3] = 1.0;
  HEAP32[$10>>2] = $12;
  $32 = ((($0)) + 1100|0);
  HEAP32[$32>>2] = $12;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _EN_getcurveindex($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 5072|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  return 102;
 } else {
  $6 = (_findcurve($0,$1)|0);
  HEAP32[$2>>2] = $6;
  $7 = ($6|0)==(0);
  $spec$select = $7 ? 206 : 0;
  return ($spec$select|0);
 }
 return (0)|0;
}
function _EN_deletecurve($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$01 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 5072|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $$0 = 102;
  return ($$0|0);
 }
 $5 = ((($0)) + 4524|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 if (!($7)) {
  $$0 = 262;
  return ($$0|0);
 }
 $8 = ((($0)) + 4604|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if (!($10)) {
  $$0 = 262;
  return ($$0|0);
 }
 $11 = ($1|0)<(1);
 if ($11) {
  $$0 = 205;
  return ($$0|0);
 }
 $12 = ((($0)) + 40|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)<($1|0);
 if ($14) {
  $$0 = 205;
  return ($$0|0);
 }
 _adjustcurves($0,$1);
 $15 = ((($0)) + 68|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (((($16) + (($1*56)|0)|0)) + 48|0);
 $18 = HEAP32[$17>>2]|0;
 _free($18);
 $19 = HEAP32[$15>>2]|0;
 $20 = (((($19) + (($1*56)|0)|0)) + 48|0);
 HEAP32[$20>>2] = 0;
 $21 = HEAP32[$15>>2]|0;
 $22 = (((($21) + (($1*56)|0)|0)) + 52|0);
 $23 = HEAP32[$22>>2]|0;
 _free($23);
 $24 = HEAP32[$15>>2]|0;
 $25 = (((($24) + (($1*56)|0)|0)) + 52|0);
 HEAP32[$25>>2] = 0;
 $26 = HEAP32[$15>>2]|0;
 $27 = (((($26) + (($1*56)|0)|0)) + 32|0);
 $28 = HEAP32[$27>>2]|0;
 _free($28);
 $29 = HEAP32[$15>>2]|0;
 $30 = (((($29) + (($1*56)|0)|0)) + 32|0);
 HEAP32[$30>>2] = 0;
 $$01 = $1;
 while(1) {
  $31 = HEAP32[$12>>2]|0;
  $32 = ($$01|0)<($31|0);
  if (!($32)) {
   break;
  }
  $33 = HEAP32[$15>>2]|0;
  $34 = (($$01) + 1)|0;
  $35 = (($33) + (($$01*56)|0)|0);
  $36 = (($33) + (($34*56)|0)|0);
  dest=$35; src=$36; stop=dest+56|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  $$01 = $34;
 }
 $37 = (($31) + -1)|0;
 HEAP32[$12>>2] = $37;
 $38 = ((($0)) + 1100|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = (($39) + -1)|0;
 HEAP32[$38>>2] = $40;
 $$0 = 0;
 return ($$0|0);
}
function _EN_getcurveid($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 (_strcpy($2,21208)|0);
 $3 = ((($0)) + 5072|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  $$0 = 102;
  return ($$0|0);
 }
 $6 = ($1|0)<(1);
 if ($6) {
  $$0 = 206;
  return ($$0|0);
 }
 $7 = ((($0)) + 40|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)<($1|0);
 if ($9) {
  $$0 = 206;
  return ($$0|0);
 }
 $10 = ((($0)) + 68|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + (($1*56)|0)|0);
 (_strcpy($2,$12)|0);
 $$0 = 0;
 return ($$0|0);
}
function _EN_setcurveid($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$01 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 5072|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  $$0 = 102;
  return ($$0|0);
 }
 $6 = ($1|0)<(1);
 if ($6) {
  $$0 = 205;
  return ($$0|0);
 }
 $7 = ((($0)) + 40|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)<($1|0);
 if ($9) {
  $$0 = 205;
  return ($$0|0);
 }
 $10 = (_namevalid($2)|0);
 $11 = ($10|0)==(0);
 if ($11) {
  $$0 = 252;
  return ($$0|0);
 }
 $12 = ((($0)) + 68|0);
 $$01 = 1;
 while(1) {
  $13 = ($$01|0)>($8|0);
  if ($13) {
   break;
  }
  $14 = ($$01|0)==($1|0);
  if (!($14)) {
   $15 = HEAP32[$12>>2]|0;
   $16 = (($15) + (($$01*56)|0)|0);
   $17 = (_strcmp($2,$16)|0);
   $18 = ($17|0)==(0);
   if ($18) {
    $$0 = 215;
    label = 11;
    break;
   }
  }
  $19 = (($$01) + 1)|0;
  $$01 = $19;
 }
 if ((label|0) == 11) {
  return ($$0|0);
 }
 $20 = HEAP32[$12>>2]|0;
 $21 = (($20) + (($1*56)|0)|0);
 (_strcpy($21,$2)|0);
 $$0 = 0;
 return ($$0|0);
}
function _EN_getcurvelen($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 5072|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  $$0 = 102;
  return ($$0|0);
 }
 $6 = ($1|0)<(1);
 if ($6) {
  $$0 = 206;
  return ($$0|0);
 }
 $7 = ((($0)) + 40|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)<($1|0);
 if ($9) {
  $$0 = 206;
  return ($$0|0);
 }
 $10 = ((($0)) + 68|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (((($11) + (($1*56)|0)|0)) + 40|0);
 $13 = HEAP32[$12>>2]|0;
 HEAP32[$2>>2] = $13;
 $$0 = 0;
 return ($$0|0);
}
function _EN_getcurvetype($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 5072|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  $$0 = 102;
  return ($$0|0);
 }
 $6 = ($1|0)<(1);
 if ($6) {
  $$0 = 206;
  return ($$0|0);
 }
 $7 = ((($0)) + 40|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)<($1|0);
 if ($9) {
  $$0 = 206;
  return ($$0|0);
 }
 $10 = ((($0)) + 68|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (((($11) + (($1*56)|0)|0)) + 36|0);
 $13 = HEAP32[$12>>2]|0;
 HEAP32[$2>>2] = $13;
 $$0 = 0;
 return ($$0|0);
}
function _EN_getcurvevalue($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[$3>>3] = 0.0;
 HEAPF64[$4>>3] = 0.0;
 $5 = ((($0)) + 5072|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 if ($7) {
  $$0 = 102;
  return ($$0|0);
 }
 $8 = ($1|0)<(1);
 if ($8) {
  $$0 = 206;
  return ($$0|0);
 }
 $9 = ((($0)) + 40|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)<($1|0);
 if ($11) {
  $$0 = 206;
  return ($$0|0);
 }
 $12 = ($2|0)<(1);
 if ($12) {
  $$0 = 251;
  return ($$0|0);
 }
 $13 = ((($0)) + 68|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (((($14) + (($1*56)|0)|0)) + 40|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)<($2|0);
 if ($17) {
  $$0 = 251;
  return ($$0|0);
 }
 $18 = (((($14) + (($1*56)|0)|0)) + 48|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($2) + -1)|0;
 $21 = (($19) + ($20<<3)|0);
 $22 = +HEAPF64[$21>>3];
 HEAPF64[$3>>3] = $22;
 $23 = HEAP32[$13>>2]|0;
 $24 = (((($23) + (($1*56)|0)|0)) + 52|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($25) + ($20<<3)|0);
 $27 = +HEAPF64[$26>>3];
 HEAPF64[$4>>3] = $27;
 $$0 = 0;
 return ($$0|0);
}
function _EN_setcurvevalue($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 $4 = +$4;
 var $$0 = 0, $$01 = 0, $$02 = 0.0, $$04 = 0.0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = (($2) + -1)|0;
 $6 = ((($0)) + 5072|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0);
 if ($8) {
  $$0 = 102;
  return ($$0|0);
 }
 $9 = ($1|0)<(1);
 if ($9) {
  $$0 = 206;
  return ($$0|0);
 }
 $10 = ((($0)) + 40|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)<($1|0);
 if ($12) {
  $$0 = 206;
  return ($$0|0);
 }
 $13 = ((($0)) + 68|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + (($1*56)|0)|0);
 $16 = ($2|0)<(1);
 if ($16) {
  $$0 = 251;
  return ($$0|0);
 }
 $17 = ($2|0)==(1);
 if ($17) {
  $$04 = -9.9999999999999995E+36;
 } else {
  $18 = (((($14) + (($1*56)|0)|0)) + 48|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($2) + -2)|0;
  $21 = (($19) + ($20<<3)|0);
  $22 = +HEAPF64[$21>>3];
  $$04 = $22;
 }
 $23 = (((($14) + (($1*56)|0)|0)) + 40|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)>($2|0);
 if ($25) {
  $26 = (((($14) + (($1*56)|0)|0)) + 48|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + ($2<<3)|0);
  $29 = +HEAPF64[$28>>3];
  $$02 = $29;
 } else {
  $$02 = 9.9999999999999995E+36;
 }
 $30 = !($$04 >= $3);
 $31 = !($$02 <= $3);
 $or$cond = $30 & $31;
 if (!($or$cond)) {
  $$0 = 230;
  return ($$0|0);
 }
 $32 = ($24|0)<($2|0);
 $33 = (($24) + 1)|0;
 $spec$select = $32 ? $33 : $2;
 $34 = (((($14) + (($1*56)|0)|0)) + 44|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ($spec$select|0)<($35|0);
 do {
  if ($36) {
   $41 = $24;
  } else {
   $37 = (($35) + 10)|0;
   $38 = (_resizecurve($15,$37)|0);
   $39 = ($38|0)>(0);
   if ($39) {
    $$0 = 101;
    return ($$0|0);
   } else {
    $$pre = HEAP32[$23>>2]|0;
    $41 = $$pre;
    break;
   }
  }
 } while(0);
 $40 = ($spec$select|0)>($41|0);
 if ($40) {
  $42 = (($41) + 1)|0;
  HEAP32[$23>>2] = $42;
  $$01 = $41;
 } else {
  $$01 = $5;
 }
 $43 = (((($14) + (($1*56)|0)|0)) + 48|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = (($44) + ($$01<<3)|0);
 HEAPF64[$45>>3] = $3;
 $46 = (((($14) + (($1*56)|0)|0)) + 52|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = (($47) + ($$01<<3)|0);
 HEAPF64[$48>>3] = $4;
 $49 = (_adjustpumpparams($0,$1)|0);
 $$0 = $49;
 return ($$0|0);
}
function _EN_setcurve($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0;
 var $or$cond = 0, $or$cond2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($0)) + 5072|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 if ($7) {
  $$0 = 102;
  return ($$0|0);
 }
 $8 = ($1|0)<(1);
 if ($8) {
  $$0 = 206;
  return ($$0|0);
 }
 $9 = ((($0)) + 40|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)<($1|0);
 $12 = ($2|0)==(0|0);
 $or$cond = $11 | $12;
 $13 = ($3|0)==(0|0);
 $or$cond2 = $or$cond | $13;
 if ($or$cond2) {
  $$0 = 206;
  return ($$0|0);
 }
 $14 = ($4|0)<(1);
 if ($14) {
  $$0 = 202;
  return ($$0|0);
 }
 $$01 = 1;
 while(1) {
  $15 = ($$01|0)<($4|0);
  if (!($15)) {
   break;
  }
  $16 = (($$01) + -1)|0;
  $17 = (($2) + ($16<<3)|0);
  $18 = +HEAPF64[$17>>3];
  $19 = (($2) + ($$01<<3)|0);
  $20 = +HEAPF64[$19>>3];
  $21 = !($18 >= $20);
  if (!($21)) {
   $$0 = 230;
   label = 14;
   break;
  }
  $22 = (($$01) + 1)|0;
  $$01 = $22;
 }
 if ((label|0) == 14) {
  return ($$0|0);
 }
 $23 = ((($0)) + 68|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($24) + (($1*56)|0)|0);
 $26 = (_resizecurve($25,$4)|0);
 $27 = ($26|0)>(0);
 if ($27) {
  $$0 = 101;
  return ($$0|0);
 }
 $28 = (((($24) + (($1*56)|0)|0)) + 40|0);
 HEAP32[$28>>2] = $4;
 $29 = (((($24) + (($1*56)|0)|0)) + 48|0);
 $30 = (((($24) + (($1*56)|0)|0)) + 52|0);
 $$1 = 0;
 while(1) {
  $exitcond = ($$1|0)==($4|0);
  if ($exitcond) {
   break;
  }
  $31 = (($2) + ($$1<<3)|0);
  $32 = +HEAPF64[$31>>3];
  $33 = HEAP32[$29>>2]|0;
  $34 = (($33) + ($$1<<3)|0);
  HEAPF64[$34>>3] = $32;
  $35 = (($3) + ($$1<<3)|0);
  $36 = +HEAPF64[$35>>3];
  $37 = HEAP32[$30>>2]|0;
  $38 = (($37) + ($$1<<3)|0);
  HEAPF64[$38>>3] = $36;
  $39 = (($$1) + 1)|0;
  $$1 = $39;
 }
 $40 = (_adjustpumpparams($0,$1)|0);
 $$0 = $40;
 return ($$0|0);
}
function _EN_addcontrol($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 $4 = $4|0;
 $5 = +$5;
 $6 = $6|0;
 var $$0 = 0, $$02 = 0.0, $$05 = 0, $$07 = 0, $$14 = 0, $$1912 = 0.0, $$3 = 0, $$in8 = 0.0, $$in8$v = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0.0, $49 = 0.0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $or$cond14 = 0, $sext = 0, $switch = 0, $switch16 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $7 = ((($0)) + 4904|0);
 $8 = ((($0)) + 5072|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if ($10) {
  $$0 = 102;
  return ($$0|0);
 }
 $11 = ($2|0)<(1);
 if ($11) {
  $$0 = 204;
  return ($$0|0);
 }
 $12 = ((($0)) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)<($2|0);
 if ($14) {
  $$0 = 204;
  return ($$0|0);
 }
 $15 = ((($0)) + 48|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (((($16) + ($2<<7)|0)) + 104|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(0);
 if ($19) {
  $$0 = 207;
  return ($$0|0);
 }
 $20 = ($1>>>0)>(3);
 if ($20) {
  $$0 = 251;
  return ($$0|0);
 }
 $switch = ($1>>>0)<(2);
 if ($switch) {
  $21 = ($4|0)<(1);
  if ($21) {
   $$0 = 203;
   return ($$0|0);
  }
  $22 = HEAP32[$0>>2]|0;
  $23 = ($22|0)<($4|0);
  if ($23) {
   $$0 = 203;
   return ($$0|0);
  } else {
   $$07 = $4;
  }
 } else {
  $$07 = 0;
 }
 $24 = $3 < 0.0;
 $25 = $5 < 0.0;
 $or$cond14 = $24 | $25;
 if ($or$cond14) {
  $$0 = 202;
  return ($$0|0);
 }
 switch ($18|0) {
 case 5: case 4: case 3:  {
  $26 = ((($0)) + 4928|0);
  $27 = +HEAPF64[$26>>3];
  $28 = $3 / $27;
  $$02 = $28;$$3 = 4;
  break;
 }
 case 6:  {
  $29 = ((($0)) + 4960|0);
  $30 = +HEAPF64[$29>>3];
  $31 = $3 / $30;
  $$02 = $31;$$3 = 4;
  break;
 }
 case 8:  {
  $32 = $3 == 0.0;
  if ($32) {
   $$05 = 2;
  } else {
   $33 = $3 == 1.0;
   if ($33) {
    $$05 = 3;
   } else {
    $$0 = 202;
    return ($$0|0);
   }
  }
  $34 = (((($16) + ($2<<7)|0)) + 56|0);
  $35 = +HEAPF64[$34>>3];
  $$02 = $35;$$3 = $$05;
  break;
 }
 case 2: case 1:  {
  $36 = $3 == 0.0;
  if ($36) {
   $$02 = $3;$$3 = 2;
  } else {
   $$02 = $3;$$3 = 3;
  }
  break;
 }
 default: {
  $$02 = $3;$$3 = 4;
 }
 }
 $switch16 = ($1>>>0)<(2);
 do {
  if ($switch16) {
   $37 = ((($0)) + 8|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = ($$07|0)>($38|0);
   $40 = ((($0)) + 44|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = (((($41) + (($$07*96)|0)|0)) + 48|0);
   $43 = +HEAPF64[$42>>3];
   if ($39) {
    $44 = +HEAPF64[$7>>3];
    $45 = $5 / $44;
    $46 = $43 + $45;
    $$14 = 0;$$1912 = $46;
    break;
   } else {
    $47 = ((($0)) + 4928|0);
    $48 = +HEAPF64[$47>>3];
    $49 = $5 / $48;
    $50 = $43 + $49;
    $$14 = 0;$$1912 = $50;
    break;
   }
  } else {
   $51 = ($1|0)==(2);
   $52 = !($5 >= 0.0);
   $$in8$v = $52 ? -0.5 : 0.5;
   $$in8 = $$in8$v + $5;
   $53 = (~~(($$in8)));
   if ($51) {
    $$14 = $53;$$1912 = $5;
   } else {
    $54 = (($53|0) % 86400)&-1;
    $$14 = $54;$$1912 = $5;
   }
  }
 } while(0);
 $55 = ((($0)) + 28|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = (($56) + 1)|0;
 $58 = ((($0)) + 72|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = ($56*40)|0;
 $61 = (($60) + 80)|0;
 $62 = (_realloc($59,$61)|0);
 HEAP32[$58>>2] = $62;
 $sext = $1 << 24;
 $63 = $sext >> 24;
 $64 = (((($62) + (($57*40)|0)|0)) + 36|0);
 HEAP32[$64>>2] = $63;
 $65 = (($62) + (($57*40)|0)|0);
 HEAP32[$65>>2] = $2;
 $66 = (((($62) + (($57*40)|0)|0)) + 4|0);
 HEAP32[$66>>2] = $$07;
 $67 = (((($62) + (($57*40)|0)|0)) + 32|0);
 HEAP32[$67>>2] = $$3;
 $68 = (((($62) + (($57*40)|0)|0)) + 24|0);
 HEAPF64[$68>>3] = $$02;
 $69 = (((($62) + (($57*40)|0)|0)) + 16|0);
 HEAPF64[$69>>3] = $$1912;
 $70 = (((($62) + (($57*40)|0)|0)) + 8|0);
 HEAP32[$70>>2] = $$14;
 HEAP32[$55>>2] = $57;
 $71 = ((($0)) + 1088|0);
 HEAP32[$71>>2] = $57;
 HEAP32[$6>>2] = $57;
 $$0 = 0;
 return ($$0|0);
}
function _EN_getcontrol($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$0 = 0, $$1 = 0.0, $$3 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0.0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0.0;
 var $47 = 0, $48 = 0.0, $49 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0.0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $7 = ((($0)) + 4904|0);
 HEAP32[$2>>2] = 0;
 HEAP32[$3>>2] = 0;
 HEAP32[$5>>2] = 0;
 $8 = ((($0)) + 5072|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if ($10) {
  $$0 = 102;
  return ($$0|0);
 }
 $11 = ($1|0)<(1);
 if ($11) {
  $$0 = 241;
  return ($$0|0);
 }
 $12 = ((($0)) + 28|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)<($1|0);
 if ($14) {
  $$0 = 241;
  return ($$0|0);
 }
 $15 = ((($0)) + 72|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (((($16) + (($1*40)|0)|0)) + 36|0);
 $18 = HEAP32[$17>>2]|0;
 HEAP32[$2>>2] = $18;
 $19 = (($16) + (($1*40)|0)|0);
 $20 = HEAP32[$19>>2]|0;
 HEAP32[$3>>2] = $20;
 $21 = (((($16) + (($1*40)|0)|0)) + 24|0);
 $22 = +HEAPF64[$21>>3];
 $23 = $22 != -1.0E+10;
 L10: do {
  if ($23) {
   $24 = ((($0)) + 48|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = (((($25) + ($20<<7)|0)) + 104|0);
   $27 = HEAP32[$26>>2]|0;
   switch ($27|0) {
   case 5: case 4: case 3:  {
    $28 = ((($0)) + 4928|0);
    $29 = +HEAPF64[$28>>3];
    $30 = $22 * $29;
    $$3 = $30;
    break L10;
    break;
   }
   case 6:  {
    $31 = ((($0)) + 4960|0);
    $32 = +HEAPF64[$31>>3];
    $33 = $22 * $32;
    $$3 = $33;
    break L10;
    break;
   }
   default: {
    $$3 = $22;
    break L10;
   }
   }
  } else {
   $34 = (((($16) + (($1*40)|0)|0)) + 32|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($35|0)==(3);
   $spec$select = $36 ? 1.0 : 0.0;
   $$3 = $spec$select;
  }
 } while(0);
 $37 = (((($16) + (($1*40)|0)|0)) + 4|0);
 $38 = HEAP32[$37>>2]|0;
 HEAP32[$5>>2] = $38;
 $39 = ($38|0)>(0);
 do {
  if ($39) {
   $40 = ((($0)) + 44|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = ((($0)) + 8|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = ($38|0)>($43|0);
   $45 = (((($16) + (($1*40)|0)|0)) + 16|0);
   $46 = +HEAPF64[$45>>3];
   $47 = (((($41) + (($38*96)|0)|0)) + 48|0);
   $48 = +HEAPF64[$47>>3];
   $49 = $46 - $48;
   if ($44) {
    $50 = +HEAPF64[$7>>3];
    $51 = $49 * $50;
    $$1 = $51;
    break;
   } else {
    $52 = ((($0)) + 4928|0);
    $53 = +HEAPF64[$52>>3];
    $54 = $49 * $53;
    $$1 = $54;
    break;
   }
  } else {
   $55 = (((($16) + (($1*40)|0)|0)) + 8|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = (+($56|0));
   $$1 = $57;
  }
 } while(0);
 HEAPF64[$4>>3] = $$3;
 HEAPF64[$6>>3] = $$1;
 $$0 = 0;
 return ($$0|0);
}
function _EN_setcontrol($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = +$4;
 $5 = $5|0;
 $6 = +$6;
 var $$0 = 0, $$02 = 0.0, $$05 = 0, $$07 = 0, $$14 = 0, $$1912 = 0.0, $$3 = 0, $$in8 = 0.0, $$in8$v = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0.0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond14 = 0, $sext = 0, $switch = 0, $switch16 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $7 = ((($0)) + 4904|0);
 $8 = ((($0)) + 5072|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if ($10) {
  $$0 = 102;
  return ($$0|0);
 }
 $11 = ($1|0)<(1);
 if ($11) {
  $$0 = 241;
  return ($$0|0);
 }
 $12 = ((($0)) + 28|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)<($1|0);
 if ($14) {
  $$0 = 241;
  return ($$0|0);
 }
 $15 = ((($0)) + 72|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + (($1*40)|0)|0);
 $18 = ($3|0)==(0);
 if ($18) {
  HEAP32[$17>>2] = 0;
  $$0 = 0;
  return ($$0|0);
 }
 $19 = ($3|0)<(0);
 if ($19) {
  $$0 = 204;
  return ($$0|0);
 }
 $20 = ((($0)) + 12|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)<($3|0);
 if ($22) {
  $$0 = 204;
  return ($$0|0);
 }
 $23 = ((($0)) + 48|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (((($24) + ($3<<7)|0)) + 104|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)==(0);
 if ($27) {
  $$0 = 207;
  return ($$0|0);
 }
 $28 = ($2>>>0)>(3);
 if ($28) {
  $$0 = 251;
  return ($$0|0);
 }
 $switch = ($2>>>0)<(2);
 if ($switch) {
  $29 = ($5|0)<(1);
  if ($29) {
   $$0 = 203;
   return ($$0|0);
  }
  $30 = HEAP32[$0>>2]|0;
  $31 = ($30|0)<($5|0);
  if ($31) {
   $$0 = 203;
   return ($$0|0);
  } else {
   $$07 = $5;
  }
 } else {
  $$07 = 0;
 }
 $32 = $4 < 0.0;
 $33 = $6 < 0.0;
 $or$cond14 = $32 | $33;
 if ($or$cond14) {
  $$0 = 202;
  return ($$0|0);
 }
 switch ($26|0) {
 case 5: case 4: case 3:  {
  $34 = ((($0)) + 4928|0);
  $35 = +HEAPF64[$34>>3];
  $36 = $4 / $35;
  $$02 = $36;$$3 = 4;
  break;
 }
 case 6:  {
  $37 = ((($0)) + 4960|0);
  $38 = +HEAPF64[$37>>3];
  $39 = $4 / $38;
  $$02 = $39;$$3 = 4;
  break;
 }
 case 8:  {
  $40 = $4 == 0.0;
  if ($40) {
   $$05 = 2;
  } else {
   $41 = $4 == 1.0;
   if ($41) {
    $$05 = 3;
   } else {
    $$0 = 202;
    return ($$0|0);
   }
  }
  $42 = (((($24) + ($3<<7)|0)) + 56|0);
  $43 = +HEAPF64[$42>>3];
  $$02 = $43;$$3 = $$05;
  break;
 }
 case 2: case 1:  {
  $44 = $4 == 0.0;
  if ($44) {
   $$02 = $4;$$3 = 2;
  } else {
   $$02 = $4;$$3 = 3;
  }
  break;
 }
 default: {
  $$02 = $4;$$3 = 4;
 }
 }
 $switch16 = ($2>>>0)<(2);
 do {
  if ($switch16) {
   $45 = ((($0)) + 8|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($$07|0)>($46|0);
   $48 = ((($0)) + 44|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = (((($49) + (($$07*96)|0)|0)) + 48|0);
   $51 = +HEAPF64[$50>>3];
   if ($47) {
    $52 = +HEAPF64[$7>>3];
    $53 = $6 / $52;
    $54 = $51 + $53;
    $$14 = 0;$$1912 = $54;
    break;
   } else {
    $55 = ((($0)) + 4928|0);
    $56 = +HEAPF64[$55>>3];
    $57 = $6 / $56;
    $58 = $51 + $57;
    $$14 = 0;$$1912 = $58;
    break;
   }
  } else {
   $59 = ($2|0)==(2);
   $60 = !($6 >= 0.0);
   $$in8$v = $60 ? -0.5 : 0.5;
   $$in8 = $$in8$v + $6;
   $61 = (~~(($$in8)));
   if ($59) {
    $$14 = $61;$$1912 = $6;
   } else {
    $62 = (($61|0) % 86400)&-1;
    $$14 = $62;$$1912 = $6;
   }
  }
 } while(0);
 $sext = $2 << 24;
 $63 = $sext >> 24;
 $64 = (((($16) + (($1*40)|0)|0)) + 36|0);
 HEAP32[$64>>2] = $63;
 HEAP32[$17>>2] = $3;
 $65 = (((($16) + (($1*40)|0)|0)) + 4|0);
 HEAP32[$65>>2] = $$07;
 $66 = (((($16) + (($1*40)|0)|0)) + 32|0);
 HEAP32[$66>>2] = $$3;
 $67 = (((($16) + (($1*40)|0)|0)) + 24|0);
 HEAPF64[$67>>3] = $$02;
 $68 = (((($16) + (($1*40)|0)|0)) + 16|0);
 HEAPF64[$68>>3] = $$1912;
 $69 = (((($16) + (($1*40)|0)|0)) + 8|0);
 HEAP32[$69>>2] = $$14;
 $$0 = 0;
 return ($$0|0);
}
function _EN_addrule($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $$pre1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1040|0);
 $2 = sp;
 $3 = ((($0)) + 76|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 32|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6*56)|0;
 $8 = (($7) + 112)|0;
 $9 = (_realloc($4,$8)|0);
 HEAP32[$3>>2] = $9;
 $10 = ((($0)) + 4236|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($0)) + 4232|0);
 HEAP32[$11>>2] = 6;
 $12 = ((($0)) + 388|0);
 $13 = ((($0)) + 548|0);
 $14 = ((($0)) + 1104|0);
 $$0 = $1;
 while(1) {
  $15 = ($$0|0)==(0|0);
  if ($15) {
   label = 11;
   break;
  }
  $16 = (_strchr($$0,10)|0);
  $17 = ($16|0)==(0|0);
  if (!($17)) {
   HEAP8[$16>>0] = 0;
  }
  (_strcpy($2,$$0)|0);
  (_strcat($2,5953)|0);
  $18 = (_gettokens($2,$12,$13)|0);
  HEAP32[$14>>2] = $18;
  $19 = ($18|0)>(0);
  if ($19) {
   $20 = HEAP32[$12>>2]|0;
   $21 = HEAP8[$20>>0]|0;
   $22 = ($21<<24>>24)==(59);
   if (!($22)) {
    (_ruledata($0)|0);
    $23 = HEAP32[$10>>2]|0;
    $24 = ($23|0)==(0);
    if (!($24)) {
     break;
    }
   }
  }
  if ($17) {
   $30 = 0;
  } else {
   HEAP8[$16>>0] = 10;
   $25 = ((($16)) + 1|0);
   $30 = $25;
  }
  $$0 = $30;
 }
 if ((label|0) == 11) {
  $$pre = HEAP32[$10>>2]|0;
  $26 = ($$pre|0)==(0);
  if ($26) {
   $29 = 0;
   STACKTOP = sp;return ($29|0);
  }
 }
 $27 = HEAP32[$5>>2]|0;
 _deleterule($0,$27);
 $$pre1 = HEAP32[$10>>2]|0;
 $28 = ($$pre1|0)==(201);
 if (!($28)) {
  $29 = $$pre1;
  STACKTOP = sp;return ($29|0);
 }
 HEAP32[$10>>2] = 250;
 $29 = 250;
 STACKTOP = sp;return ($29|0);
}
function _EN_deleterule($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)<(1);
 if ($2) {
  $$0 = 257;
 } else {
  $3 = ((($0)) + 32|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)<($1|0);
  if ($5) {
   $$0 = 257;
  } else {
   _deleterule($0,$1);
   $$0 = 0;
  }
 }
 return ($$0|0);
}
function _EN_getrule($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$01 = 0, $$01$in = 0, $$02 = 0, $$02$in = 0, $$03 = 0, $$1 = 0, $$1$in = 0, $$14 = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ($1|0)<(1);
 if ($6) {
  $$0 = 257;
  return ($$0|0);
 }
 $7 = ((($0)) + 32|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)<($1|0);
 if ($9) {
  $$0 = 257;
  return ($$0|0);
 }
 $10 = ((($0)) + 76|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (((($11) + (($1*56)|0)|0)) + 32|0);
 $13 = +HEAPF64[$12>>3];
 HEAPF64[$5>>3] = $13;
 $14 = HEAP32[$10>>2]|0;
 $15 = (((($14) + (($1*56)|0)|0)) + 40|0);
 $$02$in = $15;$$03 = 0;
 while(1) {
  $$02 = HEAP32[$$02$in>>2]|0;
  $16 = ($$02|0)==(0|0);
  if ($16) {
   break;
  }
  $17 = (($$03) + 1)|0;
  $18 = ((($$02)) + 32|0);
  $$02$in = $18;$$03 = $17;
 }
 HEAP32[$2>>2] = $$03;
 $19 = HEAP32[$10>>2]|0;
 $20 = (((($19) + (($1*56)|0)|0)) + 44|0);
 $$01$in = $20;$$14 = 0;
 while(1) {
  $$01 = HEAP32[$$01$in>>2]|0;
  $21 = ($$01|0)==(0|0);
  if ($21) {
   break;
  }
  $22 = (($$14) + 1)|0;
  $23 = ((($$01)) + 16|0);
  $$01$in = $23;$$14 = $22;
 }
 HEAP32[$3>>2] = $$14;
 $24 = HEAP32[$10>>2]|0;
 $25 = (((($24) + (($1*56)|0)|0)) + 48|0);
 $$1$in = $25;$$2 = 0;
 while(1) {
  $$1 = HEAP32[$$1$in>>2]|0;
  $26 = ($$1|0)==(0|0);
  if ($26) {
   break;
  }
  $27 = (($$2) + 1)|0;
  $28 = ((($$1)) + 16|0);
  $$1$in = $28;$$2 = $27;
 }
 HEAP32[$4>>2] = $$2;
 $$0 = 0;
 return ($$0|0);
}
function _EN_getruleID($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 (_strcpy($2,21208)|0);
 $3 = ((($0)) + 5072|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  $$0 = 102;
  return ($$0|0);
 }
 $6 = ($1|0)<(1);
 if ($6) {
  $$0 = 257;
  return ($$0|0);
 }
 $7 = ((($0)) + 32|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)<($1|0);
 if ($9) {
  $$0 = 257;
  return ($$0|0);
 }
 $10 = ((($0)) + 76|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + (($1*56)|0)|0);
 (_strcpy($2,$12)|0);
 $$0 = 0;
 return ($$0|0);
}
function _EN_getpremise($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $10 = ($1|0)<(1);
 if ($10) {
  $$0 = 257;
  return ($$0|0);
 }
 $11 = ((($0)) + 32|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)<($1|0);
 if ($13) {
  $$0 = 257;
  return ($$0|0);
 }
 $14 = ((($0)) + 76|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (((($15) + (($1*56)|0)|0)) + 40|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (_getpremise($17,$2)|0);
 $19 = ($18|0)==(0|0);
 if ($19) {
  $$0 = 258;
  return ($$0|0);
 }
 $20 = HEAP32[$18>>2]|0;
 HEAP32[$3>>2] = $20;
 $21 = ((($18)) + 4|0);
 $22 = HEAP32[$21>>2]|0;
 HEAP32[$4>>2] = $22;
 $23 = ((($18)) + 8|0);
 $24 = HEAP32[$23>>2]|0;
 HEAP32[$5>>2] = $24;
 $25 = ((($18)) + 12|0);
 $26 = HEAP32[$25>>2]|0;
 HEAP32[$6>>2] = $26;
 $27 = ((($18)) + 16|0);
 $28 = HEAP32[$27>>2]|0;
 HEAP32[$7>>2] = $28;
 $29 = ((($18)) + 20|0);
 $30 = HEAP32[$29>>2]|0;
 HEAP32[$8>>2] = $30;
 $31 = ((($18)) + 24|0);
 $32 = +HEAPF64[$31>>3];
 HEAPF64[$9>>3] = $32;
 $$0 = 0;
 return ($$0|0);
}
function _EN_setpremise($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = +$9;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $10 = ($1|0)<(1);
 if ($10) {
  $$0 = 257;
  return ($$0|0);
 }
 $11 = ((($0)) + 32|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)<($1|0);
 if ($13) {
  $$0 = 257;
  return ($$0|0);
 }
 $14 = ((($0)) + 76|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (((($15) + (($1*56)|0)|0)) + 40|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (_getpremise($17,$2)|0);
 $19 = ($18|0)==(0|0);
 if ($19) {
  $$0 = 258;
  return ($$0|0);
 }
 HEAP32[$18>>2] = $3;
 $20 = ((($18)) + 4|0);
 HEAP32[$20>>2] = $4;
 $21 = ((($18)) + 8|0);
 HEAP32[$21>>2] = $5;
 $22 = ((($18)) + 12|0);
 HEAP32[$22>>2] = $6;
 $23 = ((($18)) + 16|0);
 HEAP32[$23>>2] = $7;
 $24 = ((($18)) + 20|0);
 HEAP32[$24>>2] = $8;
 $25 = ((($18)) + 24|0);
 HEAPF64[$25>>3] = $9;
 $$0 = 0;
 return ($$0|0);
}
function _EN_setpremiseindex($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($1|0)<(1);
 if ($4) {
  $$0 = 257;
  return ($$0|0);
 }
 $5 = ((($0)) + 32|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)<($1|0);
 if ($7) {
  $$0 = 257;
  return ($$0|0);
 }
 $8 = ((($0)) + 76|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (((($9) + (($1*56)|0)|0)) + 40|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (_getpremise($11,$2)|0);
 $13 = ($12|0)==(0|0);
 if ($13) {
  $$0 = 258;
  return ($$0|0);
 }
 $14 = ((($12)) + 8|0);
 HEAP32[$14>>2] = $3;
 $$0 = 0;
 return ($$0|0);
}
function _EN_setpremisestatus($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($1|0)<(1);
 if ($4) {
  $$0 = 257;
  return ($$0|0);
 }
 $5 = ((($0)) + 32|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)<($1|0);
 if ($7) {
  $$0 = 257;
  return ($$0|0);
 }
 $8 = ((($0)) + 76|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (((($9) + (($1*56)|0)|0)) + 40|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (_getpremise($11,$2)|0);
 $13 = ($12|0)==(0|0);
 if ($13) {
  $$0 = 258;
  return ($$0|0);
 }
 $14 = ((($12)) + 20|0);
 HEAP32[$14>>2] = $3;
 $$0 = 0;
 return ($$0|0);
}
function _EN_setpremisevalue($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($1|0)<(1);
 if ($4) {
  $$0 = 257;
  return ($$0|0);
 }
 $5 = ((($0)) + 32|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)<($1|0);
 if ($7) {
  $$0 = 257;
  return ($$0|0);
 }
 $8 = ((($0)) + 76|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (((($9) + (($1*56)|0)|0)) + 40|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (_getpremise($11,$2)|0);
 $13 = ($12|0)==(0|0);
 if ($13) {
  $$0 = 258;
  return ($$0|0);
 }
 $14 = ((($12)) + 24|0);
 HEAPF64[$14>>3] = $3;
 $$0 = 0;
 return ($$0|0);
}
function _EN_getthenaction($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ($1|0)<(1);
 if ($6) {
  $$0 = 257;
  return ($$0|0);
 }
 $7 = ((($0)) + 32|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)<($1|0);
 if ($9) {
  $$0 = 257;
  return ($$0|0);
 }
 $10 = ((($0)) + 76|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (((($11) + (($1*56)|0)|0)) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (_getaction($13,$2)|0);
 $15 = ($14|0)==(0|0);
 if ($15) {
  $$0 = 258;
  return ($$0|0);
 }
 $16 = HEAP32[$14>>2]|0;
 HEAP32[$3>>2] = $16;
 $17 = ((($14)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 HEAP32[$4>>2] = $18;
 $19 = ((($14)) + 8|0);
 $20 = +HEAPF64[$19>>3];
 HEAPF64[$5>>3] = $20;
 $$0 = 0;
 return ($$0|0);
}
function _EN_setthenaction($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = +$5;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ($1|0)<(1);
 if ($6) {
  $$0 = 257;
  return ($$0|0);
 }
 $7 = ((($0)) + 32|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)<($1|0);
 if ($9) {
  $$0 = 257;
  return ($$0|0);
 }
 $10 = ((($0)) + 76|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (((($11) + (($1*56)|0)|0)) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (_getaction($13,$2)|0);
 $15 = ($14|0)==(0|0);
 if ($15) {
  $$0 = 258;
  return ($$0|0);
 }
 HEAP32[$14>>2] = $3;
 $16 = ((($14)) + 4|0);
 HEAP32[$16>>2] = $4;
 $17 = ((($14)) + 8|0);
 HEAPF64[$17>>3] = $5;
 $$0 = 0;
 return ($$0|0);
}
function _EN_getelseaction($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ($1|0)<(1);
 if ($6) {
  $$0 = 257;
  return ($$0|0);
 }
 $7 = ((($0)) + 32|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)<($1|0);
 if ($9) {
  $$0 = 257;
  return ($$0|0);
 }
 $10 = ((($0)) + 76|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (((($11) + (($1*56)|0)|0)) + 48|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (_getaction($13,$2)|0);
 $15 = ($14|0)==(0|0);
 if ($15) {
  $$0 = 258;
  return ($$0|0);
 }
 $16 = HEAP32[$14>>2]|0;
 HEAP32[$3>>2] = $16;
 $17 = ((($14)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 HEAP32[$4>>2] = $18;
 $19 = ((($14)) + 8|0);
 $20 = +HEAPF64[$19>>3];
 HEAPF64[$5>>3] = $20;
 $$0 = 0;
 return ($$0|0);
}
function _EN_setelseaction($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = +$5;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ($1|0)<(1);
 if ($6) {
  $$0 = 257;
  return ($$0|0);
 }
 $7 = ((($0)) + 32|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)<($1|0);
 if ($9) {
  $$0 = 257;
  return ($$0|0);
 }
 $10 = ((($0)) + 76|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (((($11) + (($1*56)|0)|0)) + 48|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (_getaction($13,$2)|0);
 $15 = ($14|0)==(0|0);
 if ($15) {
  $$0 = 258;
  return ($$0|0);
 }
 HEAP32[$14>>2] = $3;
 $16 = ((($14)) + 4|0);
 HEAP32[$16>>2] = $4;
 $17 = ((($14)) + 8|0);
 HEAPF64[$17>>3] = $5;
 $$0 = 0;
 return ($$0|0);
}
function _EN_setrulepriority($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 var $$0 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1|0)<(1);
 if ($3) {
  $$0 = 257;
  return ($$0|0);
 }
 $4 = ((($0)) + 32|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)<($1|0);
 if ($6) {
  $$0 = 257;
  return ($$0|0);
 }
 $7 = ((($0)) + 76|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (((($8) + (($1*56)|0)|0)) + 32|0);
 HEAPF64[$9>>3] = $2;
 $$0 = 0;
 return ($$0|0);
}
function _gethash($0) {
 $0 = $0|0;
 var $$0 = 0, $$01 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $0;$$01 = 5381;
 while(1) {
  $1 = HEAP8[$$0>>0]|0;
  $2 = ($1<<24>>24)==(0);
  if ($2) {
   break;
  }
  $3 = $1 << 24 >> 24;
  $4 = ((($$0)) + 1|0);
  $5 = ($$01*33)|0;
  $6 = (($5) + ($3))|0;
  $$0 = $4;$$01 = $6;
 }
 $7 = (($$01>>>0) % 128000)&-1;
 return ($7|0);
}
function _dupstr($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strlen($0)|0);
 $2 = (($1) + 1)|0;
 $3 = (_malloc($2)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  return ($3|0);
 }
 _memcpy(($3|0),($0|0),($2|0))|0;
 return ($3|0);
}
function _hashtable_create() {
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_calloc(128000,4)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  return ($0|0);
 }
 $$0 = 0;
 while(1) {
  $exitcond = ($$0|0)==(128000);
  if ($exitcond) {
   break;
  }
  $2 = (($0) + ($$0<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($$0) + 1)|0;
  $$0 = $3;
 }
 return ($0|0);
}
function _hashtable_insert($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_gethash($1)|0);
 $4 = ($3>>>0)>(127999);
 if ($4) {
  return;
 }
 $5 = (_malloc(12)|0);
 $6 = ($5|0)==(0|0);
 if ($6) {
  return;
 }
 $7 = (_dupstr($1)|0);
 HEAP32[$5>>2] = $7;
 $8 = ((($5)) + 4|0);
 HEAP32[$8>>2] = $2;
 $9 = (($0) + ($3<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($5)) + 8|0);
 HEAP32[$11>>2] = $10;
 HEAP32[$9>>2] = $5;
 return;
}
function _hashtable_update($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$01 = 0, $$01$in = 0, $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_gethash($1)|0);
 $4 = ($3>>>0)>(127999);
 if ($4) {
  return;
 }
 $5 = (($0) + ($3<<2)|0);
 $$01$in = $5;
 while(1) {
  $$01 = HEAP32[$$01$in>>2]|0;
  $6 = ($$01|0)==(0|0);
  if ($6) {
   label = 7;
   break;
  }
  $7 = HEAP32[$$01>>2]|0;
  $8 = (_strcmp($7,$1)|0);
  $9 = ($8|0)==(0);
  if ($9) {
   break;
  }
  $11 = ((($$01)) + 8|0);
  $$01$in = $11;
 }
 if ((label|0) == 7) {
  return;
 }
 $10 = ((($$01)) + 4|0);
 HEAP32[$10>>2] = $2;
 return;
}
function _hashtable_delete($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$01 = 0, $$02 = 0, $$02$in = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_gethash($1)|0);
 $3 = ($2>>>0)>(127999);
 if ($3) {
  return;
 }
 $4 = (($0) + ($2<<2)|0);
 $$01 = 0;$$02$in = $4;
 while(1) {
  $$02 = HEAP32[$$02$in>>2]|0;
  $5 = ($$02|0)==(0|0);
  if ($5) {
   label = 10;
   break;
  }
  $6 = HEAP32[$$02>>2]|0;
  $7 = (_strcmp($6,$1)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   break;
  }
  $14 = ((($$02)) + 8|0);
  $$01 = $$02;$$02$in = $14;
 }
 if ((label|0) == 10) {
  return;
 }
 $9 = ($$01|0)==(0|0);
 $10 = ((($$02)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 if ($9) {
  HEAP32[$4>>2] = $11;
 } else {
  $12 = ((($$01)) + 8|0);
  HEAP32[$12>>2] = $11;
 }
 $13 = HEAP32[$$02>>2]|0;
 _free($13);
 _free($$02);
 return;
}
function _hashtable_find($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$01 = 0, $$01$in = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_gethash($1)|0);
 $3 = ($2>>>0)>(127999);
 if ($3) {
  $$0 = 0;
  return ($$0|0);
 }
 $4 = (($0) + ($2<<2)|0);
 $$01$in = $4;
 while(1) {
  $$01 = HEAP32[$$01$in>>2]|0;
  $5 = ($$01|0)==(0|0);
  if ($5) {
   $$0 = 0;
   label = 7;
   break;
  }
  $6 = HEAP32[$$01>>2]|0;
  $7 = (_strcmp($6,$1)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   break;
  }
  $11 = ((($$01)) + 8|0);
  $$01$in = $11;
 }
 if ((label|0) == 7) {
  return ($$0|0);
 }
 $9 = ((($$01)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $$0 = $10;
 return ($$0|0);
}
function _hashtable_free($0) {
 $0 = $0|0;
 var $$0 = 0, $$in2 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = 0;
 while(1) {
  $exitcond = ($$0|0)==(128000);
  if ($exitcond) {
   break;
  }
  $1 = (($0) + ($$0<<2)|0);
  $2 = HEAP32[$1>>2]|0;
  $$in2 = $2;
  while(1) {
   $3 = ($$in2|0)==(0|0);
   if ($3) {
    break;
   }
   $4 = ((($$in2)) + 8|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = HEAP32[$$in2>>2]|0;
   _free($6);
   _free($$in2);
   $$in2 = $5;
  }
  HEAP32[$1>>2] = 0;
  $7 = (($$0) + 1)|0;
  $$0 = $7;
 }
 _free($0);
 return;
}
function _resistcoeff($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0;
 var $29 = 0.0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0;
 var $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (((($3) + ($1<<7)|0)) + 104|0);
 $5 = HEAP32[$4>>2]|0;
 switch ($5|0) {
 case 1: case 0:  {
  $6 = (((($3) + ($1<<7)|0)) + 56|0);
  $7 = +HEAPF64[$6>>3];
  $8 = (((($3) + ($1<<7)|0)) + 40|0);
  $9 = +HEAPF64[$8>>3];
  $10 = (((($3) + ($1<<7)|0)) + 48|0);
  $11 = +HEAPF64[$10>>3];
  $12 = ((($0)) + 4500|0);
  $13 = HEAP32[$12>>2]|0;
  switch ($13|0) {
  case 0:  {
   $14 = $11 * 4.7270000000000003;
   $15 = ((($0)) + 4304|0);
   $16 = +HEAPF64[$15>>3];
   $17 = (+Math_pow((+$7),(+$16)));
   $18 = $14 / $17;
   $19 = (+Math_pow((+$9),4.8710000000000004));
   $20 = $18 / $19;
   $21 = (((($3) + ($1<<7)|0)) + 88|0);
   HEAPF64[$21>>3] = $20;
   return;
   break;
  }
  case 1:  {
   $22 = $11 * 0.5;
   $23 = $22 / 32.200000000000003;
   $24 = $23 / $9;
   $25 = $9 * $9;
   $26 = $25 * 3.1415926535897931;
   $27 = $26 * 0.25;
   $28 = $27 * $27;
   $29 = $24 / $28;
   $30 = (((($3) + ($1<<7)|0)) + 88|0);
   HEAPF64[$30>>3] = $29;
   return;
   break;
  }
  case 2:  {
   $31 = $7 * 4.0;
   $32 = $9 * $9;
   $33 = $32 * 4.6809730538487919;
   $34 = $31 / $33;
   $35 = $34 * $34;
   $36 = $9 * 0.25;
   $37 = (+Math_pow((+$36),-1.333));
   $38 = $35 * $37;
   $39 = $38 * $11;
   $40 = (((($3) + ($1<<7)|0)) + 88|0);
   HEAPF64[$40>>3] = $39;
   return;
   break;
  }
  default: {
   return;
  }
  }
  break;
 }
 case 2:  {
  $41 = (((($3) + ($1<<7)|0)) + 88|0);
  HEAPF64[$41>>3] = 1.0E+8;
  return;
  break;
 }
 default: {
  $42 = (((($3) + ($1<<7)|0)) + 88|0);
  HEAPF64[$42>>3] = 9.9999999999999995E-7;
  return;
 }
 }
}
function _headlosscoeffs($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 12|0);
 $2 = ((($0)) + 48|0);
 $3 = ((($0)) + 4276|0);
 $4 = ((($0)) + 4480|0);
 $$0 = 1;
 while(1) {
  $5 = HEAP32[$1>>2]|0;
  $6 = ($$0|0)>($5|0);
  if ($6) {
   break;
  }
  $7 = HEAP32[$2>>2]|0;
  $8 = (((($7) + ($$0<<7)|0)) + 104|0);
  $9 = HEAP32[$8>>2]|0;
  L4: do {
   switch ($9|0) {
   case 1: case 0:  {
    _pipecoeff($0,$$0);
    break;
   }
   case 2:  {
    _pumpcoeff($0,$$0);
    break;
   }
   case 5:  {
    _pbvcoeff($0,$$0);
    break;
   }
   case 7:  {
    _tcvcoeff($0,$$0);
    break;
   }
   case 8:  {
    _gpvcoeff($0,$$0);
    break;
   }
   case 4: case 3: case 6:  {
    $10 = HEAP32[$3>>2]|0;
    $11 = (($10) + ($$0<<3)|0);
    $12 = +HEAPF64[$11>>3];
    $13 = $12 == -1.0E+10;
    if ($13) {
     _valvecoeff($0,$$0);
     break L4;
    } else {
     $14 = HEAP32[$4>>2]|0;
     $15 = (($14) + ($$0<<3)|0);
     HEAPF64[$15>>3] = 0.0;
     break L4;
    }
    break;
   }
   default: {
   }
   }
  } while(0);
  $16 = (($$0) + 1)|0;
  $$0 = $16;
 }
 return;
}
function _pipecoeff($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0.0, $$01 = 0.0, $$1 = 0.0, $$12 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0;
 var $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0.0;
 var $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4536|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + ($1<<2)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5>>>0)<(3);
 if ($6) {
  $7 = ((($0)) + 4480|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (($8) + ($1<<3)|0);
  HEAPF64[$9>>3] = 1.0E-8;
  $10 = ((($0)) + 4272|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($11) + ($1<<3)|0);
  $13 = +HEAPF64[$12>>3];
  $14 = ((($0)) + 4484|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + ($1<<3)|0);
  HEAPF64[$16>>3] = $13;
  return;
 }
 $17 = ((($0)) + 4500|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(1);
 if ($19) {
  _DWpipecoeff($0,$1);
  return;
 }
 $20 = ((($0)) + 4272|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($21) + ($1<<3)|0);
 $23 = +HEAPF64[$22>>3];
 $24 = $23 < 0.0;
 $25 = - $23;
 $26 = $24 ? $25 : $23;
 $27 = ((($0)) + 48|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (((($28) + ($1<<7)|0)) + 64|0);
 $30 = +HEAPF64[$29>>3];
 $31 = (((($28) + ($1<<7)|0)) + 88|0);
 $32 = +HEAPF64[$31>>3];
 $33 = ((($0)) + 4304|0);
 $34 = +HEAPF64[$33>>3];
 $35 = $34 * $32;
 $36 = $34 + -1.0;
 $37 = (+Math_pow((+$26),(+$36)));
 $38 = $35 * $37;
 $39 = ((($0)) + 4296|0);
 $40 = +HEAPF64[$39>>3];
 $41 = $38 < $40;
 if ($41) {
  $42 = $40 * $26;
  $$0 = $40;$$01 = $42;
 } else {
  $43 = $38 * $26;
  $44 = $43 / $34;
  $$0 = $38;$$01 = $44;
 }
 $45 = $30 > 0.0;
 if ($45) {
  $46 = $30 * $26;
  $47 = $46 * $26;
  $48 = $$01 + $47;
  $49 = $30 * 2.0;
  $50 = $49 * $26;
  $51 = $$0 + $50;
  $$1 = $51;$$12 = $48;
 } else {
  $$1 = $$0;$$12 = $$01;
 }
 $52 = $24 ? -1.0 : 1.0;
 $53 = $$12 * $52;
 $54 = 1.0 / $$1;
 $55 = ((($0)) + 4480|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = (($56) + ($1<<3)|0);
 HEAPF64[$57>>3] = $54;
 $58 = $53 / $$1;
 $59 = ((($0)) + 4484|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = (($60) + ($1<<3)|0);
 HEAPF64[$61>>3] = $58;
 return;
}
function _pumpcoeff($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$07 = 0.0, $$5 = 0.0, $$56 = 0.0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0;
 var $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0;
 var $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0, $84 = 0.0, $85 = 0;
 var $86 = 0.0, $87 = 0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0.0, $98 = 0, $99 = 0.0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 8|0;
 $3 = sp;
 $4 = ((($0)) + 4276|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($1<<3)|0);
 $7 = +HEAPF64[$6>>3];
 $8 = ((($0)) + 4536|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + ($1<<2)|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11>>>0)<(3);
 $13 = $7 == 0.0;
 $or$cond = $12 | $13;
 if ($or$cond) {
  $14 = ((($0)) + 4480|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + ($1<<3)|0);
  HEAPF64[$16>>3] = 1.0E-8;
  $17 = ((($0)) + 4272|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + ($1<<3)|0);
  $20 = +HEAPF64[$19>>3];
  $21 = ((($0)) + 4484|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($22) + ($1<<3)|0);
  HEAPF64[$23>>3] = $20;
  STACKTOP = sp;return;
 }
 $24 = ((($0)) + 4272|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($25) + ($1<<3)|0);
 $27 = +HEAPF64[$26>>3];
 $28 = $27 < 0.0;
 $29 = - $27;
 $30 = $28 ? $29 : $27;
 $31 = (_findpump($0,$1)|0);
 $32 = ((($0)) + 56|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (((($33) + ($31<<7)|0)) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 L5: do {
  switch ($35|0) {
  case 3:  {
   $36 = ((($0)) + 4480|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = (($37) + ($1<<3)|0);
   HEAPF64[$38>>3] = 1.0E+6;
   $39 = HEAP32[$24>>2]|0;
   $40 = (($39) + ($1<<3)|0);
   $41 = +HEAPF64[$40>>3];
   $42 = ((($0)) + 4484|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = (($43) + ($1<<3)|0);
   HEAPF64[$44>>3] = $41;
   STACKTOP = sp;return;
   break;
  }
  case 2:  {
   $45 = (((($33) + ($31<<7)|0)) + 56|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = $30 / $7;
   _curvecoeff($0,$46,$47,$2,$3);
   $48 = +HEAPF64[$2>>3];
   $49 = - $48;
   $50 = (((($33) + ($31<<7)|0)) + 32|0);
   HEAPF64[$50>>3] = $49;
   $51 = +HEAPF64[$3>>3];
   $52 = - $51;
   $53 = (((($33) + ($31<<7)|0)) + 40|0);
   HEAPF64[$53>>3] = $52;
   $54 = (((($33) + ($31<<7)|0)) + 48|0);
   HEAPF64[$54>>3] = 1.0;
   $55 = $7 * $52;
   $56 = $7 * $7;
   $57 = $56 * $49;
   $58 = HEAP32[$24>>2]|0;
   $59 = (($58) + ($1<<3)|0);
   $60 = +HEAPF64[$59>>3];
   $61 = $55 * $60;
   $62 = $57 + $61;
   $$5 = $55;$$56 = $62;
   break;
  }
  default: {
   $63 = $7 * $7;
   $64 = (((($33) + ($31<<7)|0)) + 32|0);
   $65 = +HEAPF64[$64>>3];
   $66 = $63 * $65;
   HEAPF64[$2>>3] = $66;
   $67 = (((($33) + ($31<<7)|0)) + 48|0);
   $68 = +HEAPF64[$67>>3];
   $69 = $68 + -1.0;
   $70 = $69 < 0.0;
   $71 = - $69;
   $72 = $70 ? $71 : $69;
   $73 = $72 < 9.9999999999999995E-7;
   $$07 = $73 ? 1.0 : $68;
   $74 = (((($33) + ($31<<7)|0)) + 40|0);
   $75 = +HEAPF64[$74>>3];
   $76 = 2.0 - $$07;
   $77 = (+Math_pow((+$7),(+$76)));
   $78 = $75 * $77;
   HEAPF64[$3>>3] = $78;
   $79 = ($35|0)==(0);
   if ($79) {
    $80 = - $78;
    $81 = $80 / $30;
    $82 = $81 / $30;
    $83 = $82 > 1.0E+8;
    if ($83) {
     $84 = $27 * -1.0E+8;
     $$5 = 1.0E+8;$$56 = $84;
     break L5;
    }
    $85 = ((($0)) + 4296|0);
    $86 = +HEAPF64[$85>>3];
    $87 = $82 < $86;
    if ($87) {
     $88 = $86 * $27;
     $89 = - $88;
     $$5 = $86;$$56 = $89;
     break L5;
    } else {
     $90 = $78 / $27;
     $$5 = $82;$$56 = $90;
     break L5;
    }
   } else {
    $91 = $$07 != 1.0;
    if (!($91)) {
     $104 = $78 * $27;
     $105 = $66 + $104;
     $$5 = $78;$$56 = $105;
     break L5;
    }
    $92 = $$07 * $78;
    $93 = $$07 + -1.0;
    $94 = (+Math_pow((+$30),(+$93)));
    $95 = $92 * $94;
    $96 = ((($0)) + 4296|0);
    $97 = +HEAPF64[$96>>3];
    $98 = $95 < $97;
    if ($98) {
     $99 = $97 * $27;
     $100 = $66 + $99;
     $$5 = $97;$$56 = $100;
     break L5;
    } else {
     $101 = $95 * $27;
     $102 = $101 / $$07;
     $103 = $66 + $102;
     $$5 = $95;$$56 = $103;
     break L5;
    }
   }
  }
  }
 } while(0);
 $106 = 1.0 / $$5;
 $107 = ((($0)) + 4480|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = (($108) + ($1<<3)|0);
 HEAPF64[$109>>3] = $106;
 $110 = $$56 / $$5;
 $111 = ((($0)) + 4484|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = (($112) + ($1<<3)|0);
 HEAPF64[$113>>3] = $110;
 STACKTOP = sp;return;
}
function _pbvcoeff($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0;
 var $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4276|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + ($1<<3)|0);
 $5 = +HEAPF64[$4>>3];
 $6 = $5 == -1.0E+10;
 $7 = $5 == 0.0;
 $or$cond = $6 | $7;
 if ($or$cond) {
  _valvecoeff($0,$1);
  return;
 }
 $8 = ((($0)) + 48|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (((($9) + ($1<<7)|0)) + 64|0);
 $11 = +HEAPF64[$10>>3];
 $12 = ((($0)) + 4272|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + ($1<<3)|0);
 $15 = +HEAPF64[$14>>3];
 $16 = $15 * $15;
 $17 = $11 * $16;
 $18 = $17 > $5;
 if ($18) {
  _valvecoeff($0,$1);
  return;
 } else {
  $19 = ((($0)) + 4480|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($20) + ($1<<3)|0);
  HEAPF64[$21>>3] = 1.0E+8;
  $22 = HEAP32[$2>>2]|0;
  $23 = (($22) + ($1<<3)|0);
  $24 = +HEAPF64[$23>>3];
  $25 = $24 * 1.0E+8;
  $26 = ((($0)) + 4484|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + ($1<<3)|0);
  HEAPF64[$28>>3] = $25;
  return;
 }
}
function _tcvcoeff($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (((($3) + ($1<<7)|0)) + 64|0);
 $5 = +HEAPF64[$4>>3];
 $6 = ((($0)) + 4276|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + ($1<<3)|0);
 $9 = +HEAPF64[$8>>3];
 $10 = $9 != -1.0E+10;
 if (!($10)) {
  _valvecoeff($0,$1);
  HEAPF64[$4>>3] = $5;
  return;
 }
 $11 = $9 * 0.025170000000000001;
 $12 = (((($3) + ($1<<7)|0)) + 40|0);
 $13 = +HEAPF64[$12>>3];
 $14 = $13 * $13;
 $15 = $14 * $14;
 $16 = $11 / $15;
 HEAPF64[$4>>3] = $16;
 _valvecoeff($0,$1);
 HEAPF64[$4>>3] = $5;
 return;
}
function _gpvcoeff($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$in = 0.0, $$in$v = 0.0, $$inv = 0, $$inv1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0;
 var $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 8|0;
 $3 = sp;
 $4 = ((($0)) + 4536|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($1<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(2);
 if ($8) {
  _valvecoeff($0,$1);
  STACKTOP = sp;return;
 } else {
  $9 = ((($0)) + 4276|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10) + ($1<<3)|0);
  $12 = +HEAPF64[$11>>3];
  $13 = !($12 >= 0.0);
  $$in$v = $13 ? -0.5 : 0.5;
  $$in = $12 + $$in$v;
  $14 = (~~(($$in)));
  $15 = ((($0)) + 4272|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16) + ($1<<3)|0);
  $18 = +HEAPF64[$17>>3];
  $19 = $18 < 0.0;
  $20 = - $18;
  $21 = $19 ? $20 : $18;
  $$inv = $21 >= 9.9999999999999995E-7;
  $22 = $$inv ? $21 : 9.9999999999999995E-7;
  _curvecoeff($0,$14,$22,$2,$3);
  $23 = +HEAPF64[$3>>3];
  $$inv1 = $23 >= 9.9999999999999995E-7;
  $24 = $$inv1 ? $23 : 9.9999999999999995E-7;
  HEAPF64[$3>>3] = $24;
  $25 = 1.0 / $24;
  $26 = ((($0)) + 4480|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + ($1<<3)|0);
  HEAPF64[$28>>3] = $25;
  $29 = +HEAPF64[$2>>3];
  $30 = $29 / $24;
  $31 = $30 + $22;
  $32 = HEAP32[$15>>2]|0;
  $33 = (($32) + ($1<<3)|0);
  $34 = +HEAPF64[$33>>3];
  $35 = $34 < 0.0;
  $36 = $35 ? -1.0 : 1.0;
  $37 = $31 * $36;
  $38 = ((($0)) + 4484|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (($39) + ($1<<3)|0);
  HEAPF64[$40>>3] = $37;
  STACKTOP = sp;return;
 }
}
function _valvecoeff($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0.0, $$01 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0;
 var $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4272|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + ($1<<3)|0);
 $5 = +HEAPF64[$4>>3];
 $6 = ((($0)) + 4536|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + ($1<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9>>>0)<(3);
 if ($10) {
  $11 = ((($0)) + 4480|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (($12) + ($1<<3)|0);
  HEAPF64[$13>>3] = 1.0E-8;
  $14 = ((($0)) + 4484|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + ($1<<3)|0);
  HEAPF64[$16>>3] = $5;
  return;
 }
 $17 = ((($0)) + 48|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (((($18) + ($1<<7)|0)) + 64|0);
 $20 = +HEAPF64[$19>>3];
 $21 = $20 > 0.0;
 if ($21) {
  $22 = (+Math_abs((+$5)));
  $23 = $20 * 2.0;
  $24 = $23 * $22;
  $25 = ((($0)) + 4296|0);
  $26 = +HEAPF64[$25>>3];
  $27 = $24 < $26;
  $28 = $5 * $26;
  $29 = $5 * $24;
  $30 = $29 * 0.5;
  $$01 = $27 ? $28 : $30;
  $$0 = $27 ? $26 : $24;
  $31 = 1.0 / $$0;
  $32 = ((($0)) + 4480|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (($33) + ($1<<3)|0);
  HEAPF64[$34>>3] = $31;
  $35 = $$01 / $$0;
  $36 = ((($0)) + 4484|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (($37) + ($1<<3)|0);
  HEAPF64[$38>>3] = $35;
  return;
 } else {
  $39 = ((($0)) + 4480|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = (($40) + ($1<<3)|0);
  HEAPF64[$41>>3] = 1.0E+6;
  $42 = ((($0)) + 4484|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = (($43) + ($1<<3)|0);
  HEAPF64[$44>>3] = $5;
  return;
 }
}
function _curvecoeff($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0;
 var $28 = 0.0, $29 = 0.0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0;
 var $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($0)) + 4960|0);
 $6 = +HEAPF64[$5>>3];
 $7 = $6 * $2;
 $8 = ((($0)) + 68|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (((($9) + (($1*56)|0)|0)) + 48|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (((($9) + (($1*56)|0)|0)) + 52|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (((($9) + (($1*56)|0)|0)) + 40|0);
 $15 = HEAP32[$14>>2]|0;
 $$0 = 0;
 while(1) {
  $16 = ($$0|0)<($15|0);
  if (!($16)) {
   break;
  }
  $17 = (($11) + ($$0<<3)|0);
  $18 = +HEAPF64[$17>>3];
  $19 = $18 < $7;
  if (!($19)) {
   break;
  }
  $20 = (($$0) + 1)|0;
  $$0 = $20;
 }
 $21 = ($$0|0)==(0);
 if ($21) {
  $$2 = 1;
 } else {
  $22 = ($$0|0)==($15|0);
  $23 = (($15) + -1)|0;
  $spec$select = $22 ? $23 : $$0;
  $$2 = $spec$select;
 }
 $24 = (($$2) + -1)|0;
 $25 = (($13) + ($$2<<3)|0);
 $26 = +HEAPF64[$25>>3];
 $27 = (($13) + ($24<<3)|0);
 $28 = +HEAPF64[$27>>3];
 $29 = $26 - $28;
 $30 = (($11) + ($$2<<3)|0);
 $31 = +HEAPF64[$30>>3];
 $32 = (($11) + ($24<<3)|0);
 $33 = +HEAPF64[$32>>3];
 $34 = $31 - $33;
 $35 = $29 / $34;
 HEAPF64[$4>>3] = $35;
 $36 = +HEAPF64[$27>>3];
 $37 = +HEAPF64[$32>>3];
 $38 = $35 * $37;
 $39 = $36 - $38;
 HEAPF64[$3>>3] = $39;
 $40 = ((($0)) + 4920|0);
 $41 = +HEAPF64[$40>>3];
 $42 = $39 / $41;
 HEAPF64[$3>>3] = $42;
 $43 = +HEAPF64[$4>>3];
 $44 = +HEAPF64[$5>>3];
 $45 = $43 * $44;
 $46 = +HEAPF64[$40>>3];
 $47 = $45 / $46;
 HEAPF64[$4>>3] = $47;
 return;
}
function _DWpipecoeff($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0.0, $$01 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = ((($0)) + 48|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 4272|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + ($1<<3)|0);
 $8 = +HEAPF64[$7>>3];
 $9 = $8 < 0.0;
 $10 = - $8;
 $11 = $9 ? $10 : $8;
 $12 = (((($4) + ($1<<7)|0)) + 88|0);
 $13 = +HEAPF64[$12>>3];
 $14 = (((($4) + ($1<<7)|0)) + 64|0);
 $15 = +HEAPF64[$14>>3];
 $16 = ((($0)) + 4384|0);
 $17 = +HEAPF64[$16>>3];
 $18 = (((($4) + ($1<<7)|0)) + 40|0);
 $19 = +HEAPF64[$18>>3];
 $20 = $17 * $19;
 $21 = $20 * 1570.7963267948967;
 $22 = !($11 <= $21);
 if ($22) {
  $31 = (((($4) + ($1<<7)|0)) + 56|0);
  $32 = +HEAPF64[$31>>3];
  $33 = $32 / $19;
  HEAPF64[$2>>3] = 0.0;
  $34 = (+_frictionFactor($11,$33,$20,$2));
  $35 = $34 * $13;
  $36 = $35 + $15;
  $37 = $36 * $11;
  $38 = HEAP32[$5>>2]|0;
  $39 = (($38) + ($1<<3)|0);
  $40 = +HEAPF64[$39>>3];
  $41 = $37 * $40;
  $42 = $36 * 2.0;
  $43 = $42 * $11;
  $44 = +HEAPF64[$2>>3];
  $45 = $44 * $13;
  $46 = $45 * $11;
  $47 = $46 * $11;
  $48 = $43 + $47;
  $$0 = $48;$$01 = $41;
  $49 = 1.0 / $$0;
  $50 = ((($0)) + 4480|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (($51) + ($1<<3)|0);
  HEAPF64[$52>>3] = $49;
  $53 = $$01 / $$0;
  $54 = ((($0)) + 4484|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = (($55) + ($1<<3)|0);
  HEAPF64[$56>>3] = $53;
  STACKTOP = sp;return;
 } else {
  $23 = $20 * 50.26548245743669;
  $24 = $23 * $13;
  $25 = $15 * $11;
  $26 = $24 + $25;
  $27 = $8 * $26;
  $28 = $15 * 2.0;
  $29 = $28 * $11;
  $30 = $24 + $29;
  $$0 = $30;$$01 = $27;
  $49 = 1.0 / $$0;
  $50 = ((($0)) + 4480|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (($51) + ($1<<3)|0);
  HEAPF64[$52>>3] = $49;
  $53 = $$01 / $$0;
  $54 = ((($0)) + 4484|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = (($55) + ($1<<3)|0);
  HEAPF64[$56>>3] = $53;
  STACKTOP = sp;return;
 }
}
function _frictionFactor($0,$1,$2,$3) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 var $$0 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0;
 var $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0;
 var $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $storemerge = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $0 / $2;
 $5 = !($4 >= 3141.5926535897934);
 if ($5) {
  $20 = $1 / 3.7000000000000002;
  $21 = $20 + 0.0032889547634539907;
  $22 = (+Math_log((+$21)));
  $23 = $22 * -0.86858896380650363;
  $24 = $23 * $23;
  $25 = 1.0 / $24;
  $26 = $21 * $23;
  $27 = -0.005142149657990939 / $26;
  $28 = $27 + 2.0;
  $29 = $28 * $25;
  $30 = $4 / 1570.7963267948967;
  $31 = $25 * 7.0;
  $32 = $31 - $29;
  $33 = $25 * 17.0;
  $34 = 0.128 - $33;
  $35 = $29 * 2.5;
  $36 = $34 + $35;
  $37 = $25 * 13.0;
  $38 = $37 + -0.128;
  $39 = $29 + $29;
  $40 = $38 - $39;
  $41 = $25 * 3.0;
  $42 = 0.032000000000000001 - $41;
  $43 = $29 * 0.5;
  $44 = $42 + $43;
  $45 = $30 * $44;
  $46 = $40 + $45;
  $47 = $30 * $46;
  $48 = $36 + $47;
  $49 = $30 * $48;
  $50 = $32 + $49;
  $51 = $40 * 2.0;
  $52 = $30 * 3.0;
  $53 = $52 * $44;
  $54 = $51 + $53;
  $55 = $30 * $54;
  $56 = $36 + $55;
  $57 = $56 / $2;
  $58 = $57 / 1570.7963267948967;
  $$0 = $50;$storemerge = $58;
  HEAPF64[$3>>3] = $storemerge;
  return (+$$0);
 } else {
  $6 = (+Math_pow((+$4),0.90000000000000002));
  $7 = 4.6184131985906669 / $6;
  $8 = $1 / 3.7000000000000002;
  $9 = $8 + $7;
  $10 = (+Math_log((+$9)));
  $11 = $10 * -0.86858896380650363;
  $12 = $11 * $11;
  $13 = 1.0 / $12;
  $14 = $13 * 1.8;
  $15 = $14 * $7;
  $16 = $15 * -0.86858896380650363;
  $17 = $16 / $9;
  $18 = $17 / $11;
  $19 = $18 / $0;
  $$0 = $13;$storemerge = $19;
  HEAPF64[$3>>3] = $storemerge;
  return (+$$0);
 }
 return +(0.0);
}
function _matrixcoeffs($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4544|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = $3 << 3;
 $5 = (($4) + 8)|0;
 _memset(($2|0),0,($5|0))|0;
 $6 = ((($0)) + 4548|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($0)) + 4560|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 << 3;
 $11 = (($10) + 8)|0;
 _memset(($7|0),0,($11|0))|0;
 $12 = ((($0)) + 4552|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[$0>>2]|0;
 $15 = $14 << 3;
 $16 = (($15) + 8)|0;
 _memset(($13|0),0,($16|0))|0;
 $17 = ((($0)) + 4488|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = HEAP32[$0>>2]|0;
 $20 = $19 << 3;
 $21 = (($20) + 8)|0;
 _memset(($18|0),0,($21|0))|0;
 _linkcoeffs($0);
 _emittercoeffs($0);
 _demandcoeffs($0);
 _nodecoeffs($0);
 _valvecoeffs($0);
 return;
}
function _linkcoeffs($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0.0, $115 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 12|0);
 $2 = ((($0)) + 4480|0);
 $3 = ((($0)) + 48|0);
 $4 = ((($0)) + 4272|0);
 $5 = ((($0)) + 4488|0);
 $6 = ((($0)) + 4548|0);
 $7 = ((($0)) + 4572|0);
 $8 = ((($0)) + 8|0);
 $9 = ((($0)) + 4256|0);
 $10 = ((($0)) + 4552|0);
 $11 = ((($0)) + 4568|0);
 $12 = ((($0)) + 4544|0);
 $13 = ((($0)) + 4484|0);
 $$0 = 1;
 while(1) {
  $14 = HEAP32[$1>>2]|0;
  $15 = ($$0|0)>($14|0);
  if ($15) {
   break;
  }
  $16 = HEAP32[$2>>2]|0;
  $17 = (($16) + ($$0<<3)|0);
  $18 = +HEAPF64[$17>>3];
  $19 = $18 == 0.0;
  do {
   if (!($19)) {
    $20 = HEAP32[$3>>2]|0;
    $21 = (((($20) + ($$0<<7)|0)) + 32|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = (((($20) + ($$0<<7)|0)) + 36|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = HEAP32[$4>>2]|0;
    $26 = (($25) + ($$0<<3)|0);
    $27 = +HEAPF64[$26>>3];
    $28 = HEAP32[$5>>2]|0;
    $29 = (($28) + ($22<<3)|0);
    $30 = +HEAPF64[$29>>3];
    $31 = $30 - $27;
    HEAPF64[$29>>3] = $31;
    $32 = HEAP32[$4>>2]|0;
    $33 = (($32) + ($$0<<3)|0);
    $34 = +HEAPF64[$33>>3];
    $35 = HEAP32[$5>>2]|0;
    $36 = (($35) + ($24<<3)|0);
    $37 = +HEAPF64[$36>>3];
    $38 = $37 + $34;
    HEAPF64[$36>>3] = $38;
    $39 = HEAP32[$2>>2]|0;
    $40 = (($39) + ($$0<<3)|0);
    $41 = +HEAPF64[$40>>3];
    $42 = HEAP32[$6>>2]|0;
    $43 = HEAP32[$7>>2]|0;
    $44 = (($43) + ($$0<<2)|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = (($42) + ($45<<3)|0);
    $47 = +HEAPF64[$46>>3];
    $48 = $47 - $41;
    HEAPF64[$46>>3] = $48;
    $49 = HEAP32[$8>>2]|0;
    $50 = ($22|0)>($49|0);
    $51 = HEAP32[$2>>2]|0;
    $52 = (($51) + ($$0<<3)|0);
    $53 = +HEAPF64[$52>>3];
    if ($50) {
     $71 = HEAP32[$9>>2]|0;
     $72 = (($71) + ($22<<3)|0);
     $73 = +HEAPF64[$72>>3];
     $74 = $53 * $73;
     $75 = HEAP32[$10>>2]|0;
     $76 = HEAP32[$11>>2]|0;
     $77 = (($76) + ($24<<2)|0);
     $78 = HEAP32[$77>>2]|0;
     $79 = (($75) + ($78<<3)|0);
     $80 = +HEAPF64[$79>>3];
     $81 = $80 + $74;
     HEAPF64[$79>>3] = $81;
    } else {
     $54 = HEAP32[$12>>2]|0;
     $55 = HEAP32[$11>>2]|0;
     $56 = (($55) + ($22<<2)|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = (($54) + ($57<<3)|0);
     $59 = +HEAPF64[$58>>3];
     $60 = $59 + $53;
     HEAPF64[$58>>3] = $60;
     $61 = HEAP32[$13>>2]|0;
     $62 = (($61) + ($$0<<3)|0);
     $63 = +HEAPF64[$62>>3];
     $64 = HEAP32[$10>>2]|0;
     $65 = HEAP32[$11>>2]|0;
     $66 = (($65) + ($22<<2)|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = (($64) + ($67<<3)|0);
     $69 = +HEAPF64[$68>>3];
     $70 = $69 + $63;
     HEAPF64[$68>>3] = $70;
    }
    $82 = HEAP32[$8>>2]|0;
    $83 = ($24|0)>($82|0);
    $84 = HEAP32[$2>>2]|0;
    $85 = (($84) + ($$0<<3)|0);
    $86 = +HEAPF64[$85>>3];
    if ($83) {
     $104 = HEAP32[$9>>2]|0;
     $105 = (($104) + ($24<<3)|0);
     $106 = +HEAPF64[$105>>3];
     $107 = $86 * $106;
     $108 = HEAP32[$10>>2]|0;
     $109 = HEAP32[$11>>2]|0;
     $110 = (($109) + ($22<<2)|0);
     $111 = HEAP32[$110>>2]|0;
     $112 = (($108) + ($111<<3)|0);
     $113 = +HEAPF64[$112>>3];
     $114 = $113 + $107;
     HEAPF64[$112>>3] = $114;
     break;
    } else {
     $87 = HEAP32[$12>>2]|0;
     $88 = HEAP32[$11>>2]|0;
     $89 = (($88) + ($24<<2)|0);
     $90 = HEAP32[$89>>2]|0;
     $91 = (($87) + ($90<<3)|0);
     $92 = +HEAPF64[$91>>3];
     $93 = $92 + $86;
     HEAPF64[$91>>3] = $93;
     $94 = HEAP32[$13>>2]|0;
     $95 = (($94) + ($$0<<3)|0);
     $96 = +HEAPF64[$95>>3];
     $97 = HEAP32[$10>>2]|0;
     $98 = HEAP32[$11>>2]|0;
     $99 = (($98) + ($24<<2)|0);
     $100 = HEAP32[$99>>2]|0;
     $101 = (($97) + ($100<<3)|0);
     $102 = +HEAPF64[$101>>3];
     $103 = $102 - $96;
     HEAPF64[$101>>3] = $103;
     break;
    }
   }
  } while(0);
  $115 = (($$0) + 1)|0;
  $$0 = $115;
 }
 return;
}
function _emittercoeffs($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 8|0;
 $2 = sp;
 $3 = ((($0)) + 8|0);
 $4 = ((($0)) + 44|0);
 $5 = ((($0)) + 4568|0);
 $6 = ((($0)) + 4544|0);
 $7 = ((($0)) + 4552|0);
 $8 = ((($0)) + 4268|0);
 $9 = ((($0)) + 4488|0);
 $$0 = 1;
 while(1) {
  $10 = HEAP32[$3>>2]|0;
  $11 = ($$0|0)>($10|0);
  if ($11) {
   break;
  }
  $12 = HEAP32[$4>>2]|0;
  $13 = (((($12) + (($$0*96)|0)|0)) + 72|0);
  $14 = +HEAPF64[$13>>3];
  $15 = $14 == 0.0;
  if (!($15)) {
   _emitterheadloss($0,$$0,$1,$2);
   $16 = HEAP32[$5>>2]|0;
   $17 = (($16) + ($$0<<2)|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = +HEAPF64[$2>>3];
   $20 = 1.0 / $19;
   $21 = HEAP32[$6>>2]|0;
   $22 = (($21) + ($18<<3)|0);
   $23 = +HEAPF64[$22>>3];
   $24 = $23 + $20;
   HEAPF64[$22>>3] = $24;
   $25 = +HEAPF64[$1>>3];
   $26 = (((($12) + (($$0*96)|0)|0)) + 48|0);
   $27 = +HEAPF64[$26>>3];
   $28 = $25 + $27;
   $29 = $28 / $19;
   $30 = HEAP32[$7>>2]|0;
   $31 = (($30) + ($18<<3)|0);
   $32 = +HEAPF64[$31>>3];
   $33 = $32 + $29;
   HEAPF64[$31>>3] = $33;
   $34 = HEAP32[$8>>2]|0;
   $35 = (($34) + ($$0<<3)|0);
   $36 = +HEAPF64[$35>>3];
   $37 = HEAP32[$9>>2]|0;
   $38 = (($37) + ($$0<<3)|0);
   $39 = +HEAPF64[$38>>3];
   $40 = $39 - $36;
   HEAPF64[$38>>3] = $40;
  }
  $41 = (($$0) + 1)|0;
  $$0 = $41;
 }
 STACKTOP = sp;return;
}
function _demandcoeffs($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0.0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0;
 var $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 8|0;
 $2 = sp;
 $3 = ((($0)) + 4496|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  STACKTOP = sp;return;
 }
 $6 = ((($0)) + 4336|0);
 $7 = +HEAPF64[$6>>3];
 $8 = ((($0)) + 4328|0);
 $9 = +HEAPF64[$8>>3];
 $10 = $7 - $9;
 $11 = ((($0)) + 4320|0);
 $12 = +HEAPF64[$11>>3];
 $13 = 1.0 / $12;
 $14 = ((($0)) + 8|0);
 $15 = ((($0)) + 4260|0);
 $16 = ((($0)) + 4568|0);
 $17 = ((($0)) + 4544|0);
 $18 = ((($0)) + 44|0);
 $19 = ((($0)) + 4552|0);
 $$0 = 1;
 while(1) {
  $20 = HEAP32[$14>>2]|0;
  $21 = ($$0|0)>($20|0);
  if ($21) {
   break;
  }
  $22 = HEAP32[$15>>2]|0;
  $23 = (($22) + ($$0<<3)|0);
  $24 = +HEAPF64[$23>>3];
  $25 = !($24 <= 0.0);
  if ($25) {
   _demandheadloss($0,$$0,$10,$13,$1,$2);
   $26 = +HEAPF64[$2>>3];
   $27 = $26 > 0.0;
   if ($27) {
    $28 = HEAP32[$16>>2]|0;
    $29 = (($28) + ($$0<<2)|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = 1.0 / $26;
    $32 = HEAP32[$17>>2]|0;
    $33 = (($32) + ($30<<3)|0);
    $34 = +HEAPF64[$33>>3];
    $35 = $34 + $31;
    HEAPF64[$33>>3] = $35;
    $36 = +HEAPF64[$1>>3];
    $37 = HEAP32[$18>>2]|0;
    $38 = (((($37) + (($$0*96)|0)|0)) + 48|0);
    $39 = +HEAPF64[$38>>3];
    $40 = $36 + $39;
    $41 = +HEAPF64[$8>>3];
    $42 = $40 + $41;
    $43 = $42 / $26;
    $44 = HEAP32[$19>>2]|0;
    $45 = (($44) + ($30<<3)|0);
    $46 = +HEAPF64[$45>>3];
    $47 = $46 + $43;
    HEAPF64[$45>>3] = $47;
   }
  }
  $48 = (($$0) + 1)|0;
  $$0 = $48;
 }
 STACKTOP = sp;return;
}
function _nodecoeffs($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = ((($0)) + 4264|0);
 $3 = ((($0)) + 4488|0);
 $4 = ((($0)) + 4552|0);
 $5 = ((($0)) + 4568|0);
 $$0 = 1;
 while(1) {
  $6 = HEAP32[$1>>2]|0;
  $7 = ($$0|0)>($6|0);
  if ($7) {
   break;
  }
  $8 = HEAP32[$2>>2]|0;
  $9 = (($8) + ($$0<<3)|0);
  $10 = +HEAPF64[$9>>3];
  $11 = HEAP32[$3>>2]|0;
  $12 = (($11) + ($$0<<3)|0);
  $13 = +HEAPF64[$12>>3];
  $14 = $13 - $10;
  HEAPF64[$12>>3] = $14;
  $15 = HEAP32[$3>>2]|0;
  $16 = (($15) + ($$0<<3)|0);
  $17 = +HEAPF64[$16>>3];
  $18 = HEAP32[$4>>2]|0;
  $19 = HEAP32[$5>>2]|0;
  $20 = (($19) + ($$0<<2)|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($18) + ($21<<3)|0);
  $23 = +HEAPF64[$22>>3];
  $24 = $23 + $17;
  HEAPF64[$22>>3] = $24;
  $25 = (($$0) + 1)|0;
  $$0 = $25;
 }
 return;
}
function _valvecoeffs($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 24|0);
 $2 = ((($0)) + 60|0);
 $3 = ((($0)) + 4276|0);
 $4 = ((($0)) + 48|0);
 $$0 = 1;
 while(1) {
  $5 = HEAP32[$1>>2]|0;
  $6 = ($$0|0)>($5|0);
  if ($6) {
   break;
  }
  $7 = HEAP32[$2>>2]|0;
  $8 = (($7) + ($$0<<2)|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = HEAP32[$3>>2]|0;
  $11 = (($10) + ($9<<3)|0);
  $12 = +HEAPF64[$11>>3];
  $13 = $12 == -1.0E+10;
  L4: do {
   if (!($13)) {
    $14 = HEAP32[$4>>2]|0;
    $15 = (((($14) + ($9<<7)|0)) + 32|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (((($14) + ($9<<7)|0)) + 36|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (((($14) + ($9<<7)|0)) + 104|0);
    $20 = HEAP32[$19>>2]|0;
    switch ($20|0) {
    case 3:  {
     _prvcoeff($0,$9,$16,$18);
     break L4;
     break;
    }
    case 4:  {
     _psvcoeff($0,$9,$16,$18);
     break L4;
     break;
    }
    case 6:  {
     _fcvcoeff($0,$9,$16,$18);
     break L4;
     break;
    }
    default: {
     break L4;
    }
    }
   }
  } while(0);
  $21 = (($$0) + 1)|0;
  $$0 = $21;
 }
 return;
}
function _prvcoeff($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0.0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0, $75 = 0;
 var $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0.0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 4544|0);
 $5 = ((($0)) + 4568|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + ($2<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + ($3<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($0)) + 4536|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + ($1<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(4);
 if (!($15)) {
  _valvecoeff($0,$1);
  $58 = ((($0)) + 4480|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = (($59) + ($1<<3)|0);
  $61 = +HEAPF64[$60>>3];
  $62 = ((($0)) + 4548|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = ((($0)) + 4572|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = (($65) + ($1<<2)|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = (($63) + ($67<<3)|0);
  $69 = +HEAPF64[$68>>3];
  $70 = $69 - $61;
  HEAPF64[$68>>3] = $70;
  $71 = HEAP32[$58>>2]|0;
  $72 = (($71) + ($1<<3)|0);
  $73 = +HEAPF64[$72>>3];
  $74 = HEAP32[$4>>2]|0;
  $75 = (($74) + ($8<<3)|0);
  $76 = +HEAPF64[$75>>3];
  $77 = $76 + $73;
  HEAPF64[$75>>3] = $77;
  $78 = HEAP32[$58>>2]|0;
  $79 = (($78) + ($1<<3)|0);
  $80 = +HEAPF64[$79>>3];
  $81 = HEAP32[$4>>2]|0;
  $82 = (($81) + ($10<<3)|0);
  $83 = +HEAPF64[$82>>3];
  $84 = $83 + $80;
  HEAPF64[$82>>3] = $84;
  $85 = ((($0)) + 4484|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = (($86) + ($1<<3)|0);
  $88 = +HEAPF64[$87>>3];
  $89 = ((($0)) + 4272|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = (($90) + ($1<<3)|0);
  $92 = +HEAPF64[$91>>3];
  $93 = $88 - $92;
  $94 = ((($0)) + 4552|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = (($95) + ($8<<3)|0);
  $97 = +HEAPF64[$96>>3];
  $98 = $97 + $93;
  HEAPF64[$96>>3] = $98;
  $99 = HEAP32[$85>>2]|0;
  $100 = (($99) + ($1<<3)|0);
  $101 = +HEAPF64[$100>>3];
  $102 = HEAP32[$89>>2]|0;
  $103 = (($102) + ($1<<3)|0);
  $104 = +HEAPF64[$103>>3];
  $105 = $101 - $104;
  $106 = HEAP32[$94>>2]|0;
  $107 = (($106) + ($10<<3)|0);
  $108 = +HEAPF64[$107>>3];
  $109 = $108 - $105;
  HEAPF64[$107>>3] = $109;
  return;
 }
 $16 = ((($0)) + 44|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (((($17) + (($3*96)|0)|0)) + 48|0);
 $19 = +HEAPF64[$18>>3];
 $20 = ((($0)) + 4276|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($21) + ($1<<3)|0);
 $23 = +HEAPF64[$22>>3];
 $24 = $19 + $23;
 $25 = ((($0)) + 4480|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($26) + ($1<<3)|0);
 HEAPF64[$27>>3] = 0.0;
 $28 = ((($0)) + 4272|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (($29) + ($1<<3)|0);
 $31 = +HEAPF64[$30>>3];
 $32 = ((($0)) + 4488|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (($33) + ($3<<3)|0);
 $35 = +HEAPF64[$34>>3];
 $36 = $31 + $35;
 $37 = ((($0)) + 4484|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = (($38) + ($1<<3)|0);
 HEAPF64[$39>>3] = $36;
 $40 = $24 * 1.0E+8;
 $41 = ((($0)) + 4552|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = (($42) + ($10<<3)|0);
 $44 = +HEAPF64[$43>>3];
 $45 = $44 + $40;
 HEAPF64[$43>>3] = $45;
 $46 = HEAP32[$4>>2]|0;
 $47 = (($46) + ($10<<3)|0);
 $48 = +HEAPF64[$47>>3];
 $49 = $48 + 1.0E+8;
 HEAPF64[$47>>3] = $49;
 $50 = HEAP32[$32>>2]|0;
 $51 = (($50) + ($3<<3)|0);
 $52 = +HEAPF64[$51>>3];
 $53 = $52 < 0.0;
 if (!($53)) {
  return;
 }
 $54 = HEAP32[$41>>2]|0;
 $55 = (($54) + ($8<<3)|0);
 $56 = +HEAPF64[$55>>3];
 $57 = $56 + $52;
 HEAPF64[$55>>3] = $57;
 return;
}
function _psvcoeff($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0.0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0, $75 = 0;
 var $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0.0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 4544|0);
 $5 = ((($0)) + 4568|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + ($2<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + ($3<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($0)) + 4536|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + ($1<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(4);
 if (!($15)) {
  _valvecoeff($0,$1);
  $58 = ((($0)) + 4480|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = (($59) + ($1<<3)|0);
  $61 = +HEAPF64[$60>>3];
  $62 = ((($0)) + 4548|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = ((($0)) + 4572|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = (($65) + ($1<<2)|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = (($63) + ($67<<3)|0);
  $69 = +HEAPF64[$68>>3];
  $70 = $69 - $61;
  HEAPF64[$68>>3] = $70;
  $71 = HEAP32[$58>>2]|0;
  $72 = (($71) + ($1<<3)|0);
  $73 = +HEAPF64[$72>>3];
  $74 = HEAP32[$4>>2]|0;
  $75 = (($74) + ($8<<3)|0);
  $76 = +HEAPF64[$75>>3];
  $77 = $76 + $73;
  HEAPF64[$75>>3] = $77;
  $78 = HEAP32[$58>>2]|0;
  $79 = (($78) + ($1<<3)|0);
  $80 = +HEAPF64[$79>>3];
  $81 = HEAP32[$4>>2]|0;
  $82 = (($81) + ($10<<3)|0);
  $83 = +HEAPF64[$82>>3];
  $84 = $83 + $80;
  HEAPF64[$82>>3] = $84;
  $85 = ((($0)) + 4484|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = (($86) + ($1<<3)|0);
  $88 = +HEAPF64[$87>>3];
  $89 = ((($0)) + 4272|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = (($90) + ($1<<3)|0);
  $92 = +HEAPF64[$91>>3];
  $93 = $88 - $92;
  $94 = ((($0)) + 4552|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = (($95) + ($8<<3)|0);
  $97 = +HEAPF64[$96>>3];
  $98 = $97 + $93;
  HEAPF64[$96>>3] = $98;
  $99 = HEAP32[$85>>2]|0;
  $100 = (($99) + ($1<<3)|0);
  $101 = +HEAPF64[$100>>3];
  $102 = HEAP32[$89>>2]|0;
  $103 = (($102) + ($1<<3)|0);
  $104 = +HEAPF64[$103>>3];
  $105 = $101 - $104;
  $106 = HEAP32[$94>>2]|0;
  $107 = (($106) + ($10<<3)|0);
  $108 = +HEAPF64[$107>>3];
  $109 = $108 - $105;
  HEAPF64[$107>>3] = $109;
  return;
 }
 $16 = ((($0)) + 44|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (((($17) + (($2*96)|0)|0)) + 48|0);
 $19 = +HEAPF64[$18>>3];
 $20 = ((($0)) + 4276|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($21) + ($1<<3)|0);
 $23 = +HEAPF64[$22>>3];
 $24 = $19 + $23;
 $25 = ((($0)) + 4480|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($26) + ($1<<3)|0);
 HEAPF64[$27>>3] = 0.0;
 $28 = ((($0)) + 4272|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (($29) + ($1<<3)|0);
 $31 = +HEAPF64[$30>>3];
 $32 = ((($0)) + 4488|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (($33) + ($2<<3)|0);
 $35 = +HEAPF64[$34>>3];
 $36 = $31 - $35;
 $37 = ((($0)) + 4484|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = (($38) + ($1<<3)|0);
 HEAPF64[$39>>3] = $36;
 $40 = $24 * 1.0E+8;
 $41 = ((($0)) + 4552|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = (($42) + ($8<<3)|0);
 $44 = +HEAPF64[$43>>3];
 $45 = $44 + $40;
 HEAPF64[$43>>3] = $45;
 $46 = HEAP32[$4>>2]|0;
 $47 = (($46) + ($8<<3)|0);
 $48 = +HEAPF64[$47>>3];
 $49 = $48 + 1.0E+8;
 HEAPF64[$47>>3] = $49;
 $50 = HEAP32[$32>>2]|0;
 $51 = (($50) + ($2<<3)|0);
 $52 = +HEAPF64[$51>>3];
 $53 = $52 > 0.0;
 if (!($53)) {
  return;
 }
 $54 = HEAP32[$41>>2]|0;
 $55 = (($54) + ($10<<3)|0);
 $56 = +HEAPF64[$55>>3];
 $57 = $56 + $52;
 HEAPF64[$55>>3] = $57;
 return;
}
function _fcvcoeff($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0, $114 = 0.0, $115 = 0.0, $116 = 0, $117 = 0;
 var $118 = 0.0, $119 = 0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0;
 var $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0;
 var $60 = 0.0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0, $78 = 0.0;
 var $79 = 0, $8 = 0.0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0;
 var $97 = 0.0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 4544|0);
 $5 = ((($0)) + 4276|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + ($1<<3)|0);
 $8 = +HEAPF64[$7>>3];
 $9 = ((($0)) + 4568|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + ($2<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($10) + ($3<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($0)) + 4536|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + ($1<<2)|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(4);
 if ($19) {
  $20 = ((($0)) + 4488|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($21) + ($2<<3)|0);
  $23 = +HEAPF64[$22>>3];
  $24 = $23 - $8;
  HEAPF64[$22>>3] = $24;
  $25 = HEAP32[$20>>2]|0;
  $26 = (($25) + ($3<<3)|0);
  $27 = +HEAPF64[$26>>3];
  $28 = $27 + $8;
  HEAPF64[$26>>3] = $28;
  $29 = ((($0)) + 4272|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) + ($1<<3)|0);
  $32 = +HEAPF64[$31>>3];
  $33 = $32 - $8;
  $34 = ((($0)) + 4484|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = (($35) + ($1<<3)|0);
  HEAPF64[$36>>3] = $33;
  $37 = ((($0)) + 4552|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (($38) + ($12<<3)|0);
  $40 = +HEAPF64[$39>>3];
  $41 = $40 - $8;
  HEAPF64[$39>>3] = $41;
  $42 = HEAP32[$37>>2]|0;
  $43 = (($42) + ($14<<3)|0);
  $44 = +HEAPF64[$43>>3];
  $45 = $44 + $8;
  HEAPF64[$43>>3] = $45;
  $46 = ((($0)) + 4480|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = (($47) + ($1<<3)|0);
  HEAPF64[$48>>3] = 1.0E-8;
  $49 = HEAP32[$46>>2]|0;
  $50 = (($49) + ($1<<3)|0);
  $51 = +HEAPF64[$50>>3];
  $52 = ((($0)) + 4548|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = ((($0)) + 4572|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = (($55) + ($1<<2)|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = (($53) + ($57<<3)|0);
  $59 = +HEAPF64[$58>>3];
  $60 = $59 - $51;
  HEAPF64[$58>>3] = $60;
  $61 = HEAP32[$46>>2]|0;
  $62 = (($61) + ($1<<3)|0);
  $63 = +HEAPF64[$62>>3];
  $64 = HEAP32[$4>>2]|0;
  $65 = (($64) + ($12<<3)|0);
  $66 = +HEAPF64[$65>>3];
  $67 = $66 + $63;
  HEAPF64[$65>>3] = $67;
  $68 = HEAP32[$46>>2]|0;
  $69 = (($68) + ($1<<3)|0);
  $70 = +HEAPF64[$69>>3];
  $71 = HEAP32[$4>>2]|0;
  $72 = (($71) + ($14<<3)|0);
  $73 = +HEAPF64[$72>>3];
  $74 = $73 + $70;
  HEAPF64[$72>>3] = $74;
  return;
 } else {
  _valvecoeff($0,$1);
  $75 = ((($0)) + 4480|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = (($76) + ($1<<3)|0);
  $78 = +HEAPF64[$77>>3];
  $79 = ((($0)) + 4548|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = ((($0)) + 4572|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = (($82) + ($1<<2)|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = (($80) + ($84<<3)|0);
  $86 = +HEAPF64[$85>>3];
  $87 = $86 - $78;
  HEAPF64[$85>>3] = $87;
  $88 = HEAP32[$75>>2]|0;
  $89 = (($88) + ($1<<3)|0);
  $90 = +HEAPF64[$89>>3];
  $91 = HEAP32[$4>>2]|0;
  $92 = (($91) + ($12<<3)|0);
  $93 = +HEAPF64[$92>>3];
  $94 = $93 + $90;
  HEAPF64[$92>>3] = $94;
  $95 = HEAP32[$75>>2]|0;
  $96 = (($95) + ($1<<3)|0);
  $97 = +HEAPF64[$96>>3];
  $98 = HEAP32[$4>>2]|0;
  $99 = (($98) + ($14<<3)|0);
  $100 = +HEAPF64[$99>>3];
  $101 = $100 + $97;
  HEAPF64[$99>>3] = $101;
  $102 = ((($0)) + 4484|0);
  $103 = HEAP32[$102>>2]|0;
  $104 = (($103) + ($1<<3)|0);
  $105 = +HEAPF64[$104>>3];
  $106 = ((($0)) + 4272|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = (($107) + ($1<<3)|0);
  $109 = +HEAPF64[$108>>3];
  $110 = $105 - $109;
  $111 = ((($0)) + 4552|0);
  $112 = HEAP32[$111>>2]|0;
  $113 = (($112) + ($12<<3)|0);
  $114 = +HEAPF64[$113>>3];
  $115 = $114 + $110;
  HEAPF64[$113>>3] = $115;
  $116 = HEAP32[$102>>2]|0;
  $117 = (($116) + ($1<<3)|0);
  $118 = +HEAPF64[$117>>3];
  $119 = HEAP32[$106>>2]|0;
  $120 = (($119) + ($1<<3)|0);
  $121 = +HEAPF64[$120>>3];
  $122 = $118 - $121;
  $123 = HEAP32[$111>>2]|0;
  $124 = (($123) + ($14<<3)|0);
  $125 = +HEAPF64[$124>>3];
  $126 = $125 - $122;
  HEAPF64[$124>>3] = $126;
  return;
 }
}
function _demandheadloss($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = +$3;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $30 = 0.0, $31 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $storemerge2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($0)) + 4264|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + ($1<<3)|0);
 $9 = +HEAPF64[$8>>3];
 $10 = ((($0)) + 4260|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + ($1<<3)|0);
 $13 = +HEAPF64[$12>>3];
 $14 = $9 / $13;
 $15 = !($14 <= 0.0);
 if (!($15)) {
  HEAPF64[$5>>3] = 1.0E+8;
  $16 = $9 * 1.0E+8;
  $storemerge2 = $16;
  HEAPF64[$4>>3] = $storemerge2;
  return;
 }
 $17 = $14 < 1.0;
 if (!($17)) {
  HEAPF64[$5>>3] = 1.0E+8;
  $29 = $9 - $13;
  $30 = $29 * 1.0E+8;
  $31 = $30 + $2;
  $storemerge2 = $31;
  HEAPF64[$4>>3] = $storemerge2;
  return;
 }
 $18 = $3 * $2;
 $19 = $3 + -1.0;
 $20 = (+Math_pow((+$14),(+$19)));
 $21 = $18 * $20;
 $22 = $21 / $13;
 HEAPF64[$5>>3] = $22;
 $23 = ((($0)) + 4296|0);
 $24 = +HEAPF64[$23>>3];
 $25 = $22 < $24;
 if ($25) {
  HEAPF64[$5>>3] = $24;
  $26 = $24 * $9;
  $storemerge2 = $26;
  HEAPF64[$4>>3] = $storemerge2;
  return;
 } else {
  $27 = $22 * $9;
  $28 = $27 / $3;
  $storemerge2 = $28;
  HEAPF64[$4>>3] = $storemerge2;
  return;
 }
}
function _emitterheadloss($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$inv = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, $storemerge = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 44|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (((($5) + (($1*96)|0)|0)) + 72|0);
 $7 = +HEAPF64[$6>>3];
 $$inv = $7 <= 9.9999999999999995E-7;
 $8 = $$inv ? 9.9999999999999995E-7 : $7;
 $9 = ((($0)) + 4268|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + ($1<<3)|0);
 $12 = +HEAPF64[$11>>3];
 $13 = ((($0)) + 4312|0);
 $14 = +HEAPF64[$13>>3];
 $15 = $14 * $8;
 $16 = (+Math_abs((+$12)));
 $17 = $14 + -1.0;
 $18 = (+Math_pow((+$16),(+$17)));
 $19 = $15 * $18;
 HEAPF64[$3>>3] = $19;
 $20 = ((($0)) + 4296|0);
 $21 = +HEAPF64[$20>>3];
 $22 = $19 < $21;
 if ($22) {
  HEAPF64[$3>>3] = $21;
  $23 = $21 * $12;
  $storemerge = $23;
  HEAPF64[$2>>3] = $storemerge;
  return;
 } else {
  $24 = $19 * $12;
  $25 = +HEAPF64[$13>>3];
  $26 = $24 / $25;
  $storemerge = $26;
  HEAPF64[$2>>3] = $storemerge;
  return;
 }
}
function _openhyd($0) {
 $0 = $0|0;
 var $$01 = 0, $$12 = 0, $$39 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)<(2);
 if ($2) {
  $$39 = 223;
  return ($$39|0);
 }
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  $$39 = 224;
  return ($$39|0);
 }
 $6 = (_createsparse($0)|0);
 $7 = ($6|0)>(100);
 if ($7) {
  $$39 = $6;
  return ($$39|0);
 }
 $8 = (_allocmatrix($0)|0);
 $9 = ($8|0)==(0);
 if (!($9)) {
  $$39 = $8;
  return ($$39|0);
 }
 $10 = ((($0)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($0)) + 88|0);
 $$01 = 1;
 while(1) {
  $13 = ($$01|0)>($11|0);
  if ($13) {
   break;
  }
  $14 = HEAP32[$12>>2]|0;
  $15 = (($14) + ($$01<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)==(0|0);
  if ($17) {
   $$39 = 233;
   label = 12;
   break;
  }
  $18 = (($$01) + 1)|0;
  $$01 = $18;
 }
 if ((label|0) == 12) {
  return ($$39|0);
 }
 $19 = ((($0)) + 12|0);
 $20 = ((($0)) + 48|0);
 $$12 = 1;
 while(1) {
  $21 = HEAP32[$19>>2]|0;
  $22 = ($$12|0)>($21|0);
  if ($22) {
   $$39 = 0;
   break;
  }
  $23 = HEAP32[$20>>2]|0;
  $24 = (((($23) + ($$12<<7)|0)) + 108|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $25&255;
  $27 = (((($23) + ($$12<<7)|0)) + 56|0);
  $28 = +HEAPF64[$27>>3];
  _initlinkflow($0,$$12,$26,$28);
  $29 = (($$12) + 1)|0;
  $$12 = $29;
 }
 return ($$39|0);
}
function _allocmatrix($0) {
 $0 = $0|0;
 var $$ = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 1)|0;
 $4 = (_calloc($3,8)|0);
 $5 = ((($0)) + 4480|0);
 HEAP32[$5>>2] = $4;
 $6 = HEAP32[$1>>2]|0;
 $7 = (($6) + 1)|0;
 $8 = (_calloc($7,8)|0);
 $9 = ((($0)) + 4484|0);
 HEAP32[$9>>2] = $8;
 $10 = HEAP32[$0>>2]|0;
 $11 = (($10) + 1)|0;
 $12 = (_calloc($11,8)|0);
 $13 = ((($0)) + 4264|0);
 HEAP32[$13>>2] = $12;
 $14 = HEAP32[$0>>2]|0;
 $15 = (($14) + 1)|0;
 $16 = (_calloc($15,8)|0);
 $17 = ((($0)) + 4268|0);
 HEAP32[$17>>2] = $16;
 $18 = HEAP32[$0>>2]|0;
 $19 = HEAP32[$1>>2]|0;
 $20 = ($18|0)<($19|0);
 $$ = $20 ? $19 : $18;
 $21 = (($$) + 1)|0;
 $22 = (_calloc($21,8)|0);
 $23 = ((($0)) + 4488|0);
 HEAP32[$23>>2] = $22;
 $24 = HEAP32[$1>>2]|0;
 $25 = ((($0)) + 4|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($24) + ($26))|0;
 $28 = (($27) + 1)|0;
 $29 = (_calloc($28,4)|0);
 $30 = ((($0)) + 4540|0);
 HEAP32[$30>>2] = $29;
 $31 = HEAP32[$5>>2]|0;
 $32 = ($31|0)==(0|0);
 $33 = $32 ? 101 : 0;
 if ($32) {
  $44 = $33;
  return ($44|0);
 }
 $34 = HEAP32[$9>>2]|0;
 $35 = ($34|0)==(0|0);
 if ($35) {
  $44 = 101;
  return ($44|0);
 }
 $36 = HEAP32[$13>>2]|0;
 $37 = ($36|0)==(0|0);
 if ($37) {
  $44 = 101;
  return ($44|0);
 }
 $38 = HEAP32[$17>>2]|0;
 $39 = ($38|0)==(0|0);
 if ($39) {
  $44 = 101;
  return ($44|0);
 }
 $40 = HEAP32[$23>>2]|0;
 $41 = ($40|0)==(0|0);
 if ($41) {
  $44 = 101;
  return ($44|0);
 }
 $42 = ($29|0)==(0|0);
 $43 = $42 ? 101 : 0;
 $44 = $43;
 return ($44|0);
}
function _initlinkflow($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 48|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($2<<24>>24)==(2);
 if ($6) {
  $7 = ((($0)) + 4272|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (($8) + ($1<<3)|0);
  HEAPF64[$9>>3] = 9.9999999999999995E-7;
  return;
 }
 $10 = (((($5) + ($1<<7)|0)) + 104|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(2);
 if ($12) {
  $13 = ((($0)) + 56|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (_findpump($0,$1)|0);
  $16 = (((($14) + ($15<<7)|0)) + 8|0);
  $17 = +HEAPF64[$16>>3];
  $18 = $17 * $3;
  $19 = ((($0)) + 4272|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($20) + ($1<<3)|0);
  HEAPF64[$21>>3] = $18;
  return;
 } else {
  $22 = (((($5) + ($1<<7)|0)) + 40|0);
  $23 = +HEAPF64[$22>>3];
  $24 = $23 * $23;
  $25 = $24 * 3.1415926535897931;
  $26 = $25 * 0.25;
  $27 = ((($0)) + 4272|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($28) + ($1<<3)|0);
  HEAPF64[$29>>3] = $26;
  return;
 }
}
function _inithyd($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$1 = 0, $$2 = 0, $$3 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = ((($0)) + 52|0);
 $4 = ((($0)) + 4256|0);
 $5 = ((($0)) + 4260|0);
 $6 = ((($0)) + 4540|0);
 $7 = ((($0)) + 12|0);
 $$0 = 1;
 while(1) {
  $8 = HEAP32[$2>>2]|0;
  $9 = ($$0|0)>($8|0);
  if ($9) {
   break;
  }
  $10 = HEAP32[$3>>2]|0;
  $11 = (((($10) + (($$0*120)|0)|0)) + 56|0);
  $12 = +HEAPF64[$11>>3];
  $13 = (((($10) + (($$0*120)|0)|0)) + 72|0);
  HEAPF64[$13>>3] = $12;
  $14 = (((($10) + (($$0*120)|0)|0)) + 32|0);
  $15 = +HEAPF64[$14>>3];
  $16 = HEAP32[$4>>2]|0;
  $17 = (($10) + (($$0*120)|0)|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($16) + ($18<<3)|0);
  HEAPF64[$19>>3] = $15;
  $20 = HEAP32[$5>>2]|0;
  $21 = HEAP32[$17>>2]|0;
  $22 = (($20) + ($21<<3)|0);
  HEAPF64[$22>>3] = 0.0;
  $23 = HEAP32[$6>>2]|0;
  $24 = HEAP32[$7>>2]|0;
  $25 = (($24) + ($$0))|0;
  $26 = (($23) + ($25<<2)|0);
  HEAP32[$26>>2] = 1;
  $27 = (($$0) + 1)|0;
  $$0 = $27;
 }
 $28 = ((($0)) + 4268|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$0>>2]|0;
 $31 = $30 << 3;
 $32 = (($31) + 8)|0;
 _memset(($29|0),0,($32|0))|0;
 $33 = ((($0)) + 44|0);
 $$1 = 1;
 while(1) {
  $34 = HEAP32[$0>>2]|0;
  $35 = ($$1|0)>($34|0);
  if ($35) {
   break;
  }
  $36 = HEAP32[$33>>2]|0;
  $37 = (((($36) + (($$1*96)|0)|0)) + 84|0);
  HEAP32[$37>>2] = $$1;
  $38 = HEAP32[$33>>2]|0;
  $39 = (((($38) + (($$1*96)|0)|0)) + 72|0);
  $40 = +HEAPF64[$39>>3];
  $41 = $40 > 0.0;
  if ($41) {
   $42 = HEAP32[$28>>2]|0;
   $43 = (($42) + ($$1<<3)|0);
   HEAPF64[$43>>3] = 1.0;
  }
  $44 = (($$1) + 1)|0;
  $$1 = $44;
 }
 $45 = ((($0)) + 48|0);
 $46 = ((($0)) + 4536|0);
 $47 = ((($0)) + 4276|0);
 $48 = ((($0)) + 4272|0);
 $49 = ($1|0)>(0);
 $$2 = 1;
 while(1) {
  $50 = HEAP32[$7>>2]|0;
  $51 = ($$2|0)>($50|0);
  if ($51) {
   break;
  }
  $52 = HEAP32[$45>>2]|0;
  $53 = (((($52) + ($$2<<7)|0)) + 120|0);
  HEAP32[$53>>2] = $$2;
  $54 = (((($52) + ($$2<<7)|0)) + 108|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = HEAP32[$46>>2]|0;
  $57 = (($56) + ($$2<<2)|0);
  HEAP32[$57>>2] = $55;
  $58 = (((($52) + ($$2<<7)|0)) + 56|0);
  $59 = +HEAPF64[$58>>3];
  $60 = HEAP32[$47>>2]|0;
  $61 = (($60) + ($$2<<3)|0);
  HEAPF64[$61>>3] = $59;
  _resistcoeff($0,$$2);
  $62 = (((($52) + ($$2<<7)|0)) + 104|0);
  $63 = HEAP32[$62>>2]|0;
  switch ($63|0) {
  case 6: case 4: case 3:  {
   $64 = +HEAPF64[$58>>3];
   $65 = $64 != -1.0E+10;
   if ($65) {
    $66 = HEAP32[$46>>2]|0;
    $67 = (($66) + ($$2<<2)|0);
    HEAP32[$67>>2] = 4;
   }
   break;
  }
  default: {
  }
  }
  $68 = HEAP32[$46>>2]|0;
  $69 = (($68) + ($$2<<2)|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = ($70>>>0)<(3);
  $72 = HEAP32[$48>>2]|0;
  $73 = (($72) + ($$2<<3)|0);
  if ($71) {
   HEAPF64[$73>>3] = 9.9999999999999995E-7;
  } else {
   $74 = +HEAPF64[$73>>3];
   $75 = $74 < 0.0;
   $76 = - $74;
   $77 = $75 ? $76 : $74;
   $78 = $77 <= 9.9999999999999995E-7;
   $brmerge = $78 | $49;
   if ($brmerge) {
    $79 = $70&255;
    $80 = HEAP32[$47>>2]|0;
    $81 = (($80) + ($$2<<3)|0);
    $82 = +HEAPF64[$81>>3];
    _initlinkflow($0,$$2,$79,$82);
   }
  }
  $83 = HEAP32[$46>>2]|0;
  $84 = (($83) + ($$2<<2)|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = HEAP32[$6>>2]|0;
  $87 = (($86) + ($$2<<2)|0);
  HEAP32[$87>>2] = $85;
  $88 = (($$2) + 1)|0;
  $$2 = $88;
 }
 $89 = ((($0)) + 20|0);
 $90 = ((($0)) + 56|0);
 $$3 = 1;
 while(1) {
  $91 = HEAP32[$89>>2]|0;
  $92 = ($$3|0)>($91|0);
  if ($92) {
   break;
  }
  $93 = HEAP32[$90>>2]|0;
  $94 = (((($93) + ($$3<<7)|0)) + 80|0);
  $95 = (($$3) + 1)|0;
  dest=$94; stop=dest+48|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  $$3 = $95;
 }
 $96 = ((($0)) + 4200|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = ($97|0)==(0);
 if ($98) {
  $103 = ((($0)) + 4528|0);
  HEAP32[$103>>2] = 0;
  $104 = ((($0)) + 1172|0);
  HEAP32[$104>>2] = 0;
  $105 = ((($0)) + 1176|0);
  HEAP32[$105>>2] = 0;
  $106 = ((($0)) + 1160|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = ((($0)) + 1168|0);
  HEAP32[$108>>2] = $107;
  return;
 }
 $99 = ((($0)) + 4220|0);
 $100 = HEAP32[$99>>2]|0;
 $101 = ((($0)) + 4204|0);
 $102 = HEAP32[$101>>2]|0;
 _fseek($100,$102,0);
 $103 = ((($0)) + 4528|0);
 HEAP32[$103>>2] = 0;
 $104 = ((($0)) + 1172|0);
 HEAP32[$104>>2] = 0;
 $105 = ((($0)) + 1176|0);
 HEAP32[$105>>2] = 0;
 $106 = ((($0)) + 1160|0);
 $107 = HEAP32[$106>>2]|0;
 $108 = ((($0)) + 1168|0);
 HEAP32[$108>>2] = $107;
 return;
}
function _runhyd($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $$pre = 0.0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 8|0;
 $3 = sp;
 $4 = ((($0)) + 1172|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$1>>2] = $5;
 _demands($0);
 _controls($0);
 $6 = (_hydsolve($0,$2,$3)|0);
 $7 = ($6|0)==(0);
 if (!($7)) {
  $$1 = $6;
  STACKTOP = sp;return ($$1|0);
 }
 $8 = ((($0)) + 1228|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if ($10) {
  $$pre = +HEAPF64[$3>>3];
  $16 = $$pre;
 } else {
  $11 = HEAP32[$2>>2]|0;
  $12 = +HEAPF64[$3>>3];
  _writehydstat($0,$11,$12);
  $16 = $12;
 }
 $13 = ((($0)) + 4352|0);
 $14 = +HEAPF64[$13>>3];
 $15 = $16 > $14;
 if ($15) {
  $17 = ((($0)) + 4512|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)==(-1);
  if ($19) {
   $20 = ((($0)) + 4528|0);
   HEAP32[$20>>2] = 1;
  }
 }
 $21 = HEAP32[$2>>2]|0;
 $22 = (_writehydwarn($0,$21,$16)|0);
 $$1 = $22;
 STACKTOP = sp;return ($$1|0);
}
function _demands($0) {
 $0 = $0|0;
 var $$0 = 0, $$0$in = 0, $$01 = 0.0, $$02 = 0, $$03 = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 1172|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 1156|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + ($4))|0;
 $6 = ((($0)) + 1152|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5|0) / ($7|0))&-1;
 $9 = ((($0)) + 4408|0);
 HEAPF64[$9>>3] = 0.0;
 $10 = ((($0)) + 8|0);
 $11 = ((($0)) + 44|0);
 $12 = ((($0)) + 64|0);
 $13 = ((($0)) + 4344|0);
 $14 = ((($0)) + 4260|0);
 $15 = ((($0)) + 4264|0);
 $$03 = 1;
 while(1) {
  $16 = HEAP32[$10>>2]|0;
  $17 = ($$03|0)>($16|0);
  if ($17) {
   break;
  }
  $18 = HEAP32[$11>>2]|0;
  $19 = (((($18) + (($$03*96)|0)|0)) + 56|0);
  $$0$in = $19;$$01 = 0.0;
  while(1) {
   $$0 = HEAP32[$$0$in>>2]|0;
   $20 = ($$0|0)==(0|0);
   if ($20) {
    break;
   }
   $21 = ((($$0)) + 8|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = HEAP32[$12>>2]|0;
   $24 = (((($23) + (($22*44)|0)|0)) + 36|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = (($8|0) % ($25|0))&-1;
   $27 = +HEAPF64[$$0>>3];
   $28 = (((($23) + (($22*44)|0)|0)) + 40|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = (($29) + ($26<<3)|0);
   $31 = +HEAPF64[$30>>3];
   $32 = $27 * $31;
   $33 = +HEAPF64[$13>>3];
   $34 = $32 * $33;
   $35 = $34 > 0.0;
   if ($35) {
    $36 = +HEAPF64[$9>>3];
    $37 = $36 + $34;
    HEAPF64[$9>>3] = $37;
   }
   $38 = $$01 + $34;
   $39 = ((($$0)) + 16|0);
   $$0$in = $39;$$01 = $38;
  }
  $40 = HEAP32[$14>>2]|0;
  $41 = (($40) + ($$03<<3)|0);
  HEAPF64[$41>>3] = $$01;
  $42 = HEAP32[$15>>2]|0;
  $43 = (($42) + ($$03<<3)|0);
  HEAPF64[$43>>3] = $$01;
  $44 = (($$03) + 1)|0;
  $$03 = $44;
 }
 $45 = ((($0)) + 4|0);
 $46 = ((($0)) + 52|0);
 $47 = ((($0)) + 4256|0);
 $$02 = 1;
 while(1) {
  $48 = HEAP32[$45>>2]|0;
  $49 = ($$02|0)>($48|0);
  if ($49) {
   break;
  }
  $50 = HEAP32[$46>>2]|0;
  $51 = (((($50) + (($$02*120)|0)|0)) + 8|0);
  $52 = +HEAPF64[$51>>3];
  $53 = $52 == 0.0;
  if ($53) {
   $54 = (((($50) + (($$02*120)|0)|0)) + 88|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = ($55|0)>(0);
   if ($56) {
    $57 = HEAP32[$12>>2]|0;
    $58 = (((($57) + (($55*44)|0)|0)) + 36|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = (($8|0) % ($59|0))&-1;
    $61 = (($50) + (($$02*120)|0)|0);
    $62 = HEAP32[$61>>2]|0;
    $63 = HEAP32[$11>>2]|0;
    $64 = (((($63) + (($62*96)|0)|0)) + 48|0);
    $65 = +HEAPF64[$64>>3];
    $66 = (((($57) + (($55*44)|0)|0)) + 40|0);
    $67 = HEAP32[$66>>2]|0;
    $68 = (($67) + ($60<<3)|0);
    $69 = +HEAPF64[$68>>3];
    $70 = $65 * $69;
    $71 = HEAP32[$47>>2]|0;
    $72 = (($71) + ($62<<3)|0);
    HEAPF64[$72>>3] = $70;
   }
  }
  $73 = (($$02) + 1)|0;
  $$02 = $73;
 }
 $74 = ((($0)) + 20|0);
 $75 = ((($0)) + 56|0);
 $76 = ((($0)) + 4536|0);
 $77 = ((($0)) + 4276|0);
 $$1 = 1;
 while(1) {
  $78 = HEAP32[$74>>2]|0;
  $79 = ($$1|0)>($78|0);
  if ($79) {
   break;
  }
  $80 = HEAP32[$75>>2]|0;
  $81 = (((($80) + ($$1<<7)|0)) + 64|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = ($82|0)>(0);
  if ($83) {
   $84 = (($80) + ($$1<<7)|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = HEAP32[$12>>2]|0;
   $87 = (((($86) + (($82*44)|0)|0)) + 36|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = (($8|0) % ($88|0))&-1;
   $90 = (((($86) + (($82*44)|0)|0)) + 40|0);
   $91 = HEAP32[$90>>2]|0;
   $92 = (($91) + ($89<<3)|0);
   $93 = +HEAPF64[$92>>3];
   $94 = HEAP32[$76>>2]|0;
   $95 = (($94) + ($85<<2)|0);
   $96 = HEAP32[$77>>2]|0;
   $97 = (($96) + ($85<<3)|0);
   _setlinksetting($0,$85,$93,$95,$97);
  }
  $98 = (($$1) + 1)|0;
  $$1 = $98;
 }
 return;
}
function _controls($0) {
 $0 = $0|0;
 var $$0122 = 0.0, $$07 = 0, $$25 = 0, $$4 = 0, $$417 = 0, $$old = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $narrow = 0, $not$or$cond = 0, $not$or$cond5 = 0, $or$cond12 = 0, $or$cond14 = 0, $or$cond6 = 0;
 var $or$cond9 = 0, $sext = 0, $sext2$mask = 0, $spec$select15 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 28|0);
 $2 = ((($0)) + 72|0);
 $3 = ((($0)) + 48|0);
 $4 = ((($0)) + 8|0);
 $5 = ((($0)) + 4256|0);
 $6 = ((($0)) + 4260|0);
 $7 = ((($0)) + 1172|0);
 $8 = ((($0)) + 1144|0);
 $9 = ((($0)) + 4536|0);
 $10 = ((($0)) + 4276|0);
 $11 = ((($0)) + 1228|0);
 $$07 = 1;
 while(1) {
  $12 = HEAP32[$1>>2]|0;
  $13 = ($$07|0)>($12|0);
  if ($13) {
   break;
  }
  $14 = HEAP32[$2>>2]|0;
  $15 = (($14) + (($$07*40)|0)|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)<(1);
  do {
   if (!($17)) {
    $18 = HEAP32[$3>>2]|0;
    $19 = (((($14) + (($$07*40)|0)|0)) + 4|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)>(0);
    if ($21) {
     $22 = HEAP32[$4>>2]|0;
     $23 = ($20|0)>($22|0);
     if ($23) {
      $24 = HEAP32[$5>>2]|0;
      $25 = (($24) + ($20<<3)|0);
      $26 = +HEAPF64[$25>>3];
      $27 = HEAP32[$6>>2]|0;
      $28 = (($27) + ($20<<3)|0);
      $29 = +HEAPF64[$28>>3];
      $30 = $29 < 0.0;
      $31 = - $29;
      $32 = $30 ? $31 : $29;
      $33 = (($20) - ($22))|0;
      $34 = (+_tankvolume($0,$33,$26));
      $35 = (((($14) + (($$07*40)|0)|0)) + 16|0);
      $36 = +HEAPF64[$35>>3];
      $37 = (+_tankvolume($0,$33,$36));
      $38 = (((($14) + (($$07*40)|0)|0)) + 36|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($39|0)==(0);
      $41 = $37 + $32;
      $42 = $34 <= $41;
      $not$or$cond = $42 & $40;
      $43 = ($39|0)==(1);
      $44 = $37 - $32;
      $45 = $34 >= $44;
      $not$or$cond5 = $45 & $43;
      $narrow = $not$or$cond | $not$or$cond5;
      $spec$select15 = $narrow&1;
      $$25 = $spec$select15;
     } else {
      $$25 = 0;
     }
    } else {
     $$25 = 0;
    }
    $46 = (((($14) + (($$07*40)|0)|0)) + 36|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = ($47|0)==(2);
    if ($48) {
     $49 = (((($14) + (($$07*40)|0)|0)) + 8|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = HEAP32[$7>>2]|0;
     $52 = ($50|0)==($51|0);
     if (!($52)) {
      $$417 = $$25;
      label = 11;
     }
    } else {
     $$4 = $$25;
     $53 = ($47|0)==(3);
     if ($53) {
      $54 = HEAP32[$7>>2]|0;
      $55 = HEAP32[$8>>2]|0;
      $56 = (($54) + ($55))|0;
      $57 = (($56|0) % 86400)&-1;
      $58 = (((($14) + (($$07*40)|0)|0)) + 8|0);
      $59 = HEAP32[$58>>2]|0;
      $60 = ($57|0)==($59|0);
      $61 = ($$4|0)==(1);
      $or$cond6 = $60 | $61;
      if (!($or$cond6)) {
       break;
      }
     } else {
      $$417 = $$4;
      label = 11;
     }
    }
    if ((label|0) == 11) {
     label = 0;
     $$old = ($$417|0)==(1);
     if (!($$old)) {
      break;
     }
    }
    $62 = HEAP32[$9>>2]|0;
    $63 = (($62) + ($16<<2)|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = ($64>>>0)<(3);
    $66 = (((($14) + (($$07*40)|0)|0)) + 32|0);
    $67 = HEAP32[$66>>2]|0;
    $68 = HEAP32[$10>>2]|0;
    $69 = (($68) + ($16<<3)|0);
    $70 = +HEAPF64[$69>>3];
    $71 = (((($18) + ($16<<7)|0)) + 104|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ($72>>>0)>(1);
    if ($73) {
     $74 = (((($14) + (($$07*40)|0)|0)) + 24|0);
     $75 = +HEAPF64[$74>>3];
     $76 = ($72|0)==(2);
     $or$cond9 = $76 & $65;
     $sext2$mask = $67 & 255;
     $77 = ($sext2$mask|0)==(3);
     $or$cond12 = $or$cond9 & $77;
     if ($or$cond12) {
      _resetpumpflow($0,$16);
      $$0122 = $75;
     } else {
      $$0122 = $75;
     }
    } else {
     $$0122 = $70;
    }
    $78 = $65 ? 2 : 3;
    $sext = $67 << 24;
    $79 = $sext >> 24;
    $80 = ($79|0)!=($78|0);
    $81 = $70 != $$0122;
    $or$cond14 = $80 | $81;
    if ($or$cond14) {
     $82 = HEAP32[$9>>2]|0;
     $83 = (($82) + ($16<<2)|0);
     HEAP32[$83>>2] = $79;
     $84 = HEAP32[$10>>2]|0;
     $85 = (($84) + ($16<<3)|0);
     HEAPF64[$85>>3] = $$0122;
     $86 = HEAP32[$11>>2]|0;
     $87 = ($86|0)==(0);
     if (!($87)) {
      _writecontrolaction($0,$16,$$07);
     }
    }
   }
  } while(0);
  $88 = (($$07) + 1)|0;
  $$07 = $88;
 }
 return;
}
function _tankvolume($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 var $$0 = 0.0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0.0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 52|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (((($4) + (($1*120)|0)|0)) + 92|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = (((($4) + (($1*120)|0)|0)) + 40|0);
  $9 = +HEAPF64[$8>>3];
  $10 = (((($4) + (($1*120)|0)|0)) + 16|0);
  $11 = +HEAPF64[$10>>3];
  $12 = $2 - $11;
  $13 = (((($4) + (($1*120)|0)|0)) + 8|0);
  $14 = +HEAPF64[$13>>3];
  $15 = $12 * $14;
  $16 = $9 + $15;
  $$0 = $16;
  return (+$$0);
 } else {
  $17 = ((($0)) + 68|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ((($0)) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($4) + (($1*120)|0)|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (((($20) + (($22*96)|0)|0)) + 48|0);
  $24 = +HEAPF64[$23>>3];
  $25 = $2 - $24;
  $26 = ((($0)) + 4920|0);
  $27 = +HEAPF64[$26>>3];
  $28 = $25 * $27;
  $29 = (((($18) + (($6*56)|0)|0)) + 40|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (((($18) + (($6*56)|0)|0)) + 48|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (((($18) + (($6*56)|0)|0)) + 52|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (+_interp($30,$32,$34,$28));
  $36 = ((($0)) + 5040|0);
  $37 = +HEAPF64[$36>>3];
  $38 = $35 / $37;
  $$0 = $38;
  return (+$$0);
 }
 return +(0.0);
}
function _resetpumpflow($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 56|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_findpump($0,$1)|0);
 $5 = (((($3) + ($4<<7)|0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 if (!($7)) {
  return;
 }
 $8 = (((($3) + ($4<<7)|0)) + 8|0);
 $9 = +HEAPF64[$8>>3];
 $10 = ((($0)) + 4272|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + ($1<<3)|0);
 HEAPF64[$12>>3] = $9;
 return;
}
function _setlinksetting($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($0)) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (((($6) + ($1<<7)|0)) + 104|0);
 $8 = HEAP32[$7>>2]|0;
 switch ($8|0) {
 case 2:  {
  HEAPF64[$4>>3] = $2;
  $9 = $2 > 0.0;
  if ($9) {
   $10 = HEAP32[$3>>2]|0;
   $11 = ($10>>>0)<(3);
   if ($11) {
    _resetpumpflow($0,$1);
    HEAP32[$3>>2] = 3;
   }
  }
  $12 = $2 == 0.0;
  if (!($12)) {
   return;
  }
  $13 = HEAP32[$3>>2]|0;
  $14 = ($13>>>0)>(2);
  if (!($14)) {
   return;
  }
  HEAP32[$3>>2] = 2;
  return;
  break;
 }
 case 6:  {
  HEAPF64[$4>>3] = $2;
  HEAP32[$3>>2] = 4;
  return;
  break;
 }
 default: {
  $15 = +HEAPF64[$4>>3];
  $16 = $15 == -1.0E+10;
  if ($16) {
   $17 = HEAP32[$3>>2]|0;
   $18 = ($17>>>0)<(3);
   if ($18) {
    HEAP32[$3>>2] = 3;
   }
  }
  HEAPF64[$4>>3] = $2;
  return;
 }
 }
}
function _nexthyd($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$04 = 0, $$1 = 0, $$pre = 0, $$pre$phi6Z2D = 0, $$pre$phiZ2D = 0, $$pre5 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4200|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $$0 = 0;
 } else {
  $5 = ((($0)) + 1172|0);
  $6 = (_savehyd($0,$5)|0);
  $$0 = $6;
 }
 $7 = ((($0)) + 4528|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0);
 if ($9) {
  $$pre = ((($0)) + 1172|0);
  $$pre5 = ((($0)) + 1192|0);
  $$pre$phi6Z2D = $$pre5;$$pre$phiZ2D = $$pre;
 } else {
  $10 = ((($0)) + 1192|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($0)) + 1172|0);
  HEAP32[$12>>2] = $11;
  $$pre$phi6Z2D = $10;$$pre$phiZ2D = $12;
 }
 HEAP32[$1>>2] = 0;
 $13 = HEAP32[$$pre$phiZ2D>>2]|0;
 $14 = HEAP32[$$pre$phi6Z2D>>2]|0;
 $15 = ($13|0)<($14|0);
 if ($15) {
  $16 = (_timestep($0)|0);
  $$04 = $16;
 } else {
  $$04 = 0;
 }
 $17 = HEAP32[$2>>2]|0;
 $18 = ($17|0)==(0);
 if ($18) {
  $$1 = $$0;
 } else {
  $19 = (_savehydstep($0,$$04)|0);
  $$1 = $19;
 }
 $20 = HEAP32[$$pre$phi6Z2D>>2]|0;
 $21 = ($20|0)==(0);
 if ($21) {
  _addenergy($0,0);
 } else {
  $22 = HEAP32[$$pre$phiZ2D>>2]|0;
  $23 = ($22|0)<($20|0);
  if ($23) {
   _addenergy($0,$$04);
  }
 }
 $24 = HEAP32[$$pre$phiZ2D>>2]|0;
 $25 = HEAP32[$$pre$phi6Z2D>>2]|0;
 $26 = ($24|0)<($25|0);
 if (!($26)) {
  $37 = (($24) + 1)|0;
  HEAP32[$$pre$phiZ2D>>2] = $37;
  $38 = ((($0)) + 4604|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = ($39|0)==(0);
  if ($40) {
   HEAP32[$1>>2] = $$04;
   return ($$1|0);
  }
  $41 = ((($0)) + 1184|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = (($42) + 1)|0;
  HEAP32[$41>>2] = $43;
  HEAP32[$1>>2] = $$04;
  return ($$1|0);
 }
 $27 = (($24) + ($$04))|0;
 HEAP32[$$pre$phiZ2D>>2] = $27;
 $28 = ((($0)) + 4604|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)==(0);
 if (!($30)) {
  HEAP32[$1>>2] = $$04;
  return ($$1|0);
 }
 $31 = ((($0)) + 1168|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($27|0)<($32|0);
 if ($33) {
  HEAP32[$1>>2] = $$04;
  return ($$1|0);
 }
 $34 = ((($0)) + 1160|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (($32) + ($35))|0;
 HEAP32[$31>>2] = $36;
 HEAP32[$1>>2] = $$04;
 return ($$1|0);
}
function _timestep($0) {
 $0 = $0|0;
 var $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ((($0)) + 1148|0);
 $3 = HEAP32[$2>>2]|0;
 HEAP32[$1>>2] = $3;
 $4 = ((($0)) + 1172|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 1156|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + ($7))|0;
 $9 = ((($0)) + 1152|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($8|0) / ($10|0))&-1;
 $12 = (($11) + 1)|0;
 $13 = Math_imul($12, $10)|0;
 $14 = (($13) - ($5))|0;
 $15 = ($14|0)>(0);
 $16 = ($14|0)<($3|0);
 $or$cond = $15 & $16;
 if ($or$cond) {
  HEAP32[$1>>2] = $14;
  $22 = $14;
 } else {
  $22 = $3;
 }
 $17 = ((($0)) + 1168|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($18) - ($5))|0;
 $20 = ($19|0)>(0);
 $21 = ($19|0)<($22|0);
 $or$cond1 = $20 & $21;
 if ($or$cond1) {
  HEAP32[$1>>2] = $19;
 }
 (_tanktimestep($0,$1)|0);
 _controltimestep($0,$1);
 $23 = ((($0)) + 32|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)>(0);
 if ($25) {
  _ruletimestep($0,$1);
  $$pre = HEAP32[$1>>2]|0;
  $27 = $$pre;
  STACKTOP = sp;return ($27|0);
 } else {
  $26 = HEAP32[$1>>2]|0;
  _tanklevels($0,$26);
  $27 = $26;
  STACKTOP = sp;return ($27|0);
 }
 return (0)|0;
}
function _addenergy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0.0, $$03 = 0.0, $$04 = 0.0, $$06 = 0, $$1 = 0.0, $$128 = 0.0, $$15 = 0.0, $$inv = 0, $$inv13 = 0, $$mux = 0.0, $$not12 = 0, $$phi$trans$insert = 0, $$pn = 0.0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0.0;
 var $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0.0, $7 = 0;
 var $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0.0;
 var $89 = 0.0, $9 = 0.0, $90 = 0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0.0, $brmerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 8|0;
 $3 = sp;
 $4 = ((($0)) + 1192|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 $$phi$trans$insert = ((($0)) + 1172|0);
 $$pre = HEAP32[$$phi$trans$insert>>2]|0;
 if ($6) {
  $$128 = 1.0;
 } else {
  $7 = ($$pre|0)<($5|0);
  if (!($7)) {
   STACKTOP = sp;return;
  }
  $8 = (+($1|0));
  $9 = $8 / 3600.0;
  $10 = $9 == 0.0;
  if ($10) {
   STACKTOP = sp;return;
  } else {
   $$128 = $9;
  }
 }
 $11 = ((($0)) + 1156|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($$pre) + ($12))|0;
 $14 = ((($0)) + 1152|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($13|0) / ($15|0))&-1;
 $17 = ((($0)) + 4416|0);
 $18 = +HEAPF64[$17>>3];
 $19 = ((($0)) + 4492|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)>(0);
 $22 = ((($0)) + 64|0);
 if ($21) {
  $23 = HEAP32[$22>>2]|0;
  $24 = (((($23) + (($20*44)|0)|0)) + 36|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (($16|0) % ($25|0))&-1;
  $27 = (((($23) + (($20*44)|0)|0)) + 40|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($28) + ($26<<3)|0);
  $30 = +HEAPF64[$29>>3];
  $$03 = $30;
 } else {
  $$03 = 1.0;
 }
 $31 = ((($0)) + 20|0);
 $32 = ((($0)) + 56|0);
 $33 = ((($0)) + 4536|0);
 $34 = ((($0)) + 4272|0);
 $$0 = 0.0;$$06 = 1;
 while(1) {
  $35 = HEAP32[$31>>2]|0;
  $36 = ($$06|0)>($35|0);
  if ($36) {
   break;
  }
  $37 = HEAP32[$32>>2]|0;
  $38 = (($37) + ($$06<<7)|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = HEAP32[$33>>2]|0;
  $41 = (($40) + ($39<<2)|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = ($42>>>0)<(3);
  if ($43) {
   $$1 = $$0;
  } else {
   $44 = HEAP32[$34>>2]|0;
   $45 = (($44) + ($39<<3)|0);
   $46 = +HEAPF64[$45>>3];
   $47 = $46 < 0.0;
   $48 = - $46;
   $49 = $47 ? $48 : $46;
   $50 = $49 <= 9.9999999999999995E-7;
   $$not12 = $47 ^ 1;
   $brmerge = $50 | $$not12;
   $$mux = $50 ? 9.9999999999999995E-7 : $46;
   $51 = $brmerge ? $$mux : $48;
   $52 = (((($37) + ($$06<<7)|0)) + 72|0);
   $53 = +HEAPF64[$52>>3];
   $54 = $53 > 0.0;
   $$04 = $54 ? $53 : $18;
   $55 = (((($37) + ($$06<<7)|0)) + 68|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = ($56|0)>(0);
   if ($57) {
    $58 = HEAP32[$22>>2]|0;
    $59 = (((($58) + (($56*44)|0)|0)) + 36|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = (($16|0) % ($60|0))&-1;
    $62 = (((($58) + (($56*44)|0)|0)) + 40|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = (($63) + ($61<<3)|0);
    $65 = +HEAPF64[$64>>3];
    $$pn = $65;
   } else {
    $$pn = $$03;
   }
   $$15 = $$04 * $$pn;
   _getenergy($0,$39,$3,$2);
   $66 = +HEAPF64[$3>>3];
   $67 = $$0 + $66;
   $68 = (((($37) + ($$06<<7)|0)) + 80|0);
   $69 = +HEAPF64[$68>>3];
   $70 = $69 + $$128;
   HEAPF64[$68>>3] = $70;
   $71 = +HEAPF64[$2>>3];
   $72 = $71 * $$128;
   $73 = (((($37) + ($$06<<7)|0)) + 88|0);
   $74 = +HEAPF64[$73>>3];
   $75 = $74 + $72;
   HEAPF64[$73>>3] = $75;
   $76 = $66 / $51;
   $77 = $76 * $$128;
   $78 = (((($37) + ($$06<<7)|0)) + 96|0);
   $79 = +HEAPF64[$78>>3];
   $80 = $79 + $77;
   HEAPF64[$78>>3] = $80;
   $81 = $66 * $$128;
   $82 = (((($37) + ($$06<<7)|0)) + 104|0);
   $83 = +HEAPF64[$82>>3];
   $84 = $83 + $81;
   HEAPF64[$82>>3] = $84;
   $85 = (((($37) + ($$06<<7)|0)) + 112|0);
   $86 = +HEAPF64[$85>>3];
   $$inv = $86 >= $66;
   $87 = $$inv ? $86 : $66;
   HEAPF64[$85>>3] = $87;
   $88 = $$15 * $66;
   $89 = $88 * $$128;
   $90 = (((($37) + ($$06<<7)|0)) + 120|0);
   $91 = +HEAPF64[$90>>3];
   $92 = $91 + $89;
   HEAPF64[$90>>3] = $92;
   $$1 = $67;
  }
  $93 = (($$06) + 1)|0;
  $$0 = $$1;$$06 = $93;
 }
 $94 = ((($0)) + 4432|0);
 $95 = +HEAPF64[$94>>3];
 $$inv13 = $95 >= $$0;
 $96 = $$inv13 ? $95 : $$0;
 HEAPF64[$94>>3] = $96;
 STACKTOP = sp;return;
}
function _getenergy($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0.0, $$1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0;
 var $28 = 0.0, $29 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0.0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0;
 var $65 = 0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $8 = 0, $9 = 0, $storemerge = 0.0, $storemerge1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 48|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 4536|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + ($1<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9>>>0)<(3);
 if ($10) {
  $storemerge = 0.0;$storemerge1 = 0.0;
  HEAPF64[$2>>3] = $storemerge1;
  HEAPF64[$3>>3] = $storemerge;
  return;
 }
 $11 = ((($0)) + 4272|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + ($1<<3)|0);
 $14 = +HEAPF64[$13>>3];
 $15 = $14 < 0.0;
 $16 = - $14;
 $17 = $15 ? $16 : $14;
 $18 = ((($0)) + 4256|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (((($5) + ($1<<7)|0)) + 32|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($19) + ($21<<3)|0);
 $23 = +HEAPF64[$22>>3];
 $24 = (((($5) + ($1<<7)|0)) + 36|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($19) + ($25<<3)|0);
 $27 = +HEAPF64[$26>>3];
 $28 = $23 - $27;
 $29 = $28 < 0.0;
 $30 = - $28;
 $31 = $29 ? $30 : $28;
 $32 = (((($5) + ($1<<7)|0)) + 104|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)==(2);
 if ($34) {
  $35 = (_findpump($0,$1)|0);
  $36 = ((($0)) + 4400|0);
  $37 = +HEAPF64[$36>>3];
  $38 = ((($0)) + 4276|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (($39) + ($1<<3)|0);
  $41 = +HEAPF64[$40>>3];
  $42 = ((($0)) + 56|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = (((($43) + ($35<<7)|0)) + 60|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ($45|0)>(0);
  if ($46) {
   $47 = $17 / $41;
   $48 = ((($0)) + 4960|0);
   $49 = +HEAPF64[$48>>3];
   $50 = $47 * $49;
   $51 = ((($0)) + 68|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = (((($52) + (($45*56)|0)|0)) + 40|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = (((($52) + (($45*56)|0)|0)) + 48|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = (((($52) + (($45*56)|0)|0)) + 52|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = (+_interp($54,$56,$58,$50));
   $60 = 100.0 - $59;
   $61 = 1.0 / $41;
   $62 = (+Math_pow((+$61),0.10000000000000001));
   $63 = $60 * $62;
   $64 = 100.0 - $63;
   $$0 = $64;
  } else {
   $$0 = $37;
  }
  $65 = !($$0 <= 100.0);
  if ($65) {
   $68 = 100.0;
  } else {
   $66 = !($$0 >= 1.0);
   if ($66) {
    $68 = 1.0;
   } else {
    $68 = $$0;
   }
  }
  $67 = $68 / 100.0;
  $$1 = $67;
 } else {
  $$1 = 1.0;
 }
 $69 = $31 * $17;
 $70 = ((($0)) + 4392|0);
 $71 = +HEAPF64[$70>>3];
 $72 = $69 * $71;
 $73 = $72 / 8.814;
 $74 = $73 / $$1;
 $75 = $74 * 0.74570000000000003;
 $storemerge = $$1;$storemerge1 = $75;
 HEAPF64[$2>>3] = $storemerge1;
 HEAPF64[$3>>3] = $storemerge;
 return;
}
function _tanktimestep($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0.0, $$01 = 0, $$02 = 0, $$2 = 0, $$in = 0.0, $$in$v = 0.0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0;
 var $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = ((($0)) + 52|0);
 $4 = ((($0)) + 4256|0);
 $5 = ((($0)) + 4260|0);
 $$01 = 0;$$02 = 1;
 while(1) {
  $6 = HEAP32[$2>>2]|0;
  $7 = ($$02|0)>($6|0);
  if ($7) {
   break;
  }
  $8 = HEAP32[$3>>2]|0;
  $9 = (((($8) + (($$02*120)|0)|0)) + 8|0);
  $10 = +HEAPF64[$9>>3];
  $11 = $10 == 0.0;
  do {
   if ($11) {
    $$2 = $$01;
   } else {
    $12 = (($8) + (($$02*120)|0)|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = HEAP32[$4>>2]|0;
    $15 = (($14) + ($13<<3)|0);
    $16 = +HEAPF64[$15>>3];
    $17 = HEAP32[$5>>2]|0;
    $18 = (($17) + ($13<<3)|0);
    $19 = +HEAPF64[$18>>3];
    $20 = $19 < 0.0;
    $21 = - $19;
    $22 = $20 ? $21 : $19;
    $23 = !($22 <= 9.9999999999999995E-7);
    if ($23) {
     $24 = $19 > 0.0;
     if ($24) {
      $25 = (((($8) + (($$02*120)|0)|0)) + 24|0);
      $26 = +HEAPF64[$25>>3];
      $27 = $16 < $26;
      if ($27) {
       $28 = (((($8) + (($$02*120)|0)|0)) + 48|0);
       $29 = +HEAPF64[$28>>3];
       $30 = (((($8) + (($$02*120)|0)|0)) + 72|0);
       $31 = +HEAPF64[$30>>3];
       $32 = $29 - $31;
       $$0 = $32;
      } else {
       label = 8;
      }
     } else {
      label = 8;
     }
     if ((label|0) == 8) {
      label = 0;
      if (!($20)) {
       $$2 = $$01;
       break;
      }
      $33 = (((($8) + (($$02*120)|0)|0)) + 16|0);
      $34 = +HEAPF64[$33>>3];
      $35 = $16 > $34;
      if (!($35)) {
       $$2 = $$01;
       break;
      }
      $36 = (((($8) + (($$02*120)|0)|0)) + 40|0);
      $37 = +HEAPF64[$36>>3];
      $38 = (((($8) + (($$02*120)|0)|0)) + 72|0);
      $39 = +HEAPF64[$38>>3];
      $40 = $37 - $39;
      $$0 = $40;
     }
     $41 = $$0 / $19;
     $42 = !($41 >= 0.0);
     $$in$v = $42 ? -0.5 : 0.5;
     $$in = $41 + $$in$v;
     $43 = (~~(($$in)));
     $44 = ($43|0)>(0);
     if ($44) {
      $45 = HEAP32[$1>>2]|0;
      $46 = ($45|0)>($43|0);
      if ($46) {
       HEAP32[$1>>2] = $43;
       $$2 = $13;
      } else {
       $$2 = $$01;
      }
     } else {
      $$2 = $$01;
     }
    } else {
     $$2 = $$01;
    }
   }
  } while(0);
  $47 = (($$02) + 1)|0;
  $$01 = $$2;$$02 = $47;
 }
 return ($$01|0);
}
function _controltimestep($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$01 = 0, $$1 = 0, $$3 = 0, $$5 = 0, $$in = 0.0, $$in$v = 0.0, $$not2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $brmerge = 0, $or$cond = 0, $spec$select = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 28|0);
 $3 = ((($0)) + 72|0);
 $4 = ((($0)) + 8|0);
 $5 = ((($0)) + 4256|0);
 $6 = ((($0)) + 4260|0);
 $7 = ((($0)) + 1172|0);
 $8 = ((($0)) + 1144|0);
 $9 = ((($0)) + 52|0);
 $10 = ((($0)) + 48|0);
 $11 = ((($0)) + 4276|0);
 $12 = ((($0)) + 4536|0);
 $$01 = 1;
 while(1) {
  $13 = HEAP32[$2>>2]|0;
  $14 = ($$01|0)>($13|0);
  if ($14) {
   break;
  }
  $15 = HEAP32[$3>>2]|0;
  $16 = (((($15) + (($$01*40)|0)|0)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)>(0);
  do {
   if ($18) {
    $19 = HEAP32[$4>>2]|0;
    $20 = (($17) - ($19))|0;
    $21 = ($20|0)<(1);
    if (!($21)) {
     $22 = HEAP32[$5>>2]|0;
     $23 = (($22) + ($17<<3)|0);
     $24 = +HEAPF64[$23>>3];
     $25 = HEAP32[$6>>2]|0;
     $26 = (($25) + ($17<<3)|0);
     $27 = +HEAPF64[$26>>3];
     $28 = $27 < 0.0;
     $29 = - $27;
     $30 = $28 ? $29 : $27;
     $31 = !($30 <= 9.9999999999999995E-7);
     if ($31) {
      $32 = (((($15) + (($$01*40)|0)|0)) + 16|0);
      $33 = +HEAPF64[$32>>3];
      $34 = $24 < $33;
      if ($34) {
       $35 = (((($15) + (($$01*40)|0)|0)) + 36|0);
       $36 = HEAP32[$35>>2]|0;
       $37 = ($36|0)==(1);
       $38 = $27 > 0.0;
       $or$cond = $37 & $38;
       if (!($or$cond)) {
        label = 8;
       }
      } else {
       label = 8;
      }
      if ((label|0) == 8) {
       label = 0;
       $39 = $24 > $33;
       if (!($39)) {
        $$1 = 0;
        label = 11;
        break;
       }
       $40 = (((($15) + (($$01*40)|0)|0)) + 36|0);
       $41 = HEAP32[$40>>2]|0;
       $42 = ($41|0)!=(0);
       $$not2 = $28 ^ 1;
       $brmerge = $42 | $$not2;
       if ($brmerge) {
        $$1 = 0;
        label = 11;
        break;
       }
      }
      $43 = (+_tankvolume($0,$20,$33));
      $44 = HEAP32[$9>>2]|0;
      $45 = (((($44) + (($20*120)|0)|0)) + 72|0);
      $46 = +HEAPF64[$45>>3];
      $47 = $43 - $46;
      $48 = $47 / $27;
      $49 = !($48 >= 0.0);
      $$in$v = $49 ? -0.5 : 0.5;
      $$in = $48 + $$in$v;
      $50 = (~~(($$in)));
      $$1 = $50;
      label = 11;
     }
    }
   } else {
    $$1 = 0;
    label = 11;
   }
  } while(0);
  do {
   if ((label|0) == 11) {
    label = 0;
    $51 = (((($15) + (($$01*40)|0)|0)) + 36|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = ($52|0)==(2);
    do {
     if ($53) {
      $54 = (((($15) + (($$01*40)|0)|0)) + 8|0);
      $55 = HEAP32[$54>>2]|0;
      $56 = HEAP32[$7>>2]|0;
      $57 = ($55|0)>($56|0);
      $58 = (($55) - ($56))|0;
      $spec$select = $57 ? $58 : $$1;
      $$5 = $spec$select;
     } else {
      $$3 = $$1;
      $59 = ($52|0)==(3);
      if ($59) {
       $60 = HEAP32[$7>>2]|0;
       $61 = HEAP32[$8>>2]|0;
       $62 = (($60) + ($61))|0;
       $63 = (($62|0) % 86400)&-1;
       $64 = (((($15) + (($$01*40)|0)|0)) + 8|0);
       $65 = HEAP32[$64>>2]|0;
       $66 = ($65|0)<($63|0);
       if ($66) {
        $68 = (86400 - ($63))|0;
        $69 = (($68) + ($65))|0;
        $$5 = $69;
        break;
       } else {
        $67 = (($65) - ($63))|0;
        $$5 = $67;
        break;
       }
      } else {
       $$5 = $$3;
      }
     }
    } while(0);
    $70 = ($$5|0)>(0);
    if ($70) {
     $71 = HEAP32[$1>>2]|0;
     $72 = ($$5|0)<($71|0);
     if ($72) {
      $73 = (($15) + (($$01*40)|0)|0);
      $74 = HEAP32[$73>>2]|0;
      $75 = HEAP32[$10>>2]|0;
      $76 = (((($75) + ($74<<7)|0)) + 104|0);
      $77 = HEAP32[$76>>2]|0;
      $78 = ($77>>>0)>(1);
      if ($78) {
       $79 = HEAP32[$11>>2]|0;
       $80 = (($79) + ($74<<3)|0);
       $81 = +HEAPF64[$80>>3];
       $82 = (((($15) + (($$01*40)|0)|0)) + 24|0);
       $83 = +HEAPF64[$82>>3];
       $84 = $81 != $83;
       if (!($84)) {
        label = 21;
       }
      } else {
       label = 21;
      }
      if ((label|0) == 21) {
       label = 0;
       $85 = HEAP32[$12>>2]|0;
       $86 = (($85) + ($74<<2)|0);
       $87 = HEAP32[$86>>2]|0;
       $88 = (((($15) + (($$01*40)|0)|0)) + 32|0);
       $89 = HEAP32[$88>>2]|0;
       $90 = ($87|0)==($89|0);
       if ($90) {
        break;
       }
      }
      HEAP32[$1>>2] = $$5;
     }
    }
   }
  } while(0);
  $91 = (($$01) + 1)|0;
  $$01 = $91;
 }
 return;
}
function _ruletimestep($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$01 = 0, $$12 = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, $spec$select3 = 0, $spec$select4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 1172|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$1>>2]|0;
 $5 = (($3) + ($4))|0;
 $6 = ((($0)) + 32|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0);
 if ($8) {
  $$0 = $4;$$01 = $4;
 } else {
  $9 = ((($0)) + 1188|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($3|0) % ($10|0))&-1;
  $12 = (($10) - ($11))|0;
  $$0 = $12;$$01 = $10;
 }
 $13 = ($$01|0)>($4|0);
 $spec$select = $13 ? $4 : $$01;
 $14 = ($$0|0)>($4|0);
 $15 = $14 ? $4 : $$0;
 $16 = ($15|0)==(0);
 $spec$select3 = $16 ? $spec$select : $15;
 $$12 = $spec$select;$$2 = $spec$select3;$18 = $3;
 while(1) {
  $17 = (($18) + ($$2))|0;
  HEAP32[$2>>2] = $17;
  _tanklevels($0,$$2);
  $19 = (_checkrules($0,$$2)|0);
  $20 = ($19|0)==(0);
  $21 = HEAP32[$2>>2]|0;
  if (!($20)) {
   label = 6;
   break;
  }
  $22 = (($5) - ($21))|0;
  $23 = ($$12|0)>($22|0);
  $spec$select4 = $23 ? $22 : $$12;
  $24 = ($spec$select4|0)>(0);
  if ($24) {
   $$12 = $spec$select4;$$2 = $spec$select4;$18 = $21;
  } else {
   label = 6;
   break;
  }
 }
 if ((label|0) == 6) {
  $25 = (($21) - ($3))|0;
  HEAP32[$1>>2] = $25;
  HEAP32[$2>>2] = $3;
  return;
 }
}
function _tanklevels($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0.0;
 var $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = ((($0)) + 52|0);
 $4 = ((($0)) + 4260|0);
 $5 = (+($1|0));
 $6 = ((($0)) + 4256|0);
 $$0 = 1;
 while(1) {
  $7 = HEAP32[$2>>2]|0;
  $8 = ($$0|0)>($7|0);
  if ($8) {
   break;
  }
  $9 = HEAP32[$3>>2]|0;
  $10 = (((($9) + (($$0*120)|0)|0)) + 8|0);
  $11 = +HEAPF64[$10>>3];
  $12 = $11 == 0.0;
  if (!($12)) {
   $13 = (($9) + (($$0*120)|0)|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = HEAP32[$4>>2]|0;
   $16 = (($15) + ($14<<3)|0);
   $17 = +HEAPF64[$16>>3];
   $18 = $17 * $5;
   $19 = (((($9) + (($$0*120)|0)|0)) + 72|0);
   $20 = +HEAPF64[$19>>3];
   $21 = $20 + $18;
   HEAPF64[$19>>3] = $21;
   $22 = HEAP32[$4>>2]|0;
   $23 = (($22) + ($14<<3)|0);
   $24 = +HEAPF64[$23>>3];
   $25 = $21 + $24;
   $26 = (((($9) + (($$0*120)|0)|0)) + 48|0);
   $27 = +HEAPF64[$26>>3];
   $28 = !($25 >= $27);
   if ($28) {
    $29 = $21 - $24;
    $30 = (((($9) + (($$0*120)|0)|0)) + 40|0);
    $31 = +HEAPF64[$30>>3];
    $32 = !($29 <= $31);
    if ($32) {
     $33 = $21;
    } else {
     HEAPF64[$19>>3] = $31;
     $33 = $31;
    }
   } else {
    HEAPF64[$19>>3] = $27;
    $33 = $27;
   }
   $34 = (+_tankgrade($0,$$0,$33));
   $35 = HEAP32[$6>>2]|0;
   $36 = (($35) + ($14<<3)|0);
   HEAPF64[$36>>3] = $34;
  }
  $37 = (($$0) + 1)|0;
  $$0 = $37;
 }
 return;
}
function _tankgrade($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 var $$0 = 0.0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 52|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (((($4) + (($1*120)|0)|0)) + 92|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = (((($4) + (($1*120)|0)|0)) + 16|0);
  $9 = +HEAPF64[$8>>3];
  $10 = (((($4) + (($1*120)|0)|0)) + 40|0);
  $11 = +HEAPF64[$10>>3];
  $12 = $2 - $11;
  $13 = (((($4) + (($1*120)|0)|0)) + 8|0);
  $14 = +HEAPF64[$13>>3];
  $15 = $12 / $14;
  $16 = $9 + $15;
  $$0 = $16;
  return (+$$0);
 } else {
  $17 = ((($0)) + 68|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (((($18) + (($6*56)|0)|0)) + 40|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (((($18) + (($6*56)|0)|0)) + 52|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (((($18) + (($6*56)|0)|0)) + 48|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ((($0)) + 5040|0);
  $26 = +HEAPF64[$25>>3];
  $27 = $26 * $2;
  $28 = (+_interp($20,$22,$24,$27));
  $29 = ((($0)) + 44|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (($4) + (($1*120)|0)|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (((($30) + (($32*96)|0)|0)) + 48|0);
  $34 = +HEAPF64[$33>>3];
  $35 = ((($0)) + 4920|0);
  $36 = +HEAPF64[$35>>3];
  $37 = $28 / $36;
  $38 = $34 + $37;
  $$0 = $38;
  return (+$$0);
 }
 return +(0.0);
}
function _closehyd($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _freesparse($0);
 _freematrix($0);
 return;
}
function _freematrix($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4480|0);
 $2 = HEAP32[$1>>2]|0;
 _free($2);
 $3 = ((($0)) + 4484|0);
 $4 = HEAP32[$3>>2]|0;
 _free($4);
 $5 = ((($0)) + 4264|0);
 $6 = HEAP32[$5>>2]|0;
 _free($6);
 $7 = ((($0)) + 4268|0);
 $8 = HEAP32[$7>>2]|0;
 _free($8);
 $9 = ((($0)) + 4488|0);
 $10 = HEAP32[$9>>2]|0;
 _free($10);
 $11 = ((($0)) + 4540|0);
 $12 = HEAP32[$11>>2]|0;
 _free($12);
 return;
}
function _setlinkstatus($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($0)) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (((($6) + ($1<<7)|0)) + 104|0);
 $8 = HEAP32[$7>>2]|0;
 switch ($2<<24>>24) {
 case 1:  {
  switch ($8|0) {
  case 2:  {
   HEAPF64[$4>>3] = 1.0;
   $9 = HEAP32[$3>>2]|0;
   $10 = ($9|0)==(2);
   if ($10) {
    _resetpumpflow($0,$1);
   }
   break;
  }
  case 1: case 0: case 8:  {
   break;
  }
  default: {
   HEAPF64[$4>>3] = -1.0E+10;
  }
  }
  HEAP32[$3>>2] = 3;
  return;
  break;
 }
 case 0:  {
  switch ($8|0) {
  case 2:  {
   HEAPF64[$4>>3] = 0.0;
   break;
  }
  case 1: case 0: case 8:  {
   break;
  }
  default: {
   HEAPF64[$4>>3] = -1.0E+10;
  }
  }
  HEAP32[$3>>2] = 2;
  return;
  break;
 }
 default: {
  return;
 }
 }
}
function _hydsolve($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$010 = 0, $$04$ph = 0, $$07 = 0, $$07$ph = 0, $$111 = 0, $$12 = 0, $$18 = 0, $$1813 = 0, $$26 = 0, $$29 = 0, $$pre = 0, $$pre18 = 0, $$val = 0.0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0.0, $103 = 0, $104 = 0.0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0, $or$cond23 = 0;
 var $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = sp;
 $4 = ((($0)) + 4544|0);
 $5 = ((($0)) + 4516|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 4472|0);
 HEAPF64[$7>>3] = 1.0;
 HEAPF64[$3>>3] = 0.0;
 $8 = ((($3)) + 16|0);
 HEAPF64[$8>>3] = 0.0;
 $9 = ((($0)) + 4532|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($0)) + 4464|0);
 HEAPF64[$10>>3] = 0.0;
 $11 = ((($0)) + 1228|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(2);
 if ($13) {
  _writerelerr($0,0,0.0);
 }
 $14 = ((($0)) + 4508|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($0)) + 4512|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)>(0);
 $19 = $18 ? $17 : 0;
 $spec$select = (($15) + ($19))|0;
 HEAP32[$1>>2] = 1;
 $20 = ((($0)) + 8|0);
 $21 = ((($0)) + 4564|0);
 $22 = ((($0)) + 4552|0);
 $23 = ((($0)) + 4568|0);
 $24 = ((($0)) + 4256|0);
 $25 = ((($0)) + 4376|0);
 $26 = ((($0)) + 4520|0);
 $$04$ph = $6;$$07$ph = 0;$108 = 1;
 L4: while(1) {
  $$07 = $$07$ph;$28 = $108;
  while(1) {
   $27 = ($28|0)>($spec$select|0);
   if ($27) {
    $$18 = $$07;
    label = 25;
    break L4;
   }
   _headlosscoeffs($0);
   _matrixcoeffs($0);
   $29 = HEAP32[$20>>2]|0;
   $30 = (_linsolve($4,$29)|0);
   $31 = ($30|0)>(0);
   if (!($31)) {
    break;
   }
   $32 = HEAP32[$21>>2]|0;
   $33 = (($32) + ($30<<2)|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (_badvalve($0,$34)|0);
   $36 = ($35|0)==(0);
   if ($36) {
    $$1813 = $30;
    label = 26;
    break L4;
   }
   $$pre = HEAP32[$1>>2]|0;
   $$07 = $30;$28 = $$pre;
  }
  $$010 = 1;
  while(1) {
   $37 = HEAP32[$20>>2]|0;
   $38 = ($$010|0)>($37|0);
   if ($38) {
    break;
   }
   $39 = HEAP32[$22>>2]|0;
   $40 = HEAP32[$23>>2]|0;
   $41 = (($40) + ($$010<<2)|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = (($39) + ($42<<3)|0);
   $44 = +HEAPF64[$43>>3];
   $45 = HEAP32[$24>>2]|0;
   $46 = (($45) + ($$010<<3)|0);
   HEAPF64[$46>>3] = $44;
   $47 = (($$010) + 1)|0;
   $$010 = $47;
  }
  $48 = (+_newflows($0,$3));
  HEAPF64[$2>>3] = $48;
  $49 = HEAP32[$11>>2]|0;
  $50 = ($49|0)==(2);
  if ($50) {
   $51 = HEAP32[$1>>2]|0;
   _writerelerr($0,$51,$48);
  }
  HEAPF64[$7>>3] = 1.0;
  $52 = +HEAPF64[$25>>3];
  $53 = $52 > 0.0;
  if ($53) {
   $54 = +HEAPF64[$2>>3];
   $55 = !($54 <= $52);
   if ($55) {
    $$12 = 0;
   } else {
    HEAPF64[$7>>3] = 0.59999999999999998;
    $56 = (_valvestatus($0)|0);
    $$12 = $56;
   }
  } else {
   $57 = (_valvestatus($0)|0);
   $$12 = $57;
  }
  $$val = +HEAPF64[$2>>3];
  $58 = (_hasconverged($0,$$val,$3)|0);
  $59 = ($58|0)==(0);
  $60 = HEAP32[$1>>2]|0;
  if ($59) {
   $71 = HEAP32[$26>>2]|0;
   $72 = ($60|0)<=($71|0);
   $73 = ($60|0)==($$04$ph|0);
   $or$cond23 = $72 & $73;
   if ($or$cond23) {
    (_linkstatus($0)|0);
    $74 = HEAP32[$5>>2]|0;
    $75 = (($$04$ph) + ($74))|0;
    $$pre18 = HEAP32[$1>>2]|0;
    $$26 = $75;$77 = $$pre18;
   } else {
    $$26 = $$04$ph;$77 = $60;
   }
  } else {
   $61 = HEAP32[$14>>2]|0;
   $62 = ($60|0)>($61|0);
   if ($62) {
    $$18 = $30;
    label = 25;
    break;
   }
   $63 = (_linkstatus($0)|0);
   $64 = $$12 | $63;
   $65 = (_pswitch($0)|0);
   $66 = $65 | $64;
   $67 = ($66|0)==(0);
   if ($67) {
    $$18 = $30;
    label = 25;
    break;
   }
   $68 = HEAP32[$1>>2]|0;
   $69 = HEAP32[$5>>2]|0;
   $70 = (($68) + ($69))|0;
   $$26 = $70;$77 = $68;
  }
  $76 = (($77) + 1)|0;
  HEAP32[$1>>2] = $76;
  $$04$ph = $$26;$$07$ph = $30;$108 = $76;
 }
 if ((label|0) == 25) {
  $78 = ($$18|0)>(0);
  if ($78) {
   $$1813 = $$18;
   label = 26;
  } else {
   $$29 = $$18;
  }
 }
 if ((label|0) == 26) {
  $79 = HEAP32[$21>>2]|0;
  $80 = (($79) + ($$1813<<2)|0);
  $81 = HEAP32[$80>>2]|0;
  _writehyderr($0,$81);
  $$29 = 110;
 }
 $82 = ((($0)) + 4260|0);
 $83 = ((($0)) + 4264|0);
 $84 = ((($0)) + 4268|0);
 $$111 = 1;
 while(1) {
  $85 = HEAP32[$20>>2]|0;
  $86 = ($$111|0)>($85|0);
  if ($86) {
   break;
  }
  $87 = HEAP32[$82>>2]|0;
  $88 = (($87) + ($$111<<3)|0);
  $89 = +HEAPF64[$88>>3];
  $90 = HEAP32[$83>>2]|0;
  $91 = (($90) + ($$111<<3)|0);
  $92 = +HEAPF64[$91>>3];
  $93 = HEAP32[$84>>2]|0;
  $94 = (($93) + ($$111<<3)|0);
  $95 = +HEAPF64[$94>>3];
  $96 = $92 + $95;
  HEAPF64[$88>>3] = $96;
  $97 = HEAP32[$83>>2]|0;
  $98 = (($97) + ($$111<<3)|0);
  HEAPF64[$98>>3] = $89;
  $99 = (($$111) + 1)|0;
  $$111 = $99;
 }
 $100 = +HEAPF64[$2>>3];
 $101 = ((($0)) + 4440|0);
 HEAPF64[$101>>3] = $100;
 $102 = +HEAPF64[$3>>3];
 $103 = ((($0)) + 4448|0);
 HEAPF64[$103>>3] = $102;
 $104 = +HEAPF64[$8>>3];
 $105 = ((($0)) + 4456|0);
 HEAPF64[$105>>3] = $104;
 $106 = HEAP32[$1>>2]|0;
 $107 = ((($0)) + 4504|0);
 HEAP32[$107>>2] = $106;
 STACKTOP = sp;return ($$29|0);
}
function _badvalve($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$01 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0;
 var $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = ((($0)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 60|0);
 $5 = ((($0)) + 48|0);
 $$01 = 1;
 while(1) {
  $6 = ($$01|0)>($3|0);
  if ($6) {
   $$0 = 0;
   label = 13;
   break;
  }
  $7 = HEAP32[$4>>2]|0;
  $8 = (($7) + ($$01<<2)|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = HEAP32[$5>>2]|0;
  $11 = (((($10) + ($9<<7)|0)) + 32|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==($1|0);
  if ($13) {
   break;
  }
  $14 = (((($10) + ($9<<7)|0)) + 36|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==($1|0);
  if ($16) {
   break;
  }
  $37 = (($$01) + 1)|0;
  $$01 = $37;
 }
 if ((label|0) == 13) {
  STACKTOP = sp;return ($$0|0);
 }
 $17 = (((($10) + ($9<<7)|0)) + 104|0);
 $18 = HEAP32[$17>>2]|0;
 switch ($18|0) {
 case 6: case 4: case 3:  {
  break;
 }
 default: {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 }
 $19 = ((($0)) + 4536|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($20) + ($9<<2)|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)==(4);
 if (!($23)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $24 = ((($0)) + 1228|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)==(2);
 if ($26) {
  $27 = ((($0)) + 5080|0);
  $28 = ((($0)) + 1256|0);
  $29 = ((($0)) + 1172|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (_clocktime($28,$30)|0);
  $32 = (($10) + ($9<<7)|0);
  HEAP32[$vararg_buffer>>2] = $31;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $32;
  _sprintf($27,5224,$vararg_buffer);
  _writeline($0,$27);
  $$pre = HEAP32[$17>>2]|0;
  $34 = $$pre;
 } else {
  $34 = $18;
 }
 $33 = ($34|0)==(6);
 $35 = HEAP32[$19>>2]|0;
 $36 = (($35) + ($9<<2)|0);
 if ($33) {
  HEAP32[$36>>2] = 6;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 } else {
  HEAP32[$36>>2] = 7;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _newflows($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0.0, $10 = 0, $11 = 0.0, $12 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 8|0;
 $3 = sp;
 HEAPF64[$3>>3] = 0.0;
 HEAPF64[$2>>3] = 0.0;
 $4 = ((($1)) + 16|0);
 HEAPF64[$4>>3] = 0.0;
 $5 = ((($1)) + 32|0);
 HEAP32[$5>>2] = 1;
 $6 = ((($1)) + 28|0);
 HEAP32[$6>>2] = -1;
 _newlinkflows($0,$1,$3,$2);
 _newemitterflows($0,$1,$3,$2);
 _newdemandflows($0,$1,$3,$2);
 $7 = +HEAPF64[$3>>3];
 $8 = ((($0)) + 4352|0);
 $9 = +HEAPF64[$8>>3];
 $10 = $7 > $9;
 $11 = +HEAPF64[$2>>3];
 $12 = $11 / $7;
 $$0 = $10 ? $12 : $11;
 STACKTOP = sp;return (+$$0);
}
function _hasconverged($0,$$val,$1) {
 $0 = $0|0;
 $$val = +$$val;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4352|0);
 $3 = +HEAPF64[$2>>3];
 $4 = $3 < $$val;
 if ($4) {
  $$0 = 0;
  return ($$0|0);
 }
 _checkhydbalance($0,$1);
 $5 = ((($0)) + 1228|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(2);
 if ($7) {
  _reporthydbal($0,$1);
 }
 $8 = ((($0)) + 4368|0);
 $9 = +HEAPF64[$8>>3];
 $10 = $9 > 0.0;
 if ($10) {
  $11 = +HEAPF64[$1>>3];
  $12 = $11 > $9;
  if ($12) {
   $$0 = 0;
   return ($$0|0);
  }
 }
 $13 = ((($0)) + 4360|0);
 $14 = +HEAPF64[$13>>3];
 $15 = $14 > 0.0;
 if ($15) {
  $16 = ((($1)) + 16|0);
  $17 = +HEAPF64[$16>>3];
  $18 = $17 > $14;
  if ($18) {
   $$0 = 0;
   return ($$0|0);
  }
 }
 $19 = ((($0)) + 4496|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(1);
 if (!($21)) {
  $$0 = 1;
  return ($$0|0);
 }
 $22 = (_pdaconverged($0)|0);
 $$0 = $22;
 return ($$0|0);
}
function _pswitch($0) {
 $0 = $0|0;
 var $$0 = 0, $$05 = 0, $$08 = 0, $$12 = 0, $$3 = 0, $$34 = 0, $$old13 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $or$cond = 0, $or$cond14 = 0, $sext = 0, $sext9 = 0;
 var $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 28|0);
 $2 = ((($0)) + 72|0);
 $3 = ((($0)) + 8|0);
 $4 = ((($0)) + 4256|0);
 $5 = ((($0)) + 4280|0);
 $6 = ((($0)) + 48|0);
 $7 = ((($0)) + 4536|0);
 $8 = ((($0)) + 4276|0);
 $9 = ((($0)) + 1228|0);
 $$0 = 0;$$08 = 1;
 while(1) {
  $10 = HEAP32[$1>>2]|0;
  $11 = ($$08|0)>($10|0);
  if ($11) {
   break;
  }
  $12 = HEAP32[$2>>2]|0;
  $13 = (($12) + (($$08*40)|0)|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)<(1);
  L4: do {
   if ($15) {
    $$3 = $$0;
   } else {
    $16 = (((($12) + (($$08*40)|0)|0)) + 4|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ($17|0)>(0);
    if ($18) {
     $19 = HEAP32[$3>>2]|0;
     $20 = ($17|0)>($19|0);
     if ($20) {
      $$3 = $$0;
     } else {
      $21 = (((($12) + (($$08*40)|0)|0)) + 36|0);
      $22 = HEAP32[$21>>2]|0;
      $23 = ($22|0)==(0);
      if ($23) {
       $24 = HEAP32[$4>>2]|0;
       $25 = (($24) + ($17<<3)|0);
       $26 = +HEAPF64[$25>>3];
       $27 = (((($12) + (($$08*40)|0)|0)) + 16|0);
       $28 = +HEAPF64[$27>>3];
       $29 = +HEAPF64[$5>>3];
       $30 = $28 + $29;
       $31 = !($26 <= $30);
       if ($31) {
        $$3 = $$0;
        break;
       }
      } else {
       $$05 = 0;
       $32 = ($22|0)==(1);
       if (!($32)) {
        $$3 = $$0;
        break;
       }
       $33 = HEAP32[$4>>2]|0;
       $34 = (($33) + ($17<<3)|0);
       $35 = +HEAPF64[$34>>3];
       $36 = (((($12) + (($$08*40)|0)|0)) + 16|0);
       $37 = +HEAPF64[$36>>3];
       $38 = +HEAPF64[$5>>3];
       $39 = $37 - $38;
       $40 = $35 >= $39;
       $41 = ($$05|0)==(1);
       $or$cond = $40 | $41;
       if (!($or$cond)) {
        $$3 = $$0;
        break;
       }
      }
      $42 = HEAP32[$6>>2]|0;
      $43 = HEAP32[$7>>2]|0;
      $44 = (($43) + ($14<<2)|0);
      $45 = HEAP32[$44>>2]|0;
      $46 = $45&255;
      $47 = (((($42) + ($14<<7)|0)) + 104|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = ($48|0)==(1);
      do {
       if ($49) {
        $sext9 = $45 << 24;
        $70 = $sext9 >> 24;
        $71 = (((($12) + (($$08*40)|0)|0)) + 32|0);
        $72 = HEAP32[$71>>2]|0;
        $73 = ($70|0)!=($72|0);
        $spec$select = $73&1;
        $$old13 = ($spec$select|0)==(0);
        if ($$old13) {
         $$3 = $$0;
         break L4;
        }
       } else {
        $$12 = 0;
        $50 = ($48|0)==(2);
        if ($50) {
         $51 = HEAP32[$8>>2]|0;
         $52 = (($51) + ($14<<3)|0);
         $53 = +HEAPF64[$52>>3];
         $54 = (((($12) + (($$08*40)|0)|0)) + 24|0);
         $55 = +HEAPF64[$54>>3];
         $56 = $53 != $55;
         if ($56) {
          break;
         } else {
          $$3 = $$0;
          break L4;
         }
        } else {
         $$34 = $$12;
        }
        $57 = ($48>>>0)>(2);
        if (!($57)) {
         $$3 = $$0;
         break L4;
        }
        $58 = HEAP32[$8>>2]|0;
        $59 = (($58) + ($14<<3)|0);
        $60 = +HEAPF64[$59>>3];
        $61 = (((($12) + (($$08*40)|0)|0)) + 24|0);
        $62 = +HEAPF64[$61>>3];
        $63 = $60 != $62;
        if (!($63)) {
         $64 = $60 == -1.0E+10;
         if (!($64)) {
          $$3 = $$0;
          break L4;
         }
         $sext = $45 << 24;
         $65 = $sext >> 24;
         $66 = (((($12) + (($$08*40)|0)|0)) + 32|0);
         $67 = HEAP32[$66>>2]|0;
         $68 = ($65|0)==($67|0);
         $69 = ($$34|0)==(0);
         $or$cond14 = $68 & $69;
         if ($or$cond14) {
          $$3 = $$0;
          break L4;
         }
        }
       }
      } while(0);
      $74 = (((($12) + (($$08*40)|0)|0)) + 32|0);
      $75 = HEAP32[$74>>2]|0;
      HEAP32[$44>>2] = $75;
      $76 = HEAP32[$47>>2]|0;
      $77 = ($76>>>0)>(1);
      if ($77) {
       $78 = HEAP32[$2>>2]|0;
       $79 = (((($78) + (($$08*40)|0)|0)) + 24|0);
       $80 = +HEAPF64[$79>>3];
       $81 = HEAP32[$8>>2]|0;
       $82 = (($81) + ($14<<3)|0);
       HEAPF64[$82>>3] = $80;
      }
      $83 = HEAP32[$9>>2]|0;
      $84 = ($83|0)==(2);
      if ($84) {
       $85 = HEAP32[$7>>2]|0;
       $86 = (($85) + ($14<<2)|0);
       $87 = HEAP32[$86>>2]|0;
       $88 = $87&255;
       _writestatchange($0,$14,$46,$88);
       $$3 = 1;
      } else {
       $$3 = 1;
      }
     }
    } else {
     $$3 = $$0;
    }
   }
  } while(0);
  $89 = (($$08) + 1)|0;
  $$0 = $$3;$$08 = $89;
 }
 return ($$0|0);
}
function _checkhydbalance($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0;
 var $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[$1>>3] = 0.0;
 $2 = ((($1)) + 24|0);
 HEAP32[$2>>2] = 1;
 _headlosscoeffs($0);
 $3 = ((($0)) + 12|0);
 $4 = ((($0)) + 4536|0);
 $5 = ((($0)) + 4480|0);
 $6 = ((($0)) + 48|0);
 $7 = ((($0)) + 4256|0);
 $8 = ((($0)) + 4484|0);
 $$0 = 1;
 while(1) {
  $9 = HEAP32[$3>>2]|0;
  $10 = ($$0|0)>($9|0);
  if ($10) {
   break;
  }
  $11 = HEAP32[$4>>2]|0;
  $12 = (($11) + ($$0<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13>>>0)<(3);
  if (!($14)) {
   $15 = HEAP32[$5>>2]|0;
   $16 = (($15) + ($$0<<3)|0);
   $17 = +HEAPF64[$16>>3];
   $18 = $17 == 0.0;
   if (!($18)) {
    $19 = HEAP32[$6>>2]|0;
    $20 = (((($19) + ($$0<<7)|0)) + 32|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = (((($19) + ($$0<<7)|0)) + 36|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = HEAP32[$7>>2]|0;
    $25 = (($24) + ($21<<3)|0);
    $26 = +HEAPF64[$25>>3];
    $27 = (($24) + ($23<<3)|0);
    $28 = +HEAPF64[$27>>3];
    $29 = $26 - $28;
    $30 = HEAP32[$8>>2]|0;
    $31 = (($30) + ($$0<<3)|0);
    $32 = +HEAPF64[$31>>3];
    $33 = $32 / $17;
    $34 = $29 - $33;
    $35 = $34 < 0.0;
    $36 = - $34;
    $37 = $35 ? $36 : $34;
    $38 = +HEAPF64[$1>>3];
    $39 = $37 > $38;
    if ($39) {
     HEAPF64[$1>>3] = $37;
     HEAP32[$2>>2] = $$0;
    }
   }
  }
  $40 = (($$0) + 1)|0;
  $$0 = $40;
 }
 return;
}
function _reporthydbal($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer6 = sp + 32|0;
 $vararg_buffer2 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = ((($1)) + 16|0);
 $3 = +HEAPF64[$2>>3];
 $4 = ((($0)) + 4960|0);
 $5 = +HEAPF64[$4>>3];
 $6 = $3 * $5;
 $7 = +HEAPF64[$1>>3];
 $8 = ((($0)) + 4920|0);
 $9 = +HEAPF64[$8>>3];
 $10 = $7 * $9;
 $11 = ((($1)) + 32|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($1)) + 28|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($1)) + 24|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($12|0)>(0);
 if ($17) {
  $18 = ((($0)) + 5080|0);
  $19 = ((($0)) + 48|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($20) + ($12<<7)|0);
  HEAPF64[$vararg_buffer>>3] = $6;
  $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr1>>2] = $21;
  _sprintf($18,5037,$vararg_buffer);
  _writeline($0,$18);
 } else {
  $22 = ($14|0)>(0);
  if ($22) {
   $23 = ((($0)) + 5080|0);
   $24 = ((($0)) + 44|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = (($25) + (($14*96)|0)|0);
   HEAPF64[$vararg_buffer2>>3] = $6;
   $vararg_ptr5 = ((($vararg_buffer2)) + 8|0);
   HEAP32[$vararg_ptr5>>2] = $26;
   _sprintf($23,5099,$vararg_buffer2);
   _writeline($0,$23);
  }
 }
 $27 = ($16|0)>(0);
 if (!($27)) {
  STACKTOP = sp;return;
 }
 $28 = ((($0)) + 5080|0);
 $29 = ((($0)) + 48|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($30) + ($16<<7)|0);
 HEAPF64[$vararg_buffer6>>3] = $10;
 $vararg_ptr9 = ((($vararg_buffer6)) + 8|0);
 HEAP32[$vararg_ptr9>>2] = $31;
 _sprintf($28,5161,$vararg_buffer6);
 _writeline($0,$28);
 STACKTOP = sp;return;
}
function _pdaconverged($0) {
 $0 = $0|0;
 var $$0 = 0.0, $$01 = 0.0, $$04 = 0, $$07 = 0, $$15 = 0, $$2 = 0.0, $$23 = 0.0, $$26 = 0, $$3 = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0;
 var $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4532|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($0)) + 4464|0);
 HEAPF64[$2>>3] = 0.0;
 $3 = ((($0)) + 8|0);
 $4 = ((($0)) + 4260|0);
 $5 = ((($0)) + 4264|0);
 $6 = ((($0)) + 4256|0);
 $7 = ((($0)) + 44|0);
 $8 = ((($0)) + 4328|0);
 $$pre = HEAP32[$3>>2]|0;
 $$0 = 0.0;$$01 = 0.0;$$04 = 1;$$07 = 1;$32 = 0;
 while(1) {
  $9 = ($$07|0)>($$pre|0);
  if ($9) {
   break;
  }
  $10 = HEAP32[$4>>2]|0;
  $11 = (($10) + ($$07<<3)|0);
  $12 = +HEAPF64[$11>>3];
  $13 = !($12 <= 0.0);
  if ($13) {
   $14 = HEAP32[$5>>2]|0;
   $15 = (($14) + ($$07<<3)|0);
   $16 = +HEAPF64[$15>>3];
   $17 = $16 < -0.001;
   $$15 = $17 ? 0 : $$04;
   $18 = $16 > 0.001;
   if ($18) {
    $19 = HEAP32[$6>>2]|0;
    $20 = (($19) + ($$07<<3)|0);
    $21 = +HEAPF64[$20>>3];
    $22 = HEAP32[$7>>2]|0;
    $23 = (((($22) + (($$07*96)|0)|0)) + 48|0);
    $24 = +HEAPF64[$23>>3];
    $25 = $21 - $24;
    $26 = +HEAPF64[$8>>3];
    $27 = $25 - $26;
    $28 = $27 < -0.001;
    if ($28) {
     $$26 = 0;
    } else {
     $$26 = $$15;
    }
   } else {
    $$26 = $$15;
   }
   $29 = $16 + 1.0E-4;
   $30 = $29 < $12;
   if ($30) {
    $31 = (($32) + 1)|0;
    HEAP32[$1>>2] = $31;
    $33 = +HEAPF64[$11>>3];
    $34 = $$01 + $33;
    $35 = +HEAPF64[$15>>3];
    $36 = $33 - $35;
    $37 = $$0 + $36;
    $$2 = $37;$$23 = $34;$$3 = $$26;$42 = $31;
   } else {
    $$2 = $$0;$$23 = $$01;$$3 = $$26;$42 = $32;
   }
  } else {
   $$2 = $$0;$$23 = $$01;$$3 = $$04;$42 = $32;
  }
  $38 = (($$07) + 1)|0;
  $$0 = $$2;$$01 = $$23;$$04 = $$3;$$07 = $38;$32 = $42;
 }
 $39 = $$01 > 0.0;
 if (!($39)) {
  return ($$04|0);
 }
 $40 = $$0 / $$01;
 $41 = $40 * 100.0;
 HEAPF64[$2>>3] = $41;
 return ($$04|0);
}
function _newlinkflows($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$0$in = 0, $$01 = 0, $$1 = 0.0, $$pre = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0.0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0;
 var $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 4260|0);
 $$0$in = $5;
 while(1) {
  $$0 = (($$0$in) + 1)|0;
  $7 = HEAP32[$0>>2]|0;
  $8 = ($$0$in|0)<($7|0);
  if (!($8)) {
   break;
  }
  $9 = HEAP32[$6>>2]|0;
  $10 = (($9) + ($$0<<3)|0);
  HEAPF64[$10>>3] = 0.0;
  $$0$in = $$0;
 }
 $11 = ((($0)) + 12|0);
 $12 = ((($0)) + 48|0);
 $13 = ((($0)) + 4256|0);
 $14 = ((($0)) + 4484|0);
 $15 = ((($0)) + 4480|0);
 $16 = ((($0)) + 4472|0);
 $17 = ((($0)) + 56|0);
 $18 = ((($0)) + 4272|0);
 $19 = ((($1)) + 16|0);
 $20 = ((($0)) + 4536|0);
 $21 = ((($1)) + 32|0);
 $22 = ((($1)) + 28|0);
 $$01 = 1;
 while(1) {
  $23 = HEAP32[$11>>2]|0;
  $24 = ($$01|0)>($23|0);
  if ($24) {
   break;
  }
  $25 = HEAP32[$12>>2]|0;
  $26 = (((($25) + ($$01<<7)|0)) + 32|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (((($25) + ($$01<<7)|0)) + 36|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = HEAP32[$13>>2]|0;
  $31 = (($30) + ($27<<3)|0);
  $32 = +HEAPF64[$31>>3];
  $33 = (($30) + ($29<<3)|0);
  $34 = +HEAPF64[$33>>3];
  $35 = $32 - $34;
  $36 = HEAP32[$14>>2]|0;
  $37 = (($36) + ($$01<<3)|0);
  $38 = +HEAPF64[$37>>3];
  $39 = HEAP32[$15>>2]|0;
  $40 = (($39) + ($$01<<3)|0);
  $41 = +HEAPF64[$40>>3];
  $42 = $41 * $35;
  $43 = $38 - $42;
  $44 = +HEAPF64[$16>>3];
  $45 = $43 * $44;
  $46 = (((($25) + ($$01<<7)|0)) + 104|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = ($47|0)==(2);
  if ($48) {
   $49 = (_findpump($0,$$01)|0);
   $50 = HEAP32[$17>>2]|0;
   $51 = (((($50) + ($49<<7)|0)) + 4|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = ($52|0)==(0);
   if ($53) {
    $54 = HEAP32[$18>>2]|0;
    $55 = (($54) + ($$01<<3)|0);
    $56 = +HEAPF64[$55>>3];
    $57 = $45 > $56;
    if ($57) {
     $58 = $56 * 0.5;
     $$1 = $58;
    } else {
     $$1 = $45;
    }
   } else {
    $$1 = $45;
   }
  } else {
   $$1 = $45;
  }
  $59 = HEAP32[$18>>2]|0;
  $60 = (($59) + ($$01<<3)|0);
  $61 = +HEAPF64[$60>>3];
  $62 = $61 - $$1;
  HEAPF64[$60>>3] = $62;
  $63 = HEAP32[$18>>2]|0;
  $64 = (($63) + ($$01<<3)|0);
  $65 = +HEAPF64[$64>>3];
  $66 = $65 < 0.0;
  $67 = - $65;
  $68 = $66 ? $67 : $65;
  $69 = +HEAPF64[$2>>3];
  $70 = $69 + $68;
  HEAPF64[$2>>3] = $70;
  $71 = $$1 < 0.0;
  $72 = - $$1;
  $73 = $71 ? $72 : $$1;
  $74 = +HEAPF64[$3>>3];
  $75 = $74 + $73;
  HEAPF64[$3>>3] = $75;
  $76 = - $$1;
  $77 = $71 ? $76 : $$1;
  $78 = +HEAPF64[$19>>3];
  $79 = $77 > $78;
  if ($79) {
   $80 = $71 ? $72 : $$1;
   HEAPF64[$19>>3] = $80;
   HEAP32[$21>>2] = $$01;
   HEAP32[$22>>2] = -1;
  }
  $81 = HEAP32[$20>>2]|0;
  $82 = (($81) + ($$01<<2)|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = ($83>>>0)>(2);
  if ($84) {
   $85 = HEAP32[$4>>2]|0;
   $86 = ($27|0)>($85|0);
   if ($86) {
    $87 = HEAP32[$18>>2]|0;
    $88 = (($87) + ($$01<<3)|0);
    $89 = +HEAPF64[$88>>3];
    $90 = HEAP32[$6>>2]|0;
    $91 = (($90) + ($27<<3)|0);
    $92 = +HEAPF64[$91>>3];
    $93 = $92 - $89;
    HEAPF64[$91>>3] = $93;
    $$pre = HEAP32[$4>>2]|0;
    $95 = $$pre;
   } else {
    $95 = $85;
   }
   $94 = ($29|0)>($95|0);
   if ($94) {
    $96 = HEAP32[$18>>2]|0;
    $97 = (($96) + ($$01<<3)|0);
    $98 = +HEAPF64[$97>>3];
    $99 = HEAP32[$6>>2]|0;
    $100 = (($99) + ($29<<3)|0);
    $101 = +HEAPF64[$100>>3];
    $102 = $101 + $98;
    HEAPF64[$100>>3] = $102;
   }
  }
  $103 = (($$01) + 1)|0;
  $$01 = $103;
 }
 return;
}
function _newemitterflows($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0;
 var $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0.0, $47 = 0.0;
 var $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0.0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp + 8|0;
 $5 = sp;
 $6 = ((($0)) + 8|0);
 $7 = ((($0)) + 44|0);
 $8 = ((($0)) + 4256|0);
 $9 = ((($0)) + 4472|0);
 $10 = ((($0)) + 4268|0);
 $11 = ((($1)) + 16|0);
 $12 = ((($1)) + 28|0);
 $13 = ((($1)) + 32|0);
 $$0 = 1;
 while(1) {
  $14 = HEAP32[$6>>2]|0;
  $15 = ($$0|0)>($14|0);
  if ($15) {
   break;
  }
  $16 = HEAP32[$7>>2]|0;
  $17 = (((($16) + (($$0*96)|0)|0)) + 72|0);
  $18 = +HEAPF64[$17>>3];
  $19 = $18 == 0.0;
  if (!($19)) {
   _emitterheadloss($0,$$0,$4,$5);
   $20 = HEAP32[$8>>2]|0;
   $21 = (($20) + ($$0<<3)|0);
   $22 = +HEAPF64[$21>>3];
   $23 = HEAP32[$7>>2]|0;
   $24 = (((($23) + (($$0*96)|0)|0)) + 48|0);
   $25 = +HEAPF64[$24>>3];
   $26 = $22 - $25;
   $27 = +HEAPF64[$4>>3];
   $28 = $27 - $26;
   $29 = +HEAPF64[$5>>3];
   $30 = $28 / $29;
   $31 = +HEAPF64[$9>>3];
   $32 = $30 * $31;
   $33 = HEAP32[$10>>2]|0;
   $34 = (($33) + ($$0<<3)|0);
   $35 = +HEAPF64[$34>>3];
   $36 = $35 - $32;
   HEAPF64[$34>>3] = $36;
   $37 = HEAP32[$10>>2]|0;
   $38 = (($37) + ($$0<<3)|0);
   $39 = +HEAPF64[$38>>3];
   $40 = $39 < 0.0;
   $41 = - $39;
   $42 = $40 ? $41 : $39;
   $43 = +HEAPF64[$2>>3];
   $44 = $43 + $42;
   HEAPF64[$2>>3] = $44;
   $45 = $32 < 0.0;
   $46 = - $32;
   $47 = $45 ? $46 : $32;
   $48 = +HEAPF64[$3>>3];
   $49 = $48 + $47;
   HEAPF64[$3>>3] = $49;
   $50 = - $32;
   $51 = $45 ? $50 : $32;
   $52 = +HEAPF64[$11>>3];
   $53 = $51 > $52;
   if ($53) {
    $54 = $45 ? $46 : $32;
    HEAPF64[$11>>3] = $54;
    HEAP32[$12>>2] = $$0;
    HEAP32[$13>>2] = -1;
   }
  }
  $55 = (($$0) + 1)|0;
  $$0 = $55;
 }
 STACKTOP = sp;return;
}
function _newdemandflows($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$inv = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0;
 var $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0;
 var $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp + 8|0;
 $5 = sp;
 $6 = ((($0)) + 4496|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0);
 if ($8) {
  STACKTOP = sp;return;
 }
 $9 = ((($0)) + 4336|0);
 $10 = +HEAPF64[$9>>3];
 $11 = ((($0)) + 4328|0);
 $12 = +HEAPF64[$11>>3];
 $13 = $10 - $12;
 $$inv = $13 >= 0.10000000000000001;
 $14 = $$inv ? $13 : 0.10000000000000001;
 $15 = ((($0)) + 4320|0);
 $16 = +HEAPF64[$15>>3];
 $17 = 1.0 / $16;
 $18 = ((($0)) + 8|0);
 $19 = ((($0)) + 4260|0);
 $20 = ((($0)) + 4256|0);
 $21 = ((($0)) + 44|0);
 $22 = ((($0)) + 4472|0);
 $23 = ((($0)) + 4264|0);
 $24 = ((($1)) + 16|0);
 $25 = ((($1)) + 28|0);
 $26 = ((($1)) + 32|0);
 $$0 = 1;
 while(1) {
  $27 = HEAP32[$18>>2]|0;
  $28 = ($$0|0)>($27|0);
  if ($28) {
   break;
  }
  $29 = HEAP32[$19>>2]|0;
  $30 = (($29) + ($$0<<3)|0);
  $31 = +HEAPF64[$30>>3];
  $32 = !($31 <= 0.0);
  if ($32) {
   _demandheadloss($0,$$0,$14,$17,$4,$5);
   $33 = HEAP32[$20>>2]|0;
   $34 = (($33) + ($$0<<3)|0);
   $35 = +HEAPF64[$34>>3];
   $36 = HEAP32[$21>>2]|0;
   $37 = (((($36) + (($$0*96)|0)|0)) + 48|0);
   $38 = +HEAPF64[$37>>3];
   $39 = $35 - $38;
   $40 = +HEAPF64[$11>>3];
   $41 = $39 - $40;
   $42 = +HEAPF64[$4>>3];
   $43 = $42 - $41;
   $44 = +HEAPF64[$5>>3];
   $45 = $43 / $44;
   $46 = +HEAPF64[$22>>3];
   $47 = $45 * $46;
   $48 = HEAP32[$23>>2]|0;
   $49 = (($48) + ($$0<<3)|0);
   $50 = +HEAPF64[$49>>3];
   $51 = $50 - $47;
   HEAPF64[$49>>3] = $51;
   $52 = HEAP32[$23>>2]|0;
   $53 = (($52) + ($$0<<3)|0);
   $54 = +HEAPF64[$53>>3];
   $55 = $54 < 0.0;
   $56 = - $54;
   $57 = $55 ? $56 : $54;
   $58 = +HEAPF64[$2>>3];
   $59 = $58 + $57;
   HEAPF64[$2>>3] = $59;
   $60 = $47 < 0.0;
   $61 = - $47;
   $62 = $60 ? $61 : $47;
   $63 = +HEAPF64[$3>>3];
   $64 = $63 + $62;
   HEAPF64[$3>>3] = $64;
   $65 = - $47;
   $66 = $60 ? $65 : $47;
   $67 = +HEAPF64[$24>>3];
   $68 = $66 > $67;
   if ($68) {
    $69 = $60 ? $61 : $47;
    HEAPF64[$24>>3] = $69;
    HEAP32[$25>>2] = $$0;
    HEAP32[$26>>2] = -1;
   }
  }
  $70 = (($$0) + 1)|0;
  $$0 = $70;
 }
 STACKTOP = sp;return;
}
function _valvestatus($0) {
 $0 = $0|0;
 var $$0 = 0, $$01 = 0, $$2 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0;
 var $43 = 0, $44 = 0.0, $45 = 0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $storemerge = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 24|0);
 $2 = ((($0)) + 60|0);
 $3 = ((($0)) + 48|0);
 $4 = ((($0)) + 4276|0);
 $5 = ((($0)) + 4536|0);
 $6 = ((($0)) + 44|0);
 $7 = ((($0)) + 4256|0);
 $8 = ((($0)) + 1228|0);
 $$0 = 1;$$01 = 0;
 while(1) {
  $9 = HEAP32[$1>>2]|0;
  $10 = ($$0|0)>($9|0);
  if ($10) {
   break;
  }
  $11 = HEAP32[$2>>2]|0;
  $12 = (($11) + ($$0<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = HEAP32[$3>>2]|0;
  $15 = HEAP32[$4>>2]|0;
  $16 = (($15) + ($13<<3)|0);
  $17 = +HEAPF64[$16>>3];
  $18 = $17 == -1.0E+10;
  L4: do {
   if ($18) {
    $$2 = $$01;
   } else {
    $19 = (((($14) + ($13<<7)|0)) + 32|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = (((($14) + ($13<<7)|0)) + 36|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = HEAP32[$5>>2]|0;
    $24 = (($23) + ($13<<2)|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = (((($14) + ($13<<7)|0)) + 104|0);
    $27 = HEAP32[$26>>2]|0;
    switch ($27|0) {
    case 3:  {
     $28 = HEAP32[$6>>2]|0;
     $29 = (((($28) + (($22*96)|0)|0)) + 48|0);
     $30 = +HEAPF64[$29>>3];
     $31 = $30 + $17;
     $32 = HEAP32[$7>>2]|0;
     $33 = (($32) + ($20<<3)|0);
     $34 = +HEAPF64[$33>>3];
     $35 = (($32) + ($22<<3)|0);
     $36 = +HEAPF64[$35>>3];
     $37 = (_prvstatus($0,$13,$25,$31,$34,$36)|0);
     $storemerge = $37;
     break;
    }
    case 4:  {
     $38 = HEAP32[$6>>2]|0;
     $39 = (((($38) + (($20*96)|0)|0)) + 48|0);
     $40 = +HEAPF64[$39>>3];
     $41 = $40 + $17;
     $42 = HEAP32[$7>>2]|0;
     $43 = (($42) + ($20<<3)|0);
     $44 = +HEAPF64[$43>>3];
     $45 = (($42) + ($22<<3)|0);
     $46 = +HEAPF64[$45>>3];
     $47 = (_psvstatus($0,$13,$25,$41,$44,$46)|0);
     $storemerge = $47;
     break;
    }
    default: {
     $$2 = $$01;
     break L4;
    }
    }
    HEAP32[$24>>2] = $storemerge;
    $48 = HEAP32[$5>>2]|0;
    $49 = (($48) + ($13<<2)|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = ($25|0)==($50|0);
    if ($51) {
     $$2 = $$01;
    } else {
     $52 = HEAP32[$8>>2]|0;
     $53 = ($52|0)==(2);
     if ($53) {
      $54 = $25&255;
      $55 = $50&255;
      _writestatchange($0,$13,$54,$55);
      $$2 = 1;
     } else {
      $$2 = 1;
     }
    }
   }
  } while(0);
  $56 = (($$0) + 1)|0;
  $$0 = $56;$$01 = $$2;
 }
 return ($$01|0);
}
function _prvstatus($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 var $$7 = 0, $$pre = 0.0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0;
 var $28 = 0, $29 = 0.0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $40 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond2 = 0, $spec$select = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($0)) + 4280|0);
 $7 = +HEAPF64[$6>>3];
 $8 = ((($0)) + 48|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (((($9) + ($1<<7)|0)) + 64|0);
 $11 = +HEAPF64[$10>>3];
 $12 = ((($0)) + 4272|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + ($1<<3)|0);
 $15 = +HEAPF64[$14>>3];
 $16 = $15 * $15;
 $17 = $11 * $16;
 switch ($2|0) {
 case 4:  {
  $18 = ((($0)) + 4288|0);
  $19 = +HEAPF64[$18>>3];
  $20 = - $19;
  $21 = $15 < $20;
  if ($21) {
   $$7 = 2;
   return ($$7|0);
  }
  $22 = $4 - $17;
  $23 = $3 - $7;
  $24 = $22 < $23;
  if ($24) {
   $$7 = 3;
   return ($$7|0);
  }
  $$7 = 4;
  return ($$7|0);
  break;
 }
 case 3:  {
  $25 = ((($0)) + 4288|0);
  $26 = +HEAPF64[$25>>3];
  $27 = - $26;
  $28 = $15 < $27;
  if ($28) {
   $$7 = 2;
   return ($$7|0);
  }
  $29 = $7 + $3;
  $30 = !($29 <= $5);
  if (!($30)) {
   $$7 = 4;
   return ($$7|0);
  }
  $$7 = 3;
  return ($$7|0);
  break;
 }
 case 2:  {
  $31 = $7 + $3;
  $32 = $31 <= $4;
  $$pre = $3 - $7;
  $33 = $$pre > $5;
  $or$cond = $32 & $33;
  if ($or$cond) {
   $$7 = 4;
   return ($$7|0);
  } else {
   $34 = $$pre > $4;
   $35 = $7 + $5;
   $36 = $35 < $4;
   $or$cond2 = $34 & $36;
   $spec$select = $or$cond2 ? 3 : 2;
   return ($spec$select|0);
  }
  break;
 }
 case 7:  {
  $37 = ((($0)) + 4288|0);
  $38 = +HEAPF64[$37>>3];
  $39 = - $38;
  $40 = $15 < $39;
  if (!($40)) {
   $$7 = 7;
   return ($$7|0);
  }
  $$7 = 2;
  return ($$7|0);
  break;
 }
 default: {
  $$7 = $2;
  return ($$7|0);
 }
 }
 return (0)|0;
}
function _psvstatus($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 var $$7 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0;
 var $29 = 0.0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0.0, $40 = 0.0, $41 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $spec$select = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($0)) + 4280|0);
 $7 = +HEAPF64[$6>>3];
 $8 = ((($0)) + 48|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (((($9) + ($1<<7)|0)) + 64|0);
 $11 = +HEAPF64[$10>>3];
 $12 = ((($0)) + 4272|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + ($1<<3)|0);
 $15 = +HEAPF64[$14>>3];
 $16 = $15 * $15;
 $17 = $11 * $16;
 switch ($2|0) {
 case 4:  {
  $18 = ((($0)) + 4288|0);
  $19 = +HEAPF64[$18>>3];
  $20 = - $19;
  $21 = $15 < $20;
  if ($21) {
   $$7 = 2;
   return ($$7|0);
  }
  $22 = $17 + $5;
  $23 = $7 + $3;
  $24 = $22 > $23;
  if ($24) {
   $$7 = 3;
   return ($$7|0);
  }
  $$7 = 4;
  return ($$7|0);
  break;
 }
 case 3:  {
  $25 = ((($0)) + 4288|0);
  $26 = +HEAPF64[$25>>3];
  $27 = - $26;
  $28 = $15 < $27;
  if ($28) {
   $$7 = 2;
   return ($$7|0);
  }
  $29 = $3 - $7;
  $30 = $29 > $4;
  if ($30) {
   $$7 = 4;
   return ($$7|0);
  }
  $$7 = 3;
  return ($$7|0);
  break;
 }
 case 2:  {
  $31 = $7 + $3;
  $32 = $31 < $5;
  $33 = $7 + $5;
  $34 = $33 < $4;
  $or$cond = $32 & $34;
  if ($or$cond) {
   $$7 = 3;
   return ($$7|0);
  } else {
   $35 = $31 <= $4;
   $36 = $7 + $5;
   $37 = $36 < $4;
   $or$cond3 = $35 & $37;
   $spec$select = $or$cond3 ? 4 : 2;
   return ($spec$select|0);
  }
  break;
 }
 case 7:  {
  $38 = ((($0)) + 4288|0);
  $39 = +HEAPF64[$38>>3];
  $40 = - $39;
  $41 = $15 < $40;
  if (!($41)) {
   $$7 = 7;
   return ($$7|0);
  }
  $$7 = 2;
  return ($$7|0);
  break;
 }
 default: {
  $$7 = $2;
  return ($$7|0);
 }
 }
 return (0)|0;
}
function _linkstatus($0) {
 $0 = $0|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$pre = 0, $$pre2 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $or$cond = 0, $switch = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 12|0);
 $2 = ((($0)) + 48|0);
 $3 = ((($0)) + 4256|0);
 $4 = ((($0)) + 4536|0);
 $5 = ((($0)) + 4272|0);
 $6 = ((($0)) + 4276|0);
 $7 = ((($0)) + 8|0);
 $8 = ((($0)) + 1228|0);
 $$0 = 1;$$01 = 0;
 while(1) {
  $9 = HEAP32[$1>>2]|0;
  $10 = ($$0|0)>($9|0);
  if ($10) {
   break;
  }
  $11 = HEAP32[$2>>2]|0;
  $12 = (((($11) + ($$0<<7)|0)) + 32|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (((($11) + ($$0<<7)|0)) + 36|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = HEAP32[$3>>2]|0;
  $17 = (($16) + ($13<<3)|0);
  $18 = +HEAPF64[$17>>3];
  $19 = (($16) + ($15<<3)|0);
  $20 = +HEAPF64[$19>>3];
  $21 = $18 - $20;
  $22 = HEAP32[$4>>2]|0;
  $23 = (($22) + ($$0<<2)|0);
  $24 = HEAP32[$23>>2]|0;
  $switch = ($24>>>0)<(2);
  if ($switch) {
   HEAP32[$23>>2] = 3;
  }
  $25 = (((($11) + ($$0<<7)|0)) + 104|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ($26|0)==(0);
  if ($27) {
   $28 = HEAP32[$4>>2]|0;
   $29 = (($28) + ($$0<<2)|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = HEAP32[$5>>2]|0;
   $32 = (($31) + ($$0<<3)|0);
   $33 = +HEAPF64[$32>>3];
   $34 = (_cvstatus($0,$30,$21,$33)|0);
   HEAP32[$29>>2] = $34;
   $$pre = HEAP32[$25>>2]|0;
   $36 = $$pre;
  } else {
   $36 = $26;
  }
  $35 = ($36|0)==(2);
  if ($35) {
   $37 = HEAP32[$4>>2]|0;
   $38 = (($37) + ($$0<<2)|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = ($39>>>0)>(2);
   if ($40) {
    $41 = HEAP32[$6>>2]|0;
    $42 = (($41) + ($$0<<3)|0);
    $43 = +HEAPF64[$42>>3];
    $44 = $43 > 0.0;
    if ($44) {
     $45 = - $21;
     $46 = (_pumpstatus($0,$$0,$45)|0);
     HEAP32[$38>>2] = $46;
     $$pre2 = HEAP32[$25>>2]|0;
     $48 = $$pre2;
     label = 11;
    }
   }
  } else {
   $48 = $36;
   label = 11;
  }
  if ((label|0) == 11) {
   label = 0;
   $47 = ($48|0)==(6);
   if ($47) {
    $49 = HEAP32[$6>>2]|0;
    $50 = (($49) + ($$0<<3)|0);
    $51 = +HEAPF64[$50>>3];
    $52 = $51 != -1.0E+10;
    if ($52) {
     $53 = HEAP32[$3>>2]|0;
     $54 = (($53) + ($13<<3)|0);
     $55 = +HEAPF64[$54>>3];
     $56 = (($53) + ($15<<3)|0);
     $57 = +HEAPF64[$56>>3];
     $58 = (_fcvstatus($0,$$0,$24,$55,$57)|0);
     $59 = HEAP32[$4>>2]|0;
     $60 = (($59) + ($$0<<2)|0);
     HEAP32[$60>>2] = $58;
    }
   }
  }
  $61 = HEAP32[$7>>2]|0;
  $62 = ($13|0)>($61|0);
  $63 = ($15|0)>($61|0);
  $or$cond = $62 | $63;
  if ($or$cond) {
   _tankstatus($0,$$0,$13,$15);
  }
  $64 = HEAP32[$4>>2]|0;
  $65 = (($64) + ($$0<<2)|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = ($24|0)==($66|0);
  if ($67) {
   $$1 = $$01;
  } else {
   $68 = HEAP32[$8>>2]|0;
   $69 = ($68|0)==(2);
   if ($69) {
    $70 = $24&255;
    $71 = $66&255;
    _writestatchange($0,$$0,$70,$71);
    $$1 = 1;
   } else {
    $$1 = 1;
   }
  }
  $72 = (($$0) + 1)|0;
  $$0 = $72;$$01 = $$1;
 }
 return ($$01|0);
}
function _cvstatus($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = +$3;
 var $$0 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $2 < 0.0;
 $5 = - $2;
 $6 = $4 ? $5 : $2;
 $7 = ((($0)) + 4280|0);
 $8 = +HEAPF64[$7>>3];
 $9 = $6 > $8;
 if ($9) {
  $10 = - $8;
  $11 = $10 > $2;
  if ($11) {
   $$0 = 2;
  } else {
   $12 = ((($0)) + 4288|0);
   $13 = +HEAPF64[$12>>3];
   $14 = - $13;
   $15 = $14 > $3;
   if ($15) {
    $$0 = 2;
   } else {
    $$0 = 3;
   }
  }
 } else {
  $16 = ((($0)) + 4288|0);
  $17 = +HEAPF64[$16>>3];
  $18 = - $17;
  $19 = $18 > $3;
  if ($19) {
   $$0 = 2;
  } else {
   $$0 = $1;
  }
 }
 return ($$0|0);
}
function _pumpstatus($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 var $$0 = 0, $$01 = 0.0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_findpump($0,$1)|0);
 $4 = ((($0)) + 56|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (((($5) + ($3<<7)|0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0);
 if ($8) {
  $$01 = 1.0E+10;
 } else {
  $9 = ((($0)) + 4276|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10) + ($1<<3)|0);
  $12 = +HEAPF64[$11>>3];
  $13 = $12 * $12;
  $14 = (((($5) + ($3<<7)|0)) + 24|0);
  $15 = +HEAPF64[$14>>3];
  $16 = $13 * $15;
  $$01 = $16;
 }
 $17 = ((($0)) + 4280|0);
 $18 = +HEAPF64[$17>>3];
 $19 = $$01 + $18;
 $20 = $19 < $2;
 $$0 = $20 ? 0 : 3;
 return ($$0|0);
}
function _fcvstatus($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 $4 = +$4;
 var $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $5 = $3 - $4;
 $6 = ((($0)) + 4280|0);
 $7 = +HEAPF64[$6>>3];
 $8 = - $7;
 $9 = $5 < $8;
 if ($9) {
  $$2 = 6;
  return ($$2|0);
 }
 $10 = ((($0)) + 4272|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + ($1<<3)|0);
 $13 = +HEAPF64[$12>>3];
 $14 = ((($0)) + 4288|0);
 $15 = +HEAPF64[$14>>3];
 $16 = - $15;
 $17 = $13 < $16;
 if ($17) {
  $$2 = 6;
  return ($$2|0);
 }
 $18 = ($2|0)==(6);
 if (!($18)) {
  $$2 = $2;
  return ($$2|0);
 }
 $19 = ((($0)) + 4276|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($20) + ($1<<3)|0);
 $22 = +HEAPF64[$21>>3];
 $23 = !($13 >= $22);
 if ($23) {
  $$2 = 6;
  return ($$2|0);
 }
 $$2 = 4;
 return ($$2|0);
}
function _tankstatus($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0.0, $$01 = 0, $$02 = 0, $$03 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 48|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 4536|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + ($1<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9>>>0)<(3);
 if ($10) {
  return;
 }
 $11 = ((($0)) + 4272|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + ($1<<3)|0);
 $14 = +HEAPF64[$13>>3];
 $15 = ((($0)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($2) - ($16))|0;
 $18 = ($17|0)<(1);
 do {
  if ($18) {
   $19 = (($3) - ($16))|0;
   $20 = ($19|0)<(1);
   if ($20) {
    return;
   } else {
    $21 = - $14;
    $$0 = $21;$$01 = $19;$$02 = $3;$$03 = $2;
    break;
   }
  } else {
   $$0 = $14;$$01 = $17;$$02 = $2;$$03 = $3;
  }
 } while(0);
 $22 = ((($0)) + 52|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (((($23) + (($$01*120)|0)|0)) + 8|0);
 $25 = +HEAPF64[$24>>3];
 $26 = $25 == 0.0;
 if ($26) {
  return;
 }
 $27 = ((($0)) + 4256|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($28) + ($$02<<3)|0);
 $30 = +HEAPF64[$29>>3];
 $31 = (($28) + ($$03<<3)|0);
 $32 = +HEAPF64[$31>>3];
 $33 = $30 - $32;
 $34 = (((($23) + (($$01*120)|0)|0)) + 24|0);
 $35 = +HEAPF64[$34>>3];
 $36 = ((($0)) + 4280|0);
 $37 = +HEAPF64[$36>>3];
 $38 = $35 - $37;
 $39 = !($30 >= $38);
 do {
  if (!($39)) {
   $40 = (((($23) + (($$01*120)|0)|0)) + 112|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = ($41|0)==(0);
   if ($42) {
    $43 = (((($5) + ($1<<7)|0)) + 104|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = ($44|0)==(2);
    if ($45) {
     $46 = (((($5) + ($1<<7)|0)) + 36|0);
     $47 = HEAP32[$46>>2]|0;
     $48 = ($47|0)==($$02|0);
     if (!($48)) {
      break;
     }
     HEAP32[$8>>2] = 1;
     break;
    } else {
     $49 = (_cvstatus($0,3,$33,$$0)|0);
     $50 = ($49|0)==(2);
     if (!($50)) {
      break;
     }
     HEAP32[$8>>2] = 1;
     break;
    }
   }
  }
 } while(0);
 $51 = HEAP32[$27>>2]|0;
 $52 = (($51) + ($$02<<3)|0);
 $53 = +HEAPF64[$52>>3];
 $54 = (((($23) + (($$01*120)|0)|0)) + 16|0);
 $55 = +HEAPF64[$54>>3];
 $56 = +HEAPF64[$36>>3];
 $57 = $55 + $56;
 $58 = !($53 <= $57);
 if ($58) {
  return;
 }
 $59 = (((($5) + ($1<<7)|0)) + 104|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = ($60|0)==(2);
 if ($61) {
  $62 = (((($5) + ($1<<7)|0)) + 32|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = ($63|0)==($$02|0);
  if (!($64)) {
   return;
  }
  $65 = HEAP32[$6>>2]|0;
  $66 = (($65) + ($1<<2)|0);
  HEAP32[$66>>2] = 1;
  return;
 } else {
  $67 = (_cvstatus($0,2,$33,$$0)|0);
  $68 = ($67|0)==(3);
  if (!($68)) {
   return;
  }
  $69 = HEAP32[$6>>2]|0;
  $70 = (($69) + ($1<<2)|0);
  HEAP32[$70>>2] = 1;
  return;
 }
}
function _saveauxdata($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$02$ph = 0, $$2 = 0, $$idx = 0, $$idx$val = 0, $$idx4 = 0, $$idx4$val = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2080|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(2080|0);
 $vararg_buffer = sp + 2072|0;
 $2 = sp + 1040|0;
 $3 = sp;
 $4 = ((($0)) + 92|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = ((($0)) + 128|0);
  $8 = (_fopen($7,8704)|0);
  $9 = ($8|0)==(0|0);
  if ($9) {
   STACKTOP = sp;return;
  } else {
   $$0 = $8;
  }
 } else {
  $$0 = $5;
 }
 _rewind($$0);
 $$idx = ((($0)) + 80|0);
 $$idx4 = ((($0)) + 84|0);
 $$02$ph = -1;
 L5: while(1) {
  while(1) {
   $10 = (_fgets($2,1024,$$0)|0);
   $11 = ($10|0)==(0|0);
   if ($11) {
    break L5;
   }
   (_strcpy($3,$2)|0);
   $12 = (_strtok($3,8079)|0);
   $13 = ($12|0)==(0|0);
   if (!($13)) {
    break;
   }
  }
  $14 = HEAP8[$12>>0]|0;
  $15 = ($14<<24>>24)==(91);
  L12: do {
   if ($15) {
    $16 = (_findmatch($12,304)|0);
    $17 = ($16|0)>(-1);
    if ($17) {
     switch ($16|0) {
     case 28:  {
      break L5;
      break;
     }
     case 27: case 26: case 25:  {
      break;
     }
     default: {
      $$2 = $16;
      break L12;
     }
     }
     HEAP32[$vararg_buffer>>2] = $2;
     (_fprintf($1,14966,$vararg_buffer)|0);
     $$2 = $16;
    } else {
     $$2 = $$02$ph;
    }
   } else {
    L17: do {
     switch ($$02$ph|0) {
     case 27:  {
      $18 = ($14<<24>>24)==(59);
      if (!($18)) {
       $19 = (_match(14388,$12)|0);
       $20 = ($19|0)==(0);
       if (!($20)) {
        $21 = (_strtok(0,8079)|0);
        $$idx$val = HEAP32[$$idx>>2]|0;
        $22 = (_findnode($$idx$val,$21)|0);
        $23 = ($22|0)==(0);
        if (!($23)) {
         break L17;
        }
       }
       $24 = (_match(14393,$12)|0);
       $25 = ($24|0)==(0);
       if ($25) {
        $$2 = 27;
        break L12;
       }
       $26 = (_strtok(0,8079)|0);
       $$idx4$val = HEAP32[$$idx4>>2]|0;
       $27 = (_findlink($$idx4$val,$26)|0);
       $28 = ($27|0)==(0);
       if ($28) {
        $$2 = 27;
        break L12;
       }
      }
      break;
     }
     case 26: case 25:  {
      break;
     }
     default: {
      $$2 = $$02$ph;
      break L12;
     }
     }
    } while(0);
    _fputs($2,$1);
    $$2 = $$02$ph;
   }
  } while(0);
  $$02$ph = $$2;
 }
 _fclose($$0);
 STACKTOP = sp;return;
}
function _saveinpfile($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$0 = 0, $$01 = 0, $$01$in = 0, $$02 = 0.0, $$03 = 0, $$09 = 0, $$1 = 0.0, $$10 = 0, $$11 = 0, $$110 = 0, $$12 = 0, $$13 = 0, $$14 = 0, $$148 = 0, $$15 = 0, $$16 = 0, $$17 = 0, $$18 = 0, $$19 = 0;
 var $$2 = 0.0, $$20 = 0, $$21 = 0, $$211 = 0, $$22 = 0, $$23 = 0, $$24 = 0, $$25 = 0, $$3 = 0.0, $$312 = 0, $$36 = 0, $$4 = 0.0, $$413 = 0, $$47 = 0, $$5 = 0, $$514 = 0, $$6 = 0, $$615 = 0, $$7 = 0, $$8 = 0;
 var $$9 = 0, $$in = 0.0, $$in$v = 0.0, $$pn = 0.0, $$pre = 0, $$pre$phiZ2D = 0, $$pre20 = 0, $$pre21 = 0, $$pre22 = 0, $$pre23 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0.0, $116 = 0, $117 = 0.0, $118 = 0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0, $124 = 0.0, $125 = 0.0, $126 = 0.0;
 var $127 = 0.0, $128 = 0.0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0.0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0.0, $18 = 0, $180 = 0.0;
 var $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0, $185 = 0.0, $186 = 0, $187 = 0.0, $188 = 0, $189 = 0.0, $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0, $197 = 0.0, $198 = 0.0, $199 = 0;
 var $2 = 0, $20 = 0.0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0.0, $208 = 0, $209 = 0, $21 = 0.0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0;
 var $217 = 0, $218 = 0, $219 = 0, $22 = 0.0, $220 = 0, $221 = 0, $222 = 0, $223 = 0.0, $224 = 0, $225 = 0.0, $226 = 0, $227 = 0, $228 = 0, $229 = 0.0, $23 = 0, $230 = 0.0, $231 = 0.0, $232 = 0.0, $233 = 0, $234 = 0.0;
 var $235 = 0.0, $236 = 0.0, $237 = 0.0, $238 = 0.0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0.0, $248 = 0.0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0;
 var $253 = 0.0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0.0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0;
 var $271 = 0.0, $272 = 0.0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0.0, $289 = 0;
 var $29 = 0, $290 = 0.0, $291 = 0.0, $292 = 0.0, $293 = 0.0, $294 = 0.0, $295 = 0.0, $296 = 0.0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0;
 var $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0.0, $32 = 0, $320 = 0, $321 = 0, $322 = 0.0, $323 = 0, $324 = 0;
 var $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0.0, $340 = 0, $341 = 0, $342 = 0;
 var $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0.0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0;
 var $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0.0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0.0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0;
 var $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0.0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0.0, $394 = 0.0, $395 = 0.0, $396 = 0.0, $397 = 0;
 var $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0.0, $404 = 0, $405 = 0.0, $406 = 0.0, $407 = 0, $408 = 0, $409 = 0, $41 = 0.0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0.0;
 var $415 = 0.0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0.0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0.0, $430 = 0, $431 = 0, $432 = 0.0;
 var $433 = 0, $434 = 0, $435 = 0.0, $436 = 0.0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0.0, $45 = 0, $450 = 0;
 var $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0.0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0;
 var $47 = 0, $470 = 0, $471 = 0.0, $472 = 0, $473 = 0.0, $474 = 0.0, $475 = 0, $476 = 0, $477 = 0.0, $478 = 0, $479 = 0.0, $48 = 0, $480 = 0, $481 = 0.0, $482 = 0, $483 = 0.0, $484 = 0.0, $485 = 0, $486 = 0.0, $487 = 0.0;
 var $488 = 0, $489 = 0.0, $49 = 0, $490 = 0, $491 = 0.0, $492 = 0.0, $493 = 0, $494 = 0.0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0;
 var $505 = 0.0, $506 = 0.0, $507 = 0, $508 = 0.0, $509 = 0, $51 = 0, $510 = 0.0, $511 = 0.0, $512 = 0, $513 = 0.0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0.0, $52 = 0, $520 = 0, $521 = 0, $522 = 0.0;
 var $523 = 0.0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0.0, $53 = 0, $530 = 0, $531 = 0, $532 = 0.0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0.0;
 var $541 = 0, $542 = 0.0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0.0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0;
 var $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0;
 var $578 = 0, $579 = 0, $58 = 0.0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0;
 var $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0;
 var $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0.0, $629 = 0.0, $63 = 0, $630 = 0.0;
 var $631 = 0, $632 = 0.0, $633 = 0.0, $634 = 0, $635 = 0.0, $636 = 0.0, $637 = 0, $638 = 0.0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0.0, $643 = 0, $644 = 0.0, $645 = 0.0, $646 = 0.0, $647 = 0, $648 = 0, $649 = 0;
 var $65 = 0.0, $650 = 0, $651 = 0, $652 = 0.0, $653 = 0, $654 = 0.0, $655 = 0, $656 = 0.0, $657 = 0.0, $658 = 0, $659 = 0.0, $66 = 0.0, $660 = 0, $661 = 0.0, $662 = 0.0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0.0;
 var $668 = 0.0, $669 = 0.0, $67 = 0.0, $670 = 0, $671 = 0.0, $672 = 0.0, $673 = 0.0, $674 = 0, $675 = 0.0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0;
 var $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0.0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0.0, $700 = 0, $701 = 0, $702 = 0;
 var $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0.0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0;
 var $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0.0, $730 = 0.0, $731 = 0, $732 = 0, $733 = 0.0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0;
 var $74 = 0.0, $740 = 0.0, $741 = 0, $742 = 0, $743 = 0.0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0.0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0;
 var $758 = 0, $759 = 0, $76 = 0, $760 = 0.0, $761 = 0, $762 = 0, $763 = 0, $764 = 0.0, $765 = 0, $766 = 0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0.0;
 var $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond24 = 0, $leninc = 0, $leninc17 = 0, $or$cond = 0;
 var $strlen = 0, $strlen16 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer103 = 0, $vararg_buffer106 = 0, $vararg_buffer110 = 0, $vararg_buffer113 = 0, $vararg_buffer117 = 0, $vararg_buffer12 = 0, $vararg_buffer120 = 0, $vararg_buffer124 = 0, $vararg_buffer128 = 0, $vararg_buffer132 = 0, $vararg_buffer136 = 0, $vararg_buffer140 = 0, $vararg_buffer143 = 0, $vararg_buffer146 = 0, $vararg_buffer149 = 0, $vararg_buffer15 = 0;
 var $vararg_buffer152 = 0, $vararg_buffer157 = 0, $vararg_buffer161 = 0, $vararg_buffer165 = 0, $vararg_buffer171 = 0, $vararg_buffer176 = 0, $vararg_buffer181 = 0, $vararg_buffer184 = 0, $vararg_buffer188 = 0, $vararg_buffer19 = 0, $vararg_buffer193 = 0, $vararg_buffer197 = 0, $vararg_buffer202 = 0, $vararg_buffer205 = 0, $vararg_buffer208 = 0, $vararg_buffer211 = 0, $vararg_buffer214 = 0, $vararg_buffer217 = 0, $vararg_buffer22 = 0, $vararg_buffer220 = 0;
 var $vararg_buffer223 = 0, $vararg_buffer227 = 0, $vararg_buffer231 = 0, $vararg_buffer235 = 0, $vararg_buffer238 = 0, $vararg_buffer241 = 0, $vararg_buffer244 = 0, $vararg_buffer247 = 0, $vararg_buffer251 = 0, $vararg_buffer255 = 0, $vararg_buffer259 = 0, $vararg_buffer262 = 0, $vararg_buffer265 = 0, $vararg_buffer268 = 0, $vararg_buffer271 = 0, $vararg_buffer274 = 0, $vararg_buffer277 = 0, $vararg_buffer280 = 0, $vararg_buffer283 = 0, $vararg_buffer286 = 0;
 var $vararg_buffer289 = 0, $vararg_buffer292 = 0, $vararg_buffer295 = 0, $vararg_buffer298 = 0, $vararg_buffer301 = 0, $vararg_buffer304 = 0, $vararg_buffer307 = 0, $vararg_buffer31 = 0, $vararg_buffer311 = 0, $vararg_buffer314 = 0, $vararg_buffer317 = 0, $vararg_buffer320 = 0, $vararg_buffer323 = 0, $vararg_buffer326 = 0, $vararg_buffer329 = 0, $vararg_buffer332 = 0, $vararg_buffer335 = 0, $vararg_buffer338 = 0, $vararg_buffer341 = 0, $vararg_buffer344 = 0;
 var $vararg_buffer347 = 0, $vararg_buffer35 = 0, $vararg_buffer350 = 0, $vararg_buffer353 = 0, $vararg_buffer356 = 0, $vararg_buffer359 = 0, $vararg_buffer362 = 0, $vararg_buffer365 = 0, $vararg_buffer368 = 0, $vararg_buffer371 = 0, $vararg_buffer374 = 0, $vararg_buffer377 = 0, $vararg_buffer38 = 0, $vararg_buffer380 = 0, $vararg_buffer383 = 0, $vararg_buffer386 = 0, $vararg_buffer390 = 0, $vararg_buffer394 = 0, $vararg_buffer398 = 0, $vararg_buffer401 = 0;
 var $vararg_buffer406 = 0, $vararg_buffer411 = 0, $vararg_buffer47 = 0, $vararg_buffer5 = 0, $vararg_buffer51 = 0, $vararg_buffer54 = 0, $vararg_buffer59 = 0, $vararg_buffer62 = 0, $vararg_buffer69 = 0, $vararg_buffer72 = 0, $vararg_buffer75 = 0, $vararg_buffer78 = 0, $vararg_buffer8 = 0, $vararg_buffer81 = 0, $vararg_buffer84 = 0, $vararg_buffer91 = 0, $vararg_buffer95 = 0, $vararg_buffer99 = 0, $vararg_ptr102 = 0, $vararg_ptr109 = 0;
 var $vararg_ptr11 = 0, $vararg_ptr116 = 0, $vararg_ptr123 = 0, $vararg_ptr127 = 0, $vararg_ptr131 = 0, $vararg_ptr135 = 0, $vararg_ptr139 = 0, $vararg_ptr155 = 0, $vararg_ptr156 = 0, $vararg_ptr160 = 0, $vararg_ptr164 = 0, $vararg_ptr168 = 0, $vararg_ptr169 = 0, $vararg_ptr170 = 0, $vararg_ptr174 = 0, $vararg_ptr175 = 0, $vararg_ptr179 = 0, $vararg_ptr18 = 0, $vararg_ptr180 = 0, $vararg_ptr187 = 0;
 var $vararg_ptr191 = 0, $vararg_ptr192 = 0, $vararg_ptr196 = 0, $vararg_ptr200 = 0, $vararg_ptr201 = 0, $vararg_ptr226 = 0, $vararg_ptr230 = 0, $vararg_ptr234 = 0, $vararg_ptr25 = 0, $vararg_ptr250 = 0, $vararg_ptr254 = 0, $vararg_ptr258 = 0, $vararg_ptr26 = 0, $vararg_ptr27 = 0, $vararg_ptr28 = 0, $vararg_ptr29 = 0, $vararg_ptr30 = 0, $vararg_ptr310 = 0, $vararg_ptr34 = 0, $vararg_ptr389 = 0;
 var $vararg_ptr393 = 0, $vararg_ptr397 = 0, $vararg_ptr4 = 0, $vararg_ptr404 = 0, $vararg_ptr405 = 0, $vararg_ptr409 = 0, $vararg_ptr41 = 0, $vararg_ptr410 = 0, $vararg_ptr42 = 0, $vararg_ptr43 = 0, $vararg_ptr44 = 0, $vararg_ptr45 = 0, $vararg_ptr46 = 0, $vararg_ptr50 = 0, $vararg_ptr57 = 0, $vararg_ptr58 = 0, $vararg_ptr65 = 0, $vararg_ptr66 = 0, $vararg_ptr67 = 0, $vararg_ptr68 = 0;
 var $vararg_ptr87 = 0, $vararg_ptr88 = 0, $vararg_ptr89 = 0, $vararg_ptr90 = 0, $vararg_ptr94 = 0, $vararg_ptr98 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4416|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(4416|0);
 $vararg_buffer411 = sp + 4400|0;
 $vararg_buffer406 = sp + 4376|0;
 $vararg_buffer401 = sp + 4352|0;
 $vararg_buffer398 = sp + 4344|0;
 $vararg_buffer394 = sp + 4328|0;
 $vararg_buffer390 = sp + 4312|0;
 $vararg_buffer386 = sp + 4304|0;
 $vararg_buffer383 = sp + 4296|0;
 $vararg_buffer380 = sp + 4288|0;
 $vararg_buffer377 = sp + 4280|0;
 $vararg_buffer374 = sp + 4272|0;
 $vararg_buffer371 = sp + 4264|0;
 $vararg_buffer368 = sp + 4256|0;
 $vararg_buffer365 = sp + 4248|0;
 $vararg_buffer362 = sp + 4240|0;
 $vararg_buffer359 = sp + 4232|0;
 $vararg_buffer356 = sp + 4224|0;
 $vararg_buffer353 = sp + 4216|0;
 $vararg_buffer350 = sp + 4208|0;
 $vararg_buffer347 = sp + 4200|0;
 $vararg_buffer344 = sp + 4192|0;
 $vararg_buffer341 = sp + 4184|0;
 $vararg_buffer338 = sp + 4176|0;
 $vararg_buffer335 = sp + 4168|0;
 $vararg_buffer332 = sp + 4160|0;
 $vararg_buffer329 = sp + 4152|0;
 $vararg_buffer326 = sp + 4144|0;
 $vararg_buffer323 = sp + 4136|0;
 $vararg_buffer320 = sp + 4128|0;
 $vararg_buffer317 = sp + 4120|0;
 $vararg_buffer314 = sp + 4112|0;
 $vararg_buffer311 = sp + 4104|0;
 $vararg_buffer307 = sp + 4096|0;
 $vararg_buffer304 = sp + 4088|0;
 $vararg_buffer301 = sp + 4080|0;
 $vararg_buffer298 = sp + 4072|0;
 $vararg_buffer295 = sp + 4064|0;
 $vararg_buffer292 = sp + 4056|0;
 $vararg_buffer289 = sp + 4048|0;
 $vararg_buffer286 = sp + 4040|0;
 $vararg_buffer283 = sp + 4032|0;
 $vararg_buffer280 = sp + 4024|0;
 $vararg_buffer277 = sp + 4016|0;
 $vararg_buffer274 = sp + 4008|0;
 $vararg_buffer271 = sp + 4000|0;
 $vararg_buffer268 = sp + 3992|0;
 $vararg_buffer265 = sp + 3984|0;
 $vararg_buffer262 = sp + 3976|0;
 $vararg_buffer259 = sp + 3968|0;
 $vararg_buffer255 = sp + 3960|0;
 $vararg_buffer251 = sp + 3952|0;
 $vararg_buffer247 = sp + 3936|0;
 $vararg_buffer244 = sp + 3928|0;
 $vararg_buffer241 = sp + 3920|0;
 $vararg_buffer238 = sp + 3912|0;
 $vararg_buffer235 = sp + 3904|0;
 $vararg_buffer231 = sp + 3888|0;
 $vararg_buffer227 = sp + 3872|0;
 $vararg_buffer223 = sp + 3856|0;
 $vararg_buffer220 = sp + 3848|0;
 $vararg_buffer217 = sp + 3840|0;
 $vararg_buffer214 = sp + 3832|0;
 $vararg_buffer211 = sp + 3824|0;
 $vararg_buffer208 = sp + 3816|0;
 $vararg_buffer205 = sp + 3808|0;
 $vararg_buffer202 = sp + 3800|0;
 $vararg_buffer197 = sp + 3784|0;
 $vararg_buffer193 = sp + 3776|0;
 $vararg_buffer188 = sp + 3760|0;
 $vararg_buffer184 = sp + 3744|0;
 $vararg_buffer181 = sp + 3736|0;
 $vararg_buffer176 = sp + 3720|0;
 $vararg_buffer171 = sp + 3704|0;
 $vararg_buffer165 = sp + 3680|0;
 $vararg_buffer161 = sp + 3664|0;
 $vararg_buffer157 = sp + 3656|0;
 $vararg_buffer152 = sp + 3632|0;
 $vararg_buffer149 = sp + 3624|0;
 $vararg_buffer146 = sp + 3616|0;
 $vararg_buffer143 = sp + 3608|0;
 $vararg_buffer140 = sp + 3600|0;
 $vararg_buffer136 = sp + 3592|0;
 $vararg_buffer132 = sp + 3584|0;
 $vararg_buffer128 = sp + 3568|0;
 $vararg_buffer124 = sp + 3560|0;
 $vararg_buffer120 = sp + 3544|0;
 $vararg_buffer117 = sp + 3536|0;
 $vararg_buffer113 = sp + 3528|0;
 $vararg_buffer110 = sp + 3520|0;
 $vararg_buffer106 = sp + 3504|0;
 $vararg_buffer103 = sp + 3496|0;
 $vararg_buffer99 = sp + 3488|0;
 $vararg_buffer95 = sp + 3472|0;
 $vararg_buffer91 = sp + 3456|0;
 $vararg_buffer84 = sp + 3424|0;
 $vararg_buffer81 = sp + 3416|0;
 $vararg_buffer78 = sp + 3408|0;
 $vararg_buffer75 = sp + 3400|0;
 $vararg_buffer72 = sp + 3392|0;
 $vararg_buffer69 = sp + 3384|0;
 $vararg_buffer62 = sp + 3344|0;
 $vararg_buffer59 = sp + 3336|0;
 $vararg_buffer54 = sp + 3320|0;
 $vararg_buffer51 = sp + 3312|0;
 $vararg_buffer47 = sp + 3304|0;
 $vararg_buffer38 = sp + 3256|0;
 $vararg_buffer35 = sp + 3248|0;
 $vararg_buffer31 = sp + 3240|0;
 $vararg_buffer22 = sp + 3184|0;
 $vararg_buffer19 = sp + 3176|0;
 $vararg_buffer15 = sp + 3168|0;
 $vararg_buffer12 = sp + 3160|0;
 $vararg_buffer8 = sp + 3144|0;
 $vararg_buffer5 = sp + 3136|0;
 $vararg_buffer1 = sp + 3120|0;
 $vararg_buffer = sp + 3112|0;
 $2 = sp + 2080|0;
 $3 = sp + 1040|0;
 $4 = sp;
 $5 = ((($0)) + 3664|0);
 $6 = (_fopen($1,11010)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  $$0 = 302;
  STACKTOP = sp;return ($$0|0);
 }
 (_fwrite(5263,7,1,$6)|0);
 $$03 = 0;
 while(1) {
  $exitcond24 = ($$03|0)==(3);
  if ($exitcond24) {
   break;
  }
  $8 = (((($0)) + 5336|0) + (($$03*80)|0)|0);
  $9 = (_strlen($8)|0);
  $10 = ($9|0)==(0);
  if (!($10)) {
   HEAP32[$vararg_buffer>>2] = $8;
   (_fprintf($6,14966,$vararg_buffer)|0);
  }
  $11 = (($$03) + 1)|0;
  $$03 = $11;
 }
 (_fwrite(5271,2,1,$6)|0);
 (_fwrite(5274,11,1,$6)|0);
 $12 = ((($0)) + 8|0);
 $13 = ((($0)) + 44|0);
 $14 = ((($0)) + 4904|0);
 $$14 = 1;
 while(1) {
  $15 = HEAP32[$12>>2]|0;
  $16 = ($$14|0)>($15|0);
  if ($16) {
   break;
  }
  $17 = HEAP32[$13>>2]|0;
  $18 = (($17) + (($$14*96)|0)|0);
  $19 = (((($17) + (($$14*96)|0)|0)) + 48|0);
  $20 = +HEAPF64[$19>>3];
  $21 = +HEAPF64[$14>>3];
  $22 = $20 * $21;
  HEAP32[$vararg_buffer1>>2] = $18;
  $vararg_ptr4 = ((($vararg_buffer1)) + 8|0);
  HEAPF64[$vararg_ptr4>>3] = $22;
  (_fprintf($6,5286,$vararg_buffer1)|0);
  $23 = (((($17) + (($$14*96)|0)|0)) + 92|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($24|0)==(0|0);
  if (!($25)) {
   HEAP32[$vararg_buffer5>>2] = $24;
   (_fprintf($6,5301,$vararg_buffer5)|0);
  }
  $26 = (($$14) + 1)|0;
  $$14 = $26;
 }
 (_fwrite(5271,2,1,$6)|0);
 (_fwrite(5307,12,1,$6)|0);
 $27 = ((($0)) + 4|0);
 $28 = ((($0)) + 52|0);
 $29 = ((($0)) + 64|0);
 $$25 = 1;
 while(1) {
  $30 = HEAP32[$27>>2]|0;
  $31 = ($$25|0)>($30|0);
  if ($31) {
   break;
  }
  $32 = HEAP32[$28>>2]|0;
  $33 = (((($32) + (($$25*120)|0)|0)) + 8|0);
  $34 = +HEAPF64[$33>>3];
  $35 = $34 == 0.0;
  if ($35) {
   $36 = HEAP32[$13>>2]|0;
   $37 = (($32) + (($$25*120)|0)|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = (($36) + (($38*96)|0)|0);
   $40 = (((($36) + (($38*96)|0)|0)) + 48|0);
   $41 = +HEAPF64[$40>>3];
   $42 = +HEAPF64[$14>>3];
   $43 = $41 * $42;
   HEAP32[$vararg_buffer8>>2] = $39;
   $vararg_ptr11 = ((($vararg_buffer8)) + 8|0);
   HEAPF64[$vararg_ptr11>>3] = $43;
   _sprintf($2,5320,$vararg_buffer8);
   $44 = (((($32) + (($$25*120)|0)|0)) + 88|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = ($45|0)>(0);
   if ($46) {
    $47 = HEAP32[$29>>2]|0;
    $48 = (($47) + (($45*44)|0)|0);
    HEAP32[$vararg_buffer12>>2] = $48;
    _sprintf($3,5334,$vararg_buffer12);
   } else {
    (_strcpy($3,14809)|0);
   }
   HEAP32[$vararg_buffer15>>2] = $2;
   $vararg_ptr18 = ((($vararg_buffer15)) + 4|0);
   HEAP32[$vararg_ptr18>>2] = $3;
   (_fprintf($6,5338,$vararg_buffer15)|0);
   $49 = (((($36) + (($38*96)|0)|0)) + 92|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = ($50|0)==(0|0);
   if (!($51)) {
    HEAP32[$vararg_buffer19>>2] = $50;
    (_fprintf($6,5348,$vararg_buffer19)|0);
   }
  }
  $52 = (($$25) + 1)|0;
  $$25 = $52;
 }
 (_fwrite(5271,2,1,$6)|0);
 (_fwrite(5353,7,1,$6)|0);
 $53 = ((($0)) + 68|0);
 $$36 = 1;
 while(1) {
  $54 = HEAP32[$27>>2]|0;
  $55 = ($$36|0)>($54|0);
  if ($55) {
   break;
  }
  $56 = HEAP32[$28>>2]|0;
  $57 = (((($56) + (($$36*120)|0)|0)) + 8|0);
  $58 = +HEAPF64[$57>>3];
  $59 = $58 > 0.0;
  if ($59) {
   $60 = HEAP32[$13>>2]|0;
   $61 = (($56) + (($$36*120)|0)|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = (($60) + (($62*96)|0)|0);
   $64 = (((($60) + (($62*96)|0)|0)) + 48|0);
   $65 = +HEAPF64[$64>>3];
   $66 = +HEAPF64[$14>>3];
   $67 = $65 * $66;
   $68 = (((($56) + (($$36*120)|0)|0)) + 32|0);
   $69 = +HEAPF64[$68>>3];
   $70 = $69 - $65;
   $71 = $70 * $66;
   $72 = (((($56) + (($$36*120)|0)|0)) + 16|0);
   $73 = +HEAPF64[$72>>3];
   $74 = $73 - $65;
   $75 = $74 * $66;
   $76 = (((($56) + (($$36*120)|0)|0)) + 24|0);
   $77 = +HEAPF64[$76>>3];
   $78 = $77 - $65;
   $79 = $78 * $66;
   $80 = $58 * 4.0;
   $81 = $80 / 3.1415926535897931;
   $82 = (+Math_sqrt((+$81)));
   $83 = $82 * $66;
   $84 = (((($56) + (($$36*120)|0)|0)) + 40|0);
   $85 = +HEAPF64[$84>>3];
   $86 = $66 * $66;
   $87 = $85 * $86;
   $88 = $87 * $66;
   HEAP32[$vararg_buffer22>>2] = $63;
   $vararg_ptr25 = ((($vararg_buffer22)) + 8|0);
   HEAPF64[$vararg_ptr25>>3] = $67;
   $vararg_ptr26 = ((($vararg_buffer22)) + 16|0);
   HEAPF64[$vararg_ptr26>>3] = $71;
   $vararg_ptr27 = ((($vararg_buffer22)) + 24|0);
   HEAPF64[$vararg_ptr27>>3] = $75;
   $vararg_ptr28 = ((($vararg_buffer22)) + 32|0);
   HEAPF64[$vararg_ptr28>>3] = $79;
   $vararg_ptr29 = ((($vararg_buffer22)) + 40|0);
   HEAPF64[$vararg_ptr29>>3] = $83;
   $vararg_ptr30 = ((($vararg_buffer22)) + 48|0);
   HEAPF64[$vararg_ptr30>>3] = $88;
   _sprintf($2,5361,$vararg_buffer22);
   $89 = (((($56) + (($$36*120)|0)|0)) + 92|0);
   $90 = HEAP32[$89>>2]|0;
   $91 = ($90|0)>(0);
   do {
    if ($91) {
     $92 = HEAP32[$53>>2]|0;
     $93 = (($92) + (($90*56)|0)|0);
     $strlen16 = (_strlen($93)|0);
     $leninc17 = (($strlen16) + 1)|0;
     _memcpy(($3|0),($93|0),($leninc17|0))|0;
     $$pre23 = (((($56) + (($$36*120)|0)|0)) + 112|0);
     $$pre$phiZ2D = $$pre23;
    } else {
     $94 = (((($56) + (($$36*120)|0)|0)) + 112|0);
     $95 = HEAP32[$94>>2]|0;
     $96 = ($95|0)==(0);
     if ($96) {
      (_strcpy($3,14809)|0);
      $$pre$phiZ2D = $94;
      break;
     } else {
      (_strcpy($3,8272)|0);
      $$pre$phiZ2D = $94;
      break;
     }
    }
   } while(0);
   HEAP32[$vararg_buffer31>>2] = $2;
   $vararg_ptr34 = ((($vararg_buffer31)) + 4|0);
   HEAP32[$vararg_ptr34>>2] = $3;
   (_fprintf($6,5338,$vararg_buffer31)|0);
   $97 = HEAP32[$$pre$phiZ2D>>2]|0;
   $98 = ($97|0)==(0);
   if (!($98)) {
    (_fwrite(5410,7,1,$6)|0);
   }
   $99 = (((($60) + (($62*96)|0)|0)) + 92|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = ($100|0)==(0|0);
   if (!($101)) {
    HEAP32[$vararg_buffer35>>2] = $100;
    (_fprintf($6,5348,$vararg_buffer35)|0);
   }
  }
  $102 = (($$36) + 1)|0;
  $$36 = $102;
 }
 (_fwrite(5271,2,1,$6)|0);
 (_fwrite(5418,7,1,$6)|0);
 $103 = ((($0)) + 12|0);
 $104 = ((($0)) + 48|0);
 $105 = ((($0)) + 4500|0);
 $106 = ((($0)) + 4944|0);
 $107 = ((($0)) + 4952|0);
 $$47 = 1;
 while(1) {
  $108 = HEAP32[$103>>2]|0;
  $109 = ($$47|0)>($108|0);
  if ($109) {
   break;
  }
  $110 = HEAP32[$104>>2]|0;
  $111 = (((($110) + ($$47<<7)|0)) + 104|0);
  $112 = HEAP32[$111>>2]|0;
  $113 = ($112>>>0)<(2);
  if ($113) {
   $114 = (((($110) + ($$47<<7)|0)) + 40|0);
   $115 = +HEAPF64[$114>>3];
   $116 = (((($110) + ($$47<<7)|0)) + 56|0);
   $117 = +HEAPF64[$116>>3];
   $118 = HEAP32[$105>>2]|0;
   $119 = ($118|0)==(1);
   if ($119) {
    $120 = +HEAPF64[$14>>3];
    $121 = $117 * $120;
    $122 = $121 * 1000.0;
    $$02 = $122;
   } else {
    $$02 = $117;
   }
   $123 = (((($110) + ($$47<<7)|0)) + 64|0);
   $124 = +HEAPF64[$123>>3];
   $125 = $115 * $115;
   $126 = $124 * $125;
   $127 = $126 * $125;
   $128 = $127 / 0.025170000000000001;
   $129 = (($110) + ($$47<<7)|0);
   $130 = HEAP32[$13>>2]|0;
   $131 = (((($110) + ($$47<<7)|0)) + 32|0);
   $132 = HEAP32[$131>>2]|0;
   $133 = (($130) + (($132*96)|0)|0);
   $134 = (((($110) + ($$47<<7)|0)) + 36|0);
   $135 = HEAP32[$134>>2]|0;
   $136 = (($130) + (($135*96)|0)|0);
   $137 = (((($110) + ($$47<<7)|0)) + 48|0);
   $138 = +HEAPF64[$137>>3];
   $139 = +HEAPF64[$106>>3];
   $140 = $138 * $139;
   $141 = +HEAPF64[$107>>3];
   $142 = $115 * $141;
   HEAP32[$vararg_buffer38>>2] = $129;
   $vararg_ptr41 = ((($vararg_buffer38)) + 4|0);
   HEAP32[$vararg_ptr41>>2] = $133;
   $vararg_ptr42 = ((($vararg_buffer38)) + 8|0);
   HEAP32[$vararg_ptr42>>2] = $136;
   $vararg_ptr43 = ((($vararg_buffer38)) + 16|0);
   HEAPF64[$vararg_ptr43>>3] = $140;
   $vararg_ptr44 = ((($vararg_buffer38)) + 24|0);
   HEAPF64[$vararg_ptr44>>3] = $142;
   $vararg_ptr45 = ((($vararg_buffer38)) + 32|0);
   HEAPF64[$vararg_ptr45>>3] = $$02;
   $vararg_ptr46 = ((($vararg_buffer38)) + 40|0);
   HEAPF64[$vararg_ptr46>>3] = $128;
   _sprintf($2,5426,$vararg_buffer38);
   $143 = HEAP32[$111>>2]|0;
   $144 = ($143|0)==(0);
   do {
    if ($144) {
     ;HEAP8[$4>>0]=HEAP8[8199>>0]|0;HEAP8[$4+1>>0]=HEAP8[8199+1>>0]|0;HEAP8[$4+2>>0]=HEAP8[8199+2>>0]|0;
    } else {
     $145 = (((($110) + ($$47<<7)|0)) + 108|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = ($146|0)==(2);
     if ($147) {
      ;HEAP8[$4>>0]=HEAP8[14449>>0]|0;HEAP8[$4+1>>0]=HEAP8[14449+1>>0]|0;HEAP8[$4+2>>0]=HEAP8[14449+2>>0]|0;HEAP8[$4+3>>0]=HEAP8[14449+3>>0]|0;HEAP8[$4+4>>0]=HEAP8[14449+4>>0]|0;HEAP8[$4+5>>0]=HEAP8[14449+5>>0]|0;HEAP8[$4+6>>0]=HEAP8[14449+6>>0]|0;
      break;
     } else {
      (_strcpy($4,14809)|0);
      break;
     }
    }
   } while(0);
   HEAP32[$vararg_buffer47>>2] = $2;
   $vararg_ptr50 = ((($vararg_buffer47)) + 4|0);
   HEAP32[$vararg_ptr50>>2] = $4;
   (_fprintf($6,5473,$vararg_buffer47)|0);
   $148 = (((($110) + ($$47<<7)|0)) + 124|0);
   $149 = HEAP32[$148>>2]|0;
   $150 = ($149|0)==(0|0);
   if (!($150)) {
    HEAP32[$vararg_buffer51>>2] = $149;
    (_fprintf($6,5348,$vararg_buffer51)|0);
   }
  }
  $151 = (($$47) + 1)|0;
  $$47 = $151;
 }
 (_fwrite(5271,2,1,$6)|0);
 (_fwrite(5482,7,1,$6)|0);
 $152 = ((($0)) + 20|0);
 $153 = ((($0)) + 56|0);
 $154 = ((($0)) + 4920|0);
 $155 = ((($0)) + 4960|0);
 $$5 = 1;
 while(1) {
  $156 = HEAP32[$152>>2]|0;
  $157 = ($$5|0)>($156|0);
  if ($157) {
   break;
  }
  $158 = HEAP32[$153>>2]|0;
  $159 = (($158) + ($$5<<7)|0);
  $160 = HEAP32[$159>>2]|0;
  $161 = HEAP32[$104>>2]|0;
  $162 = (($161) + ($160<<7)|0);
  $163 = HEAP32[$13>>2]|0;
  $164 = (((($161) + ($160<<7)|0)) + 32|0);
  $165 = HEAP32[$164>>2]|0;
  $166 = (($163) + (($165*96)|0)|0);
  $167 = (((($161) + ($160<<7)|0)) + 36|0);
  $168 = HEAP32[$167>>2]|0;
  $169 = (($163) + (($168*96)|0)|0);
  HEAP32[$vararg_buffer54>>2] = $162;
  $vararg_ptr57 = ((($vararg_buffer54)) + 4|0);
  HEAP32[$vararg_ptr57>>2] = $166;
  $vararg_ptr58 = ((($vararg_buffer54)) + 8|0);
  HEAP32[$vararg_ptr58>>2] = $169;
  _sprintf($2,5490,$vararg_buffer54);
  $170 = (((($158) + ($$5<<7)|0)) + 4|0);
  $171 = HEAP32[$170>>2]|0;
  $172 = ($171|0)==(0);
  do {
   if ($172) {
    $173 = (((($161) + ($160<<7)|0)) + 64|0);
    $174 = +HEAPF64[$173>>3];
    HEAPF64[$vararg_buffer59>>3] = $174;
    _sprintf($3,5509,$vararg_buffer59);
    label = 54;
   } else {
    $175 = (((($158) + ($$5<<7)|0)) + 56|0);
    $176 = HEAP32[$175>>2]|0;
    $177 = ($176|0)>(0);
    if ($177) {
     $199 = HEAP32[$53>>2]|0;
     $200 = (($199) + (($176*56)|0)|0);
     HEAP32[$vararg_buffer69>>2] = $200;
     _sprintf($3,5522,$vararg_buffer69);
     label = 54;
     break;
    } else {
     $178 = (((($158) + ($$5<<7)|0)) + 32|0);
     $179 = +HEAPF64[$178>>3];
     $180 = +HEAPF64[$154>>3];
     $181 = $179 * $180;
     $182 = - $181;
     $183 = - $179;
     $184 = (((($158) + ($$5<<7)|0)) + 40|0);
     $185 = +HEAPF64[$184>>3];
     $186 = (((($158) + ($$5<<7)|0)) + 8|0);
     $187 = +HEAPF64[$186>>3];
     $188 = (((($158) + ($$5<<7)|0)) + 48|0);
     $189 = +HEAPF64[$188>>3];
     $190 = (+Math_pow((+$187),(+$189)));
     $191 = $185 * $190;
     $192 = $183 - $191;
     $193 = $192 * $180;
     $194 = +HEAPF64[$155>>3];
     $195 = $187 * $194;
     $196 = (((($158) + ($$5<<7)|0)) + 16|0);
     $197 = +HEAPF64[$196>>3];
     $198 = $197 * $194;
     HEAP32[$vararg_buffer62>>2] = $2;
     $vararg_ptr65 = ((($vararg_buffer62)) + 8|0);
     HEAPF64[$vararg_ptr65>>3] = $182;
     $vararg_ptr66 = ((($vararg_buffer62)) + 16|0);
     HEAPF64[$vararg_ptr66>>3] = $193;
     $vararg_ptr67 = ((($vararg_buffer62)) + 24|0);
     HEAPF64[$vararg_ptr67>>3] = $195;
     $vararg_ptr68 = ((($vararg_buffer62)) + 32|0);
     HEAPF64[$vararg_ptr68>>3] = $198;
     (_fprintf($6,5532,$vararg_buffer62)|0);
     break;
    }
   }
  } while(0);
  if ((label|0) == 54) {
   label = 0;
   (_strcat($2,$3)|0);
   $201 = (((($158) + ($$5<<7)|0)) + 64|0);
   $202 = HEAP32[$201>>2]|0;
   $203 = ($202|0)>(0);
   if ($203) {
    $204 = HEAP32[$29>>2]|0;
    $205 = (($204) + (($202*44)|0)|0);
    HEAP32[$vararg_buffer72>>2] = $205;
    _sprintf($3,5577,$vararg_buffer72);
    (_strcat($2,$3)|0);
   }
   $206 = (((($161) + ($160<<7)|0)) + 56|0);
   $207 = +HEAPF64[$206>>3];
   $208 = $207 != 1.0;
   if ($208) {
    HEAPF64[$vararg_buffer75>>3] = $207;
    _sprintf($3,5591,$vararg_buffer75);
    (_strcat($2,$3)|0);
   }
   HEAP32[$vararg_buffer78>>2] = $2;
   (_fprintf($6,14966,$vararg_buffer78)|0);
   $209 = (((($161) + ($160<<7)|0)) + 124|0);
   $210 = HEAP32[$209>>2]|0;
   $211 = ($210|0)==(0|0);
   if (!($211)) {
    HEAP32[$vararg_buffer81>>2] = $210;
    (_fprintf($6,5301,$vararg_buffer81)|0);
   }
  }
  $212 = (($$5) + 1)|0;
  $$5 = $212;
 }
 (_fwrite(5271,2,1,$6)|0);
 (_fwrite(5604,8,1,$6)|0);
 $213 = ((($0)) + 24|0);
 $214 = ((($0)) + 60|0);
 $215 = ((($0)) + 4928|0);
 $$6 = 1;
 while(1) {
  $216 = HEAP32[$213>>2]|0;
  $217 = ($$6|0)>($216|0);
  if ($217) {
   break;
  }
  $218 = HEAP32[$214>>2]|0;
  $219 = (($218) + ($$6<<2)|0);
  $220 = HEAP32[$219>>2]|0;
  $221 = HEAP32[$104>>2]|0;
  $222 = (((($221) + ($220<<7)|0)) + 40|0);
  $223 = +HEAPF64[$222>>3];
  $224 = (((($221) + ($220<<7)|0)) + 56|0);
  $225 = +HEAPF64[$224>>3];
  $226 = $225 == -1.0E+10;
  $$1 = $226 ? 0.0 : $225;
  $227 = (((($221) + ($220<<7)|0)) + 104|0);
  $228 = HEAP32[$227>>2]|0;
  switch ($228|0) {
  case 6:  {
   $229 = +HEAPF64[$155>>3];
   $230 = $$1 * $229;
   $$2 = $230;
   break;
  }
  case 5: case 4: case 3:  {
   $231 = +HEAPF64[$215>>3];
   $232 = $$1 * $231;
   $$2 = $232;
   break;
  }
  default: {
   $$2 = $$1;
  }
  }
  $233 = (((($221) + ($220<<7)|0)) + 64|0);
  $234 = +HEAPF64[$233>>3];
  $235 = $223 * $223;
  $236 = $234 * $235;
  $237 = $236 * $235;
  $238 = $237 / 0.025170000000000001;
  $239 = (($221) + ($220<<7)|0);
  $240 = HEAP32[$13>>2]|0;
  $241 = (((($221) + ($220<<7)|0)) + 32|0);
  $242 = HEAP32[$241>>2]|0;
  $243 = (($240) + (($242*96)|0)|0);
  $244 = (((($221) + ($220<<7)|0)) + 36|0);
  $245 = HEAP32[$244>>2]|0;
  $246 = (($240) + (($245*96)|0)|0);
  $247 = +HEAPF64[$107>>3];
  $248 = $223 * $247;
  $249 = (16 + ($228<<2)|0);
  $250 = HEAP32[$249>>2]|0;
  HEAP32[$vararg_buffer84>>2] = $239;
  $vararg_ptr87 = ((($vararg_buffer84)) + 4|0);
  HEAP32[$vararg_ptr87>>2] = $243;
  $vararg_ptr88 = ((($vararg_buffer84)) + 8|0);
  HEAP32[$vararg_ptr88>>2] = $246;
  $vararg_ptr89 = ((($vararg_buffer84)) + 16|0);
  HEAPF64[$vararg_ptr89>>3] = $248;
  $vararg_ptr90 = ((($vararg_buffer84)) + 24|0);
  HEAP32[$vararg_ptr90>>2] = $250;
  _sprintf($2,5613,$vararg_buffer84);
  $251 = HEAP32[$227>>2]|0;
  $252 = ($251|0)==(8);
  if ($252) {
   $253 = +HEAPF64[$224>>3];
   $254 = !($253 >= 0.0);
   $$in$v = $254 ? -0.5 : 0.5;
   $$in = $253 + $$in$v;
   $255 = (~~(($$in)));
   $256 = ($255|0)>(0);
   if ($256) {
    $257 = HEAP32[$53>>2]|0;
    $258 = (($257) + (($255*56)|0)|0);
    HEAP32[$vararg_buffer91>>2] = $258;
    $vararg_ptr94 = ((($vararg_buffer91)) + 8|0);
    HEAPF64[$vararg_ptr94>>3] = $238;
    _sprintf($3,5643,$vararg_buffer91);
   } else {
    label = 69;
   }
  } else {
   label = 69;
  }
  if ((label|0) == 69) {
   label = 0;
   HEAPF64[$vararg_buffer95>>3] = $$2;
   $vararg_ptr98 = ((($vararg_buffer95)) + 8|0);
   HEAPF64[$vararg_ptr98>>3] = $238;
   _sprintf($3,5656,$vararg_buffer95);
  }
  HEAP32[$vararg_buffer99>>2] = $2;
  $vararg_ptr102 = ((($vararg_buffer99)) + 4|0);
  HEAP32[$vararg_ptr102>>2] = $3;
  (_fprintf($6,5670,$vararg_buffer99)|0);
  $259 = (((($221) + ($220<<7)|0)) + 124|0);
  $260 = HEAP32[$259>>2]|0;
  $261 = ($260|0)==(0|0);
  if (!($261)) {
   HEAP32[$vararg_buffer103>>2] = $260;
   (_fprintf($6,5348,$vararg_buffer103)|0);
  }
  $262 = (($$6) + 1)|0;
  $$6 = $262;
 }
 (_fwrite(5271,2,1,$6)|0);
 (_fwrite(5677,9,1,$6)|0);
 $263 = ((($0)) + 4912|0);
 $264 = +HEAPF64[$263>>3];
 $$7 = 1;
 while(1) {
  $265 = HEAP32[$12>>2]|0;
  $266 = ($$7|0)>($265|0);
  if ($266) {
   break;
  }
  $267 = HEAP32[$13>>2]|0;
  $268 = (((($267) + (($$7*96)|0)|0)) + 56|0);
  $269 = (($267) + (($$7*96)|0)|0);
  $$01$in = $268;
  while(1) {
   $$01 = HEAP32[$$01$in>>2]|0;
   $270 = ($$01|0)==(0|0);
   if ($270) {
    break;
   }
   $271 = +HEAPF64[$$01>>3];
   $272 = $264 * $271;
   HEAP32[$vararg_buffer106>>2] = $269;
   $vararg_ptr109 = ((($vararg_buffer106)) + 8|0);
   HEAPF64[$vararg_ptr109>>3] = $272;
   _sprintf($2,5687,$vararg_buffer106);
   $273 = ((($$01)) + 8|0);
   $274 = HEAP32[$273>>2]|0;
   $275 = ($274|0)>(0);
   if ($275) {
    $276 = HEAP32[$29>>2]|0;
    $277 = (($276) + (($274*44)|0)|0);
    HEAP32[$vararg_buffer110>>2] = $277;
    _sprintf($3,5701,$vararg_buffer110);
   } else {
    (_strcpy($3,14809)|0);
   }
   HEAP32[$vararg_buffer113>>2] = $2;
   $vararg_ptr116 = ((($vararg_buffer113)) + 4|0);
   HEAP32[$vararg_ptr116>>2] = $3;
   (_fprintf($6,5338,$vararg_buffer113)|0);
   $278 = ((($$01)) + 12|0);
   $279 = HEAP32[$278>>2]|0;
   $280 = ($279|0)==(0|0);
   if (!($280)) {
    HEAP32[$vararg_buffer117>>2] = $279;
    (_fprintf($6,5348,$vararg_buffer117)|0);
   }
   $281 = ((($$01)) + 16|0);
   $$01$in = $281;
  }
  $282 = (($$7) + 1)|0;
  $$7 = $282;
 }
 (_fwrite(5271,2,1,$6)|0);
 (_fwrite(5708,10,1,$6)|0);
 $283 = ((($0)) + 4312|0);
 $$8 = 1;
 while(1) {
  $284 = HEAP32[$12>>2]|0;
  $285 = ($$8|0)>($284|0);
  if ($285) {
   break;
  }
  $286 = HEAP32[$13>>2]|0;
  $287 = (((($286) + (($$8*96)|0)|0)) + 72|0);
  $288 = +HEAPF64[$287>>3];
  $289 = $288 == 0.0;
  if (!($289)) {
   $290 = +HEAPF64[$155>>3];
   $291 = +HEAPF64[$215>>3];
   $292 = $291 * $288;
   $293 = +HEAPF64[$283>>3];
   $294 = 1.0 / $293;
   $295 = (+Math_pow((+$292),(+$294)));
   $296 = $290 / $295;
   $297 = (($286) + (($$8*96)|0)|0);
   HEAP32[$vararg_buffer120>>2] = $297;
   $vararg_ptr123 = ((($vararg_buffer120)) + 8|0);
   HEAPF64[$vararg_ptr123>>3] = $296;
   (_fprintf($6,5719,$vararg_buffer120)|0);
  }
  $298 = (($$8) + 1)|0;
  $$8 = $298;
 }
 (_fwrite(5271,2,1,$6)|0);
 (_fwrite(5734,8,1,$6)|0);
 $$9 = 1;
 while(1) {
  $299 = HEAP32[$103>>2]|0;
  $300 = ($$9|0)>($299|0);
  if ($300) {
   break;
  }
  $301 = HEAP32[$104>>2]|0;
  $302 = (($301) + ($$9<<7)|0);
  $303 = (((($301) + ($$9<<7)|0)) + 104|0);
  $304 = HEAP32[$303>>2]|0;
  $305 = ($304>>>0)<(3);
  do {
   if ($305) {
    $306 = (((($301) + ($$9<<7)|0)) + 108|0);
    $307 = HEAP32[$306>>2]|0;
    $308 = ($307|0)==(2);
    if ($308) {
     HEAP32[$vararg_buffer124>>2] = $302;
     $vararg_ptr127 = ((($vararg_buffer124)) + 4|0);
     HEAP32[$vararg_ptr127>>2] = 4061;
     (_fprintf($6,5743,$vararg_buffer124)|0);
     break;
    }
    $309 = ($304|0)==(2);
    if ($309) {
     $310 = (_findpump($0,$$9)|0);
     $311 = HEAP32[$153>>2]|0;
     $312 = (((($311) + ($310<<7)|0)) + 56|0);
     $313 = HEAP32[$312>>2]|0;
     $314 = ($313|0)==(0);
     if ($314) {
      $315 = (((($311) + ($310<<7)|0)) + 4|0);
      $316 = HEAP32[$315>>2]|0;
      $317 = ($316|0)==(0);
      if (!($317)) {
       $318 = (((($301) + ($$9<<7)|0)) + 56|0);
       $319 = +HEAPF64[$318>>3];
       $320 = $319 != 1.0;
       if ($320) {
        HEAP32[$vararg_buffer128>>2] = $302;
        $vararg_ptr131 = ((($vararg_buffer128)) + 8|0);
        HEAPF64[$vararg_ptr131>>3] = $319;
        (_fprintf($6,5754,$vararg_buffer128)|0);
       }
      }
     }
    }
   } else {
    $321 = (((($301) + ($$9<<7)|0)) + 56|0);
    $322 = +HEAPF64[$321>>3];
    $323 = $322 == -1.0E+10;
    if ($323) {
     $324 = (((($301) + ($$9<<7)|0)) + 108|0);
     $325 = HEAP32[$324>>2]|0;
     $326 = ($325|0)==(3);
     if ($326) {
      HEAP32[$vararg_buffer132>>2] = $302;
      $vararg_ptr135 = ((($vararg_buffer132)) + 4|0);
      HEAP32[$vararg_ptr135>>2] = 15036;
      (_fprintf($6,5743,$vararg_buffer132)|0);
      $$pre = HEAP32[$324>>2]|0;
      $328 = $$pre;
     } else {
      $328 = $325;
     }
     $327 = ($328|0)==(2);
     if ($327) {
      HEAP32[$vararg_buffer136>>2] = $302;
      $vararg_ptr139 = ((($vararg_buffer136)) + 4|0);
      HEAP32[$vararg_ptr139>>2] = 4061;
      (_fprintf($6,5768,$vararg_buffer136)|0);
     }
    }
   }
  } while(0);
  $329 = (($$9) + 1)|0;
  $$9 = $329;
 }
 (_fwrite(5271,2,1,$6)|0);
 (_fwrite(5778,10,1,$6)|0);
 $330 = ((($0)) + 36|0);
 $$10 = 1;
 while(1) {
  $331 = HEAP32[$330>>2]|0;
  $332 = ($$10|0)>($331|0);
  if ($332) {
   break;
  }
  $333 = HEAP32[$29>>2]|0;
  $334 = (((($333) + (($$10*44)|0)|0)) + 32|0);
  $335 = HEAP32[$334>>2]|0;
  $336 = ($335|0)==(0|0);
  if (!($336)) {
   HEAP32[$vararg_buffer140>>2] = $335;
   (_fprintf($6,5789,$vararg_buffer140)|0);
  }
  $$09 = 0;
  while(1) {
   $337 = HEAP32[$29>>2]|0;
   $338 = (((($337) + (($$10*44)|0)|0)) + 36|0);
   $339 = HEAP32[$338>>2]|0;
   $340 = ($$09|0)<($339|0);
   if (!($340)) {
    break;
   }
   $341 = (($$09>>>0) % 6)&-1;
   $342 = ($341|0)==(0);
   if ($342) {
    $343 = (($337) + (($$10*44)|0)|0);
    HEAP32[$vararg_buffer143>>2] = $343;
    (_fprintf($6,5794,$vararg_buffer143)|0);
    $$pre20 = HEAP32[$29>>2]|0;
    $345 = $$pre20;
   } else {
    $345 = $337;
   }
   $344 = (((($345) + (($$10*44)|0)|0)) + 40|0);
   $346 = HEAP32[$344>>2]|0;
   $347 = (($346) + ($$09<<3)|0);
   $348 = +HEAPF64[$347>>3];
   HEAPF64[$vararg_buffer146>>3] = $348;
   (_fprintf($6,5802,$vararg_buffer146)|0);
   $349 = (($$09) + 1)|0;
   $$09 = $349;
  }
  $350 = (($$10) + 1)|0;
  $$10 = $350;
 }
 (_fwrite(5271,2,1,$6)|0);
 (_fwrite(5810,8,1,$6)|0);
 $351 = ((($0)) + 40|0);
 $$11 = 1;
 while(1) {
  $352 = HEAP32[$351>>2]|0;
  $353 = ($$11|0)>($352|0);
  if ($353) {
   break;
  }
  $354 = HEAP32[$53>>2]|0;
  $355 = (((($354) + (($$11*56)|0)|0)) + 32|0);
  $356 = HEAP32[$355>>2]|0;
  $357 = ($356|0)==(0|0);
  if (!($357)) {
   HEAP32[$vararg_buffer149>>2] = $356;
   (_fprintf($6,5789,$vararg_buffer149)|0);
  }
  $$110 = 0;
  while(1) {
   $358 = HEAP32[$53>>2]|0;
   $359 = (((($358) + (($$11*56)|0)|0)) + 40|0);
   $360 = HEAP32[$359>>2]|0;
   $361 = ($$110|0)<($360|0);
   if (!($361)) {
    break;
   }
   $362 = (($358) + (($$11*56)|0)|0);
   $363 = (((($358) + (($$11*56)|0)|0)) + 48|0);
   $364 = HEAP32[$363>>2]|0;
   $365 = (($364) + ($$110<<3)|0);
   $366 = +HEAPF64[$365>>3];
   $367 = (((($358) + (($$11*56)|0)|0)) + 52|0);
   $368 = HEAP32[$367>>2]|0;
   $369 = (($368) + ($$110<<3)|0);
   $370 = +HEAPF64[$369>>3];
   HEAP32[$vararg_buffer152>>2] = $362;
   $vararg_ptr155 = ((($vararg_buffer152)) + 8|0);
   HEAPF64[$vararg_ptr155>>3] = $366;
   $vararg_ptr156 = ((($vararg_buffer152)) + 16|0);
   HEAPF64[$vararg_ptr156>>3] = $370;
   (_fprintf($6,5819,$vararg_buffer152)|0);
   $371 = (($$110) + 1)|0;
   $$110 = $371;
  }
  $372 = (($$11) + 1)|0;
  $$11 = $372;
 }
 (_fwrite(5271,2,1,$6)|0);
 (_fwrite(5841,10,1,$6)|0);
 $373 = ((($0)) + 28|0);
 $374 = ((($0)) + 72|0);
 $375 = ((($0)) + 1256|0);
 $$12 = 1;
 while(1) {
  $376 = HEAP32[$373>>2]|0;
  $377 = ($$12|0)>($376|0);
  if ($377) {
   break;
  }
  $378 = HEAP32[$374>>2]|0;
  $379 = (($378) + (($$12*40)|0)|0);
  $380 = HEAP32[$379>>2]|0;
  $381 = ($380|0)<(1);
  L173: do {
   if (!($381)) {
    $382 = HEAP32[$104>>2]|0;
    $383 = (($382) + ($380<<7)|0);
    $384 = (((($378) + (($$12*40)|0)|0)) + 24|0);
    $385 = +HEAPF64[$384>>3];
    $386 = $385 == -1.0E+10;
    if ($386) {
     $387 = (((($378) + (($$12*40)|0)|0)) + 32|0);
     $388 = HEAP32[$387>>2]|0;
     $389 = (64 + ($388<<2)|0);
     $390 = HEAP32[$389>>2]|0;
     HEAP32[$vararg_buffer157>>2] = $383;
     $vararg_ptr160 = ((($vararg_buffer157)) + 4|0);
     HEAP32[$vararg_ptr160>>2] = $390;
     _sprintf($2,5852,$vararg_buffer157);
    } else {
     $391 = (((($382) + ($380<<7)|0)) + 104|0);
     $392 = HEAP32[$391>>2]|0;
     switch ($392|0) {
     case 5: case 4: case 3:  {
      $393 = +HEAPF64[$215>>3];
      $394 = $385 * $393;
      $$3 = $394;
      break;
     }
     case 6:  {
      $395 = +HEAPF64[$155>>3];
      $396 = $385 * $395;
      $$3 = $396;
      break;
     }
     default: {
      $$3 = $385;
     }
     }
     HEAP32[$vararg_buffer161>>2] = $383;
     $vararg_ptr164 = ((($vararg_buffer161)) + 8|0);
     HEAPF64[$vararg_ptr164>>3] = $$3;
     _sprintf($2,5865,$vararg_buffer161);
    }
    $397 = (((($378) + (($$12*40)|0)|0)) + 36|0);
    $398 = HEAP32[$397>>2]|0;
    switch ($398|0) {
    case 1: case 0:  {
     $399 = (((($378) + (($$12*40)|0)|0)) + 4|0);
     $400 = HEAP32[$399>>2]|0;
     $401 = HEAP32[$13>>2]|0;
     $402 = (((($378) + (($$12*40)|0)|0)) + 16|0);
     $403 = +HEAPF64[$402>>3];
     $404 = (((($401) + (($400*96)|0)|0)) + 48|0);
     $405 = +HEAPF64[$404>>3];
     $406 = $403 - $405;
     $407 = HEAP32[$12>>2]|0;
     $408 = ($400|0)>($407|0);
     $$ = $408 ? $154 : $215;
     $$pn = +HEAPF64[$$>>3];
     $$4 = $406 * $$pn;
     $409 = (($401) + (($400*96)|0)|0);
     $410 = (224 + ($398<<2)|0);
     $411 = HEAP32[$410>>2]|0;
     HEAP32[$vararg_buffer165>>2] = $2;
     $vararg_ptr168 = ((($vararg_buffer165)) + 4|0);
     HEAP32[$vararg_ptr168>>2] = $409;
     $vararg_ptr169 = ((($vararg_buffer165)) + 8|0);
     HEAP32[$vararg_ptr169>>2] = $411;
     $vararg_ptr170 = ((($vararg_buffer165)) + 16|0);
     HEAPF64[$vararg_ptr170>>3] = $$4;
     (_fprintf($6,5879,$vararg_buffer165)|0);
     break L173;
     break;
    }
    case 2:  {
     $412 = (((($378) + (($$12*40)|0)|0)) + 8|0);
     $413 = HEAP32[$412>>2]|0;
     $414 = (+($413|0));
     $415 = $414 / 3600.0;
     HEAP32[$vararg_buffer171>>2] = $2;
     $vararg_ptr174 = ((($vararg_buffer171)) + 4|0);
     HEAP32[$vararg_ptr174>>2] = 14322;
     $vararg_ptr175 = ((($vararg_buffer171)) + 8|0);
     HEAPF64[$vararg_ptr175>>3] = $415;
     (_fprintf($6,5902,$vararg_buffer171)|0);
     break L173;
     break;
    }
    case 3:  {
     $416 = (((($378) + (($$12*40)|0)|0)) + 8|0);
     $417 = HEAP32[$416>>2]|0;
     $418 = (_clocktime($375,$417)|0);
     HEAP32[$vararg_buffer176>>2] = $2;
     $vararg_ptr179 = ((($vararg_buffer176)) + 4|0);
     HEAP32[$vararg_ptr179>>2] = 14327;
     $vararg_ptr180 = ((($vararg_buffer176)) + 8|0);
     HEAP32[$vararg_ptr180>>2] = $418;
     (_fprintf($6,5923,$vararg_buffer176)|0);
     break L173;
     break;
    }
    default: {
     break L173;
    }
    }
   }
  } while(0);
  $419 = (($$12) + 1)|0;
  $$12 = $419;
 }
 (_fwrite(5271,2,1,$6)|0);
 (_fwrite(5936,7,1,$6)|0);
 $420 = ((($0)) + 32|0);
 $421 = ((($0)) + 76|0);
 $$13 = 1;
 while(1) {
  $422 = HEAP32[$420>>2]|0;
  $423 = ($$13|0)>($422|0);
  if ($423) {
   break;
  }
  $424 = HEAP32[$421>>2]|0;
  $425 = (($424) + (($$13*56)|0)|0);
  HEAP32[$vararg_buffer181>>2] = $425;
  (_fprintf($6,5944,$vararg_buffer181)|0);
  _writerule($0,$6,$$13);
  (_fwrite(5953,1,1,$6)|0);
  $426 = (($$13) + 1)|0;
  $$13 = $426;
 }
 (_fwrite(5271,2,1,$6)|0);
 (_fwrite(5955,9,1,$6)|0);
 $427 = ((($0)) + 4936|0);
 $$148 = 1;
 while(1) {
  $428 = HEAP32[$0>>2]|0;
  $429 = ($$148|0)>($428|0);
  if ($429) {
   break;
  }
  $430 = HEAP32[$13>>2]|0;
  $431 = (((($430) + (($$148*96)|0)|0)) + 64|0);
  $432 = +HEAPF64[$431>>3];
  $433 = $432 == 0.0;
  if (!($433)) {
   $434 = (($430) + (($$148*96)|0)|0);
   $435 = +HEAPF64[$427>>3];
   $436 = $432 * $435;
   HEAP32[$vararg_buffer184>>2] = $434;
   $vararg_ptr187 = ((($vararg_buffer184)) + 8|0);
   HEAPF64[$vararg_ptr187>>3] = $436;
   (_fprintf($6,5719,$vararg_buffer184)|0);
  }
  $437 = (($$148) + 1)|0;
  $$148 = $437;
 }
 (_fwrite(5271,2,1,$6)|0);
 (_fwrite(5965,9,1,$6)|0);
 $$15 = 1;
 while(1) {
  $438 = HEAP32[$0>>2]|0;
  $439 = ($$15|0)>($438|0);
  if ($439) {
   break;
  }
  $440 = HEAP32[$13>>2]|0;
  $441 = (((($440) + (($$15*96)|0)|0)) + 60|0);
  $442 = HEAP32[$441>>2]|0;
  $443 = ($442|0)==(0|0);
  if (!($443)) {
   $444 = (($440) + (($$15*96)|0)|0);
   $445 = ((($442)) + 24|0);
   $446 = HEAP32[$445>>2]|0;
   $447 = (208 + ($446<<2)|0);
   $448 = HEAP32[$447>>2]|0;
   $449 = +HEAPF64[$442>>3];
   HEAP32[$vararg_buffer188>>2] = $444;
   $vararg_ptr191 = ((($vararg_buffer188)) + 4|0);
   HEAP32[$vararg_ptr191>>2] = $448;
   $vararg_ptr192 = ((($vararg_buffer188)) + 8|0);
   HEAPF64[$vararg_ptr192>>3] = $449;
   _sprintf($2,5975,$vararg_buffer188);
   $450 = ((($442)) + 8|0);
   $451 = HEAP32[$450>>2]|0;
   $452 = ($451|0)>(0);
   if ($452) {
    $453 = HEAP32[$29>>2]|0;
    $454 = (($453) + (($451*44)|0)|0);
    $strlen = (_strlen($454)|0);
    $leninc = (($strlen) + 1)|0;
    _memcpy(($3|0),($454|0),($leninc|0))|0;
   } else {
    (_strcpy($3,21208)|0);
   }
   HEAP32[$vararg_buffer193>>2] = $2;
   $vararg_ptr196 = ((($vararg_buffer193)) + 4|0);
   HEAP32[$vararg_ptr196>>2] = $3;
   (_fprintf($6,5670,$vararg_buffer193)|0);
  }
  $455 = (($$15) + 1)|0;
  $$15 = $455;
 }
 (_fwrite(5271,2,1,$6)|0);
 (_fwrite(5994,8,1,$6)|0);
 $$16 = 1;
 while(1) {
  $456 = HEAP32[$27>>2]|0;
  $457 = ($$16|0)>($456|0);
  if ($457) {
   break;
  }
  $458 = HEAP32[$28>>2]|0;
  $459 = (((($458) + (($$16*120)|0)|0)) + 8|0);
  $460 = +HEAPF64[$459>>3];
  $461 = $460 == 0.0;
  if (!($461)) {
   $462 = HEAP32[$13>>2]|0;
   $463 = (($458) + (($$16*120)|0)|0);
   $464 = HEAP32[$463>>2]|0;
   $465 = (($462) + (($464*96)|0)|0);
   $466 = (((($458) + (($$16*120)|0)|0)) + 96|0);
   $467 = HEAP32[$466>>2]|0;
   $468 = (272 + ($467<<2)|0);
   $469 = HEAP32[$468>>2]|0;
   $470 = (((($458) + (($$16*120)|0)|0)) + 104|0);
   $471 = +HEAPF64[$470>>3];
   $472 = (((($458) + (($$16*120)|0)|0)) + 48|0);
   $473 = +HEAPF64[$472>>3];
   $474 = $471 / $473;
   HEAP32[$vararg_buffer197>>2] = $465;
   $vararg_ptr200 = ((($vararg_buffer197)) + 4|0);
   HEAP32[$vararg_ptr200>>2] = $469;
   $vararg_ptr201 = ((($vararg_buffer197)) + 8|0);
   HEAPF64[$vararg_ptr201>>3] = $474;
   (_fprintf($6,6003,$vararg_buffer197)|0);
  }
  $475 = (($$16) + 1)|0;
  $$16 = $475;
 }
 (_fwrite(5271,2,1,$6)|0);
 (_fwrite(6023,11,1,$6)|0);
 $476 = ((($0)) + 4768|0);
 $477 = +HEAPF64[$476>>3];
 HEAPF64[$vararg_buffer202>>3] = $477;
 (_fprintf($6,6035,$vararg_buffer202)|0);
 $478 = ((($0)) + 4776|0);
 $479 = +HEAPF64[$478>>3];
 HEAPF64[$vararg_buffer205>>3] = $479;
 (_fprintf($6,6066,$vararg_buffer205)|0);
 $480 = ((($0)) + 4784|0);
 $481 = +HEAPF64[$480>>3];
 HEAPF64[$vararg_buffer208>>3] = $481;
 (_fprintf($6,6097,$vararg_buffer208)|0);
 $482 = ((($0)) + 4792|0);
 $483 = +HEAPF64[$482>>3];
 $484 = $483 * 86400.0;
 HEAPF64[$vararg_buffer211>>3] = $484;
 (_fprintf($6,6128,$vararg_buffer211)|0);
 $485 = ((($0)) + 4800|0);
 $486 = +HEAPF64[$485>>3];
 $487 = $486 * 86400.0;
 HEAPF64[$vararg_buffer214>>3] = $487;
 (_fprintf($6,6159,$vararg_buffer214)|0);
 $488 = ((($0)) + 4808|0);
 $489 = +HEAPF64[$488>>3];
 $490 = $489 > 0.0;
 if ($490) {
  $491 = +HEAPF64[$427>>3];
  $492 = $489 * $491;
  HEAPF64[$vararg_buffer217>>3] = $492;
  (_fprintf($6,6190,$vararg_buffer217)|0);
 }
 $493 = ((($0)) + 4736|0);
 $494 = +HEAPF64[$493>>3];
 $495 = $494 != -1.0E+10;
 $496 = $494 != 0.0;
 $or$cond = $495 & $496;
 if ($or$cond) {
  HEAPF64[$vararg_buffer220>>3] = $494;
  (_fprintf($6,6221,$vararg_buffer220)|0);
 }
 $$17 = 1;
 while(1) {
  $497 = HEAP32[$103>>2]|0;
  $498 = ($$17|0)>($497|0);
  if ($498) {
   break;
  }
  $499 = HEAP32[$104>>2]|0;
  $500 = (($499) + ($$17<<7)|0);
  $501 = (((($499) + ($$17<<7)|0)) + 104|0);
  $502 = HEAP32[$501>>2]|0;
  $503 = ($502>>>0)>(1);
  if (!($503)) {
   $504 = (((($499) + ($$17<<7)|0)) + 72|0);
   $505 = +HEAPF64[$504>>3];
   $506 = +HEAPF64[$482>>3];
   $507 = $505 != $506;
   if ($507) {
    $508 = $505 * 86400.0;
    HEAP32[$vararg_buffer223>>2] = $500;
    $vararg_ptr226 = ((($vararg_buffer223)) + 8|0);
    HEAPF64[$vararg_ptr226>>3] = $508;
    (_fprintf($6,6252,$vararg_buffer223)|0);
   }
   $509 = (((($499) + ($$17<<7)|0)) + 80|0);
   $510 = +HEAPF64[$509>>3];
   $511 = +HEAPF64[$485>>3];
   $512 = $510 != $511;
   if ($512) {
    $513 = $510 * 86400.0;
    HEAP32[$vararg_buffer227>>2] = $500;
    $vararg_ptr230 = ((($vararg_buffer227)) + 8|0);
    HEAPF64[$vararg_ptr230>>3] = $513;
    (_fprintf($6,6273,$vararg_buffer227)|0);
   }
  }
  $514 = (($$17) + 1)|0;
  $$17 = $514;
 }
 $$18 = 1;
 while(1) {
  $515 = HEAP32[$27>>2]|0;
  $516 = ($$18|0)>($515|0);
  if ($516) {
   break;
  }
  $517 = HEAP32[$28>>2]|0;
  $518 = (((($517) + (($$18*120)|0)|0)) + 8|0);
  $519 = +HEAPF64[$518>>3];
  $520 = $519 == 0.0;
  if (!($520)) {
   $521 = (((($517) + (($$18*120)|0)|0)) + 64|0);
   $522 = +HEAPF64[$521>>3];
   $523 = +HEAPF64[$482>>3];
   $524 = $522 != $523;
   if ($524) {
    $525 = HEAP32[$13>>2]|0;
    $526 = (($517) + (($$18*120)|0)|0);
    $527 = HEAP32[$526>>2]|0;
    $528 = (($525) + (($527*96)|0)|0);
    $529 = $522 * 86400.0;
    HEAP32[$vararg_buffer231>>2] = $528;
    $vararg_ptr234 = ((($vararg_buffer231)) + 8|0);
    HEAPF64[$vararg_ptr234>>3] = $529;
    (_fprintf($6,6294,$vararg_buffer231)|0);
   }
  }
  $530 = (($$18) + 1)|0;
  $$18 = $530;
 }
 (_fwrite(5271,2,1,$6)|0);
 (_fwrite(6315,8,1,$6)|0);
 $531 = ((($0)) + 4416|0);
 $532 = +HEAPF64[$531>>3];
 $533 = $532 != 0.0;
 if ($533) {
  HEAPF64[$vararg_buffer235>>3] = $532;
  (_fprintf($6,6324,$vararg_buffer235)|0);
 }
 $534 = ((($0)) + 4492|0);
 $535 = HEAP32[$534>>2]|0;
 $536 = ($535|0)==(0);
 if (!($536)) {
  $537 = HEAP32[$29>>2]|0;
  $538 = (($537) + (($535*44)|0)|0);
  HEAP32[$vararg_buffer238>>2] = $538;
  (_fprintf($6,6352,$vararg_buffer238)|0);
 }
 $539 = ((($0)) + 4400|0);
 $540 = +HEAPF64[$539>>3];
 HEAPF64[$vararg_buffer241>>3] = $540;
 (_fprintf($6,6377,$vararg_buffer241)|0);
 $541 = ((($0)) + 4424|0);
 $542 = +HEAPF64[$541>>3];
 HEAPF64[$vararg_buffer244>>3] = $542;
 (_fprintf($6,6405,$vararg_buffer244)|0);
 $$19 = 1;
 while(1) {
  $543 = HEAP32[$152>>2]|0;
  $544 = ($$19|0)>($543|0);
  if ($544) {
   break;
  }
  $545 = HEAP32[$153>>2]|0;
  $546 = (($545) + ($$19<<7)|0);
  $547 = (((($545) + ($$19<<7)|0)) + 72|0);
  $548 = +HEAPF64[$547>>3];
  $549 = $548 > 0.0;
  if ($549) {
   $550 = HEAP32[$104>>2]|0;
   $551 = HEAP32[$546>>2]|0;
   $552 = (($550) + ($551<<7)|0);
   HEAP32[$vararg_buffer247>>2] = $552;
   $vararg_ptr250 = ((($vararg_buffer247)) + 8|0);
   HEAPF64[$vararg_ptr250>>3] = $548;
   (_fprintf($6,6433,$vararg_buffer247)|0);
  }
  $553 = (((($545) + ($$19<<7)|0)) + 68|0);
  $554 = HEAP32[$553>>2]|0;
  $555 = ($554|0)>(0);
  if ($555) {
   $556 = HEAP32[$104>>2]|0;
   $557 = HEAP32[$546>>2]|0;
   $558 = (($556) + ($557<<7)|0);
   $559 = HEAP32[$29>>2]|0;
   $560 = (($559) + (($554*44)|0)|0);
   HEAP32[$vararg_buffer251>>2] = $558;
   $vararg_ptr254 = ((($vararg_buffer251)) + 4|0);
   HEAP32[$vararg_ptr254>>2] = $560;
   (_fprintf($6,6460,$vararg_buffer251)|0);
  }
  $561 = (((($545) + ($$19<<7)|0)) + 60|0);
  $562 = HEAP32[$561>>2]|0;
  $563 = ($562|0)>(0);
  if ($563) {
   $564 = HEAP32[$104>>2]|0;
   $565 = HEAP32[$546>>2]|0;
   $566 = (($564) + ($565<<7)|0);
   $567 = HEAP32[$53>>2]|0;
   $568 = (($567) + (($562*56)|0)|0);
   HEAP32[$vararg_buffer255>>2] = $566;
   $vararg_ptr258 = ((($vararg_buffer255)) + 4|0);
   HEAP32[$vararg_ptr258>>2] = $568;
   (_fprintf($6,6484,$vararg_buffer255)|0);
  }
  $569 = (($$19) + 1)|0;
  $$19 = $569;
 }
 (_fwrite(5271,2,1,$6)|0);
 (_fwrite(6508,7,1,$6)|0);
 $570 = ((($0)) + 1192|0);
 $571 = HEAP32[$570>>2]|0;
 $572 = (_clocktime($375,$571)|0);
 HEAP32[$vararg_buffer259>>2] = $572;
 (_fprintf($6,6516,$vararg_buffer259)|0);
 $573 = ((($0)) + 1148|0);
 $574 = HEAP32[$573>>2]|0;
 $575 = (_clocktime($375,$574)|0);
 HEAP32[$vararg_buffer262>>2] = $575;
 (_fprintf($6,6541,$vararg_buffer262)|0);
 $576 = ((($0)) + 1180|0);
 $577 = HEAP32[$576>>2]|0;
 $578 = (_clocktime($375,$577)|0);
 HEAP32[$vararg_buffer265>>2] = $578;
 (_fprintf($6,6566,$vararg_buffer265)|0);
 $579 = ((($0)) + 1160|0);
 $580 = HEAP32[$579>>2]|0;
 $581 = (_clocktime($375,$580)|0);
 HEAP32[$vararg_buffer268>>2] = $581;
 (_fprintf($6,6591,$vararg_buffer268)|0);
 $582 = ((($0)) + 1164|0);
 $583 = HEAP32[$582>>2]|0;
 $584 = (_clocktime($375,$583)|0);
 HEAP32[$vararg_buffer271>>2] = $584;
 (_fprintf($6,6616,$vararg_buffer271)|0);
 $585 = ((($0)) + 1152|0);
 $586 = HEAP32[$585>>2]|0;
 $587 = (_clocktime($375,$586)|0);
 HEAP32[$vararg_buffer274>>2] = $587;
 (_fprintf($6,6641,$vararg_buffer274)|0);
 $588 = ((($0)) + 1156|0);
 $589 = HEAP32[$588>>2]|0;
 $590 = (_clocktime($375,$589)|0);
 HEAP32[$vararg_buffer277>>2] = $590;
 (_fprintf($6,6666,$vararg_buffer277)|0);
 $591 = ((($0)) + 1188|0);
 $592 = HEAP32[$591>>2]|0;
 $593 = (_clocktime($375,$592)|0);
 HEAP32[$vararg_buffer280>>2] = $593;
 (_fprintf($6,6691,$vararg_buffer280)|0);
 $594 = ((($0)) + 1144|0);
 $595 = HEAP32[$594>>2]|0;
 $596 = (_clocktime($375,$595)|0);
 HEAP32[$vararg_buffer283>>2] = $596;
 (_fprintf($6,6716,$vararg_buffer283)|0);
 $597 = ((($0)) + 1216|0);
 $598 = HEAP32[$597>>2]|0;
 $599 = (240 + ($598<<2)|0);
 $600 = HEAP32[$599>>2]|0;
 HEAP32[$vararg_buffer286>>2] = $600;
 (_fprintf($6,6741,$vararg_buffer286)|0);
 (_fwrite(5271,2,1,$6)|0);
 (_fwrite(6766,9,1,$6)|0);
 $601 = ((($0)) + 1120|0);
 $602 = HEAP32[$601>>2]|0;
 $603 = (160 + ($602<<2)|0);
 $604 = HEAP32[$603>>2]|0;
 HEAP32[$vararg_buffer289>>2] = $604;
 (_fprintf($6,6776,$vararg_buffer289)|0);
 $605 = ((($0)) + 1124|0);
 $606 = HEAP32[$605>>2]|0;
 $607 = (3452 + ($606<<2)|0);
 $608 = HEAP32[$607>>2]|0;
 HEAP32[$vararg_buffer292>>2] = $608;
 (_fprintf($6,6801,$vararg_buffer292)|0);
 $609 = HEAP32[$105>>2]|0;
 $610 = (3428 + ($609<<2)|0);
 $611 = HEAP32[$610>>2]|0;
 HEAP32[$vararg_buffer295>>2] = $611;
 (_fprintf($6,6826,$vararg_buffer295)|0);
 $612 = ((($0)) + 4188|0);
 $613 = HEAP32[$612>>2]|0;
 switch ($613|0) {
 case 0:  {
  HEAP32[$vararg_buffer298>>2] = $5;
  (_fprintf($6,6851,$vararg_buffer298)|0);
  break;
 }
 case 1:  {
  HEAP32[$vararg_buffer301>>2] = $5;
  (_fprintf($6,6876,$vararg_buffer301)|0);
  break;
 }
 default: {
 }
 }
 $614 = ((($0)) + 4512|0);
 $615 = HEAP32[$614>>2]|0;
 $616 = ($615|0)==(-1);
 if ($616) {
  (_fwrite(6901,26,1,$6)|0);
  $$pre21 = HEAP32[$614>>2]|0;
  $618 = $$pre21;
 } else {
  $618 = $615;
 }
 $617 = ($618|0)>(-1);
 if ($617) {
  HEAP32[$vararg_buffer304>>2] = $618;
  (_fprintf($6,6928,$vararg_buffer304)|0);
 }
 $619 = ((($0)) + 4600|0);
 $620 = HEAP32[$619>>2]|0;
 switch ($620|0) {
 case 1:  {
  $621 = ((($0)) + 4624|0);
  $622 = ((($0)) + 4656|0);
  HEAP32[$vararg_buffer307>>2] = $621;
  $vararg_ptr310 = ((($vararg_buffer307)) + 4|0);
  HEAP32[$vararg_ptr310>>2] = $622;
  (_fprintf($6,6962,$vararg_buffer307)|0);
  break;
 }
 case 3:  {
  $623 = HEAP32[$13>>2]|0;
  $624 = ((($0)) + 4616|0);
  $625 = HEAP32[$624>>2]|0;
  $626 = (($623) + (($625*96)|0)|0);
  HEAP32[$vararg_buffer311>>2] = $626;
  (_fprintf($6,6990,$vararg_buffer311)|0);
  break;
 }
 case 2:  {
  (_fwrite(7024,25,1,$6)|0);
  break;
 }
 case 0:  {
  (_fwrite(7050,26,1,$6)|0);
  break;
 }
 default: {
 }
 }
 $627 = ((($0)) + 4344|0);
 $628 = +HEAPF64[$627>>3];
 HEAPF64[$vararg_buffer314>>3] = $628;
 (_fprintf($6,7077,$vararg_buffer314)|0);
 $629 = +HEAPF64[$283>>3];
 $630 = 1.0 / $629;
 HEAPF64[$vararg_buffer317>>3] = $630;
 (_fprintf($6,7105,$vararg_buffer317)|0);
 $631 = ((($0)) + 4384|0);
 $632 = +HEAPF64[$631>>3];
 $633 = $632 / 1.1E-5;
 HEAPF64[$vararg_buffer320>>3] = $633;
 (_fprintf($6,7133,$vararg_buffer320)|0);
 $634 = ((($0)) + 4696|0);
 $635 = +HEAPF64[$634>>3];
 $636 = $635 / 1.3000000000000001E-8;
 HEAPF64[$vararg_buffer323>>3] = $636;
 (_fprintf($6,7161,$vararg_buffer323)|0);
 $637 = ((($0)) + 4392|0);
 $638 = +HEAPF64[$637>>3];
 HEAPF64[$vararg_buffer326>>3] = $638;
 (_fprintf($6,7189,$vararg_buffer326)|0);
 $639 = ((($0)) + 4508|0);
 $640 = HEAP32[$639>>2]|0;
 HEAP32[$vararg_buffer329>>2] = $640;
 (_fprintf($6,7217,$vararg_buffer329)|0);
 $641 = ((($0)) + 4352|0);
 $642 = +HEAPF64[$641>>3];
 HEAPF64[$vararg_buffer332>>3] = $642;
 (_fprintf($6,7243,$vararg_buffer332)|0);
 $643 = ((($0)) + 4688|0);
 $644 = +HEAPF64[$643>>3];
 $645 = +HEAPF64[$427>>3];
 $646 = $644 * $645;
 HEAPF64[$vararg_buffer335>>3] = $646;
 (_fprintf($6,7271,$vararg_buffer335)|0);
 $647 = ((($0)) + 4516|0);
 $648 = HEAP32[$647>>2]|0;
 HEAP32[$vararg_buffer338>>2] = $648;
 (_fprintf($6,7299,$vararg_buffer338)|0);
 $649 = ((($0)) + 4520|0);
 $650 = HEAP32[$649>>2]|0;
 HEAP32[$vararg_buffer341>>2] = $650;
 (_fprintf($6,7325,$vararg_buffer341)|0);
 $651 = ((($0)) + 4376|0);
 $652 = +HEAPF64[$651>>3];
 HEAPF64[$vararg_buffer344>>3] = $652;
 (_fprintf($6,7351,$vararg_buffer344)|0);
 $653 = ((($0)) + 4368|0);
 $654 = +HEAPF64[$653>>3];
 $655 = $654 > 0.0;
 if ($655) {
  $656 = +HEAPF64[$154>>3];
  $657 = $654 * $656;
  HEAPF64[$vararg_buffer347>>3] = $657;
  (_fprintf($6,7379,$vararg_buffer347)|0);
 }
 $658 = ((($0)) + 4360|0);
 $659 = +HEAPF64[$658>>3];
 $660 = $659 > 0.0;
 if ($660) {
  $661 = +HEAPF64[$155>>3];
  $662 = $659 * $661;
  HEAPF64[$vararg_buffer350>>3] = $662;
  (_fprintf($6,7407,$vararg_buffer350)|0);
 }
 $663 = ((($0)) + 4496|0);
 $664 = HEAP32[$663>>2]|0;
 $665 = ($664|0)==(1);
 if ($665) {
  (_fwrite(7435,25,1,$6)|0);
  $666 = ((($0)) + 4328|0);
  $667 = +HEAPF64[$666>>3];
  $668 = +HEAPF64[$215>>3];
  $669 = $667 * $668;
  HEAPF64[$vararg_buffer353>>3] = $669;
  (_fprintf($6,7461,$vararg_buffer353)|0);
  $670 = ((($0)) + 4336|0);
  $671 = +HEAPF64[$670>>3];
  $672 = +HEAPF64[$215>>3];
  $673 = $671 * $672;
  HEAPF64[$vararg_buffer356>>3] = $673;
  (_fprintf($6,7489,$vararg_buffer356)|0);
  $674 = ((($0)) + 4320|0);
  $675 = +HEAPF64[$674>>3];
  HEAPF64[$vararg_buffer359>>3] = $675;
  (_fprintf($6,7517,$vararg_buffer359)|0);
 }
 (_fwrite(5271,2,1,$6)|0);
 (_fwrite(7545,8,1,$6)|0);
 $676 = ((($0)) + 1208|0);
 $677 = HEAP32[$676>>2]|0;
 HEAP32[$vararg_buffer362>>2] = $677;
 (_fprintf($6,7554,$vararg_buffer362)|0);
 $678 = ((($0)) + 1228|0);
 $679 = HEAP32[$678>>2]|0;
 $680 = (3476 + ($679<<2)|0);
 $681 = HEAP32[$680>>2]|0;
 HEAP32[$vararg_buffer365>>2] = $681;
 (_fprintf($6,7579,$vararg_buffer365)|0);
 $682 = ((($0)) + 1220|0);
 $683 = HEAP32[$682>>2]|0;
 $684 = (3476 + ($683<<2)|0);
 $685 = HEAP32[$684>>2]|0;
 HEAP32[$vararg_buffer368>>2] = $685;
 (_fprintf($6,7604,$vararg_buffer368)|0);
 $686 = ((($0)) + 1232|0);
 $687 = HEAP32[$686>>2]|0;
 $688 = (3476 + ($687<<2)|0);
 $689 = HEAP32[$688>>2]|0;
 HEAP32[$vararg_buffer371>>2] = $689;
 (_fprintf($6,7629,$vararg_buffer371)|0);
 $690 = ((($0)) + 1224|0);
 $691 = HEAP32[$690>>2]|0;
 $692 = (3476 + ($691<<2)|0);
 $693 = HEAP32[$692>>2]|0;
 HEAP32[$vararg_buffer374>>2] = $693;
 (_fprintf($6,7654,$vararg_buffer374)|0);
 $694 = ((($0)) + 1529|0);
 $695 = (_strlen($694)|0);
 $696 = ($695|0)==(0);
 if (!($696)) {
  HEAP32[$vararg_buffer377>>2] = $694;
  (_fprintf($6,7679,$vararg_buffer377)|0);
 }
 $697 = ((($0)) + 1236|0);
 $698 = HEAP32[$697>>2]|0;
 L290: do {
  switch ($698|0) {
  case 0:  {
   (_fwrite(7704,26,1,$6)|0);
   break;
  }
  case 1:  {
   (_fwrite(7731,25,1,$6)|0);
   break;
  }
  default: {
   $$20 = 1;$$211 = 0;
   while(1) {
    $699 = HEAP32[$0>>2]|0;
    $700 = ($$20|0)>($699|0);
    if ($700) {
     break L290;
    }
    $701 = HEAP32[$13>>2]|0;
    $702 = (((($701) + (($$20*96)|0)|0)) + 80|0);
    $703 = HEAP32[$702>>2]|0;
    $704 = ($703|0)==(1);
    if ($704) {
     $705 = (($$211|0) % 5)&-1;
     $706 = ($705|0)==(0);
     if ($706) {
      (_fwrite(7757,22,1,$6)|0);
     }
     $707 = (($701) + (($$20*96)|0)|0);
     HEAP32[$vararg_buffer380>>2] = $707;
     (_fprintf($6,7780,$vararg_buffer380)|0);
     $708 = (($$211) + 1)|0;
     $$312 = $708;
    } else {
     $$312 = $$211;
    }
    $709 = (($$20) + 1)|0;
    $$20 = $709;$$211 = $$312;
   }
  }
  }
 } while(0);
 $710 = ((($0)) + 1240|0);
 $711 = HEAP32[$710>>2]|0;
 L304: do {
  switch ($711|0) {
  case 0:  {
   (_fwrite(7784,26,1,$6)|0);
   break;
  }
  case 1:  {
   (_fwrite(7811,25,1,$6)|0);
   break;
  }
  default: {
   $$21 = 1;$$413 = 0;
   while(1) {
    $712 = HEAP32[$103>>2]|0;
    $713 = ($$21|0)>($712|0);
    if ($713) {
     break L304;
    }
    $714 = HEAP32[$104>>2]|0;
    $715 = (((($714) + ($$21<<7)|0)) + 116|0);
    $716 = HEAP32[$715>>2]|0;
    $717 = ($716|0)==(1);
    if ($717) {
     $718 = (($$413|0) % 5)&-1;
     $719 = ($718|0)==(0);
     if ($719) {
      (_fwrite(7837,22,1,$6)|0);
     }
     $720 = (($714) + ($$21<<7)|0);
     HEAP32[$vararg_buffer383>>2] = $720;
     (_fprintf($6,7780,$vararg_buffer383)|0);
     $721 = (($$413) + 1)|0;
     $$514 = $721;
    } else {
     $$514 = $$413;
    }
    $722 = (($$21) + 1)|0;
    $$21 = $722;$$413 = $$514;
   }
  }
  }
 } while(0);
 $$22 = 0;
 while(1) {
  $exitcond = ($$22|0)==(14);
  if ($exitcond) {
   break;
  }
  $723 = (((((($0)) + 1816|0) + (($$22*88)|0)|0)) + 64|0);
  $724 = HEAP32[$723>>2]|0;
  $725 = ($724|0)==(1);
  $726 = (((($0)) + 1816|0) + (($$22*88)|0)|0);
  if ($725) {
   $727 = (((((($0)) + 1816|0) + (($$22*88)|0)|0)) + 68|0);
   $728 = HEAP32[$727>>2]|0;
   HEAP32[$vararg_buffer386>>2] = $726;
   $vararg_ptr389 = ((($vararg_buffer386)) + 4|0);
   HEAP32[$vararg_ptr389>>2] = $728;
   (_fprintf($6,7860,$vararg_buffer386)|0);
   $729 = (((((($0)) + 1816|0) + (($$22*88)|0)|0)) + 72|0);
   $730 = +HEAPF64[$729>>3];
   $731 = $730 < 1.0E+10;
   if ($731) {
    HEAP32[$vararg_buffer390>>2] = $726;
    $vararg_ptr393 = ((($vararg_buffer390)) + 8|0);
    HEAPF64[$vararg_ptr393>>3] = $730;
    (_fprintf($6,7880,$vararg_buffer390)|0);
   }
   $732 = (((((($0)) + 1816|0) + (($$22*88)|0)|0)) + 80|0);
   $733 = +HEAPF64[$732>>3];
   $734 = $733 > -1.0E+10;
   if ($734) {
    HEAP32[$vararg_buffer394>>2] = $726;
    $vararg_ptr397 = ((($vararg_buffer394)) + 8|0);
    HEAPF64[$vararg_ptr397>>3] = $733;
    (_fprintf($6,7898,$vararg_buffer394)|0);
   }
  } else {
   HEAP32[$vararg_buffer398>>2] = $726;
   (_fprintf($6,7916,$vararg_buffer398)|0);
  }
  $735 = (($$22) + 1)|0;
  $$22 = $735;
 }
 (_fwrite(5271,2,1,$6)|0);
 (_fwrite(7926,13,1,$6)|0);
 $$23 = 1;
 while(1) {
  $736 = HEAP32[$0>>2]|0;
  $737 = ($$23|0)>($736|0);
  if ($737) {
   break;
  }
  $738 = HEAP32[$13>>2]|0;
  $739 = (((($738) + (($$23*96)|0)|0)) + 32|0);
  $740 = +HEAPF64[$739>>3];
  $741 = $740 == -1.0E+10;
  if (!($741)) {
   $742 = (((($738) + (($$23*96)|0)|0)) + 40|0);
   $743 = +HEAPF64[$742>>3];
   $744 = $743 == -1.0E+10;
   if (!($744)) {
    $745 = (($738) + (($$23*96)|0)|0);
    HEAP32[$vararg_buffer401>>2] = $745;
    $vararg_ptr404 = ((($vararg_buffer401)) + 8|0);
    HEAPF64[$vararg_ptr404>>3] = $740;
    $vararg_ptr405 = ((($vararg_buffer401)) + 16|0);
    HEAPF64[$vararg_ptr405>>3] = $743;
    (_fprintf($6,7940,$vararg_buffer401)|0);
   }
  }
  $746 = (($$23) + 1)|0;
  $$23 = $746;
 }
 (_fwrite(5271,2,1,$6)|0);
 (_fwrite(7962,10,1,$6)|0);
 $$24 = 1;
 while(1) {
  $747 = HEAP32[$103>>2]|0;
  $748 = ($$24|0)>($747|0);
  if ($748) {
   break;
  }
  $749 = HEAP32[$104>>2]|0;
  $750 = (((($749) + ($$24<<7)|0)) + 112|0);
  $751 = HEAP32[$750>>2]|0;
  $752 = ($751|0)==(0|0);
  L341: do {
   if (!($752)) {
    $753 = (($749) + ($$24<<7)|0);
    $$615 = 0;$755 = $751;
    while(1) {
     $754 = ((($755)) + 8|0);
     $756 = HEAP32[$754>>2]|0;
     $757 = ($$615|0)<($756|0);
     if (!($757)) {
      break L341;
     }
     $758 = HEAP32[$755>>2]|0;
     $759 = (($758) + ($$615<<3)|0);
     $760 = +HEAPF64[$759>>3];
     $761 = ((($755)) + 4|0);
     $762 = HEAP32[$761>>2]|0;
     $763 = (($762) + ($$615<<3)|0);
     $764 = +HEAPF64[$763>>3];
     HEAP32[$vararg_buffer406>>2] = $753;
     $vararg_ptr409 = ((($vararg_buffer406)) + 8|0);
     HEAPF64[$vararg_ptr409>>3] = $760;
     $vararg_ptr410 = ((($vararg_buffer406)) + 16|0);
     HEAPF64[$vararg_ptr410>>3] = $764;
     (_fprintf($6,7940,$vararg_buffer406)|0);
     $765 = (($$615) + 1)|0;
     $$pre22 = HEAP32[$750>>2]|0;
     $$615 = $765;$755 = $$pre22;
    }
   }
  } while(0);
  $766 = (($$24) + 1)|0;
  $$24 = $766;
 }
 (_fwrite(5953,1,1,$6)|0);
 _saveauxdata($0,$6);
 HEAP32[$vararg_buffer411>>2] = 7978;
 (_fprintf($6,7973,$vararg_buffer411)|0);
 _fclose($6);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _getdata($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _setdefaults($0);
 $1 = ((($0)) + 1200|0);
 _initreport($1);
 $2 = ((($0)) + 92|0);
 $3 = HEAP32[$2>>2]|0;
 _rewind($3);
 $4 = (_readdata($0)|0);
 $5 = ($4|0)==(0);
 if ($5) {
  _adjustdata($0);
  _initunits($0);
 } else {
  $6 = ($4|0)>(100);
  if ($6) {
   $9 = $4;
   return ($9|0);
  }
 }
 $7 = (_inittanks($0)|0);
 $8 = ($7|0)==(0);
 if (!($8)) {
  $9 = $7;
  return ($9|0);
 }
 _convertunits($0);
 $9 = 0;
 return ($9|0);
}
function _setdefaults($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 5336|0);
 (_strncpy($1,21208,79)|0);
 $2 = ((($0)) + 5416|0);
 (_strncpy($2,21208,79)|0);
 $3 = ((($0)) + 5496|0);
 (_strncpy($3,21208,79)|0);
 $4 = ((($0)) + 3664|0);
 (_strncpy($4,21208,259)|0);
 $5 = ((($0)) + 5576|0);
 (_strncpy($5,21208,259)|0);
 $6 = ((($0)) + 4624|0);
 (_strncpy($6,8063,31)|0);
 $7 = ((($0)) + 4656|0);
 (_strncpy($7,8072,31)|0);
 $8 = ((($0)) + 96|0);
 (_strncpy($8,8077,31)|0);
 $9 = ((($0)) + 5076|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($0)) + 1116|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($0)) + 1120|0);
 HEAP32[$11>>2] = 1;
 $12 = ((($0)) + 1124|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($0)) + 1128|0);
 HEAP32[$13>>2] = 0;
 $14 = ((($0)) + 4188|0);
 HEAP32[$14>>2] = 2;
 $15 = ((($0)) + 1216|0);
 HEAP32[$15>>2] = 0;
 $16 = ((($0)) + 4500|0);
 HEAP32[$16>>2] = 0;
 $17 = ((($0)) + 4280|0);
 HEAPF64[$17>>3] = 5.0000000000000001E-4;
 $18 = ((($0)) + 4288|0);
 HEAPF64[$18>>3] = 1.0E-4;
 $19 = ((($0)) + 4352|0);
 HEAPF64[$19>>3] = 0.001;
 $20 = ((($0)) + 4360|0);
 $21 = ((($0)) + 4496|0);
 HEAP32[$21>>2] = 0;
 $22 = ((($0)) + 4328|0);
 HEAPF64[$22>>3] = 0.0;
 $23 = ((($0)) + 4336|0);
 ;HEAP32[$20>>2]=0|0;HEAP32[$20+4>>2]=0|0;HEAP32[$20+8>>2]=0|0;HEAP32[$20+12>>2]=0|0;
 HEAPF64[$23>>3] = 0.10000000000000001;
 $24 = ((($0)) + 4320|0);
 HEAPF64[$24>>3] = 0.5;
 $25 = ((($0)) + 4508|0);
 HEAP32[$25>>2] = 200;
 $26 = ((($0)) + 4512|0);
 HEAP32[$26>>2] = -1;
 $27 = ((($0)) + 4384|0);
 HEAPF64[$27>>3] = -1.0E+10;
 $28 = ((($0)) + 4392|0);
 HEAPF64[$28>>3] = 1.0;
 $29 = ((($0)) + 4492|0);
 HEAP32[$29>>2] = 0;
 $30 = ((($0)) + 4416|0);
 $31 = ((($0)) + 4400|0);
 ;HEAP32[$30>>2]=0|0;HEAP32[$30+4>>2]=0|0;HEAP32[$30+8>>2]=0|0;HEAP32[$30+12>>2]=0|0;
 HEAPF64[$31>>3] = 75.0;
 $32 = ((($0)) + 4432|0);
 HEAPF64[$32>>3] = 0.0;
 $33 = ((($0)) + 4312|0);
 HEAPF64[$33>>3] = 2.0;
 $34 = ((($0)) + 4344|0);
 HEAPF64[$34>>3] = 1.0;
 $35 = ((($0)) + 4296|0);
 HEAPF64[$35>>3] = 9.9999999999999995E-8;
 $36 = ((($0)) + 4516|0);
 HEAP32[$36>>2] = 2;
 $37 = ((($0)) + 4520|0);
 HEAP32[$37>>2] = 10;
 $38 = ((($0)) + 4376|0);
 HEAPF64[$38>>3] = 0.0;
 $39 = ((($0)) + 4600|0);
 HEAP32[$39>>2] = 0;
 $40 = ((($0)) + 4688|0);
 HEAPF64[$40>>3] = -1.0E+10;
 $41 = ((($0)) + 4616|0);
 HEAP32[$41>>2] = 0;
 $42 = ((($0)) + 4768|0);
 HEAPF64[$42>>3] = 1.0;
 $43 = ((($0)) + 4776|0);
 HEAPF64[$43>>3] = 1.0;
 $44 = ((($0)) + 4784|0);
 HEAPF64[$44>>3] = 1.0;
 $45 = ((($0)) + 4792|0);
 $46 = ((($0)) + 4696|0);
 ;HEAP32[$45>>2]=0|0;HEAP32[$45+4>>2]=0|0;HEAP32[$45+8>>2]=0|0;HEAP32[$45+12>>2]=0|0;HEAP32[$45+16>>2]=0|0;HEAP32[$45+20>>2]=0|0;
 HEAPF64[$46>>3] = -1.0E+10;
 $47 = ((($0)) + 4736|0);
 HEAPF64[$47>>3] = 0.0;
 $48 = ((($0)) + 4896|0);
 HEAPF64[$48>>3] = 0.0;
 $49 = ((($0)) + 1192|0);
 HEAP32[$49>>2] = 0;
 $50 = ((($0)) + 1144|0);
 HEAP32[$50>>2] = 0;
 $51 = ((($0)) + 1156|0);
 HEAP32[$51>>2] = 0;
 $52 = ((($0)) + 1148|0);
 HEAP32[$52>>2] = 3600;
 $53 = ((($0)) + 1180|0);
 HEAP32[$53>>2] = 0;
 $54 = ((($0)) + 1152|0);
 HEAP32[$54>>2] = 3600;
 $55 = ((($0)) + 1160|0);
 HEAP32[$55>>2] = 3600;
 $56 = ((($0)) + 1188|0);
 HEAP32[$56>>2] = 0;
 $57 = ((($0)) + 1164|0);
 HEAP32[$57>>2] = 0;
 return;
}
function _initreport($0) {
 $0 = $0|0;
 var $$0 = 0, $$1 = 0, $$2 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $exitcond = 0, $exitcond1 = 0, $exitcond2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 329|0);
 (_strncpy($1,21208,259)|0);
 $2 = ((($0)) + 8|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 20|0);
 HEAP32[$3>>2] = 1;
 $4 = ((($0)) + 24|0);
 HEAP32[$4>>2] = 1;
 $5 = ((($0)) + 28|0);
 ;HEAP32[$5>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;HEAP32[$5+12>>2]=0|0;
 $$0 = 0;
 while(1) {
  $exitcond2 = ($$0|0)==(21);
  if ($exitcond2) {
   break;
  }
  $6 = (((($0)) + 616|0) + (($$0*88)|0)|0);
  $7 = (432 + ($$0<<2)|0);
  $8 = HEAP32[$7>>2]|0;
  (_strncpy($6,$8,31)|0);
  $9 = (((((($0)) + 616|0) + (($$0*88)|0)|0)) + 64|0);
  HEAP32[$9>>2] = 0;
  $10 = (((((($0)) + 616|0) + (($$0*88)|0)|0)) + 68|0);
  HEAP32[$10>>2] = 2;
  $11 = (((((($0)) + 616|0) + (($$0*88)|0)|0)) + 72|0);
  HEAPF64[$11>>3] = 1.0E+20;
  $12 = (((((($0)) + 616|0) + (($$0*88)|0)|0)) + 80|0);
  HEAPF64[$12>>3] = -1.0E+20;
  $13 = (($$0) + 1)|0;
  $$0 = $13;
 }
 $14 = ((($0)) + 1916|0);
 HEAP32[$14>>2] = 3;
 $$1 = 1;
 while(1) {
  $exitcond1 = ($$1|0)==(5);
  if ($exitcond1) {
   break;
  }
  $15 = (((((($0)) + 616|0) + (($$1*88)|0)|0)) + 64|0);
  HEAP32[$15>>2] = 1;
  $16 = (($$1) + 1)|0;
  $$1 = $16;
 }
 $$2 = 7;
 while(1) {
  $exitcond = ($$2|0)==(10);
  if ($exitcond) {
   break;
  }
  $17 = (((((($0)) + 616|0) + (($$2*88)|0)|0)) + 64|0);
  HEAP32[$17>>2] = 1;
  $18 = (($$2) + 1)|0;
  $$2 = $18;
 }
 return;
}
function _adjustdata($0) {
 $0 = $0|0;
 var $$ = 0.0, $$0 = 0, $$0$in = 0, $$02 = 0, $$1 = 0, $$2 = 0, $$off = 0, $$pre = 0, $$pre4 = 0, $$pre5 = 0, $$pre6 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0, $114 = 0.0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0, $76 = 0.0;
 var $77 = 0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0.0, $83 = 0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0, $93 = 0, $94 = 0.0;
 var $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0.0, $99 = 0.0, $spec$select = 0, $spec$select7 = 0, $spec$select7$$pre = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4600|0);
 $2 = ((($0)) + 1152|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<(1);
 if ($4) {
  HEAP32[$2>>2] = 3600;
  $8 = 3600;
 } else {
  $8 = $3;
 }
 $5 = ((($0)) + 1160|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 if ($7) {
  HEAP32[$5>>2] = $8;
  $16 = $8;
 } else {
  $16 = $6;
 }
 $9 = ((($0)) + 1148|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)<(1);
 $12 = $11 ? 3600 : $10;
 $13 = ($12|0)>($8|0);
 $spec$select = $13 ? $8 : $12;
 $14 = $11 | $13;
 $15 = ($spec$select|0)>($16|0);
 $spec$select7 = $15 ? $16 : $spec$select;
 $17 = $14 | $15;
 if ($17) {
  HEAP32[$9>>2] = $spec$select7;
 }
 $18 = ((($0)) + 1164|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($0)) + 1192|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($19|0)>($21|0);
 if ($22) {
  HEAP32[$18>>2] = 0;
 }
 $23 = ($21|0)==(0);
 if ($23) {
  HEAP32[$1>>2] = 0;
 }
 $24 = ((($0)) + 1180|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)==(0);
 if ($26) {
  $27 = (($spec$select7|0) / 10)&-1;
  HEAP32[$24>>2] = $27;
  $$pre4 = $27;
 } else {
  $$pre4 = $25;
 }
 $28 = ((($0)) + 1188|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)==(0);
 if ($30) {
  $31 = (($spec$select7|0) / 10)&-1;
  HEAP32[$28>>2] = $31;
  $$pre = $31;
 } else {
  $$pre = $29;
 }
 $32 = ($$pre|0)>($spec$select7|0);
 $spec$select7$$pre = $32 ? $spec$select7 : $$pre;
 HEAP32[$28>>2] = $spec$select7$$pre;
 $33 = ($$pre4|0)>($spec$select7|0);
 $34 = $33 ? $spec$select7 : $$pre4;
 HEAP32[$24>>2] = $34;
 $35 = ((($0)) + 4688|0);
 $36 = +HEAPF64[$35>>3];
 $37 = $36 == -1.0E+10;
 if ($37) {
  HEAPF64[$35>>3] = 0.01;
 }
 $38 = ((($0)) + 1120|0);
 $39 = HEAP32[$38>>2]|0;
 $$off = (($39) + -5)|0;
 $switch = ($$off>>>0)<(5);
 $40 = ((($0)) + 1116|0);
 if ($switch) {
  HEAP32[$40>>2] = 1;
  $41 = ((($0)) + 1124|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = ($42|0)==(0);
  if ($43) {
   HEAP32[$41>>2] = 2;
   $51 = 0.092903040000000006;
  } else {
   $51 = 0.092903040000000006;
  }
 } else {
  HEAP32[$40>>2] = 0;
  $44 = ((($0)) + 1124|0);
  HEAP32[$44>>2] = 0;
  $51 = 1.0;
 }
 $45 = ((($0)) + 4384|0);
 $46 = +HEAPF64[$45>>3];
 $47 = $46 == -1.0E+10;
 do {
  if ($47) {
   HEAPF64[$45>>3] = 1.1E-5;
  } else {
   $48 = $46 > 0.001;
   if ($48) {
    $49 = $46 * 1.1E-5;
    HEAPF64[$45>>3] = $49;
    break;
   } else {
    $50 = $46 / $51;
    HEAPF64[$45>>3] = $50;
    break;
   }
  }
 } while(0);
 $52 = ((($0)) + 4696|0);
 $53 = +HEAPF64[$52>>3];
 $54 = $53 == -1.0E+10;
 do {
  if ($54) {
   HEAPF64[$52>>3] = 1.3000000000000001E-8;
  } else {
   $55 = $53 > 1.0E-4;
   if ($55) {
    $56 = $53 * 1.3000000000000001E-8;
    HEAPF64[$52>>3] = $56;
    break;
   } else {
    $57 = $53 / $51;
    HEAPF64[$52>>3] = $57;
    break;
   }
  }
 } while(0);
 $58 = ((($0)) + 4500|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = ($59|0)==(0);
 $$ = $60 ? 1.8520000000000001 : 2.0;
 $61 = ((($0)) + 4304|0);
 HEAPF64[$61>>3] = $$;
 $62 = ((($0)) + 12|0);
 $63 = ((($0)) + 48|0);
 $64 = ((($0)) + 4792|0);
 $65 = ((($0)) + 4736|0);
 $66 = ((($0)) + 4800|0);
 $$02 = 1;
 while(1) {
  $67 = HEAP32[$62>>2]|0;
  $68 = ($$02|0)>($67|0);
  if ($68) {
   break;
  }
  $69 = HEAP32[$63>>2]|0;
  $70 = (((($69) + ($$02<<7)|0)) + 104|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = ($71>>>0)>(1);
  L47: do {
   if (!($72)) {
    $73 = (((($69) + ($$02<<7)|0)) + 72|0);
    $74 = +HEAPF64[$73>>3];
    $75 = $74 == -1.0E+10;
    if ($75) {
     $76 = +HEAPF64[$64>>3];
     HEAPF64[$73>>3] = $76;
    }
    $77 = (((($69) + ($$02<<7)|0)) + 80|0);
    $78 = +HEAPF64[$77>>3];
    $79 = $78 == -1.0E+10;
    if ($79) {
     $80 = +HEAPF64[$65>>3];
     $81 = $80 == 0.0;
     if ($81) {
      $82 = +HEAPF64[$66>>3];
      HEAPF64[$77>>3] = $82;
      break;
     }
     $83 = (((($69) + ($$02<<7)|0)) + 56|0);
     $84 = +HEAPF64[$83>>3];
     $85 = $84 > 0.0;
     do {
      if ($85) {
       $86 = (((($69) + ($$02<<7)|0)) + 40|0);
       $87 = +HEAPF64[$86>>3];
       $88 = $87 > 0.0;
       if (!($88)) {
        break;
       }
       $89 = HEAP32[$58>>2]|0;
       $90 = ($89|0)==(0);
       if ($90) {
        $91 = $80 / $84;
        HEAPF64[$77>>3] = $91;
        $$pre5 = HEAP32[$58>>2]|0;
        $93 = $$pre5;
       } else {
        $93 = $89;
       }
       $92 = ($93|0)==(1);
       if ($92) {
        $94 = +HEAPF64[$65>>3];
        $95 = $84 / $87;
        $96 = (+Math_log((+$95)));
        $97 = $96 < 0.0;
        $98 = - $96;
        $99 = $97 ? $98 : $96;
        $100 = $94 / $99;
        HEAPF64[$77>>3] = $100;
        $$pre6 = HEAP32[$58>>2]|0;
        $102 = $$pre6;
       } else {
        $102 = $93;
       }
       $101 = ($102|0)==(2);
       if (!($101)) {
        break L47;
       }
       $103 = +HEAPF64[$65>>3];
       $104 = $103 * $84;
       HEAPF64[$77>>3] = $104;
       break L47;
      }
     } while(0);
     HEAPF64[$77>>3] = 0.0;
    }
   }
  } while(0);
  $105 = (($$02) + 1)|0;
  $$02 = $105;
 }
 $106 = ((($0)) + 4|0);
 $107 = ((($0)) + 52|0);
 $$1 = 1;
 while(1) {
  $108 = HEAP32[$106>>2]|0;
  $109 = ($$1|0)>($108|0);
  if ($109) {
   break;
  }
  $110 = HEAP32[$107>>2]|0;
  $111 = (((($110) + (($$1*120)|0)|0)) + 64|0);
  $112 = +HEAPF64[$111>>3];
  $113 = $112 == -1.0E+10;
  if ($113) {
   $114 = +HEAPF64[$64>>3];
   HEAPF64[$111>>3] = $114;
  }
  $115 = (($$1) + 1)|0;
  $$1 = $115;
 }
 $116 = ((($0)) + 96|0);
 $117 = (_findpattern($0,$116)|0);
 $118 = ((($0)) + 1128|0);
 HEAP32[$118>>2] = $117;
 $119 = ($117|0)>(0);
 L76: do {
  if ($119) {
   $120 = ((($0)) + 44|0);
   $$2 = 1;
   while(1) {
    $121 = HEAP32[$0>>2]|0;
    $122 = ($$2|0)>($121|0);
    if ($122) {
     break L76;
    }
    $123 = HEAP32[$120>>2]|0;
    $124 = (((($123) + (($$2*96)|0)|0)) + 56|0);
    $$0$in = $124;
    while(1) {
     $$0 = HEAP32[$$0$in>>2]|0;
     $125 = ($$0|0)==(0|0);
     if ($125) {
      break;
     }
     $126 = ((($$0)) + 8|0);
     $127 = HEAP32[$126>>2]|0;
     $128 = ($127|0)==(0);
     if ($128) {
      $129 = HEAP32[$118>>2]|0;
      HEAP32[$126>>2] = $129;
     }
     $130 = ((($$0)) + 16|0);
     $$0$in = $130;
    }
    $131 = (($$2) + 1)|0;
    $$2 = $131;
   }
  }
 } while(0);
 $132 = HEAP32[$1>>2]|0;
 $133 = ($132|0)==(0);
 if (!($133)) {
  return;
 }
 $134 = ((($0)) + 2232|0);
 HEAP32[$134>>2] = 0;
 return;
}
function _initunits($0) {
 $0 = $0|0;
 var $$0 = 0.0, $$02 = 0.0, $$05 = 0.0, $$06 = 0.0, $$1 = 0.0, $$14 = 0.0, $$3 = 0.0, $$5 = 0.0, $$7 = 0.0, $$8 = 0.0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0;
 var $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, $spec$select = 0.0, $spec$select7 = 0.0, $spec$select8 = 0.0, $spec$select9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 1116|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(1);
 $4 = ((($0)) + 1936|0);
 $5 = ((($0)) + 1120|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (112 + ($6<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 (_strcpy($4,$8)|0);
 $9 = ((($0)) + 1848|0);
 do {
  if ($3) {
   (_strcpy($9,8006)|0);
   $10 = ((($0)) + 2024|0);
   (_strcpy($10,8006)|0);
   $11 = ((($0)) + 1124|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==(2);
   $14 = ((($0)) + 2112|0);
   if ($13) {
    (_strcpy($14,8006)|0);
   } else {
    (_strcpy($14,8008)|0);
   }
   $15 = ((($0)) + 2288|0);
   (_strcpy($15,8006)|0);
   $16 = ((($0)) + 2376|0);
   (_strcpy($16,8012)|0);
   $17 = ((($0)) + 2464|0);
   $18 = HEAP32[$5>>2]|0;
   $19 = (112 + ($18<<2)|0);
   $20 = HEAP32[$19>>2]|0;
   (_strcpy($17,$20)|0);
   $21 = ((($0)) + 2552|0);
   (_strcpy($21,8015)|0);
   $22 = ((($0)) + 2640|0);
   (_strcpy($22,8019)|0);
   $23 = ((($0)) + 3080|0);
   (_strcpy($23,21208)|0);
   $24 = ((($0)) + 3168|0);
   (_strcpy($24,8026)|0);
   $25 = HEAP32[$5>>2]|0;
   $26 = ($25|0)==(6);
   $spec$select = $26 ? 1699.0 : 28.317;
   $27 = ($25|0)==(7);
   $$14 = $27 ? 2.4466000000000001 : $spec$select;
   $28 = ($25|0)==(8);
   $spec$select7 = $28 ? 101.94 : $$14;
   $29 = ($25|0)==(9);
   $$3 = $29 ? 2446.5999999999999 : $spec$select7;
   $30 = HEAP32[$11>>2]|0;
   $31 = ($30|0)==(2);
   $32 = ((($0)) + 4392|0);
   $33 = +HEAPF64[$32>>3];
   if ($31) {
    $34 = $33 * 0.30480000000000002;
    $$0 = 0.74570000000000003;$$02 = 0.30480000000000002;$$06 = 304.80000000000001;$$1 = $34;$$8 = $$3;
    break;
   } else {
    $35 = $33 * 2.9876035000000001;
    $$0 = 0.74570000000000003;$$02 = 0.30480000000000002;$$06 = 304.80000000000001;$$1 = $35;$$8 = $$3;
    break;
   }
  } else {
   (_strcpy($9,8029)|0);
   $36 = ((($0)) + 2024|0);
   (_strcpy($36,8029)|0);
   $37 = ((($0)) + 2112|0);
   (_strcpy($37,8032)|0);
   $38 = ((($0)) + 2288|0);
   (_strcpy($38,8029)|0);
   $39 = ((($0)) + 2376|0);
   (_strcpy($39,8036)|0);
   $40 = ((($0)) + 2464|0);
   $41 = HEAP32[$5>>2]|0;
   $42 = (112 + ($41<<2)|0);
   $43 = HEAP32[$42>>2]|0;
   (_strcpy($40,$43)|0);
   $44 = ((($0)) + 2552|0);
   (_strcpy($44,8039)|0);
   $45 = ((($0)) + 2640|0);
   (_strcpy($45,8043)|0);
   $46 = ((($0)) + 3080|0);
   (_strcpy($46,21208)|0);
   $47 = ((($0)) + 3168|0);
   (_strcpy($47,8051)|0);
   $48 = HEAP32[$5>>2]|0;
   $49 = ($48|0)==(1);
   $spec$select8 = $49 ? 448.83100000000002 : 1.0;
   $50 = ($48|0)==(2);
   $$5 = $50 ? 0.64632000000000001 : $spec$select8;
   $51 = ($48|0)==(3);
   $spec$select9 = $51 ? 0.53820000000000001 : $$5;
   $52 = ($48|0)==(4);
   $$7 = $52 ? 1.9837 : $spec$select9;
   $53 = ((($0)) + 4392|0);
   $54 = +HEAPF64[$53>>3];
   $55 = $54 * 0.43330000000000002;
   $$0 = 1.0;$$02 = 1.0;$$06 = 12.0;$$1 = $55;$$8 = $$7;
  }
 } while(0);
 $56 = ((($0)) + 2200|0);
 (_strcpy($56,21208)|0);
 $57 = ((($0)) + 4600|0);
 $58 = HEAP32[$57>>2]|0;
 switch ($58|0) {
 case 1:  {
  $59 = ((($0)) + 4656|0);
  (_strncpy($56,$59,31)|0);
  $60 = ((($0)) + 2992|0);
  (_strncpy($60,$59,31)|0);
  (_strcat($60,8054)|0);
  $$05 = 0.035314475403467882;
  break;
 }
 case 2:  {
  (_strcpy($56,8670)|0);
  $$05 = 1.0;
  break;
 }
 case 3:  {
  (_strcpy($56,8663)|0);
  $$05 = 1.0;
  break;
 }
 default: {
  $$05 = 1.0;
 }
 }
 $61 = ((($0)) + 4912|0);
 HEAPF64[$61>>3] = $$8;
 $62 = ((($0)) + 4904|0);
 HEAPF64[$62>>3] = $$02;
 $63 = ((($0)) + 4920|0);
 HEAPF64[$63>>3] = $$02;
 $64 = ((($0)) + 4928|0);
 HEAPF64[$64>>3] = $$1;
 $65 = ((($0)) + 4936|0);
 HEAPF64[$65>>3] = $$05;
 $66 = ((($0)) + 4944|0);
 HEAPF64[$66>>3] = $$02;
 $67 = ((($0)) + 4952|0);
 HEAPF64[$67>>3] = $$06;
 $68 = ((($0)) + 4960|0);
 HEAPF64[$68>>3] = $$8;
 $69 = ((($0)) + 4968|0);
 HEAPF64[$69>>3] = $$02;
 $70 = ((($0)) + 4976|0);
 HEAPF64[$70>>3] = $$02;
 $71 = ((($0)) + 4984|0);
 HEAPF64[$71>>3] = $$05;
 $72 = ((($0)) + 5008|0);
 HEAPF64[$72>>3] = $$05;
 $73 = ((($0)) + 5016|0);
 HEAPF64[$73>>3] = 1.0;
 $74 = ((($0)) + 5024|0);
 HEAPF64[$74>>3] = $$0;
 $75 = $$02 * $$02;
 $76 = $75 * $$02;
 $77 = ((($0)) + 5040|0);
 HEAPF64[$77>>3] = $76;
 $78 = ((($0)) + 1148|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = ($79|0)<(1800);
 $81 = ((($0)) + 5032|0);
 if ($80) {
  HEAPF64[$81>>3] = 0.016666666666666666;
  $82 = ((($0)) + 3256|0);
  (_strcpy($82,8059)|0);
  return;
 } else {
  HEAPF64[$81>>3] = 2.7777777777777778E-4;
  $83 = ((($0)) + 3256|0);
  (_strcpy($83,8670)|0);
  return;
 }
}
function _inittanks($0) {
 $0 = $0|0;
 var $$0 = 0, $$01 = 0, $$04 = 0, $$23 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0;
 var $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(272|0);
 $vararg_buffer = sp + 256|0;
 $1 = sp;
 _memset(($1|0),0,256)|0;
 $2 = ((($0)) + 4|0);
 $3 = ((($0)) + 52|0);
 $4 = ((($0)) + 68|0);
 $5 = ((($0)) + 5080|0);
 $6 = ((($0)) + 44|0);
 $$01 = 0;$$04 = 1;
 while(1) {
  $7 = HEAP32[$2>>2]|0;
  $8 = ($$04|0)>($7|0);
  if ($8) {
   break;
  }
  $9 = HEAP32[$3>>2]|0;
  $10 = (((($9) + (($$04*120)|0)|0)) + 8|0);
  $11 = +HEAPF64[$10>>3];
  $12 = $11 == 0.0;
  do {
   if ($12) {
    $$23 = $$01;
   } else {
    $13 = (((($9) + (($$04*120)|0)|0)) + 32|0);
    $14 = +HEAPF64[$13>>3];
    $15 = (((($9) + (($$04*120)|0)|0)) + 24|0);
    $16 = +HEAPF64[$15>>3];
    $17 = $14 > $16;
    if ($17) {
     label = 6;
    } else {
     $18 = (((($9) + (($$04*120)|0)|0)) + 16|0);
     $19 = +HEAPF64[$18>>3];
     $20 = $19 > $16;
     $21 = $14 < $19;
     $or$cond = $20 | $21;
     if ($or$cond) {
      label = 6;
     } else {
      $$0 = 0;
     }
    }
    if ((label|0) == 6) {
     label = 0;
     $$0 = 1;
    }
    $22 = (((($9) + (($$04*120)|0)|0)) + 92|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ($23|0)>(0);
    if ($24) {
     $25 = HEAP32[$4>>2]|0;
     $26 = (((($25) + (($23*56)|0)|0)) + 40|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = (($27) + -1)|0;
     $29 = (((($9) + (($$04*120)|0)|0)) + 16|0);
     $30 = +HEAPF64[$29>>3];
     $31 = (((($25) + (($23*56)|0)|0)) + 48|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = +HEAPF64[$32>>3];
     $34 = $30 < $33;
     if (!($34)) {
      $35 = (($32) + ($28<<3)|0);
      $36 = +HEAPF64[$35>>3];
      $37 = $16 > $36;
      if (!($37)) {
       $38 = (((($25) + (($23*56)|0)|0)) + 52|0);
       $39 = HEAP32[$38>>2]|0;
       $40 = (+_interp($27,$32,$39,$30));
       $41 = (((($9) + (($$04*120)|0)|0)) + 40|0);
       HEAPF64[$41>>3] = $40;
       $42 = HEAP32[$26>>2]|0;
       $43 = HEAP32[$31>>2]|0;
       $44 = HEAP32[$38>>2]|0;
       $45 = (+_interp($42,$43,$44,$16));
       $46 = (((($9) + (($$04*120)|0)|0)) + 48|0);
       HEAPF64[$46>>3] = $45;
       $47 = HEAP32[$26>>2]|0;
       $48 = HEAP32[$31>>2]|0;
       $49 = HEAP32[$38>>2]|0;
       $50 = (+_interp($47,$48,$49,$14));
       $51 = (((($9) + (($$04*120)|0)|0)) + 56|0);
       HEAPF64[$51>>3] = $50;
       $52 = HEAP32[$38>>2]|0;
       $53 = (($52) + ($28<<3)|0);
       $54 = +HEAPF64[$53>>3];
       $55 = +HEAPF64[$52>>3];
       $56 = $54 - $55;
       $57 = HEAP32[$31>>2]|0;
       $58 = (($57) + ($28<<3)|0);
       $59 = +HEAPF64[$58>>3];
       $60 = +HEAPF64[$57>>3];
       $61 = $59 - $60;
       $62 = $56 / $61;
       $63 = $62 * 4.0;
       $64 = $63 / 3.1415926535897931;
       $65 = (+Math_sqrt((+$64)));
       HEAPF64[$10>>3] = $65;
       label = 11;
      }
     }
    } else {
     label = 11;
    }
    if ((label|0) == 11) {
     label = 0;
     $66 = ($$0|0)==(0);
     if ($66) {
      $$23 = $$01;
      break;
     }
    }
    $67 = (_geterrmsg(225,$1)|0);
    $68 = HEAP32[$6>>2]|0;
    $69 = (($9) + (($$04*120)|0)|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = (($68) + (($70*96)|0)|0);
    HEAP32[$vararg_buffer>>2] = $67;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $71;
    _sprintf($5,7984,$vararg_buffer);
    _writeline($0,$5);
    $$23 = 200;
   }
  } while(0);
  $72 = (($$04) + 1)|0;
  $$01 = $$23;$$04 = $72;
 }
 STACKTOP = sp;return ($$01|0);
}
function _convertunits($0) {
 $0 = $0|0;
 var $$0 = 0, $$0$in = 0, $$01 = 0, $$02 = 0, $$03 = 0, $$1 = 0, $$2 = 0, $$3 = 0, $$pre = 0, $$pre$pre = 0, $1 = 0, $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0.0;
 var $108 = 0.0, $109 = 0, $11 = 0.0, $110 = 0.0, $111 = 0, $112 = 0.0, $113 = 0.0, $114 = 0, $115 = 0.0, $116 = 0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0.0, $123 = 0, $124 = 0.0, $125 = 0.0;
 var $126 = 0, $127 = 0.0, $128 = 0.0, $129 = 0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0.0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0, $151 = 0.0, $152 = 0.0, $153 = 0.0, $154 = 0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0;
 var $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0, $168 = 0.0, $169 = 0.0, $17 = 0, $170 = 0, $171 = 0.0, $172 = 0.0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0.0, $181 = 0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0, $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0, $195 = 0.0, $196 = 0.0, $197 = 0.0, $198 = 0;
 var $199 = 0.0, $2 = 0, $20 = 0, $200 = 0.0, $201 = 0.0, $202 = 0, $203 = 0.0, $204 = 0.0, $205 = 0.0, $206 = 0, $207 = 0.0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0, $211 = 0.0, $212 = 0.0, $213 = 0, $214 = 0.0, $215 = 0.0;
 var $216 = 0.0, $217 = 0.0, $218 = 0.0, $219 = 0, $22 = 0, $220 = 0.0, $221 = 0, $222 = 0.0, $223 = 0.0, $224 = 0.0, $225 = 0.0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0.0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0.0, $240 = 0, $241 = 0, $242 = 0, $243 = 0.0, $244 = 0, $245 = 0.0, $246 = 0.0, $247 = 0.0, $248 = 0.0, $249 = 0.0, $25 = 0.0, $250 = 0.0, $251 = 0.0;
 var $252 = 0, $253 = 0.0, $254 = 0, $255 = 0, $256 = 0, $257 = 0.0, $258 = 0.0, $259 = 0.0, $26 = 0, $260 = 0.0, $261 = 0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0;
 var $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0.0, $70 = 0.0;
 var $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0, $89 = 0.0;
 var $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 44|0);
 $2 = ((($0)) + 4904|0);
 $3 = ((($0)) + 4936|0);
 $$03 = 1;
 while(1) {
  $4 = HEAP32[$0>>2]|0;
  $5 = ($$03|0)>($4|0);
  if ($5) {
   break;
  }
  $6 = HEAP32[$1>>2]|0;
  $7 = +HEAPF64[$2>>3];
  $8 = (((($6) + (($$03*96)|0)|0)) + 48|0);
  $9 = +HEAPF64[$8>>3];
  $10 = $9 / $7;
  HEAPF64[$8>>3] = $10;
  $11 = +HEAPF64[$3>>3];
  $12 = (((($6) + (($$03*96)|0)|0)) + 64|0);
  $13 = +HEAPF64[$12>>3];
  $14 = $13 / $11;
  HEAPF64[$12>>3] = $14;
  $15 = (($$03) + 1)|0;
  $$03 = $15;
 }
 $16 = ((($0)) + 8|0);
 $17 = ((($0)) + 4912|0);
 $$1 = 1;
 while(1) {
  $18 = HEAP32[$16>>2]|0;
  $19 = ($$1|0)>($18|0);
  if ($19) {
   break;
  }
  $20 = HEAP32[$1>>2]|0;
  $21 = (((($20) + (($$1*96)|0)|0)) + 56|0);
  $$0$in = $21;
  while(1) {
   $$0 = HEAP32[$$0$in>>2]|0;
   $22 = ($$0|0)==(0|0);
   if ($22) {
    break;
   }
   $23 = +HEAPF64[$17>>3];
   $24 = +HEAPF64[$$0>>3];
   $25 = $24 / $23;
   HEAPF64[$$0>>3] = $25;
   $26 = ((($$0)) + 16|0);
   $$0$in = $26;
  }
  $27 = (($$1) + 1)|0;
  $$1 = $27;
 }
 $28 = ((($0)) + 4928|0);
 $29 = +HEAPF64[$28>>3];
 $30 = ((($0)) + 4328|0);
 $31 = +HEAPF64[$30>>3];
 $32 = $31 / $29;
 HEAPF64[$30>>3] = $32;
 $33 = ((($0)) + 4336|0);
 $34 = +HEAPF64[$33>>3];
 $35 = $34 / $29;
 HEAPF64[$33>>3] = $35;
 $36 = ((($0)) + 4960|0);
 $37 = +HEAPF64[$36>>3];
 $38 = ((($0)) + 4312|0);
 $39 = +HEAPF64[$38>>3];
 $40 = (+Math_pow((+$37),(+$39)));
 $41 = $40 / $29;
 $$2 = 1;$43 = $18;
 while(1) {
  $42 = ($$2|0)>($43|0);
  if ($42) {
   break;
  }
  $44 = HEAP32[$1>>2]|0;
  $45 = (((($44) + (($$2*96)|0)|0)) + 72|0);
  $46 = +HEAPF64[$45>>3];
  $47 = $46 > 0.0;
  if ($47) {
   $48 = +HEAPF64[$38>>3];
   $49 = (+Math_pow((+$46),(+$48)));
   $50 = $41 / $49;
   HEAPF64[$45>>3] = $50;
   $$pre$pre = HEAP32[$16>>2]|0;
   $$pre = $$pre$pre;
  } else {
   $$pre = $43;
  }
  $51 = (($$2) + 1)|0;
  $$2 = $51;$43 = $$pre;
 }
 $52 = ((($0)) + 4|0);
 $53 = ((($0)) + 52|0);
 $54 = ((($0)) + 5040|0);
 $$02 = 1;
 while(1) {
  $55 = HEAP32[$52>>2]|0;
  $56 = ($$02|0)>($55|0);
  if ($56) {
   break;
  }
  $57 = HEAP32[$53>>2]|0;
  $58 = (($57) + (($$02*120)|0)|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = HEAP32[$1>>2]|0;
  $61 = (((($60) + (($59*96)|0)|0)) + 48|0);
  $62 = +HEAPF64[$61>>3];
  $63 = (((($57) + (($$02*120)|0)|0)) + 32|0);
  $64 = +HEAPF64[$63>>3];
  $65 = +HEAPF64[$2>>3];
  $66 = $64 / $65;
  $67 = $62 + $66;
  HEAPF64[$63>>3] = $67;
  $68 = +HEAPF64[$61>>3];
  $69 = (((($57) + (($$02*120)|0)|0)) + 16|0);
  $70 = +HEAPF64[$69>>3];
  $71 = +HEAPF64[$2>>3];
  $72 = $70 / $71;
  $73 = $68 + $72;
  HEAPF64[$69>>3] = $73;
  $74 = +HEAPF64[$61>>3];
  $75 = (((($57) + (($$02*120)|0)|0)) + 24|0);
  $76 = +HEAPF64[$75>>3];
  $77 = +HEAPF64[$2>>3];
  $78 = $76 / $77;
  $79 = $74 + $78;
  HEAPF64[$75>>3] = $79;
  $80 = (((($57) + (($$02*120)|0)|0)) + 8|0);
  $81 = +HEAPF64[$80>>3];
  $82 = +HEAPF64[$2>>3];
  $83 = $81 / $82;
  $84 = $83 * $83;
  $85 = $84 * 3.1415926535897931;
  $86 = $85 * 0.25;
  HEAPF64[$80>>3] = $86;
  $87 = +HEAPF64[$54>>3];
  $88 = (((($57) + (($$02*120)|0)|0)) + 56|0);
  $89 = +HEAPF64[$88>>3];
  $90 = $89 / $87;
  HEAPF64[$88>>3] = $90;
  $91 = +HEAPF64[$54>>3];
  $92 = (((($57) + (($$02*120)|0)|0)) + 40|0);
  $93 = +HEAPF64[$92>>3];
  $94 = $93 / $91;
  HEAPF64[$92>>3] = $94;
  $95 = +HEAPF64[$54>>3];
  $96 = (((($57) + (($$02*120)|0)|0)) + 48|0);
  $97 = +HEAPF64[$96>>3];
  $98 = $97 / $95;
  HEAPF64[$96>>3] = $98;
  $99 = (((($57) + (($$02*120)|0)|0)) + 64|0);
  $100 = +HEAPF64[$99>>3];
  $101 = $100 / 86400.0;
  HEAPF64[$99>>3] = $101;
  $102 = (((($57) + (($$02*120)|0)|0)) + 72|0);
  HEAPF64[$102>>3] = $90;
  $103 = (((($60) + (($59*96)|0)|0)) + 64|0);
  $104 = +HEAPF64[$103>>3];
  $105 = (((($57) + (($$02*120)|0)|0)) + 80|0);
  HEAPF64[$105>>3] = $104;
  $106 = (((($57) + (($$02*120)|0)|0)) + 104|0);
  $107 = +HEAPF64[$106>>3];
  $108 = $107 * $98;
  HEAPF64[$106>>3] = $108;
  $109 = (($$02) + 1)|0;
  $$02 = $109;
 }
 $110 = +HEAPF64[$36>>3];
 $111 = ((($0)) + 4360|0);
 $112 = +HEAPF64[$111>>3];
 $113 = $112 / $110;
 HEAPF64[$111>>3] = $113;
 $114 = ((($0)) + 4920|0);
 $115 = +HEAPF64[$114>>3];
 $116 = ((($0)) + 4368|0);
 $117 = +HEAPF64[$116>>3];
 $118 = $117 / $115;
 HEAPF64[$116>>3] = $118;
 $119 = +HEAPF64[$3>>3];
 $120 = ((($0)) + 4808|0);
 $121 = +HEAPF64[$120>>3];
 $122 = $121 / $119;
 HEAPF64[$120>>3] = $122;
 $123 = ((($0)) + 4688|0);
 $124 = +HEAPF64[$123>>3];
 $125 = $124 / $119;
 HEAPF64[$123>>3] = $125;
 $126 = ((($0)) + 4792|0);
 $127 = +HEAPF64[$126>>3];
 $128 = $127 / 86400.0;
 HEAPF64[$126>>3] = $128;
 $129 = ((($0)) + 4800|0);
 $130 = +HEAPF64[$129>>3];
 $131 = $130 / 86400.0;
 HEAPF64[$129>>3] = $131;
 $132 = ((($0)) + 12|0);
 $133 = ((($0)) + 48|0);
 $134 = ((($0)) + 4500|0);
 $135 = ((($0)) + 4952|0);
 $136 = ((($0)) + 4944|0);
 $137 = ((($0)) + 56|0);
 $138 = ((($0)) + 1116|0);
 $139 = ((($0)) + 5024|0);
 $$01 = 1;
 while(1) {
  $140 = HEAP32[$132>>2]|0;
  $141 = ($$01|0)>($140|0);
  if ($141) {
   break;
  }
  $142 = HEAP32[$133>>2]|0;
  $143 = (((($142) + ($$01<<7)|0)) + 104|0);
  $144 = HEAP32[$143>>2]|0;
  $145 = ($144>>>0)<(2);
  L27: do {
   if ($145) {
    $146 = HEAP32[$134>>2]|0;
    $147 = ($146|0)==(1);
    if ($147) {
     $148 = +HEAPF64[$2>>3];
     $149 = $148 * 1000.0;
     $150 = (((($142) + ($$01<<7)|0)) + 56|0);
     $151 = +HEAPF64[$150>>3];
     $152 = $151 / $149;
     HEAPF64[$150>>3] = $152;
    }
    $153 = +HEAPF64[$135>>3];
    $154 = (((($142) + ($$01<<7)|0)) + 40|0);
    $155 = +HEAPF64[$154>>3];
    $156 = $155 / $153;
    HEAPF64[$154>>3] = $156;
    $157 = +HEAPF64[$136>>3];
    $158 = (((($142) + ($$01<<7)|0)) + 48|0);
    $159 = +HEAPF64[$158>>3];
    $160 = $159 / $157;
    HEAPF64[$158>>3] = $160;
    $161 = (((($142) + ($$01<<7)|0)) + 64|0);
    $162 = +HEAPF64[$161>>3];
    $163 = $162 * 0.025170000000000001;
    $164 = $156 * $156;
    $165 = $163 / $164;
    $166 = $165 / $164;
    HEAPF64[$161>>3] = $166;
    $167 = (((($142) + ($$01<<7)|0)) + 72|0);
    $168 = +HEAPF64[$167>>3];
    $169 = $168 / 86400.0;
    HEAPF64[$167>>3] = $169;
    $170 = (((($142) + ($$01<<7)|0)) + 80|0);
    $171 = +HEAPF64[$170>>3];
    $172 = $171 / 86400.0;
    HEAPF64[$170>>3] = $172;
   } else {
    $173 = ($144|0)==(2);
    if (!($173)) {
     $209 = +HEAPF64[$135>>3];
     $210 = (((($142) + ($$01<<7)|0)) + 40|0);
     $211 = +HEAPF64[$210>>3];
     $212 = $211 / $209;
     HEAPF64[$210>>3] = $212;
     $213 = (((($142) + ($$01<<7)|0)) + 64|0);
     $214 = +HEAPF64[$213>>3];
     $215 = $214 * 0.025170000000000001;
     $216 = $212 * $212;
     $217 = $215 / $216;
     $218 = $217 / $216;
     HEAPF64[$213>>3] = $218;
     $219 = (((($142) + ($$01<<7)|0)) + 56|0);
     $220 = +HEAPF64[$219>>3];
     $221 = $220 != -1.0E+10;
     if (!($221)) {
      break;
     }
     switch ($144|0) {
     case 6:  {
      $222 = +HEAPF64[$36>>3];
      $223 = $220 / $222;
      HEAPF64[$219>>3] = $223;
      break L27;
      break;
     }
     case 5: case 4: case 3:  {
      $224 = +HEAPF64[$28>>3];
      $225 = $220 / $224;
      HEAPF64[$219>>3] = $225;
      break L27;
      break;
     }
     default: {
      break L27;
     }
     }
    }
    $174 = (_findpump($0,$$01)|0);
    $175 = HEAP32[$137>>2]|0;
    $176 = (((($175) + ($174<<7)|0)) + 4|0);
    $177 = HEAP32[$176>>2]|0;
    switch ($177|0) {
    case 0:  {
     $178 = HEAP32[$138>>2]|0;
     $179 = ($178|0)==(1);
     if (!($179)) {
      break L27;
     }
     $180 = +HEAPF64[$139>>3];
     $181 = (((($175) + ($174<<7)|0)) + 40|0);
     $182 = +HEAPF64[$181>>3];
     $183 = $182 / $180;
     HEAPF64[$181>>3] = $183;
     break L27;
     break;
    }
    case 1:  {
     $184 = +HEAPF64[$114>>3];
     $185 = (((($175) + ($174<<7)|0)) + 32|0);
     $186 = +HEAPF64[$185>>3];
     $187 = $186 / $184;
     HEAPF64[$185>>3] = $187;
     $188 = +HEAPF64[$36>>3];
     $189 = (((($175) + ($174<<7)|0)) + 48|0);
     $190 = +HEAPF64[$189>>3];
     $191 = (+Math_pow((+$188),(+$190)));
     $192 = +HEAPF64[$114>>3];
     $193 = $191 / $192;
     $194 = (((($175) + ($174<<7)|0)) + 40|0);
     $195 = +HEAPF64[$194>>3];
     $196 = $195 * $193;
     HEAPF64[$194>>3] = $196;
     break;
    }
    default: {
    }
    }
    $197 = +HEAPF64[$36>>3];
    $198 = (((($175) + ($174<<7)|0)) + 8|0);
    $199 = +HEAPF64[$198>>3];
    $200 = $199 / $197;
    HEAPF64[$198>>3] = $200;
    $201 = +HEAPF64[$36>>3];
    $202 = (((($175) + ($174<<7)|0)) + 16|0);
    $203 = +HEAPF64[$202>>3];
    $204 = $203 / $201;
    HEAPF64[$202>>3] = $204;
    $205 = +HEAPF64[$114>>3];
    $206 = (((($175) + ($174<<7)|0)) + 24|0);
    $207 = +HEAPF64[$206>>3];
    $208 = $207 / $205;
    HEAPF64[$206>>3] = $208;
   }
  } while(0);
  $226 = (($$01) + 1)|0;
  $$01 = $226;
 }
 $227 = ((($0)) + 28|0);
 $228 = ((($0)) + 72|0);
 $$3 = 1;
 while(1) {
  $229 = HEAP32[$227>>2]|0;
  $230 = ($$3|0)>($229|0);
  if ($230) {
   break;
  }
  $231 = HEAP32[$228>>2]|0;
  $232 = (($231) + (($$3*40)|0)|0);
  $233 = HEAP32[$232>>2]|0;
  $234 = ($233|0)==(0);
  L50: do {
   if (!($234)) {
    $235 = HEAP32[$133>>2]|0;
    $236 = (((($231) + (($$3*40)|0)|0)) + 4|0);
    $237 = HEAP32[$236>>2]|0;
    $238 = ($237|0)>(0);
    do {
     if ($238) {
      $239 = HEAP32[$1>>2]|0;
      $240 = HEAP32[$16>>2]|0;
      $241 = ($237|0)>($240|0);
      $242 = (((($239) + (($237*96)|0)|0)) + 48|0);
      $243 = +HEAPF64[$242>>3];
      $244 = (((($231) + (($$3*40)|0)|0)) + 16|0);
      $245 = +HEAPF64[$244>>3];
      if ($241) {
       $246 = +HEAPF64[$2>>3];
       $247 = $245 / $246;
       $248 = $243 + $247;
       HEAPF64[$244>>3] = $248;
       break;
      } else {
       $249 = +HEAPF64[$28>>3];
       $250 = $245 / $249;
       $251 = $243 + $250;
       HEAPF64[$244>>3] = $251;
       break;
      }
     }
    } while(0);
    $252 = (((($231) + (($$3*40)|0)|0)) + 24|0);
    $253 = +HEAPF64[$252>>3];
    $254 = $253 != -1.0E+10;
    if ($254) {
     $255 = (((($235) + ($233<<7)|0)) + 104|0);
     $256 = HEAP32[$255>>2]|0;
     switch ($256|0) {
     case 5: case 4: case 3:  {
      $257 = +HEAPF64[$28>>3];
      $258 = $253 / $257;
      HEAPF64[$252>>3] = $258;
      break L50;
      break;
     }
     case 6:  {
      $259 = +HEAPF64[$36>>3];
      $260 = $253 / $259;
      HEAPF64[$252>>3] = $260;
      break L50;
      break;
     }
     default: {
      break L50;
     }
     }
    }
   }
  } while(0);
  $261 = (($$3) + 1)|0;
  $$3 = $261;
 }
 return;
}
function _netsize($0) {
 $0 = $0|0;
 var $$0 = 0, $$02$ph = 0, $$1 = 0, $$2 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1040|0);
 $1 = sp;
 $2 = ((($0)) + 92|0);
 $3 = ((($0)) + 1068|0);
 $4 = ((($0)) + 1076|0);
 $5 = ((($0)) + 1072|0);
 $6 = ((($0)) + 1080|0);
 $7 = ((($0)) + 1084|0);
 $8 = ((($0)) + 1088|0);
 $9 = ((($0)) + 1100|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($0)) + 36|0);
 ;HEAP32[$3>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;HEAP32[$3+12>>2]=0|0;HEAP32[$3+16>>2]=0|0;HEAP32[$3+20>>2]=0|0;HEAP32[$3+24>>2]=0|0;
 HEAP32[$10>>2] = -1;
 $11 = (_addpattern($0,21208)|0);
 $12 = ($11|0)==(0);
 if (!($12)) {
  $$0 = $11;
  STACKTOP = sp;return ($$0|0);
 }
 $13 = ((($0)) + 64|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($14)) + 36|0);
 HEAP32[$15>>2] = 1;
 $16 = (_calloc(1,8)|0);
 $17 = ((($14)) + 40|0);
 HEAP32[$17>>2] = $16;
 HEAPF64[$16>>3] = 1.0;
 $18 = HEAP32[$10>>2]|0;
 $19 = ((($0)) + 1096|0);
 HEAP32[$19>>2] = $18;
 $20 = HEAP32[$2>>2]|0;
 $21 = ($20|0)==(0|0);
 if ($21) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $22 = ((($0)) + 40|0);
 $$02$ph = -1;
 L7: while(1) {
  L9: while(1) {
   L11: while(1) {
    $23 = HEAP32[$2>>2]|0;
    $24 = (_fgets($1,1024,$23)|0);
    $25 = ($24|0)==(0|0);
    if ($25) {
     $$2 = 0;
     break L7;
    }
    $26 = (_strtok($1,8079)|0);
    $27 = ($26|0)==(0|0);
    L14: do {
     if (!($27)) {
      $28 = HEAP8[$26>>0]|0;
      switch ($28<<24>>24) {
      case 59:  {
       break L14;
       break;
      }
      case 91:  {
       break;
      }
      default: {
       break L11;
      }
      }
      $29 = (_findmatch($26,304)|0);
      $30 = ($29|0)>(-1);
      if ($30) {
       break L9;
      }
     }
    } while(0);
   }
   switch ($$02$ph|0) {
   case 1:  {
    $32 = HEAP32[$3>>2]|0;
    $33 = (($32) + 1)|0;
    HEAP32[$3>>2] = $33;
    break;
   }
   case 3: case 2:  {
    $34 = HEAP32[$4>>2]|0;
    $35 = (($34) + 1)|0;
    HEAP32[$4>>2] = $35;
    break;
   }
   case 4:  {
    $36 = HEAP32[$5>>2]|0;
    $37 = (($36) + 1)|0;
    HEAP32[$5>>2] = $37;
    break;
   }
   case 5:  {
    $38 = HEAP32[$6>>2]|0;
    $39 = (($38) + 1)|0;
    HEAP32[$6>>2] = $39;
    break;
   }
   case 6:  {
    $40 = HEAP32[$7>>2]|0;
    $41 = (($40) + 1)|0;
    HEAP32[$7>>2] = $41;
    break;
   }
   case 7:  {
    $42 = HEAP32[$8>>2]|0;
    $43 = (($42) + 1)|0;
    HEAP32[$8>>2] = $43;
    break;
   }
   case 8:  {
    _addrule($2,$26);
    break;
   }
   case 12:  {
    $44 = (_addpattern($0,$26)|0);
    $45 = HEAP32[$10>>2]|0;
    HEAP32[$19>>2] = $45;
    $$1 = $44;
    label = 23;
    break;
   }
   case 13:  {
    $46 = (_addcurve($0,$26)|0);
    $47 = HEAP32[$22>>2]|0;
    HEAP32[$9>>2] = $47;
    $$1 = $46;
    label = 23;
    break;
   }
   default: {
   }
   }
   if ((label|0) == 23) {
    label = 0;
    $48 = ($$1|0)==(0);
    if (!($48)) {
     $$2 = $$1;
     break L7;
    }
   }
  }
  $31 = ($29|0)==(28);
  if ($31) {
   $$2 = 0;
   break;
  }
  $$02$ph = $29;
 }
 $49 = HEAP32[$3>>2]|0;
 $50 = HEAP32[$4>>2]|0;
 $51 = (($49) + ($50))|0;
 $52 = ((($0)) + 1060|0);
 HEAP32[$52>>2] = $51;
 $53 = HEAP32[$5>>2]|0;
 $54 = HEAP32[$6>>2]|0;
 $55 = (($53) + ($54))|0;
 $56 = HEAP32[$7>>2]|0;
 $57 = (($55) + ($56))|0;
 $58 = ((($0)) + 1064|0);
 HEAP32[$58>>2] = $57;
 $59 = HEAP32[$19>>2]|0;
 $60 = ($59|0)<(1);
 if ($60) {
  HEAP32[$19>>2] = 1;
 }
 $61 = ($$2|0)==(0);
 if (!($61)) {
  $$0 = $$2;
  STACKTOP = sp;return ($$0|0);
 }
 $62 = ($49|0)<(1);
 if ($62) {
  $$0 = 223;
  STACKTOP = sp;return ($$0|0);
 } else {
  $63 = ($50|0)==(0);
  $spec$select = $63 ? 224 : 0;
  STACKTOP = sp;return ($spec$select|0);
 }
 return (0)|0;
}
function _addpattern($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 36|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)>(0);
 if ($4) {
  $5 = ((($0)) + 64|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (($6) + (($3*44)|0)|0);
  $8 = (_strcmp($1,$7)|0);
  $9 = ($8|0)==(0);
  if ($9) {
   $$0 = 0;
   return ($$0|0);
  }
  $10 = (_findpattern($0,$1)|0);
  $11 = ($10|0)>(0);
  if ($11) {
   $$0 = 0;
   return ($$0|0);
  }
 }
 $12 = (_strlen($1)|0);
 $13 = ($12>>>0)>(31);
 if ($13) {
  $$0 = 252;
  return ($$0|0);
 }
 $14 = ((($0)) + 64|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($3*44)|0;
 $17 = (($16) + 88)|0;
 $18 = (_realloc($15,$17)|0);
 HEAP32[$14>>2] = $18;
 $19 = ($18|0)==(0|0);
 if ($19) {
  $$0 = 101;
  return ($$0|0);
 }
 $20 = HEAP32[$2>>2]|0;
 $21 = (($20) + 1)|0;
 HEAP32[$2>>2] = $21;
 $22 = (($18) + (($21*44)|0)|0);
 (_strncpy($22,$1,31)|0);
 $23 = (((($18) + (($21*44)|0)|0)) + 32|0);
 HEAP32[$23>>2] = 0;
 $24 = (((($18) + (($21*44)|0)|0)) + 36|0);
 HEAP32[$24>>2] = 0;
 $25 = (((($18) + (($21*44)|0)|0)) + 40|0);
 HEAP32[$25>>2] = 0;
 $$0 = 0;
 return ($$0|0);
}
function _findmatch($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$01 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$01 = 0;
 while(1) {
  $2 = (($1) + ($$01<<2)|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)==(0|0);
  if ($4) {
   $$0 = -1;
   label = 5;
   break;
  }
  $5 = (_match($0,$3)|0);
  $6 = ($5|0)==(0);
  if (!($6)) {
   $$0 = $$01;
   label = 5;
   break;
  }
  $7 = (($$01) + 1)|0;
  $$01 = $7;
 }
 if ((label|0) == 5) {
  return ($$0|0);
 }
 return (0)|0;
}
function _addcurve($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 40|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)>(0);
 if ($4) {
  $5 = ((($0)) + 68|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (($6) + (($3*56)|0)|0);
  $8 = (_strcmp($1,$7)|0);
  $9 = ($8|0)==(0);
  if ($9) {
   $$0 = 0;
   return ($$0|0);
  }
  $10 = (_findcurve($0,$1)|0);
  $11 = ($10|0)>(0);
  if ($11) {
   $$0 = 0;
   return ($$0|0);
  }
 }
 $12 = (_strlen($1)|0);
 $13 = ($12>>>0)>(31);
 if ($13) {
  $$0 = 252;
  return ($$0|0);
 }
 $14 = ((($0)) + 68|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($3*56)|0;
 $17 = (($16) + 112)|0;
 $18 = (_realloc($15,$17)|0);
 HEAP32[$14>>2] = $18;
 $19 = ($18|0)==(0|0);
 if ($19) {
  $$0 = 101;
  return ($$0|0);
 }
 $20 = HEAP32[$2>>2]|0;
 $21 = (($20) + 1)|0;
 HEAP32[$2>>2] = $21;
 $22 = (($18) + (($21*56)|0)|0);
 (_strncpy($22,$1,31)|0);
 $23 = (((($18) + (($21*56)|0)|0)) + 36|0);
 HEAP32[$23>>2] = 4;
 $24 = (((($18) + (($21*56)|0)|0)) + 32|0);
 HEAP32[$24>>2] = 0;
 $25 = (((($18) + (($21*56)|0)|0)) + 40|0);
 ;HEAP32[$25>>2]=0|0;HEAP32[$25+4>>2]=0|0;HEAP32[$25+8>>2]=0|0;HEAP32[$25+12>>2]=0|0;
 $$0 = 0;
 return ($$0|0);
}
function _match($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$1 = 0, $$off = 0, $$off4 = 0, $$phi$trans$insert = 0, $$pre = 0, $$v = 0, $$v5 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $$0 = 0;
  return ($$0|0);
 }
 $$02 = 0;
 while(1) {
  $4 = (($0) + ($$02)|0);
  $5 = HEAP8[$4>>0]|0;
  $6 = ($5<<24>>24)==(32);
  if (!($6)) {
   break;
  }
  $7 = (($$02) + 1)|0;
  $$02 = $7;
 }
 $$01 = 0;$$1 = $$02;$9 = $2;
 while(1) {
  $8 = ($9<<24>>24)==(0);
  if ($8) {
   $$0 = 1;
   label = 10;
   break;
  }
  $10 = (($0) + ($$1)|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = ($11<<24>>24)==(0);
  if ($12) {
   $$0 = 0;
   label = 10;
   break;
  }
  $$off = (($11) + -97)<<24>>24;
  $13 = ($$off&255)<(26);
  $14 = $11 & -33;
  $$v = $13 ? $14 : $11;
  $$off4 = (($9) + -97)<<24>>24;
  $15 = ($$off4&255)<(26);
  $16 = $9 & -33;
  $$v5 = $15 ? $16 : $9;
  $17 = ($$v<<24>>24)==($$v5<<24>>24);
  if (!($17)) {
   $$0 = 0;
   label = 10;
   break;
  }
  $18 = (($$1) + 1)|0;
  $19 = (($$01) + 1)|0;
  $$phi$trans$insert = (($1) + ($19)|0);
  $$pre = HEAP8[$$phi$trans$insert>>0]|0;
  $$01 = $19;$$1 = $18;$9 = $$pre;
 }
 if ((label|0) == 10) {
  return ($$0|0);
 }
 return (0)|0;
}
function _readdata($0) {
 $0 = $0|0;
 var $$0 = 0, $$01$ph = 0, $$01$ph10 = 0, $$02 = 0, $$06$ph = 0, $$1 = 0, $$2 = 0, $$3 = 0, $$35 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $switch = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2080|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(2080|0);
 $vararg_buffer = sp + 2072|0;
 $1 = sp + 1040|0;
 $2 = sp;
 $3 = (_calloc(40,8)|0);
 $4 = ((($0)) + 1140|0);
 HEAP32[$4>>2] = $3;
 $5 = ($3|0)==(0|0);
 $6 = $5 ? 101 : 0;
 if ($5) {
  $$0 = $6;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = ((($0)) + 1108|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($0)) + 36|0);
 dest=$0; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($0)) + 1096|0);
 HEAP32[$10>>2] = $9;
 $11 = ((($0)) + 40|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($0)) + 1100|0);
 HEAP32[$13>>2] = $12;
 $14 = ((($0)) + 1132|0);
 HEAP32[$14>>2] = 0;
 $15 = ((($0)) + 1136|0);
 HEAP32[$15>>2] = 0;
 $16 = ((($0)) + 804|0);
 HEAP8[$16>>0] = 0;
 $17 = ((($0)) + 92|0);
 $18 = ((($0)) + 388|0);
 $19 = ((($0)) + 548|0);
 $20 = ((($0)) + 1104|0);
 $21 = ((($0)) + 1112|0);
 $22 = ((($0)) + 5080|0);
 $$01$ph = 0;$$06$ph = -1;
 L4: while(1) {
  $23 = (304 + ($$06$ph<<2)|0);
  $24 = ($$06$ph|0)>(-1);
  $$01$ph10 = $$01$ph;
  while(1) {
   while(1) {
    $25 = HEAP32[$17>>2]|0;
    $26 = (_fgets($1,1024,$25)|0);
    $27 = ($26|0)==(0|0);
    if ($27) {
     $$02 = 0;$$3 = $$01$ph10;
     label = 24;
     break L4;
    }
    (_strcpy($2,$1)|0);
    $28 = (_gettokens($2,$18,$19)|0);
    HEAP32[$20>>2] = $28;
    HEAP32[$21>>2] = -1;
    $29 = ($28|0)==(0);
    $30 = $$06$ph & -2;
    $switch = ($30|0)==(12);
    if (!($29)) {
     break;
    }
    if ($switch) {
     (_strncpy($16,$19,255)|0);
    }
   }
   if ($switch) {
    (_strcpy($19,$16)|0);
   }
   HEAP8[$16>>0] = 0;
   $31 = (_strlen($1)|0);
   $32 = ($31>>>0)>(1023);
   if ($32) {
    $33 = (_geterrmsg(214,$22)|0);
    $34 = HEAP32[$23>>2]|0;
    HEAP32[$vararg_buffer>>2] = $33;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $34;
    _sprintf($22,8084,$vararg_buffer);
    _writeline($0,$22);
    _writeline($0,$1);
    $35 = (($$01$ph10) + 1)|0;
    $$1 = $35;
   } else {
    $$1 = $$01$ph10;
   }
   $36 = HEAP32[$18>>2]|0;
   $37 = HEAP8[$36>>0]|0;
   $38 = ($37<<24>>24)==(91);
   if ($38) {
    break;
   }
   if (!($24)) {
    $$02 = 200;$$3 = $$1;
    label = 24;
    break L4;
   }
   $43 = (_newline($0,$$06$ph,$1)|0);
   $44 = ($43|0)>(0);
   if ($44) {
    _inperrmsg($0,$43,$$06$ph,$1);
    $45 = (($$1) + 1)|0;
    $$2 = $45;
   } else {
    $$2 = $$1;
   }
   $46 = ($$2|0)==(10);
   if ($46) {
    $$35 = 200;
    break L4;
   }
   $$01$ph10 = $$2;
  }
  $39 = (_findmatch($36,304)|0);
  $40 = ($39|0)>(-1);
  if (!($40)) {
   label = 18;
   break;
  }
  $41 = ($39|0)==(28);
  if ($41) {
   $$02 = 0;$$3 = $$1;
   label = 24;
   break;
  }
  $$01$ph = $$1;$$06$ph = $39;
 }
 if ((label|0) == 18) {
  _inperrmsg($0,201,$$06$ph,$1);
  $42 = (($$1) + 1)|0;
  $$02 = 0;$$3 = $42;
  label = 24;
 }
 if ((label|0) == 24) {
  $47 = ($$3|0)>(0);
  if ($47) {
   $$35 = 200;
  } else {
   $48 = ($$02|0)==(0);
   if ($48) {
    $49 = (_unlinked($0)|0);
    $50 = ($49|0)==(0);
    if ($50) {
     $51 = (_getpumpparams($0)|0);
     $$35 = $51;
    } else {
     $$35 = $49;
    }
   } else {
    $$35 = $$02;
   }
  }
 }
 $52 = HEAP32[$4>>2]|0;
 _free($52);
 $$0 = $$35;
 STACKTOP = sp;return ($$0|0);
}
function _gettokens($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$03 = 0, $$1 = 0, $$14 = 0, $$2 = 0, $$25 = 0, $$3 = 0, $$pre = 0, $$pre$phiZ2D = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $exitcond = 0, $or$cond = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$2>>0] = 0;
 $$03 = 0;
 while(1) {
  $exitcond = ($$03|0)==(40);
  if ($exitcond) {
   break;
  }
  $3 = (($1) + ($$03<<2)|0);
  HEAP32[$3>>2] = 0;
  $4 = (($$03) + 1)|0;
  $$03 = $4;
 }
 $5 = (_strchr($0,59)|0);
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  $7 = ((($5)) + 1|0);
  $8 = (_strlen($7)|0);
  $9 = ($8|0)==(0);
  if (!($9)) {
   $10 = (_strcspn($7,8163)|0);
   $11 = ($10>>>0)<(255);
   $spec$select = $11 ? $10 : 255;
   (_strncpy($2,$7,$spec$select)|0);
   $12 = (($2) + ($spec$select)|0);
   HEAP8[$12>>0] = 0;
  }
  HEAP8[$5>>0] = 0;
 }
 $13 = (_strlen($0)|0);
 $$0 = $0;$$02 = $13;$$14 = 0;
 while(1) {
  $14 = ($$02|0)!=(0);
  $15 = ($$14|0)<(40);
  $or$cond = $14 & $15;
  if (!($or$cond)) {
   $$3 = $$14;
   label = 18;
   break;
  }
  $16 = (_strcspn($$0,8079)|0);
  $17 = ($16|0)==($$02|0);
  if ($17) {
   break;
  }
  $20 = (($16) + 1)|0;
  $21 = (($$02) - ($20))|0;
  $22 = ($16|0)==(0);
  if ($22) {
   $23 = ((($$0)) + 1|0);
   $$2 = $23;$$25 = $$14;
  } else {
   $24 = HEAP8[$$0>>0]|0;
   $25 = ($24<<24>>24)==(34);
   if ($25) {
    $26 = ((($$0)) + 1|0);
    $27 = (_strcspn($26,8166)|0);
    $$pre = (($27) + 1)|0;
    $$01 = $27;$$1 = $26;$$pre$phiZ2D = $$pre;
   } else {
    $$01 = $16;$$1 = $$0;$$pre$phiZ2D = $20;
   }
   $28 = (($$1) + ($$01)|0);
   HEAP8[$28>>0] = 0;
   $29 = (($1) + ($$14<<2)|0);
   HEAP32[$29>>2] = $$1;
   $30 = (($$14) + 1)|0;
   $31 = (($$1) + ($$pre$phiZ2D)|0);
   $$2 = $31;$$25 = $30;
  }
  $$0 = $$2;$$02 = $21;$$14 = $$25;
 }
 if ((label|0) == 18) {
  return ($$3|0);
 }
 $18 = (($1) + ($$14<<2)|0);
 HEAP32[$18>>2] = $$0;
 $19 = (($$14) + 1)|0;
 $$3 = $19;
 return ($$3|0);
}
function _inperrmsg($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 528|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(528|0);
 $vararg_buffer = sp + 512|0;
 $4 = sp + 256|0;
 $5 = sp;
 _memset(($4|0),0,256)|0;
 $6 = ((($0)) + 1112|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)>(-1);
 if ($8) {
  $9 = (((($0)) + 388|0) + ($7<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  (_strcpy($5,$10)|0);
 } else {
  (_strcpy($5,21208)|0);
 }
 $11 = ((($0)) + 5080|0);
 $12 = (_geterrmsg($1,$4)|0);
 $13 = (304 + ($2<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $12;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $5;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $14;
 _sprintf($11,8132,$vararg_buffer);
 _writeline($0,$11);
 _writeline($0,$3);
 STACKTOP = sp;return;
}
function _newline($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 do {
  switch ($1|0) {
  case 0:  {
   $3 = ((($0)) + 1108|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)<(3);
   if ($5) {
    $6 = (_strlen($2)|0);
    $7 = (($6) + -1)|0;
    $8 = (($2) + ($7)|0);
    $9 = HEAP8[$8>>0]|0;
    $10 = ($9<<24>>24)==(10);
    if ($10) {
     HEAP8[$8>>0] = 0;
     $$pre = HEAP32[$3>>2]|0;
     $12 = $$pre;
    } else {
     $12 = $4;
    }
    $11 = (((($0)) + 5336|0) + (($12*80)|0)|0);
    (_strncpy($11,$2,79)|0);
    $13 = HEAP32[$3>>2]|0;
    $14 = (($13) + 1)|0;
    HEAP32[$3>>2] = $14;
    $$0 = 0;
   } else {
    $$0 = 0;
   }
   break;
  }
  case 1:  {
   $15 = (_juncdata($0)|0);
   $$0 = $15;
   break;
  }
  case 3: case 2:  {
   $16 = (_tankdata($0)|0);
   $$0 = $16;
   break;
  }
  case 4:  {
   $17 = (_pipedata($0)|0);
   $$0 = $17;
   break;
  }
  case 5:  {
   $18 = (_pumpdata($0)|0);
   $$0 = $18;
   break;
  }
  case 6:  {
   $19 = (_valvedata($0)|0);
   $$0 = $19;
   break;
  }
  case 12:  {
   $20 = (_patterndata($0)|0);
   $$0 = $20;
   break;
  }
  case 13:  {
   $21 = (_curvedata($0)|0);
   $$0 = $21;
   break;
  }
  case 9:  {
   $22 = (_demanddata($0)|0);
   $$0 = $22;
   break;
  }
  case 7:  {
   $23 = (_controldata($0)|0);
   $$0 = $23;
   break;
  }
  case 8:  {
   $24 = (_ruledata($0)|0);
   $25 = ($24|0)>(0);
   if ($25) {
    _ruleerrmsg($0);
    $$0 = 200;
   } else {
    $$0 = 0;
   }
   break;
  }
  case 10:  {
   $26 = (_sourcedata($0)|0);
   $$0 = $26;
   break;
  }
  case 11:  {
   $27 = (_emitterdata($0)|0);
   $$0 = $27;
   break;
  }
  case 14:  {
   $28 = (_qualdata($0)|0);
   $$0 = $28;
   break;
  }
  case 15:  {
   $29 = (_statusdata($0)|0);
   $$0 = $29;
   break;
  }
  case 26: case 27: case 25: case 16:  {
   $$0 = 0;
   break;
  }
  case 17:  {
   $30 = (_energydata($0)|0);
   $$0 = $30;
   break;
  }
  case 18:  {
   $31 = (_reactdata($0)|0);
   $$0 = $31;
   break;
  }
  case 19:  {
   $32 = (_mixingdata($0)|0);
   $$0 = $32;
   break;
  }
  case 20:  {
   $33 = (_reportdata($0)|0);
   $$0 = $33;
   break;
  }
  case 21:  {
   $34 = (_timedata($0)|0);
   $$0 = $34;
   break;
  }
  case 22:  {
   $35 = (_optiondata($0)|0);
   $$0 = $35;
   break;
  }
  case 23:  {
   $36 = (_coordata($0)|0);
   $$0 = $36;
   break;
  }
  case 24:  {
   $37 = (_vertexdata($0)|0);
   $$0 = $37;
   break;
  }
  default: {
   $$0 = 201;
  }
  }
 } while(0);
 return ($$0|0);
}
function _unlinked($0) {
 $0 = $0|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$03 = 0, $$14 = 0, $$15 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 1)|0;
 $3 = (_calloc($2,4)|0);
 $4 = ($3|0)==(0|0);
 $5 = $4 ? 101 : 0;
 if ($4) {
  $$0 = $5;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = HEAP32[$0>>2]|0;
 $7 = $6 << 2;
 $8 = (($7) + 4)|0;
 _memset(($3|0),0,($8|0))|0;
 $9 = ((($0)) + 12|0);
 $10 = ((($0)) + 48|0);
 $$03 = 1;
 while(1) {
  $11 = HEAP32[$9>>2]|0;
  $12 = ($$03|0)>($11|0);
  if ($12) {
   break;
  }
  $13 = HEAP32[$10>>2]|0;
  $14 = (((($13) + ($$03<<7)|0)) + 32|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($3) + ($15<<2)|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($17) + 1)|0;
  HEAP32[$16>>2] = $18;
  $19 = HEAP32[$10>>2]|0;
  $20 = (((($19) + ($$03<<7)|0)) + 36|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($3) + ($21<<2)|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($23) + 1)|0;
  HEAP32[$22>>2] = $24;
  $25 = (($$03) + 1)|0;
  $$03 = $25;
 }
 $26 = ((($0)) + 8|0);
 $27 = ((($0)) + 5080|0);
 $28 = ((($0)) + 44|0);
 $$02 = 0;$$14 = 1;
 while(1) {
  $29 = HEAP32[$26>>2]|0;
  $30 = ($$14|0)>($29|0);
  if ($30) {
   label = 10;
   break;
  }
  $31 = (($3) + ($$14<<2)|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ($32|0)==(0);
  if ($33) {
   $34 = (($$02) + 1)|0;
   $35 = (_geterrmsg(233,$27)|0);
   $36 = HEAP32[$28>>2]|0;
   $37 = (($36) + (($$14*96)|0)|0);
   HEAP32[$vararg_buffer>>2] = $35;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $37;
   _sprintf($27,8115,$vararg_buffer);
   _writeline($0,$27);
   $38 = ($$02|0)>(8);
   if ($38) {
    label = 11;
    break;
   } else {
    $$15 = $34;
   }
  } else {
   $$15 = $$02;
  }
  $39 = (($$14) + 1)|0;
  $$02 = $$15;$$14 = $39;
 }
 if ((label|0) == 10) {
  $40 = ($$02|0)>(0);
  if ($40) {
   label = 11;
  } else {
   $$01 = 0;
  }
 }
 if ((label|0) == 11) {
  $$01 = 200;
 }
 _free($3);
 $$0 = $$01;
 STACKTOP = sp;return ($$0|0);
}
function _getpumpparams($0) {
 $0 = $0|0;
 var $$0 = 0, $$01 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(272|0);
 $vararg_buffer = sp + 256|0;
 $1 = sp;
 $2 = ((($0)) + 20|0);
 $$01 = 1;
 while(1) {
  $3 = HEAP32[$2>>2]|0;
  $4 = ($$01|0)>($3|0);
  if ($4) {
   $$0 = 0;
   label = 6;
   break;
  }
  $5 = (_updatepumpparams($0,$$01)|0);
  $6 = ($5|0)==(0);
  if (!($6)) {
   break;
  }
  $16 = (($$01) + 1)|0;
  $$01 = $16;
 }
 if ((label|0) == 6) {
  STACKTOP = sp;return ($$0|0);
 }
 $7 = ((($0)) + 56|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + ($$01<<7)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($0)) + 5080|0);
 $12 = (_geterrmsg($5,$1)|0);
 $13 = ((($0)) + 48|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + ($10<<7)|0);
 HEAP32[$vararg_buffer>>2] = $5;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $12;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $15;
 _sprintf($11,8099,$vararg_buffer);
 _writeline($0,$11);
 $$0 = 200;
 STACKTOP = sp;return ($$0|0);
}
function _updatepumpparams($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$010 = 0, $$1$ph = 0.0, $$13$ph = 0.0, $$15$ph = 0.0, $$17$ph = 0.0, $$19$ph = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0.0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 16|0;
 $3 = sp + 8|0;
 $4 = sp;
 $5 = ((($0)) + 56|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (((($6) + ($1<<7)|0)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 switch ($8|0) {
 case 0:  {
  $9 = (((($6) + ($1<<7)|0)) + 32|0);
  HEAPF64[$9>>3] = 0.0;
  $10 = ((($0)) + 48|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($6) + ($1<<7)|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (((($11) + ($13<<7)|0)) + 64|0);
  $15 = +HEAPF64[$14>>3];
  $16 = $15 * -8.814;
  $17 = (((($6) + ($1<<7)|0)) + 40|0);
  HEAPF64[$17>>3] = $16;
  $18 = (((($6) + ($1<<7)|0)) + 48|0);
  HEAPF64[$18>>3] = -1.0;
  $19 = (((($6) + ($1<<7)|0)) + 24|0);
  HEAPF64[$19>>3] = 1.0E+10;
  $20 = (((($6) + ($1<<7)|0)) + 16|0);
  HEAPF64[$20>>3] = 1.0E+10;
  $21 = (((($6) + ($1<<7)|0)) + 8|0);
  HEAPF64[$21>>3] = 1.0;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 3:  {
  $22 = (((($6) + ($1<<7)|0)) + 56|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ($23|0)==(0);
  if ($24) {
   $$0 = 226;
   STACKTOP = sp;return ($$0|0);
  }
  $25 = ((($0)) + 68|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (((($26) + (($23*56)|0)|0)) + 36|0);
  HEAP32[$27>>2] = 1;
  $28 = (((($26) + (($23*56)|0)|0)) + 40|0);
  $29 = HEAP32[$28>>2]|0;
  switch ($29|0) {
  case 1:  {
   HEAP32[$7>>2] = 1;
   $30 = (((($26) + (($23*56)|0)|0)) + 48|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = +HEAPF64[$31>>3];
   $33 = (((($26) + (($23*56)|0)|0)) + 52|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = +HEAPF64[$34>>3];
   $36 = $35 * 1.33334;
   $37 = $32 * 2.0;
   $$1$ph = $37;$$13$ph = $32;$$15$ph = 0.0;$$17$ph = $35;$$19$ph = $36;
   label = 13;
   break;
  }
  case 3:  {
   $38 = (((($26) + (($23*56)|0)|0)) + 48|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = +HEAPF64[$39>>3];
   $41 = $40 == 0.0;
   if ($41) {
    HEAP32[$7>>2] = 1;
    $42 = (((($26) + (($23*56)|0)|0)) + 52|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = +HEAPF64[$43>>3];
    $45 = HEAP32[$38>>2]|0;
    $46 = ((($45)) + 8|0);
    $47 = +HEAPF64[$46>>3];
    $48 = ((($43)) + 8|0);
    $49 = +HEAPF64[$48>>3];
    $50 = ((($45)) + 16|0);
    $51 = +HEAPF64[$50>>3];
    $52 = ((($43)) + 16|0);
    $53 = +HEAPF64[$52>>3];
    $$1$ph = $51;$$13$ph = $47;$$15$ph = $53;$$17$ph = $49;$$19$ph = $44;
    label = 13;
   }
   break;
  }
  default: {
  }
  }
  if ((label|0) == 13) {
   $78 = (_powercurve($$19$ph,$$17$ph,$$15$ph,$$13$ph,$$1$ph,$2,$3,$4)|0);
   $79 = ($78|0)==(0);
   if ($79) {
    $$0 = 227;
    STACKTOP = sp;return ($$0|0);
   }
   $80 = +HEAPF64[$2>>3];
   $81 = - $80;
   $82 = (((($6) + ($1<<7)|0)) + 32|0);
   HEAPF64[$82>>3] = $81;
   $83 = +HEAPF64[$3>>3];
   $84 = - $83;
   $85 = (((($6) + ($1<<7)|0)) + 40|0);
   HEAPF64[$85>>3] = $84;
   $86 = +HEAPF64[$4>>3];
   $87 = (((($6) + ($1<<7)|0)) + 48|0);
   HEAPF64[$87>>3] = $86;
   $88 = (((($6) + ($1<<7)|0)) + 8|0);
   HEAPF64[$88>>3] = $$13$ph;
   $89 = $81 / $83;
   $90 = 1.0 / $86;
   $91 = (+Math_pow((+$89),(+$90)));
   $92 = (((($6) + ($1<<7)|0)) + 16|0);
   HEAPF64[$92>>3] = $91;
   $93 = (((($6) + ($1<<7)|0)) + 24|0);
   HEAPF64[$93>>3] = $$19$ph;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  HEAP32[$7>>2] = 2;
  $54 = (((($26) + (($23*56)|0)|0)) + 52|0);
  $$010 = 1;
  while(1) {
   $55 = ($$010|0)<($29|0);
   if (!($55)) {
    break;
   }
   $56 = HEAP32[$54>>2]|0;
   $57 = (($56) + ($$010<<3)|0);
   $58 = +HEAPF64[$57>>3];
   $59 = (($$010) + -1)|0;
   $60 = (($56) + ($59<<3)|0);
   $61 = +HEAPF64[$60>>3];
   $62 = !($58 >= $61);
   if (!($62)) {
    $$0 = 227;
    label = 15;
    break;
   }
   $63 = (($$010) + 1)|0;
   $$010 = $63;
  }
  if ((label|0) == 15) {
   STACKTOP = sp;return ($$0|0);
  }
  $64 = (((($26) + (($23*56)|0)|0)) + 48|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = (($29) + -1)|0;
  $67 = (($65) + ($66<<3)|0);
  $68 = +HEAPF64[$67>>3];
  $69 = (((($6) + ($1<<7)|0)) + 16|0);
  HEAPF64[$69>>3] = $68;
  $70 = HEAP32[$64>>2]|0;
  $71 = +HEAPF64[$70>>3];
  $72 = $71 + $68;
  $73 = $72 * 0.5;
  $74 = (((($6) + ($1<<7)|0)) + 8|0);
  HEAPF64[$74>>3] = $73;
  $75 = HEAP32[$54>>2]|0;
  $76 = +HEAPF64[$75>>3];
  $77 = (((($6) + ($1<<7)|0)) + 24|0);
  HEAPF64[$77>>3] = $76;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 default: {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 }
 return (0)|0;
}
function _addnodeID($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$idx = 0, $$idx$val = 0, $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$idx = ((($0)) + 80|0);
 $$idx$val = HEAP32[$$idx>>2]|0;
 $3 = (_findnode($$idx$val,$2)|0);
 $4 = ($3|0)==(0);
 if (!($4)) {
  $$0 = 215;
  return ($$0|0);
 }
 $5 = (_strlen($2)|0);
 $6 = ($5>>>0)>(31);
 if ($6) {
  $$0 = 252;
  return ($$0|0);
 }
 $7 = ((($0)) + 44|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + (($1*96)|0)|0);
 (_strncpy($9,$2,31)|0);
 $10 = HEAP32[$$idx>>2]|0;
 $11 = HEAP32[$7>>2]|0;
 $12 = (($11) + (($1*96)|0)|0);
 _hashtable_insert($10,$12,$1);
 $$0 = 0;
 return ($$0|0);
}
function _addlinkID($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$idx = 0, $$idx$val = 0, $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$idx = ((($0)) + 84|0);
 $$idx$val = HEAP32[$$idx>>2]|0;
 $3 = (_findlink($$idx$val,$2)|0);
 $4 = ($3|0)==(0);
 if (!($4)) {
  $$0 = 215;
  return ($$0|0);
 }
 $5 = (_strlen($2)|0);
 $6 = ($5>>>0)>(31);
 if ($6) {
  $$0 = 252;
  return ($$0|0);
 }
 $7 = ((($0)) + 48|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + ($1<<7)|0);
 (_strncpy($9,$2,31)|0);
 $10 = HEAP32[$$idx>>2]|0;
 $11 = HEAP32[$7>>2]|0;
 $12 = (($11) + ($1<<7)|0);
 _hashtable_insert($10,$12,$1);
 $$0 = 0;
 return ($$0|0);
}
function _hour($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0.0, $$01 = 0, $$02 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0;
 var $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0;
 var $44 = 0.0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $strlenfirst = 0, $trunc = 0, $trunc$clear = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 $$02 = 0;
 while(1) {
  $exitcond = ($$02|0)==(3);
  if ($exitcond) {
   break;
  }
  $3 = (($2) + ($$02<<3)|0);
  HEAPF64[$3>>3] = 0.0;
  $4 = (($$02) + 1)|0;
  $$02 = $4;
 }
 $5 = (_strtok($0,14830)|0);
 $$01 = $5;$trunc = 0;
 while(1) {
  $6 = ($$01|0)==(0|0);
  if ($6) {
   label = 9;
   break;
  }
  $7 = ($trunc>>>0)<(4);
  if (!($7)) {
   label = 20;
   break;
  }
  $8 = (($2) + ($trunc<<3)|0);
  $9 = (_getfloat($$01,$8)|0);
  $10 = ($9|0)==(0);
  if ($10) {
   $$0 = -1.0;
   break;
  }
  $11 = (_strtok(0,14830)|0);
  $12 = (($trunc) + 1)|0;
  $$01 = $11;$trunc = $12;
 }
 L10: do {
  if ((label|0) == 9) {
   $trunc$clear = $trunc & 2147483647;
   switch ($trunc$clear|0) {
   case 0:  {
    label = 21;
    break L10;
    break;
   }
   case 1:  {
    break;
   }
   default: {
    label = 20;
    break L10;
   }
   }
   $strlenfirst = HEAP8[$1>>0]|0;
   $13 = ($strlenfirst<<24>>24)==(0);
   if ($13) {
    $14 = +HEAPF64[$2>>3];
    $$0 = $14;
    break;
   }
   $15 = (_match($1,8170)|0);
   $16 = ($15|0)==(0);
   if (!($16)) {
    $17 = +HEAPF64[$2>>3];
    $18 = $17 / 3600.0;
    $$0 = $18;
    break;
   }
   $19 = (_match($1,8174)|0);
   $20 = ($19|0)==(0);
   if (!($20)) {
    $21 = +HEAPF64[$2>>3];
    $22 = $21 / 60.0;
    $$0 = $22;
    break;
   }
   $23 = (_match($1,8178)|0);
   $24 = ($23|0)==(0);
   if (!($24)) {
    $25 = +HEAPF64[$2>>3];
    $$0 = $25;
    break;
   }
   $26 = (_match($1,8182)|0);
   $27 = ($26|0)==(0);
   if ($27) {
    label = 21;
   } else {
    $28 = +HEAPF64[$2>>3];
    $29 = $28 * 24.0;
    $$0 = $29;
   }
  }
 } while(0);
 if ((label|0) == 20) {
  $30 = +HEAPF64[$2>>3];
  $31 = ((($2)) + 8|0);
  $32 = +HEAPF64[$31>>3];
  $33 = $32 / 60.0;
  $34 = $30 + $33;
  $35 = ((($2)) + 16|0);
  $36 = +HEAPF64[$35>>3];
  $37 = $36 / 3600.0;
  $38 = $34 + $37;
  HEAPF64[$2>>3] = $38;
  label = 21;
 }
 do {
  if ((label|0) == 21) {
   $39 = HEAP8[$1>>0]|0;
   $40 = ($39<<24>>24)==(0);
   if ($40) {
    $41 = +HEAPF64[$2>>3];
    $$0 = $41;
    break;
   }
   $42 = (_match($1,8186)|0);
   $43 = ($42|0)==(0);
   if (!($43)) {
    $44 = +HEAPF64[$2>>3];
    $45 = !($44 >= 13.0);
    if (!($45)) {
     $$0 = -1.0;
     break;
    }
    $46 = !($44 >= 12.0);
    if ($46) {
     $$0 = $44;
     break;
    }
    $47 = $44 + -12.0;
    $$0 = $47;
    break;
   }
   $48 = (_match($1,8189)|0);
   $49 = ($48|0)==(0);
   if ($49) {
    $$0 = -1.0;
   } else {
    $50 = +HEAPF64[$2>>3];
    $51 = !($50 >= 13.0);
    if ($51) {
     $52 = !($50 >= 12.0);
     if ($52) {
      $53 = $50 + 12.0;
      $$0 = $53;
     } else {
      $$0 = $50;
     }
    } else {
     $$0 = -1.0;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return (+$$0);
}
function _getfloat($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = (+_strtod($0,$2));
 HEAPF64[$1>>3] = $3;
 $4 = HEAP32[$2>>2]|0;
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)<(1);
 $spec$select = $6&1;
 STACKTOP = sp;return ($spec$select|0);
}
function _juncdata($0) {
 $0 = $0|0;
 var $$0 = 0, $$01 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 8|0;
 $2 = sp;
 $3 = ((($0)) + 92|0);
 HEAPF64[$2>>3] = 0.0;
 $4 = ((($0)) + 1104|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$0>>2]|0;
 $7 = ((($0)) + 1060|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($6|0)==($8|0);
 if ($9) {
  $$0 = 200;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = ((($0)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + 1)|0;
 HEAP32[$10>>2] = $12;
 $13 = (($6) + 1)|0;
 HEAP32[$0>>2] = $13;
 $14 = ((($0)) + 388|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (_addnodeID($0,$12,$15)|0);
 $17 = ($16|0)==(0);
 if (!($17)) {
  $18 = (_setError($3,0,$16)|0);
  $$0 = $18;
  STACKTOP = sp;return ($$0|0);
 }
 $19 = ($5|0)<(2);
 if ($19) {
  $$0 = 201;
  STACKTOP = sp;return ($$0|0);
 }
 $20 = ((($0)) + 392|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (_getfloat($21,$1)|0);
 $23 = ($22|0)==(0);
 if ($23) {
  (_setError($3,1,202)|0);
  $$0 = 202;
  STACKTOP = sp;return ($$0|0);
 }
 $24 = ($5|0)>(2);
 if ($24) {
  $25 = ((($0)) + 396|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (_getfloat($26,$2)|0);
  $28 = ($27|0)==(0);
  if ($28) {
   (_setError($3,2,202)|0);
   $$0 = 202;
   STACKTOP = sp;return ($$0|0);
  }
  $29 = ($5|0)>(3);
  if ($29) {
   $30 = ((($0)) + 400|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = (_findpattern($0,$31)|0);
   $33 = ($32|0)<(0);
   if ($33) {
    (_setError($3,3,205)|0);
    $$0 = 205;
    STACKTOP = sp;return ($$0|0);
   } else {
    $$01 = $32;
   }
  } else {
   $$01 = 0;
  }
 } else {
  $$01 = 0;
 }
 $34 = ((($0)) + 44|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (($35) + (($12*96)|0)|0);
 $37 = (((($35) + (($12*96)|0)|0)) + 32|0);
 HEAPF64[$37>>3] = -1.0E+10;
 $38 = (((($35) + (($12*96)|0)|0)) + 40|0);
 HEAPF64[$38>>3] = -1.0E+10;
 $39 = +HEAPF64[$1>>3];
 $40 = (((($35) + (($12*96)|0)|0)) + 48|0);
 HEAPF64[$40>>3] = $39;
 $41 = (((($35) + (($12*96)|0)|0)) + 60|0);
 $42 = (((($35) + (($12*96)|0)|0)) + 92|0);
 $43 = ((($0)) + 548|0);
 ;HEAP32[$41>>2]=0|0;HEAP32[$41+4>>2]=0|0;HEAP32[$41+8>>2]=0|0;HEAP32[$41+12>>2]=0|0;HEAP32[$41+16>>2]=0|0;HEAP32[$41+20>>2]=0|0;HEAP32[$41+24>>2]=0|0;HEAP32[$41+28>>2]=0|0;
 $44 = (_xstrcpy($42,$43,255)|0);
 HEAP32[$42>>2] = $44;
 $45 = +HEAPF64[$2>>3];
 $46 = (_adddemand($36,$45,$$01,0)|0);
 $47 = ($46|0)==(0);
 if ($47) {
  $$0 = 101;
  STACKTOP = sp;return ($$0|0);
 }
 $48 = ((($0)) + 4260|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = (($49) + ($12<<3)|0);
 HEAPF64[$50>>3] = $45;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _setError($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 1020|0);
 HEAP32[$3>>2] = $1;
 return ($2|0);
}
function _tankdata($0) {
 $0 = $0|0;
 var $$0 = 0, $$1 = 0, $$13 = 0, $$138 = 0, $$16 = 0, $$2 = 0, $$24 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0, $11 = 0;
 var $110 = 0.0, $111 = 0, $112 = 0.0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0, $128 = 0.0;
 var $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0.0, $8 = 0;
 var $80 = 0, $81 = 0.0, $82 = 0, $83 = 0.0, $84 = 0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0, $98 = 0;
 var $99 = 0, $storemerge = 0.0, $strlenfirst = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $1 = sp + 40|0;
 $2 = sp + 32|0;
 $3 = sp + 24|0;
 $4 = sp + 16|0;
 $5 = sp + 8|0;
 $6 = sp;
 $7 = ((($0)) + 92|0);
 HEAPF64[$1>>3] = 0.0;
 HEAPF64[$2>>3] = 0.0;
 HEAPF64[$3>>3] = 0.0;
 HEAPF64[$4>>3] = 0.0;
 HEAPF64[$5>>3] = 0.0;
 HEAPF64[$6>>3] = 0.0;
 $8 = ((($0)) + 1104|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($0)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($0)) + 1076|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($11|0)==($13|0);
 if ($14) {
  $$0 = 200;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = HEAP32[$0>>2]|0;
 $16 = ((($0)) + 1060|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($15|0)==($17|0);
 if ($18) {
  $$0 = 200;
  STACKTOP = sp;return ($$0|0);
 }
 $19 = (($11) + 1)|0;
 HEAP32[$10>>2] = $19;
 $20 = (($15) + 1)|0;
 HEAP32[$0>>2] = $20;
 $21 = ((($0)) + 1068|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($22) + ($19))|0;
 $24 = ((($0)) + 388|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (_addnodeID($0,$23,$25)|0);
 $27 = ($26|0)==(0);
 if (!($27)) {
  $28 = (_setError($7,0,$26)|0);
  $$0 = $28;
  STACKTOP = sp;return ($$0|0);
 }
 $29 = ($9|0)<(2);
 if ($29) {
  $$0 = 201;
  STACKTOP = sp;return ($$0|0);
 }
 $30 = ((($0)) + 392|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (_getfloat($31,$1)|0);
 $33 = ($32|0)==(0);
 if ($33) {
  (_setError($7,1,202)|0);
  $$0 = 202;
  STACKTOP = sp;return ($$0|0);
 }
 $34 = ($9|0)<(4);
 if ($34) {
  $35 = ($9|0)==(3);
  if ($35) {
   $36 = ((($0)) + 396|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = (_findpattern($0,$37)|0);
   $39 = ($38|0)<(0);
   if ($39) {
    (_setError($7,2,205)|0);
    $$0 = 205;
    STACKTOP = sp;return ($$0|0);
   } else {
    $$16 = $38;$$2 = 0;$$24 = 0;$100 = 0.0;$108 = 0.0;$110 = 0.0;$112 = 0.0;$123 = 0.0;
   }
  } else {
   $$16 = 0;$$2 = 0;$$24 = 0;$100 = 0.0;$108 = 0.0;$110 = 0.0;$112 = 0.0;$123 = 0.0;
  }
 } else {
  $40 = ($9|0)<(6);
  if ($40) {
   $$0 = 201;
   STACKTOP = sp;return ($$0|0);
  }
  $41 = ((($0)) + 396|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = (_getfloat($42,$2)|0);
  $44 = ($43|0)==(0);
  if ($44) {
   (_setError($7,2,202)|0);
   $$0 = 202;
   STACKTOP = sp;return ($$0|0);
  }
  $45 = ((($0)) + 400|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = (_getfloat($46,$3)|0);
  $48 = ($47|0)==(0);
  if ($48) {
   (_setError($7,3,202)|0);
   $$0 = 202;
   STACKTOP = sp;return ($$0|0);
  }
  $49 = ((($0)) + 404|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (_getfloat($50,$4)|0);
  $52 = ($51|0)==(0);
  if ($52) {
   (_setError($7,4,202)|0);
   $$0 = 202;
   STACKTOP = sp;return ($$0|0);
  }
  $53 = ((($0)) + 408|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (_getfloat($54,$6)|0);
  $56 = ($55|0)==(0);
  if ($56) {
   (_setError($7,5,202)|0);
   $$0 = 202;
   STACKTOP = sp;return ($$0|0);
  }
  $57 = ($9|0)>(6);
  if ($57) {
   $58 = ((($0)) + 412|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = (_getfloat($59,$5)|0);
   $61 = ($60|0)==(0);
   if ($61) {
    (_setError($7,6,202)|0);
    $$0 = 202;
    STACKTOP = sp;return ($$0|0);
   }
   $62 = ($9|0)>(7);
   if ($62) {
    $63 = ((($0)) + 416|0);
    $64 = HEAP32[$63>>2]|0;
    $strlenfirst = HEAP8[$64>>0]|0;
    L50: do {
     switch ($strlenfirst<<24>>24) {
     case 42: case 0:  {
      $$13 = 0;
      break;
     }
     default: {
      $65 = (_findcurve($0,$64)|0);
      $66 = ($65|0)==(0);
      if (!($66)) {
       $67 = ((($0)) + 68|0);
       $68 = HEAP32[$67>>2]|0;
       $69 = (((($68) + (($65*56)|0)|0)) + 36|0);
       HEAP32[$69>>2] = 0;
       $$13 = $65;
       break L50;
      }
      (_setError($7,7,206)|0);
      $$0 = 206;
      STACKTOP = sp;return ($$0|0);
     }
     }
    } while(0);
    $70 = ($9|0)>(8);
    if ($70) {
     $71 = ((($0)) + 420|0);
     $72 = HEAP32[$71>>2]|0;
     $73 = (_match($72,8192)|0);
     $74 = ($73|0)==(0);
     if ($74) {
      $75 = (_match($72,8196)|0);
      $76 = ($75|0)==(0);
      if ($76) {
       (_setError($7,8,213)|0);
       $$0 = 213;
       STACKTOP = sp;return ($$0|0);
      } else {
       $$1 = 0;$$138 = $$13;
      }
     } else {
      $$1 = 1;$$138 = $$13;
     }
    } else {
     $$1 = 0;$$138 = $$13;
    }
   } else {
    $$1 = 0;$$138 = 0;
   }
  } else {
   $$1 = 0;$$138 = 0;
  }
  $77 = +HEAPF64[$2>>3];
  $78 = $77 < 0.0;
  if ($78) {
   (_setError($7,2,209)|0);
   $$0 = 209;
   STACKTOP = sp;return ($$0|0);
  }
  $79 = +HEAPF64[$3>>3];
  $80 = $79 < 0.0;
  if ($80) {
   (_setError($7,3,209)|0);
   $$0 = 209;
   STACKTOP = sp;return ($$0|0);
  }
  $81 = +HEAPF64[$4>>3];
  $82 = $81 < 0.0;
  if ($82) {
   (_setError($7,4,209)|0);
   $$0 = 209;
   STACKTOP = sp;return ($$0|0);
  }
  $83 = +HEAPF64[$6>>3];
  $84 = $83 < 0.0;
  if ($84) {
   (_setError($7,5,209)|0);
   $$0 = 209;
   STACKTOP = sp;return ($$0|0);
  }
  $85 = +HEAPF64[$5>>3];
  $86 = $85 < 0.0;
  if ($86) {
   (_setError($7,6,209)|0);
   $$0 = 209;
   STACKTOP = sp;return ($$0|0);
  } else {
   $$16 = 0;$$2 = $$1;$$24 = $$138;$100 = $83;$108 = $77;$110 = $79;$112 = $81;$123 = $85;
  }
 }
 $87 = ((($0)) + 44|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = ((($0)) + 52|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = HEAP32[$10>>2]|0;
 $92 = (((($88) + (($23*96)|0)|0)) + 32|0);
 HEAPF64[$92>>3] = -1.0E+10;
 $93 = (((($88) + (($23*96)|0)|0)) + 40|0);
 HEAPF64[$93>>3] = -1.0E+10;
 $94 = (((($88) + (($23*96)|0)|0)) + 80|0);
 HEAP32[$94>>2] = 0;
 $95 = (((($88) + (($23*96)|0)|0)) + 84|0);
 HEAP32[$95>>2] = 0;
 $96 = +HEAPF64[$1>>3];
 $97 = (((($88) + (($23*96)|0)|0)) + 48|0);
 HEAPF64[$97>>3] = $96;
 $98 = (((($88) + (($23*96)|0)|0)) + 60|0);
 $99 = $100 == 0.0;
 $101 = $99 ? 1 : 2;
 $102 = (((($88) + (($23*96)|0)|0)) + 88|0);
 ;HEAP32[$98>>2]=0|0;HEAP32[$98+4>>2]=0|0;HEAP32[$98+8>>2]=0|0;HEAP32[$98+12>>2]=0|0;HEAP32[$98+16>>2]=0|0;
 HEAP32[$102>>2] = $101;
 $103 = (((($88) + (($23*96)|0)|0)) + 92|0);
 $104 = ((($0)) + 548|0);
 $105 = (_xstrcpy($103,$104,255)|0);
 HEAP32[$103>>2] = $105;
 $106 = (($90) + (($91*120)|0)|0);
 HEAP32[$106>>2] = $23;
 $107 = (((($90) + (($91*120)|0)|0)) + 32|0);
 HEAPF64[$107>>3] = $108;
 $109 = (((($90) + (($91*120)|0)|0)) + 16|0);
 HEAPF64[$109>>3] = $110;
 $111 = (((($90) + (($91*120)|0)|0)) + 24|0);
 HEAPF64[$111>>3] = $112;
 $113 = (((($90) + (($91*120)|0)|0)) + 8|0);
 HEAPF64[$113>>3] = $100;
 $114 = (((($90) + (($91*120)|0)|0)) + 88|0);
 HEAP32[$114>>2] = $$16;
 $115 = (((($90) + (($91*120)|0)|0)) + 64|0);
 HEAPF64[$115>>3] = -1.0E+10;
 $116 = (((($90) + (($91*120)|0)|0)) + 112|0);
 HEAP32[$116>>2] = $$2;
 $117 = $100 * $100;
 $118 = $117 * 3.1415926535897931;
 $119 = $118 * 0.25;
 $120 = $119 * $110;
 $121 = (((($90) + (($91*120)|0)|0)) + 40|0);
 $122 = $123 > 0.0;
 $storemerge = $122 ? $123 : $120;
 HEAPF64[$121>>3] = $storemerge;
 $124 = $108 - $110;
 $125 = $119 * $124;
 $126 = $storemerge + $125;
 $127 = (((($90) + (($91*120)|0)|0)) + 56|0);
 HEAPF64[$127>>3] = $126;
 $128 = $112 - $110;
 $129 = $119 * $128;
 $130 = $storemerge + $129;
 $131 = (((($90) + (($91*120)|0)|0)) + 48|0);
 HEAPF64[$131>>3] = $130;
 $132 = (((($90) + (($91*120)|0)|0)) + 92|0);
 HEAP32[$132>>2] = $$24;
 $133 = (((($90) + (($91*120)|0)|0)) + 96|0);
 HEAP32[$133>>2] = 0;
 $134 = (((($90) + (($91*120)|0)|0)) + 104|0);
 HEAPF64[$134>>3] = 1.0;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _pipedata($0) {
 $0 = $0|0;
 var $$0 = 0, $$35 = 0, $$6 = 0, $$idx = 0, $$idx$val = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp + 24|0;
 $2 = sp + 16|0;
 $3 = sp + 8|0;
 $4 = sp;
 $5 = ((($0)) + 92|0);
 HEAPF64[$4>>3] = 0.0;
 $6 = ((($0)) + 1104|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($0)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($0)) + 1064|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($9|0)==($11|0);
 if ($12) {
  $$0 = 200;
  STACKTOP = sp;return ($$0|0);
 }
 $13 = ((($0)) + 16|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + 1)|0;
 HEAP32[$13>>2] = $15;
 $16 = (($9) + 1)|0;
 HEAP32[$8>>2] = $16;
 $17 = ((($0)) + 388|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (_addlinkID($0,$16,$18)|0);
 $20 = ($19|0)==(0);
 if (!($20)) {
  $21 = (_setError($5,0,$19)|0);
  $$0 = $21;
  STACKTOP = sp;return ($$0|0);
 }
 $22 = ($7|0)<(6);
 if ($22) {
  $$0 = 201;
  STACKTOP = sp;return ($$0|0);
 }
 $23 = ((($0)) + 392|0);
 $24 = HEAP32[$23>>2]|0;
 $$idx = ((($0)) + 80|0);
 $$idx$val = HEAP32[$$idx>>2]|0;
 $25 = (_findnode($$idx$val,$24)|0);
 $26 = ($25|0)==(0);
 if ($26) {
  (_setError($5,1,203)|0);
  $$0 = 203;
  STACKTOP = sp;return ($$0|0);
 }
 $27 = ((($0)) + 396|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (_findnode($$idx$val,$28)|0);
 $30 = ($29|0)==(0);
 if ($30) {
  (_setError($5,2,203)|0);
  $$0 = 203;
  STACKTOP = sp;return ($$0|0);
 }
 $31 = ($25|0)==($29|0);
 if ($31) {
  (_setError($5,0,222)|0);
  $$0 = 222;
  STACKTOP = sp;return ($$0|0);
 }
 $32 = ((($0)) + 400|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (_getfloat($33,$1)|0);
 $35 = ($34|0)==(0);
 if ($35) {
  (_setError($5,3,202)|0);
  $$0 = 202;
  STACKTOP = sp;return ($$0|0);
 }
 $36 = +HEAPF64[$1>>3];
 $37 = !($36 <= 0.0);
 if (!($37)) {
  (_setError($5,3,211)|0);
  $$0 = 211;
  STACKTOP = sp;return ($$0|0);
 }
 $38 = ((($0)) + 404|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = (_getfloat($39,$2)|0);
 $41 = ($40|0)==(0);
 if ($41) {
  (_setError($5,4,202)|0);
  $$0 = 202;
  STACKTOP = sp;return ($$0|0);
 }
 $42 = +HEAPF64[$2>>3];
 $43 = !($42 <= 0.0);
 if (!($43)) {
  (_setError($5,4,211)|0);
  $$0 = 211;
  STACKTOP = sp;return ($$0|0);
 }
 $44 = ((($0)) + 408|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = (_getfloat($45,$3)|0);
 $47 = ($46|0)==(0);
 if ($47) {
  (_setError($5,5,202)|0);
  $$0 = 202;
  STACKTOP = sp;return ($$0|0);
 }
 $48 = +HEAPF64[$3>>3];
 $49 = !($48 <= 0.0);
 if (!($49)) {
  (_setError($5,5,211)|0);
 }
 switch ($7|0) {
 case 7:  {
  $50 = ((($0)) + 412|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (_match($51,8199)|0);
  $53 = ($52|0)==(0);
  if ($53) {
   $54 = (_match($51,14449)|0);
   $55 = ($54|0)==(0);
   if ($55) {
    $56 = (_match($51,14444)|0);
    $57 = ($56|0)==(0);
    if ($57) {
     $58 = (_getfloat($51,$4)|0);
     $59 = ($58|0)==(0);
     if ($59) {
      (_setError($5,6,202)|0);
      $$0 = 202;
      STACKTOP = sp;return ($$0|0);
     } else {
      $$35 = 1;$$6 = 3;
     }
    } else {
     $$35 = 1;$$6 = 3;
    }
   } else {
    $$35 = 1;$$6 = 2;
   }
  } else {
   $$35 = 0;$$6 = 3;
  }
  break;
 }
 case 8:  {
  $60 = ((($0)) + 412|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = (_getfloat($61,$4)|0);
  $63 = ($62|0)==(0);
  if ($63) {
   (_setError($5,6,202)|0);
   $$0 = 202;
   STACKTOP = sp;return ($$0|0);
  }
  $64 = ((($0)) + 416|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = (_match($65,8199)|0);
  $67 = ($66|0)==(0);
  if ($67) {
   $68 = (_match($65,14449)|0);
   $69 = ($68|0)==(0);
   if ($69) {
    $70 = (_match($65,14444)|0);
    $71 = ($70|0)==(0);
    if ($71) {
     (_setError($5,7,213)|0);
     $$0 = 213;
     STACKTOP = sp;return ($$0|0);
    } else {
     $$35 = 1;$$6 = 3;
    }
   } else {
    $$35 = 1;$$6 = 2;
   }
  } else {
   $$35 = 0;$$6 = 3;
  }
  break;
 }
 default: {
  $$35 = 1;$$6 = 3;
 }
 }
 $72 = +HEAPF64[$4>>3];
 $73 = $72 < 0.0;
 if ($73) {
  (_setError($5,6,211)|0);
  $$0 = 211;
  STACKTOP = sp;return ($$0|0);
 } else {
  $74 = ((($0)) + 48|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = HEAP32[$8>>2]|0;
  $77 = (((($75) + ($76<<7)|0)) + 32|0);
  HEAP32[$77>>2] = $25;
  $78 = (((($75) + ($76<<7)|0)) + 36|0);
  HEAP32[$78>>2] = $29;
  $79 = (((($75) + ($76<<7)|0)) + 48|0);
  HEAPF64[$79>>3] = $36;
  $80 = (((($75) + ($76<<7)|0)) + 40|0);
  HEAPF64[$80>>3] = $42;
  $81 = (((($75) + ($76<<7)|0)) + 56|0);
  HEAPF64[$81>>3] = $48;
  $82 = (((($75) + ($76<<7)|0)) + 64|0);
  HEAPF64[$82>>3] = $72;
  $83 = (((($75) + ($76<<7)|0)) + 72|0);
  HEAPF64[$83>>3] = -1.0E+10;
  $84 = (((($75) + ($76<<7)|0)) + 80|0);
  HEAPF64[$84>>3] = -1.0E+10;
  $85 = (((($75) + ($76<<7)|0)) + 104|0);
  HEAP32[$85>>2] = $$35;
  $86 = (((($75) + ($76<<7)|0)) + 108|0);
  HEAP32[$86>>2] = $$6;
  $87 = (((($75) + ($76<<7)|0)) + 116|0);
  HEAP32[$87>>2] = 0;
  $88 = (((($75) + ($76<<7)|0)) + 120|0);
  HEAP32[$88>>2] = 0;
  $89 = (((($75) + ($76<<7)|0)) + 124|0);
  $90 = ((($0)) + 548|0);
  $91 = (_xstrcpy($89,$90,255)|0);
  HEAP32[$89>>2] = $91;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _pumpdata($0) {
 $0 = $0|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$1 = 0, $$idx = 0, $$idx$val = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ((($0)) + 92|0);
 $3 = ((($0)) + 1104|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 1064|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($6|0)==($8|0);
 if ($9) {
  $$0 = 200;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = ((($0)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($0)) + 1080|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($11|0)==($13|0);
 if ($14) {
  $$0 = 200;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = (($6) + 1)|0;
 HEAP32[$5>>2] = $15;
 $16 = (($11) + 1)|0;
 HEAP32[$10>>2] = $16;
 $17 = ((($0)) + 388|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (_addlinkID($0,$15,$18)|0);
 $20 = ($19|0)==(0);
 if (!($20)) {
  $21 = (_setError($2,0,$19)|0);
  $$0 = $21;
  STACKTOP = sp;return ($$0|0);
 }
 $22 = ($4|0)<(3);
 if ($22) {
  $$0 = 201;
  STACKTOP = sp;return ($$0|0);
 }
 $23 = ((($0)) + 392|0);
 $24 = HEAP32[$23>>2]|0;
 $$idx = ((($0)) + 80|0);
 $$idx$val = HEAP32[$$idx>>2]|0;
 $25 = (_findnode($$idx$val,$24)|0);
 $26 = ($25|0)==(0);
 if ($26) {
  (_setError($2,1,203)|0);
  $$0 = 203;
  STACKTOP = sp;return ($$0|0);
 }
 $27 = ((($0)) + 396|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (_findnode($$idx$val,$28)|0);
 $30 = ($29|0)==(0);
 if ($30) {
  (_setError($2,2,203)|0);
  $$0 = 203;
  STACKTOP = sp;return ($$0|0);
 }
 $31 = ($25|0)==($29|0);
 if ($31) {
  (_setError($2,0,222)|0);
  $$0 = 222;
  STACKTOP = sp;return ($$0|0);
 }
 $32 = ((($0)) + 48|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$5>>2]|0;
 $35 = ((($0)) + 56|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = HEAP32[$10>>2]|0;
 $38 = (((($33) + ($34<<7)|0)) + 32|0);
 HEAP32[$38>>2] = $25;
 $39 = (((($33) + ($34<<7)|0)) + 36|0);
 HEAP32[$39>>2] = $29;
 $40 = (((($33) + ($34<<7)|0)) + 40|0);
 $41 = (((($33) + ($34<<7)|0)) + 56|0);
 ;HEAP32[$40>>2]=0|0;HEAP32[$40+4>>2]=0|0;HEAP32[$40+8>>2]=0|0;HEAP32[$40+12>>2]=0|0;
 HEAPF64[$41>>3] = 1.0;
 $42 = (((($33) + ($34<<7)|0)) + 64|0);
 $43 = (((($33) + ($34<<7)|0)) + 104|0);
 ;HEAP32[$42>>2]=0|0;HEAP32[$42+4>>2]=0|0;HEAP32[$42+8>>2]=0|0;HEAP32[$42+12>>2]=0|0;HEAP32[$42+16>>2]=0|0;HEAP32[$42+20>>2]=0|0;
 HEAP32[$43>>2] = 2;
 $44 = (((($33) + ($34<<7)|0)) + 108|0);
 HEAP32[$44>>2] = 3;
 $45 = (((($33) + ($34<<7)|0)) + 116|0);
 HEAP32[$45>>2] = 0;
 $46 = (((($33) + ($34<<7)|0)) + 120|0);
 HEAP32[$46>>2] = 0;
 $47 = (((($33) + ($34<<7)|0)) + 124|0);
 $48 = ((($0)) + 548|0);
 $49 = (_xstrcpy($47,$48,255)|0);
 HEAP32[$47>>2] = $49;
 $50 = HEAP32[$5>>2]|0;
 $51 = (($36) + ($37<<7)|0);
 HEAP32[$51>>2] = $50;
 $52 = (((($36) + ($37<<7)|0)) + 4|0);
 HEAP32[$52>>2] = 3;
 $53 = (((($36) + ($37<<7)|0)) + 56|0);
 $54 = (((($36) + ($37<<7)|0)) + 64|0);
 $55 = ($4|0)<(4);
 ;HEAP32[$53>>2]=0|0;HEAP32[$53+4>>2]=0|0;HEAP32[$53+8>>2]=0|0;HEAP32[$53+12>>2]=0|0;HEAP32[$53+16>>2]=0|0;HEAP32[$53+20>>2]=0|0;
 if ($55) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $56 = ((($0)) + 400|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = ((($0)) + 1140|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = (_getfloat($57,$59)|0);
 $61 = ($60|0)==(0);
 if (!($61)) {
  $$01 = 1;$$02 = 4;
  while(1) {
   $62 = ($$02|0)<($4|0);
   if (!($62)) {
    label = 19;
    break;
   }
   $63 = (((($0)) + 388|0) + ($$02<<2)|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = HEAP32[$58>>2]|0;
   $66 = (($65) + ($$01<<3)|0);
   $67 = (_getfloat($64,$66)|0);
   $68 = ($67|0)==(0);
   if ($68) {
    label = 17;
    break;
   }
   $69 = (($$01) + 1)|0;
   $70 = (($$02) + 1)|0;
   $$01 = $69;$$02 = $70;
  }
  if ((label|0) == 17) {
   (_setError($2,$$02,202)|0);
   $$0 = 202;
   STACKTOP = sp;return ($$0|0);
  }
  else if ((label|0) == 19) {
   $71 = (_getpumpcurve($0,$$01)|0);
   $$0 = $71;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $$1 = 4;
 L41: while(1) {
  $72 = ($$1|0)<($4|0);
  if (!($72)) {
   $$0 = 0;
   label = 41;
   break;
  }
  $73 = (($$1) + -1)|0;
  $74 = (((($0)) + 388|0) + ($73<<2)|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = (_match($75,14316)|0);
  $77 = ($76|0)==(0);
  do {
   if ($77) {
    $82 = (_match($75,14270)|0);
    $83 = ($82|0)==(0);
    if (!($83)) {
     $84 = (((($0)) + 388|0) + ($$1<<2)|0);
     $85 = HEAP32[$84>>2]|0;
     $86 = (_findcurve($0,$85)|0);
     $87 = ($86|0)==(0);
     if ($87) {
      label = 28;
      break L41;
     }
     HEAP32[$53>>2] = $86;
     break;
    }
    $88 = (_match($75,8202)|0);
    $89 = ($88|0)==(0);
    if (!($89)) {
     $90 = (((($0)) + 388|0) + ($$1<<2)|0);
     $91 = HEAP32[$90>>2]|0;
     $92 = (_findpattern($0,$91)|0);
     $93 = ($92|0)<(0);
     if ($93) {
      label = 32;
      break L41;
     }
     HEAP32[$54>>2] = $92;
     break;
    }
    $94 = (_match($75,8207)|0);
    $95 = ($94|0)==(0);
    if ($95) {
     $$0 = 201;
     label = 41;
     break L41;
    }
    $96 = (((($0)) + 388|0) + ($$1<<2)|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = (_getfloat($97,$1)|0);
    $99 = ($98|0)==(0);
    if ($99) {
     label = 36;
     break L41;
    }
    $100 = +HEAPF64[$1>>3];
    $101 = $100 < 0.0;
    if ($101) {
     label = 38;
     break L41;
    }
    HEAPF64[$41>>3] = $100;
   } else {
    $78 = (((($0)) + 388|0) + ($$1<<2)|0);
    $79 = HEAP32[$78>>2]|0;
    $80 = (+_atof($79));
    HEAPF64[$1>>3] = $80;
    $81 = !($80 <= 0.0);
    if (!($81)) {
     label = 24;
     break L41;
    }
    HEAP32[$52>>2] = 0;
    HEAPF64[$42>>3] = $80;
   }
  } while(0);
  $102 = (($$1) + 2)|0;
  $$1 = $102;
 }
 if ((label|0) == 24) {
  (_setError($2,$$1,202)|0);
  $$0 = 202;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 28) {
  (_setError($2,$$1,206)|0);
  $$0 = 206;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 32) {
  (_setError($2,$$1,205)|0);
  $$0 = 205;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 36) {
  (_setError($2,$$1,202)|0);
  $$0 = 202;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 38) {
  (_setError($2,$$1,211)|0);
  $$0 = 211;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 41) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _getpumpcurve($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$01 = 0.0, $$02 = 0.0, $$03 = 0.0, $$04 = 0.0, $$05 = 0.0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 16|0;
 $3 = sp + 8|0;
 $4 = sp;
 $5 = ((($0)) + 56|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 L1: do {
  switch ($1|0) {
  case 1:  {
   $9 = ((($0)) + 1140|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = +HEAPF64[$10>>3];
   $12 = !($11 <= 0.0);
   if (!($12)) {
    $$0 = 202;
    STACKTOP = sp;return ($$0|0);
   }
   $13 = (((($6) + ($8<<7)|0)) + 4|0);
   HEAP32[$13>>2] = 0;
   $14 = HEAP32[$9>>2]|0;
   $15 = +HEAPF64[$14>>3];
   $16 = ((($0)) + 48|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ((($0)) + 12|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (((($17) + ($19<<7)|0)) + 64|0);
   HEAPF64[$20>>3] = $15;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 2:  {
   $21 = ((($0)) + 1140|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ((($22)) + 8|0);
   $24 = +HEAPF64[$23>>3];
   $25 = +HEAPF64[$22>>3];
   $26 = $25 * 1.33334;
   $27 = $24 * 2.0;
   $$01 = $27;$$02 = $24;$$03 = 0.0;$$04 = $25;$$05 = $26;
   break;
  }
  default: {
   $28 = ($1|0)>(4);
   if ($28) {
    $29 = ((($0)) + 1140|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = ((($30)) + 32|0);
    $32 = +HEAPF64[$31>>3];
    $33 = ((($30)) + 24|0);
    $34 = +HEAPF64[$33>>3];
    $35 = ((($30)) + 16|0);
    $36 = +HEAPF64[$35>>3];
    $37 = ((($30)) + 8|0);
    $38 = +HEAPF64[$37>>3];
    $39 = +HEAPF64[$30>>3];
    $$01 = $32;$$02 = $36;$$03 = $34;$$04 = $38;$$05 = $39;
    break L1;
   } else {
    $$0 = 202;
    STACKTOP = sp;return ($$0|0);
   }
  }
  }
 } while(0);
 $40 = (((($6) + ($8<<7)|0)) + 4|0);
 HEAP32[$40>>2] = 1;
 $41 = (_powercurve($$05,$$04,$$03,$$02,$$01,$2,$3,$4)|0);
 $42 = ($41|0)==(0);
 if ($42) {
  $$0 = 206;
  STACKTOP = sp;return ($$0|0);
 }
 $43 = +HEAPF64[$2>>3];
 $44 = - $43;
 $45 = (((($6) + ($8<<7)|0)) + 32|0);
 HEAPF64[$45>>3] = $44;
 $46 = +HEAPF64[$3>>3];
 $47 = - $46;
 $48 = (((($6) + ($8<<7)|0)) + 40|0);
 HEAPF64[$48>>3] = $47;
 $49 = +HEAPF64[$4>>3];
 $50 = (((($6) + ($8<<7)|0)) + 48|0);
 HEAPF64[$50>>3] = $49;
 $51 = (((($6) + ($8<<7)|0)) + 8|0);
 HEAPF64[$51>>3] = $$02;
 $52 = $44 / $46;
 $53 = 1.0 / $49;
 $54 = (+Math_pow((+$52),(+$53)));
 $55 = (((($6) + ($8<<7)|0)) + 16|0);
 HEAPF64[$55>>3] = $54;
 $56 = (((($6) + ($8<<7)|0)) + 24|0);
 HEAPF64[$56>>3] = $$05;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _powercurve($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$0 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $8 = 0;
 var $9 = 0.0, $or$cond = 0, $or$cond2 = 0, $or$cond4 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $8 = $0 < 9.9999999999999995E-7;
 if ($8) {
  $$0 = 0;
  return ($$0|0);
 }
 $9 = $0 - $1;
 $10 = $9 < 9.9999999999999995E-7;
 $11 = $1 - $2;
 $12 = $11 < 9.9999999999999995E-7;
 $or$cond = $10 | $12;
 $13 = $3 < 9.9999999999999995E-7;
 $or$cond2 = $or$cond | $13;
 $14 = $4 - $3;
 $15 = $14 < 9.9999999999999995E-7;
 $or$cond4 = $or$cond2 | $15;
 if ($or$cond4) {
  $$0 = 0;
  return ($$0|0);
 }
 HEAPF64[$5>>3] = $0;
 $16 = $0 - $2;
 $17 = $16 / $9;
 $18 = (+Math_log((+$17)));
 $19 = $4 / $3;
 $20 = (+Math_log((+$19)));
 $21 = $18 / $20;
 HEAPF64[$7>>3] = $21;
 $22 = $21 <= 0.0;
 $23 = $21 > 20.0;
 $or$cond5 = $22 | $23;
 if ($or$cond5) {
  $$0 = 0;
  return ($$0|0);
 }
 $24 = - $9;
 $25 = (+Math_pow((+$3),(+$21)));
 $26 = $24 / $25;
 HEAPF64[$6>>3] = $26;
 $27 = !($26 >= 0.0);
 if (!($27)) {
  $$0 = 0;
  return ($$0|0);
 }
 $$0 = 1;
 return ($$0|0);
}
function _valvedata($0) {
 $0 = $0|0;
 var $$0 = 0, $$02 = 0, $$4 = 0, $$idx = 0, $$idx$val = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp + 16|0;
 $2 = sp + 8|0;
 $3 = sp;
 $4 = ((($0)) + 92|0);
 HEAPF64[$1>>3] = 0.0;
 HEAPF64[$3>>3] = 0.0;
 $5 = ((($0)) + 1104|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 1064|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8|0)==($10|0);
 if ($11) {
  $$0 = 200;
  STACKTOP = sp;return ($$0|0);
 }
 $12 = ((($0)) + 24|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($0)) + 1084|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($13|0)==($15|0);
 if ($16) {
  $$0 = 200;
  STACKTOP = sp;return ($$0|0);
 }
 $17 = (($13) + 1)|0;
 HEAP32[$12>>2] = $17;
 $18 = (($8) + 1)|0;
 HEAP32[$7>>2] = $18;
 $19 = ((($0)) + 388|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (_addlinkID($0,$18,$20)|0);
 $22 = ($21|0)==(0);
 if (!($22)) {
  $23 = (_setError($4,0,$21)|0);
  $$0 = $23;
  STACKTOP = sp;return ($$0|0);
 }
 $24 = ($6|0)<(6);
 if ($24) {
  $$0 = 201;
  STACKTOP = sp;return ($$0|0);
 }
 $25 = ((($0)) + 392|0);
 $26 = HEAP32[$25>>2]|0;
 $$idx = ((($0)) + 80|0);
 $$idx$val = HEAP32[$$idx>>2]|0;
 $27 = (_findnode($$idx$val,$26)|0);
 $28 = ($27|0)==(0);
 if ($28) {
  (_setError($4,1,203)|0);
  $$0 = 203;
  STACKTOP = sp;return ($$0|0);
 }
 $29 = ((($0)) + 396|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (_findnode($$idx$val,$30)|0);
 $32 = ($31|0)==(0);
 if ($32) {
  (_setError($4,2,203)|0);
  $$0 = 203;
  STACKTOP = sp;return ($$0|0);
 }
 $33 = ($27|0)==($31|0);
 if ($33) {
  (_setError($4,0,222)|0);
  $$0 = 222;
  STACKTOP = sp;return ($$0|0);
 }
 $34 = ((($0)) + 404|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (_match($35,8212)|0);
 $37 = ($36|0)==(0);
 if ($37) {
  $38 = (_match($35,8216)|0);
  $39 = ($38|0)==(0);
  if ($39) {
   $40 = (_match($35,8220)|0);
   $41 = ($40|0)==(0);
   if ($41) {
    $42 = (_match($35,8224)|0);
    $43 = ($42|0)==(0);
    if ($43) {
     $44 = (_match($35,8228)|0);
     $45 = ($44|0)==(0);
     if ($45) {
      $46 = (_match($35,8232)|0);
      $47 = ($46|0)==(0);
      if ($47) {
       (_setError($4,4,213)|0);
       $$0 = 213;
       STACKTOP = sp;return ($$0|0);
      } else {
       $$4 = 8;
      }
     } else {
      $$4 = 7;
     }
    } else {
     $$4 = 6;
    }
   } else {
    $$4 = 5;
   }
  } else {
   $$4 = 4;
  }
 } else {
  $$4 = 3;
 }
 $48 = ((($0)) + 400|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = (_getfloat($49,$1)|0);
 $51 = ($50|0)==(0);
 if ($51) {
  (_setError($4,3,202)|0);
  $$0 = 202;
  STACKTOP = sp;return ($$0|0);
 }
 $52 = +HEAPF64[$1>>3];
 $53 = !($52 <= 0.0);
 if (!($53)) {
  (_setError($4,3,211)|0);
  $$0 = 211;
  STACKTOP = sp;return ($$0|0);
 }
 $54 = ($$4<<24>>24)==(8);
 $55 = ((($0)) + 408|0);
 $56 = HEAP32[$55>>2]|0;
 do {
  if ($54) {
   $57 = (_findcurve($0,$56)|0);
   $58 = ($57|0)==(0);
   if (!($58)) {
    $59 = (+($57|0));
    HEAPF64[$2>>3] = $59;
    $60 = ((($0)) + 68|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = (((($61) + (($57*56)|0)|0)) + 36|0);
    HEAP32[$62>>2] = 3;
    $$02 = 3;
    break;
   }
   (_setError($4,5,206)|0);
   $$0 = 206;
   STACKTOP = sp;return ($$0|0);
  } else {
   $63 = (_getfloat($56,$2)|0);
   $64 = ($63|0)==(0);
   if ($64) {
    (_setError($4,5,202)|0);
    $$0 = 202;
    STACKTOP = sp;return ($$0|0);
   } else {
    $$02 = 4;
   }
  }
 } while(0);
 $65 = ($6|0)>(6);
 if ($65) {
  $66 = ((($0)) + 412|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = (_getfloat($67,$3)|0);
  $69 = ($68|0)==(0);
  if ($69) {
   (_setError($4,6,202)|0);
   $$0 = 202;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $70 = HEAP32[$7>>2]|0;
 $71 = $$4&255;
 $72 = (_valvecheck($0,$70,$71,$27,$31)|0);
 $73 = ($72|0)==(0);
 if ($73) {
  $78 = ((($0)) + 48|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = (((($79) + ($70<<7)|0)) + 32|0);
  HEAP32[$80>>2] = $27;
  $81 = (((($79) + ($70<<7)|0)) + 36|0);
  HEAP32[$81>>2] = $31;
  $82 = (((($79) + ($70<<7)|0)) + 40|0);
  HEAPF64[$82>>3] = $52;
  $83 = (((($79) + ($70<<7)|0)) + 48|0);
  HEAPF64[$83>>3] = 0.0;
  $84 = +HEAPF64[$2>>3];
  $85 = (((($79) + ($70<<7)|0)) + 56|0);
  HEAPF64[$85>>3] = $84;
  $86 = +HEAPF64[$3>>3];
  $87 = (((($79) + ($70<<7)|0)) + 64|0);
  HEAPF64[$87>>3] = $86;
  $88 = (((($79) + ($70<<7)|0)) + 72|0);
  $89 = (((($79) + ($70<<7)|0)) + 104|0);
  ;HEAP32[$88>>2]=0|0;HEAP32[$88+4>>2]=0|0;HEAP32[$88+8>>2]=0|0;HEAP32[$88+12>>2]=0|0;
  HEAP32[$89>>2] = $71;
  $90 = (((($79) + ($70<<7)|0)) + 108|0);
  HEAP32[$90>>2] = $$02;
  $91 = (((($79) + ($70<<7)|0)) + 116|0);
  HEAP32[$91>>2] = 0;
  $92 = (((($79) + ($70<<7)|0)) + 120|0);
  HEAP32[$92>>2] = 0;
  $93 = (((($79) + ($70<<7)|0)) + 124|0);
  $94 = ((($0)) + 548|0);
  $95 = (_xstrcpy($93,$94,255)|0);
  HEAP32[$93>>2] = $95;
  $96 = HEAP32[$7>>2]|0;
  $97 = ((($0)) + 60|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = HEAP32[$12>>2]|0;
  $100 = (($98) + ($99<<2)|0);
  HEAP32[$100>>2] = $96;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $74 = ((($0)) + 8|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = ($27|0)>($75|0);
 if ($76) {
  (_setError($4,1,219)|0);
  $$0 = 219;
  STACKTOP = sp;return ($$0|0);
 }
 $77 = ($31|0)>($75|0);
 if ($77) {
  (_setError($4,2,219)|0);
  $$0 = 219;
  STACKTOP = sp;return ($$0|0);
 } else {
  (_setError($4,-1,220)|0);
  $$0 = 220;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _patterndata($0) {
 $0 = $0|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$phi$trans$insert = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ((($0)) + 92|0);
 $3 = ((($0)) + 1104|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + -1)|0;
 $6 = ($4|0)<(2);
 if ($6) {
  $$0 = 201;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = ((($0)) + 1132|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 $$phi$trans$insert = ((($0)) + 388|0);
 $$pre = HEAP32[$$phi$trans$insert>>2]|0;
 if ($9) {
  label = 4;
 } else {
  $10 = (_strcmp($$pre,$8)|0);
  $11 = ($10|0)==(0);
  if ($11) {
   $$01 = $8;
  } else {
   label = 4;
  }
 }
 if ((label|0) == 4) {
  $12 = (_findpattern($0,$$pre)|0);
  $13 = ($12|0)<(1);
  if ($13) {
   (_setError($2,0,205)|0);
   $$0 = 205;
   STACKTOP = sp;return ($$0|0);
  }
  $14 = ((($0)) + 64|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + (($12*44)|0)|0);
  $17 = (((($15) + (($12*44)|0)|0)) + 32|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)==(0|0);
  if ($19) {
   $20 = ((($0)) + 548|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = ($21<<24>>24)==(0);
   if ($22) {
    $$01 = $16;
   } else {
    $23 = (_xstrcpy($17,$20,255)|0);
    HEAP32[$17>>2] = $23;
    $$01 = $16;
   }
  } else {
   $$01 = $16;
  }
 }
 $24 = ((($$01)) + 36|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($25) + ($5))|0;
 HEAP32[$24>>2] = $26;
 $27 = ((($$01)) + 40|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $26 << 3;
 $30 = (_realloc($28,$29)|0);
 HEAP32[$27>>2] = $30;
 $$02 = 1;
 while(1) {
  $31 = ($$02|0)<($4|0);
  if (!($31)) {
   label = 14;
   break;
  }
  $32 = (((($0)) + 388|0) + ($$02<<2)|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (_getfloat($33,$1)|0);
  $35 = ($34|0)==(0);
  if ($35) {
   label = 12;
   break;
  }
  $36 = +HEAPF64[$1>>3];
  $37 = HEAP32[$27>>2]|0;
  $38 = (($25) + ($$02))|0;
  $39 = (($38) + -1)|0;
  $40 = (($37) + ($39<<3)|0);
  HEAPF64[$40>>3] = $36;
  $41 = (($$02) + 1)|0;
  $$02 = $41;
 }
 if ((label|0) == 12) {
  (_setError($2,$$02,202)|0);
  $$0 = 202;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 14) {
  HEAP32[$7>>2] = $$01;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _curvedata($0) {
 $0 = $0|0;
 var $$0 = 0, $$01 = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre3 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 8|0;
 $2 = sp;
 $3 = ((($0)) + 92|0);
 $4 = ((($0)) + 1104|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)<(3);
 if ($6) {
  $$0 = 201;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = ((($0)) + 392|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (_getfloat($8,$1)|0);
 $10 = ($9|0)==(0);
 if ($10) {
  (_setError($3,1,202)|0);
  $$0 = 202;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = ((($0)) + 396|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_getfloat($12,$2)|0);
 $14 = ($13|0)==(0);
 if ($14) {
  (_setError($3,2,202)|0);
  $$0 = 202;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = ((($0)) + 1136|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)==(0|0);
 $$phi$trans$insert = ((($0)) + 388|0);
 $$pre = HEAP32[$$phi$trans$insert>>2]|0;
 if ($17) {
  label = 8;
 } else {
  $18 = (_strcmp($$pre,$16)|0);
  $19 = ($18|0)==(0);
  if ($19) {
   $$01 = $16;
  } else {
   label = 8;
  }
 }
 if ((label|0) == 8) {
  $20 = (_findcurve($0,$$pre)|0);
  $21 = ($20|0)==(0);
  if ($21) {
   (_setError($3,0,206)|0);
   $$0 = 206;
   STACKTOP = sp;return ($$0|0);
  }
  $22 = ((($0)) + 68|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($23) + (($20*56)|0)|0);
  $25 = (((($23) + (($20*56)|0)|0)) + 32|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ($26|0)==(0|0);
  if ($27) {
   $28 = ((($0)) + 548|0);
   $29 = HEAP8[$28>>0]|0;
   $30 = ($29<<24>>24)==(0);
   if ($30) {
    $$01 = $24;
   } else {
    $31 = (_xstrcpy($25,$28,255)|0);
    HEAP32[$25>>2] = $31;
    $$01 = $24;
   }
  } else {
   $$01 = $24;
  }
 }
 $32 = ((($$01)) + 44|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ((($$01)) + 40|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33|0)==($35|0);
 do {
  if ($36) {
   $37 = (($33) + 10)|0;
   $38 = (_resizecurve($$01,$37)|0);
   $39 = ($38|0)>(0);
   if ($39) {
    $$0 = 101;
    STACKTOP = sp;return ($$0|0);
   } else {
    $$pre3 = HEAP32[$34>>2]|0;
    $44 = $$pre3;
    break;
   }
  } else {
   $44 = $35;
  }
 } while(0);
 $40 = +HEAPF64[$1>>3];
 $41 = ((($$01)) + 48|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = (($42) + ($44<<3)|0);
 HEAPF64[$43>>3] = $40;
 $45 = +HEAPF64[$2>>3];
 $46 = ((($$01)) + 52|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = HEAP32[$34>>2]|0;
 $49 = (($47) + ($48<<3)|0);
 HEAPF64[$49>>3] = $45;
 $50 = HEAP32[$34>>2]|0;
 $51 = (($50) + 1)|0;
 HEAP32[$34>>2] = $51;
 HEAP32[$15>>2] = $$01;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _coordata($0) {
 $0 = $0|0;
 var $$0 = 0, $$idx = 0, $$idx$val = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 8|0;
 $2 = sp;
 $3 = ((($0)) + 92|0);
 $4 = ((($0)) + 1104|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)<(3);
 if ($6) {
  $$0 = 201;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = ((($0)) + 388|0);
 $8 = HEAP32[$7>>2]|0;
 $$idx = ((($0)) + 80|0);
 $$idx$val = HEAP32[$$idx>>2]|0;
 $9 = (_findnode($$idx$val,$8)|0);
 $10 = ($9|0)==(0);
 if ($10) {
  (_setError($3,0,203)|0);
  $$0 = 203;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = ((($0)) + 392|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_getfloat($12,$1)|0);
 $14 = ($13|0)==(0);
 if ($14) {
  (_setError($3,1,202)|0);
  $$0 = 202;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = ((($0)) + 396|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (_getfloat($16,$2)|0);
 $18 = ($17|0)==(0);
 if ($18) {
  (_setError($3,2,202)|0);
  $$0 = 202;
  STACKTOP = sp;return ($$0|0);
 } else {
  $19 = ((($0)) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = +HEAPF64[$1>>3];
  $22 = (((($20) + (($9*96)|0)|0)) + 32|0);
  HEAPF64[$22>>3] = $21;
  $23 = +HEAPF64[$2>>3];
  $24 = (((($20) + (($9*96)|0)|0)) + 40|0);
  HEAPF64[$24>>3] = $23;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _vertexdata($0) {
 $0 = $0|0;
 var $$0 = 0, $$idx = 0, $$idx$val = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 8|0;
 $2 = sp;
 $3 = ((($0)) + 92|0);
 $4 = ((($0)) + 1104|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)<(3);
 if ($6) {
  $$0 = 201;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = ((($0)) + 388|0);
 $8 = HEAP32[$7>>2]|0;
 $$idx = ((($0)) + 84|0);
 $$idx$val = HEAP32[$$idx>>2]|0;
 $9 = (_findlink($$idx$val,$8)|0);
 $10 = ($9|0)==(0);
 if ($10) {
  (_setError($3,0,204)|0);
  $$0 = 204;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = ((($0)) + 392|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_getfloat($12,$1)|0);
 $14 = ($13|0)==(0);
 if ($14) {
  (_setError($3,1,202)|0);
  $$0 = 202;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = ((($0)) + 396|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (_getfloat($16,$2)|0);
 $18 = ($17|0)==(0);
 if ($18) {
  (_setError($3,2,202)|0);
  $$0 = 202;
  STACKTOP = sp;return ($$0|0);
 } else {
  $19 = ((($0)) + 48|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($20) + ($9<<7)|0);
  $22 = +HEAPF64[$1>>3];
  $23 = +HEAPF64[$2>>3];
  $24 = (_addlinkvertex($21,$22,$23)|0);
  $$0 = $24;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _demanddata($0) {
 $0 = $0|0;
 var $$0 = 0, $$01 = 0, $$idx = 0, $$idx$val = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ((($0)) + 92|0);
 $3 = ((($0)) + 1104|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)<(2);
 if ($5) {
  $$0 = 201;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = ((($0)) + 392|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (_getfloat($7,$1)|0);
 $9 = ($8|0)==(0);
 if ($9) {
  (_setError($2,1,202)|0);
  $$0 = 202;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = ((($0)) + 388|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (_match($11,8236)|0);
 $13 = ($12|0)==(0);
 if (!($13)) {
  $14 = +HEAPF64[$1>>3];
  $15 = !($14 <= 0.0);
  if ($15) {
   $16 = ((($0)) + 4344|0);
   HEAPF64[$16>>3] = $14;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   (_setError($2,1,213)|0);
   $$0 = 213;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $$idx = ((($0)) + 80|0);
 $$idx$val = HEAP32[$$idx>>2]|0;
 $17 = (_findnode($$idx$val,$11)|0);
 $18 = ($17|0)==(0);
 if ($18) {
  (_setError($2,0,203)|0);
  $$0 = 203;
  STACKTOP = sp;return ($$0|0);
 }
 $19 = ((($0)) + 8|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($17|0)>($20|0);
 if ($21) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $22 = ($4|0)>(2);
 if ($22) {
  $23 = ((($0)) + 396|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (_findpattern($0,$24)|0);
  $26 = ($25|0)<(0);
  if ($26) {
   (_setError($2,2,205)|0);
   $$0 = 205;
   STACKTOP = sp;return ($$0|0);
  } else {
   $$01 = $25;
  }
 } else {
  $$01 = 0;
 }
 $27 = ((($0)) + 44|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (((($28) + (($17*96)|0)|0)) + 56|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)==(0|0);
 if ($31) {
  label = 19;
 } else {
  $32 = ((($0)) + 4260|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (($33) + ($17<<3)|0);
  $35 = +HEAPF64[$34>>3];
  $36 = $35 != -1.0E+10;
  if ($36) {
   $37 = +HEAPF64[$1>>3];
   HEAPF64[$30>>3] = $37;
   $38 = ((($30)) + 8|0);
   HEAP32[$38>>2] = $$01;
   $39 = ((($0)) + 548|0);
   $40 = HEAP8[$39>>0]|0;
   $41 = ($40<<24>>24)==(0);
   if (!($41)) {
    $42 = ((($30)) + 12|0);
    $43 = (_xstrcpy($42,$39,31)|0);
    HEAP32[$42>>2] = $43;
   }
   $44 = HEAP32[$32>>2]|0;
   $45 = (($44) + ($17<<3)|0);
   HEAPF64[$45>>3] = -1.0E+10;
  } else {
   label = 19;
  }
 }
 if ((label|0) == 19) {
  $46 = (($28) + (($17*96)|0)|0);
  $47 = +HEAPF64[$1>>3];
  $48 = ((($0)) + 548|0);
  $49 = (_adddemand($46,$47,$$01,$48)|0);
  $50 = ($49|0)==(0);
  if ($50) {
   $$0 = 101;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _controldata($0) {
 $0 = $0|0;
 var $$0 = 0, $$13 = 0, $$16 = 0.0, $$1922 = 0, $$2 = 0, $$2$ph = 0, $$224 = 0, $$27 = 0.0, $$4 = 0, $$idx = 0, $$idx$val = 0, $$idx10 = 0, $$idx10$val = 0, $$off = 0, $$pr = 0.0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0;
 var $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0, $9 = 0, $storemerge = 0;
 var $storemerge31 = 0.0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 8|0;
 $2 = sp;
 $3 = ((($0)) + 92|0);
 HEAPF64[$1>>3] = -1.0E+10;
 HEAPF64[$2>>3] = 0.0;
 $4 = ((($0)) + 1104|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)<(6);
 if ($6) {
  $$0 = 201;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = ((($0)) + 392|0);
 $8 = HEAP32[$7>>2]|0;
 $$idx10 = ((($0)) + 84|0);
 $$idx10$val = HEAP32[$$idx10>>2]|0;
 $9 = (_findlink($$idx10$val,$8)|0);
 $10 = ($9|0)==(0);
 if ($10) {
  (_setError($3,1,204)|0);
  $$0 = 204;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = ((($0)) + 48|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (((($12) + ($9<<7)|0)) + 104|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(0);
 if ($15) {
  (_setError($3,1,207)|0);
  $$0 = 207;
  STACKTOP = sp;return ($$0|0);
 }
 $16 = ((($0)) + 396|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (_match($17,14444)|0);
 $19 = ($18|0)==(0);
 L12: do {
  if ($19) {
   $22 = (_match($17,14449)|0);
   $23 = ($22|0)==(0);
   if (!($23)) {
    switch ($14|0) {
    case 2:  {
     $storemerge31 = 0.0;
     label = 17;
     break L12;
     break;
    }
    case 8:  {
     break;
    }
    default: {
     $$13 = 2;
     label = 16;
     break L12;
    }
    }
    $24 = (((($12) + ($9<<7)|0)) + 56|0);
    $25 = +HEAPF64[$24>>3];
    HEAPF64[$1>>3] = $25;
    $$4 = 2;
    break;
   }
   $26 = ($14|0)==(8);
   if ($26) {
    (_setError($3,1,207)|0);
    $$0 = 207;
    STACKTOP = sp;return ($$0|0);
   }
   $27 = (_getfloat($17,$1)|0);
   $28 = ($27|0)==(0);
   if ($28) {
    (_setError($3,2,202)|0);
    $$0 = 202;
    STACKTOP = sp;return ($$0|0);
   } else {
    $$13 = 4;
    label = 16;
   }
  } else {
   switch ($14|0) {
   case 2:  {
    $storemerge31 = 1.0;
    label = 17;
    break L12;
    break;
   }
   case 8:  {
    break;
   }
   default: {
    $$13 = 3;
    label = 16;
    break L12;
   }
   }
   $20 = (((($12) + ($9<<7)|0)) + 56|0);
   $21 = +HEAPF64[$20>>3];
   HEAPF64[$1>>3] = $21;
   $$4 = 3;
  }
 } while(0);
 if ((label|0) == 16) {
  $$off = (($14) + -1)|0;
  $switch = ($$off>>>0)<(2);
  if ($switch) {
   $$pr = +HEAPF64[$1>>3];
   $29 = $$pr != -1.0E+10;
   if ($29) {
    $31 = $$pr;
    $30 = $31 < 0.0;
    if ($30) {
     (_setError($3,2,211)|0);
     $$0 = 211;
     STACKTOP = sp;return ($$0|0);
    } else {
     $33 = $31;
     label = 21;
    }
   } else {
    $$4 = $$13;
   }
  } else {
   $$4 = $$13;
  }
 }
 else if ((label|0) == 17) {
  HEAPF64[$1>>3] = $storemerge31;
  $33 = $storemerge31;
  label = 21;
 }
 if ((label|0) == 21) {
  $32 = $33 == 0.0;
  if ($32) {
   $$4 = 2;
  } else {
   $$4 = 3;
  }
 }
 $34 = ((($0)) + 404|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (_match($35,14322)|0);
 $37 = ($36|0)==(0);
 if ($37) {
  $38 = (_match($35,14327)|0);
  $39 = ($38|0)==(0);
  if ($39) {
   $40 = ($5|0)<(8);
   if ($40) {
    $$0 = 201;
    STACKTOP = sp;return ($$0|0);
   }
   $41 = ((($0)) + 408|0);
   $42 = HEAP32[$41>>2]|0;
   $$idx = ((($0)) + 80|0);
   $$idx$val = HEAP32[$$idx>>2]|0;
   $43 = (_findnode($$idx$val,$42)|0);
   $44 = ($43|0)==(0);
   if ($44) {
    (_setError($3,5,203)|0);
    $$0 = 203;
    STACKTOP = sp;return ($$0|0);
   }
   $45 = ((($0)) + 412|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = (_match($46,14427)|0);
   $48 = ($47|0)==(0);
   if ($48) {
    $49 = (_match($46,14433)|0);
    $50 = ($49|0)==(0);
    if ($50) {
     (_setError($3,6,213)|0);
     $$0 = 213;
     STACKTOP = sp;return ($$0|0);
    } else {
     $$2 = 1;
    }
   } else {
    $$2 = 0;
   }
   $60 = ((($0)) + 416|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = (_getfloat($61,$2)|0);
   $63 = ($62|0)==(0);
   if ($63) {
    (_setError($3,7,202)|0);
    $$0 = 202;
    STACKTOP = sp;return ($$0|0);
   } else {
    $$1922 = $43;$$224 = $$2;$$27 = 0.0;
   }
  } else {
   $$2$ph = 3;
   label = 31;
  }
 } else {
  $$2$ph = 2;
  label = 31;
 }
 L54: do {
  if ((label|0) == 31) {
   switch ($5|0) {
   case 6:  {
    $51 = ((($0)) + 408|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = (+_hour($52,21208));
    $$16 = $53;
    break;
   }
   case 7:  {
    $54 = ((($0)) + 408|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = ((($0)) + 412|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = (+_hour($55,$57));
    $$16 = $58;
    break;
   }
   default: {
    $$1922 = 0;$$224 = $$2$ph;$$27 = 0.0;
    break L54;
   }
   }
   $59 = $$16 < 0.0;
   if ($59) {
    (_setError($3,5,213)|0);
    $$0 = 213;
    STACKTOP = sp;return ($$0|0);
   } else {
    $$1922 = 0;$$224 = $$2$ph;$$27 = $$16;
   }
  }
 } while(0);
 $64 = ((($0)) + 28|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = (($65) + 1)|0;
 HEAP32[$64>>2] = $66;
 $67 = ((($0)) + 1088|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = ($65|0)<($68|0);
 if (!($69)) {
  $$0 = 200;
  STACKTOP = sp;return ($$0|0);
 }
 $70 = ((($0)) + 72|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = (($71) + (($66*40)|0)|0);
 HEAP32[$72>>2] = $9;
 $73 = (((($71) + (($66*40)|0)|0)) + 4|0);
 HEAP32[$73>>2] = $$1922;
 $74 = (((($71) + (($66*40)|0)|0)) + 36|0);
 HEAP32[$74>>2] = $$224;
 $75 = (((($71) + (($66*40)|0)|0)) + 32|0);
 HEAP32[$75>>2] = $$4;
 $76 = +HEAPF64[$1>>3];
 $77 = (((($71) + (($66*40)|0)|0)) + 24|0);
 HEAPF64[$77>>3] = $76;
 $78 = $$27 * 3600.0;
 $79 = (~~(($78)));
 $80 = (((($71) + (($66*40)|0)|0)) + 8|0);
 $81 = ($$224|0)==(3);
 $82 = (($79|0) % 86400)&-1;
 $storemerge = $81 ? $82 : $79;
 HEAP32[$80>>2] = $storemerge;
 $83 = +HEAPF64[$2>>3];
 $84 = (((($71) + (($66*40)|0)|0)) + 16|0);
 HEAPF64[$84>>3] = $83;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _sourcedata($0) {
 $0 = $0|0;
 var $$0 = 0, $$02 = 0, $$3 = 0, $$36 = 0, $$idx = 0, $$idx$val = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, $spec$select7 = 0, $strlenfirst = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ((($0)) + 92|0);
 HEAPF64[$1>>3] = 0.0;
 $3 = ((($0)) + 1104|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)<(2);
 if ($5) {
  $$0 = 201;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = ((($0)) + 388|0);
 $7 = HEAP32[$6>>2]|0;
 $$idx = ((($0)) + 80|0);
 $$idx$val = HEAP32[$$idx>>2]|0;
 $8 = (_findnode($$idx$val,$7)|0);
 $9 = ($8|0)==(0);
 if ($9) {
  (_setError($2,0,203)|0);
  $$0 = 203;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = ((($0)) + 392|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (_match($11,8241)|0);
 $13 = ($12|0)==(0);
 if ($13) {
  $14 = (_match($11,8248)|0);
  $15 = ($14|0)==(0);
  if ($15) {
   $16 = (_match($11,8253)|0);
   $17 = ($16|0)==(0);
   if ($17) {
    $18 = (_match($11,8262)|0);
    $19 = ($18|0)==(0);
    $spec$select = $19 ? 1 : 2;
    $spec$select7 = $19 ? 0 : 3;
    $$3 = $spec$select7;$$36 = $spec$select;
   } else {
    $$3 = 2;$$36 = 2;
   }
  } else {
   $$3 = 1;$$36 = 2;
  }
 } else {
  $$3 = 0;$$36 = 2;
 }
 $20 = (((($0)) + 388|0) + ($$36<<2)|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (_getfloat($21,$1)|0);
 $23 = ($22|0)==(0);
 if ($23) {
  $24 = ($$36|0)==(1);
  if ($24) {
   (_setError($2,1,213)|0);
   $$0 = 213;
   STACKTOP = sp;return ($$0|0);
  } else {
   (_setError($2,$$36,202)|0);
   $$0 = 202;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $25 = (($$36) + 1)|0;
 $26 = ($4|0)>($25|0);
 if ($26) {
  $27 = (((($0)) + 388|0) + ($25<<2)|0);
  $28 = HEAP32[$27>>2]|0;
  $strlenfirst = HEAP8[$28>>0]|0;
  $29 = ($strlenfirst<<24>>24)==(0);
  if ($29) {
   $$02 = 0;
  } else {
   $30 = (_strcmp($28,8272)|0);
   $31 = ($30|0)==(0);
   if ($31) {
    $$02 = 0;
   } else {
    $32 = (_findpattern($0,$28)|0);
    $33 = ($32|0)<(0);
    if ($33) {
     (_setError($2,$25,205)|0);
     $$0 = 205;
     STACKTOP = sp;return ($$0|0);
    } else {
     $$02 = $32;
    }
   }
  }
 } else {
  $$02 = 0;
 }
 $34 = ((($0)) + 44|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (((($35) + (($8*96)|0)|0)) + 60|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ($37|0)==(0|0);
 if (!($38)) {
  _free($37);
 }
 $39 = (_malloc(32)|0);
 $40 = ($39|0)==(0|0);
 if ($40) {
  $$0 = 101;
  STACKTOP = sp;return ($$0|0);
 }
 $41 = +HEAPF64[$1>>3];
 HEAPF64[$39>>3] = $41;
 $42 = ((($39)) + 8|0);
 HEAP32[$42>>2] = $$02;
 $43 = ((($39)) + 24|0);
 HEAP32[$43>>2] = $$3;
 $44 = HEAP32[$34>>2]|0;
 $45 = (((($44) + (($8*96)|0)|0)) + 60|0);
 HEAP32[$45>>2] = $39;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _emitterdata($0) {
 $0 = $0|0;
 var $$0 = 0, $$idx = 0, $$idx$val = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ((($0)) + 92|0);
 $3 = ((($0)) + 1104|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)<(2);
 do {
  if ($5) {
   $$0 = 201;
  } else {
   $6 = ((($0)) + 388|0);
   $7 = HEAP32[$6>>2]|0;
   $$idx = ((($0)) + 80|0);
   $$idx$val = HEAP32[$$idx>>2]|0;
   $8 = (_findnode($$idx$val,$7)|0);
   $9 = ($8|0)==(0);
   if ($9) {
    (_setError($2,0,203)|0);
    $$0 = 203;
    break;
   }
   $10 = ((($0)) + 8|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($8|0)>($11|0);
   if ($12) {
    $$0 = 0;
   } else {
    $13 = ((($0)) + 392|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (_getfloat($14,$1)|0);
    $16 = ($15|0)==(0);
    if ($16) {
     (_setError($2,1,202)|0);
     $$0 = 202;
     break;
    }
    $17 = +HEAPF64[$1>>3];
    $18 = $17 < 0.0;
    if ($18) {
     (_setError($2,1,209)|0);
     $$0 = 209;
     break;
    } else {
     $19 = ((($0)) + 44|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = (((($20) + (($8*96)|0)|0)) + 72|0);
     HEAPF64[$21>>3] = $17;
     $$0 = 0;
     break;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _qualdata($0) {
 $0 = $0|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$idx = 0, $$idx$val = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ((($0)) + 92|0);
 $3 = ((($0)) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$0>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  (_setError($2,0,203)|0);
  $$0 = 203;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = ((($0)) + 1104|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)<(2);
 if ($9) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = ($8|0)==(2);
 if ($10) {
  $11 = ((($0)) + 388|0);
  $12 = HEAP32[$11>>2]|0;
  $$idx = ((($0)) + 80|0);
  $$idx$val = HEAP32[$$idx>>2]|0;
  $13 = (_findnode($$idx$val,$12)|0);
  $14 = ($13|0)==(0);
  if ($14) {
   (_setError($2,0,203)|0);
   $$0 = 203;
   STACKTOP = sp;return ($$0|0);
  }
  $15 = ((($0)) + 392|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (_getfloat($16,$1)|0);
  $18 = ($17|0)==(0);
  if ($18) {
   (_setError($2,1,202)|0);
   $$0 = 202;
   STACKTOP = sp;return ($$0|0);
  }
  $19 = +HEAPF64[$1>>3];
  $20 = $19 < 0.0;
  if ($20) {
   (_setError($2,1,209)|0);
   $$0 = 209;
   STACKTOP = sp;return ($$0|0);
  } else {
   $21 = (((($4) + (($13*96)|0)|0)) + 64|0);
   HEAPF64[$21>>3] = $19;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $22 = ((($0)) + 396|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (_getfloat($23,$1)|0);
 $25 = ($24|0)==(0);
 if ($25) {
  (_setError($2,2,202)|0);
  $$0 = 202;
  STACKTOP = sp;return ($$0|0);
 }
 $26 = +HEAPF64[$1>>3];
 $27 = $26 < 0.0;
 if ($27) {
  (_setError($2,2,209)|0);
  $$0 = 209;
  STACKTOP = sp;return ($$0|0);
 }
 $28 = ((($0)) + 388|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (_atol($29)|0);
 $31 = ($30|0)>(0);
 $32 = ((($0)) + 392|0);
 if ($31) {
  $33 = HEAP32[$32>>2]|0;
  $34 = (_atol($33)|0);
  $35 = ($34|0)>(0);
  if ($35) {
   $$01 = 1;
   while(1) {
    $36 = HEAP32[$0>>2]|0;
    $37 = ($$01|0)>($36|0);
    if ($37) {
     $$0 = 0;
     break;
    }
    $38 = (($4) + (($$01*96)|0)|0);
    $39 = (_atol($38)|0);
    $40 = ($39|0)<($30|0);
    $41 = ($39|0)>($34|0);
    $or$cond = $40 | $41;
    if (!($or$cond)) {
     $42 = (((($4) + (($$01*96)|0)|0)) + 64|0);
     HEAPF64[$42>>3] = $26;
    }
    $43 = (($$01) + 1)|0;
    $$01 = $43;
   }
   STACKTOP = sp;return ($$0|0);
  }
 }
 $$1 = 1;
 while(1) {
  $44 = HEAP32[$0>>2]|0;
  $45 = ($$1|0)>($44|0);
  if ($45) {
   $$0 = 0;
   break;
  }
  $46 = HEAP32[$28>>2]|0;
  $47 = (($4) + (($$1*96)|0)|0);
  $48 = (_strcmp($46,$47)|0);
  $49 = ($48|0)<(1);
  if ($49) {
   $50 = HEAP32[$32>>2]|0;
   $51 = (_strcmp($50,$47)|0);
   $52 = ($51|0)>(-1);
   if ($52) {
    $53 = (((($4) + (($$1*96)|0)|0)) + 64|0);
    HEAPF64[$53>>3] = $26;
   }
  }
  $54 = (($$1) + 1)|0;
  $$1 = $54;
 }
 STACKTOP = sp;return ($$0|0);
}
function _reactdata($0) {
 $0 = $0|0;
 var $$0 = 0, $$01 = 0, $$01$in = 0, $$1 = 0, $$1$in = 0, $$13$ph = 0, $$2 = 0, $$3 = 0, $$idx = 0, $$idx$val = 0, $$idx4 = 0, $$idx4$val = 0, $$pre = 0, $$pre9 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0.0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0.0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0.0, $182 = 0, $183 = 0, $184 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0.0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond14 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ((($0)) + 92|0);
 $3 = ((($0)) + 1104|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)<(3);
 if ($5) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = ((($0)) + 388|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (_match($7,8274)|0);
 $9 = ($8|0)==(0);
 if (!($9)) {
  $10 = (($4) + -1)|0;
  $11 = (((($0)) + 388|0) + ($10<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (_getfloat($12,$1)|0);
  $14 = ($13|0)==(0);
  if ($14) {
   (_setError($2,$10,202)|0);
   $$0 = 202;
   STACKTOP = sp;return ($$0|0);
  }
  $15 = ((($0)) + 392|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (_match($16,8280)|0);
  $18 = ($17|0)==(0);
  if (!($18)) {
   $19 = +HEAPF64[$1>>3];
   $20 = ((($0)) + 4768|0);
   HEAPF64[$20>>3] = $19;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $21 = (_match($16,14367)|0);
  $22 = ($21|0)==(0);
  if (!($22)) {
   $23 = +HEAPF64[$1>>3];
   $24 = ((($0)) + 4784|0);
   HEAPF64[$24>>3] = $23;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $25 = (_match($16,8285)|0);
  $26 = ($25|0)==(0);
  if ($26) {
   (_setError($2,1,213)|0);
   $$0 = 213;
   STACKTOP = sp;return ($$0|0);
  }
  $27 = +HEAPF64[$1>>3];
  $28 = $27 == 0.0;
  if ($28) {
   $29 = ((($0)) + 4776|0);
   HEAPF64[$29>>3] = 0.0;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $30 = $27 == 1.0;
  if ($30) {
   $31 = ((($0)) + 4776|0);
   HEAPF64[$31>>3] = 1.0;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   (_setError($2,$10,213)|0);
   $$0 = 213;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $32 = (_match($7,8290)|0);
 $33 = ($32|0)==(0);
 if (!($33)) {
  $34 = (($4) + -1)|0;
  $35 = (((($0)) + 388|0) + ($34<<2)|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (_getfloat($36,$1)|0);
  $38 = ($37|0)==(0);
  if ($38) {
   (_setError($2,$34,202)|0);
   $$0 = 202;
   STACKTOP = sp;return ($$0|0);
  } else {
   $39 = +HEAPF64[$1>>3];
   $40 = ((($0)) + 4736|0);
   HEAPF64[$40>>3] = $39;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $41 = (_match($7,8295)|0);
 $42 = ($41|0)==(0);
 if (!($42)) {
  $43 = (($4) + -1)|0;
  $44 = (((($0)) + 388|0) + ($43<<2)|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (_getfloat($45,$1)|0);
  $47 = ($46|0)==(0);
  if ($47) {
   (_setError($2,$43,202)|0);
   $$0 = 202;
   STACKTOP = sp;return ($$0|0);
  } else {
   $48 = +HEAPF64[$1>>3];
   $49 = ((($0)) + 4808|0);
   HEAPF64[$49>>3] = $48;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $50 = (_match($7,8301)|0);
 $51 = ($50|0)==(0);
 if (!($51)) {
  $52 = (($4) + -1)|0;
  $53 = (((($0)) + 388|0) + ($52<<2)|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (_getfloat($54,$1)|0);
  $56 = ($55|0)==(0);
  if ($56) {
   (_setError($2,$52,202)|0);
   $$0 = 202;
   STACKTOP = sp;return ($$0|0);
  }
  $57 = ((($0)) + 392|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = (_match($58,8280)|0);
  $60 = ($59|0)==(0);
  if (!($60)) {
   $61 = +HEAPF64[$1>>3];
   $62 = ((($0)) + 4792|0);
   HEAPF64[$62>>3] = $61;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $63 = (_match($58,8285)|0);
  $64 = ($63|0)==(0);
  if ($64) {
   (_setError($2,1,213)|0);
   $$0 = 213;
   STACKTOP = sp;return ($$0|0);
  } else {
   $65 = +HEAPF64[$1>>3];
   $66 = ((($0)) + 4800|0);
   HEAPF64[$66>>3] = $65;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $67 = (_match($7,8280)|0);
 $68 = ($67|0)==(0);
 if ($68) {
  $69 = (_match($7,8285)|0);
  $70 = ($69|0)==(0);
  if ($70) {
   $71 = (_match($7,14367)|0);
   $72 = ($71|0)==(0);
   if ($72) {
    (_setError($2,0,213)|0);
    $$0 = 213;
    STACKTOP = sp;return ($$0|0);
   }
   $73 = (($4) + -1)|0;
   $74 = (((($0)) + 388|0) + ($73<<2)|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = (_getfloat($75,$1)|0);
   $77 = ($76|0)==(0);
   if ($77) {
    (_setError($2,$73,202)|0);
    $$0 = 202;
    STACKTOP = sp;return ($$0|0);
   }
   $78 = ($4|0)==(3);
   $79 = ((($0)) + 392|0);
   $80 = HEAP32[$79>>2]|0;
   if ($78) {
    $$idx = ((($0)) + 80|0);
    $$idx$val = HEAP32[$$idx>>2]|0;
    $81 = (_findnode($$idx$val,$80)|0);
    $82 = ((($0)) + 8|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)>($83|0);
    if (!($84)) {
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
    }
    $85 = +HEAPF64[$1>>3];
    $86 = ((($0)) + 52|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = (($81) - ($83))|0;
    $89 = (((($87) + (($88*120)|0)|0)) + 64|0);
    HEAPF64[$89>>3] = $85;
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $90 = (_atol($80)|0);
   $91 = ($90|0)>(0);
   $92 = ((($0)) + 396|0);
   if ($91) {
    $93 = HEAP32[$92>>2]|0;
    $94 = (_atol($93)|0);
    $95 = ($94|0)>(0);
    if ($95) {
     $96 = ((($0)) + 8|0);
     $97 = HEAP32[$96>>2]|0;
     $98 = ((($0)) + 44|0);
     $99 = ((($0)) + 52|0);
     $$01$in = $97;
     while(1) {
      $$01 = (($$01$in) + 1)|0;
      $100 = HEAP32[$0>>2]|0;
      $101 = ($$01$in|0)<($100|0);
      if (!($101)) {
       $$0 = 0;
       break;
      }
      $102 = HEAP32[$98>>2]|0;
      $103 = (($102) + (($$01*96)|0)|0);
      $104 = (_atol($103)|0);
      $105 = ($104|0)<($90|0);
      $106 = ($104|0)>($94|0);
      $or$cond = $105 | $106;
      if (!($or$cond)) {
       $107 = +HEAPF64[$1>>3];
       $108 = HEAP32[$99>>2]|0;
       $109 = HEAP32[$96>>2]|0;
       $110 = (($$01) - ($109))|0;
       $111 = (((($108) + (($110*120)|0)|0)) + 64|0);
       HEAPF64[$111>>3] = $107;
      }
      $$01$in = $$01;
     }
     STACKTOP = sp;return ($$0|0);
    }
   }
   $112 = ((($0)) + 8|0);
   $113 = HEAP32[$112>>2]|0;
   $114 = ((($0)) + 44|0);
   $115 = ((($0)) + 52|0);
   $$1$in = $113;
   while(1) {
    $$1 = (($$1$in) + 1)|0;
    $116 = HEAP32[$0>>2]|0;
    $117 = ($$1$in|0)<($116|0);
    if (!($117)) {
     $$0 = 0;
     break;
    }
    $118 = HEAP32[$79>>2]|0;
    $119 = HEAP32[$114>>2]|0;
    $120 = (($119) + (($$1*96)|0)|0);
    $121 = (_strcmp($118,$120)|0);
    $122 = ($121|0)<(1);
    if ($122) {
     $123 = HEAP32[$92>>2]|0;
     $124 = (_strcmp($123,$120)|0);
     $125 = ($124|0)>(-1);
     if ($125) {
      $126 = +HEAPF64[$1>>3];
      $127 = HEAP32[$115>>2]|0;
      $128 = HEAP32[$112>>2]|0;
      $129 = (($$1) - ($128))|0;
      $130 = (((($127) + (($129*120)|0)|0)) + 64|0);
      HEAPF64[$130>>3] = $126;
     }
    }
    $$1$in = $$1;
   }
   STACKTOP = sp;return ($$0|0);
  } else {
   $$13$ph = 2;
  }
 } else {
  $$13$ph = 1;
 }
 $131 = (($4) + -1)|0;
 $132 = (((($0)) + 388|0) + ($131<<2)|0);
 $133 = HEAP32[$132>>2]|0;
 $134 = (_getfloat($133,$1)|0);
 $135 = ($134|0)==(0);
 if ($135) {
  (_setError($2,$131,202)|0);
  $$0 = 202;
  STACKTOP = sp;return ($$0|0);
 }
 $136 = ((($0)) + 12|0);
 $137 = HEAP32[$136>>2]|0;
 $138 = ($137|0)==(0);
 if ($138) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $139 = ($4|0)==(3);
 $140 = ((($0)) + 392|0);
 $141 = HEAP32[$140>>2]|0;
 if ($139) {
  $$idx4 = ((($0)) + 84|0);
  $$idx4$val = HEAP32[$$idx4>>2]|0;
  $142 = (_findlink($$idx4$val,$141)|0);
  $143 = ($142|0)==(0);
  if ($143) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $144 = ($$13$ph|0)==(1);
  $145 = +HEAPF64[$1>>3];
  $146 = ((($0)) + 48|0);
  $147 = HEAP32[$146>>2]|0;
  if ($144) {
   $148 = (((($147) + ($142<<7)|0)) + 72|0);
   HEAPF64[$148>>3] = $145;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $149 = (((($147) + ($142<<7)|0)) + 80|0);
   HEAPF64[$149>>3] = $145;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $150 = (_atol($141)|0);
 $151 = ($150|0)>(0);
 $152 = ((($0)) + 396|0);
 if ($151) {
  $153 = HEAP32[$152>>2]|0;
  $154 = (_atol($153)|0);
  $155 = ($154|0)>(0);
  if ($155) {
   $156 = ((($0)) + 48|0);
   $157 = ($$13$ph|0)==(1);
   $$2 = 1;$159 = $137;
   while(1) {
    $158 = ($$2|0)>($159|0);
    if ($158) {
     $$0 = 0;
     break;
    }
    $160 = HEAP32[$156>>2]|0;
    $161 = (($160) + ($$2<<7)|0);
    $162 = (_atol($161)|0);
    $163 = ($162|0)<($150|0);
    $164 = ($162|0)>($154|0);
    $or$cond14 = $163 | $164;
    do {
     if (!($or$cond14)) {
      $165 = +HEAPF64[$1>>3];
      if ($157) {
       $166 = (((($160) + ($$2<<7)|0)) + 72|0);
       HEAPF64[$166>>3] = $165;
       break;
      } else {
       $167 = (((($160) + ($$2<<7)|0)) + 80|0);
       HEAPF64[$167>>3] = $165;
       break;
      }
     }
    } while(0);
    $168 = (($$2) + 1)|0;
    $$pre9 = HEAP32[$136>>2]|0;
    $$2 = $168;$159 = $$pre9;
   }
   STACKTOP = sp;return ($$0|0);
  }
 }
 $169 = ((($0)) + 48|0);
 $170 = ($$13$ph|0)==(1);
 $$3 = 1;$172 = $137;
 while(1) {
  $171 = ($$3|0)>($172|0);
  if ($171) {
   $$0 = 0;
   break;
  }
  $173 = HEAP32[$140>>2]|0;
  $174 = HEAP32[$169>>2]|0;
  $175 = (($174) + ($$3<<7)|0);
  $176 = (_strcmp($173,$175)|0);
  $177 = ($176|0)<(1);
  do {
   if ($177) {
    $178 = HEAP32[$152>>2]|0;
    $179 = (_strcmp($178,$175)|0);
    $180 = ($179|0)>(-1);
    if ($180) {
     $181 = +HEAPF64[$1>>3];
     if ($170) {
      $182 = (((($174) + ($$3<<7)|0)) + 72|0);
      HEAPF64[$182>>3] = $181;
      break;
     } else {
      $183 = (((($174) + ($$3<<7)|0)) + 80|0);
      HEAPF64[$183>>3] = $181;
      break;
     }
    }
   }
  } while(0);
  $184 = (($$3) + 1)|0;
  $$pre = HEAP32[$136>>2]|0;
  $$3 = $184;$172 = $$pre;
 }
 STACKTOP = sp;return ($$0|0);
}
function _mixingdata($0) {
 $0 = $0|0;
 var $$0 = 0, $$idx = 0, $$idx$val = 0, $$pr = 0.0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $or$cond = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ((($0)) + 92|0);
 $3 = HEAP32[$0>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  (_setError($2,0,203)|0);
  $$0 = 203;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = ((($0)) + 1104|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)<(2);
 if ($7) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = ((($0)) + 388|0);
 $9 = HEAP32[$8>>2]|0;
 $$idx = ((($0)) + 80|0);
 $$idx$val = HEAP32[$$idx>>2]|0;
 $10 = (_findnode($$idx$val,$9)|0);
 $11 = ($10|0)==(0);
 if ($11) {
  (_setError($2,0,203)|0);
  $$0 = 203;
  STACKTOP = sp;return ($$0|0);
 }
 $12 = ((($0)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($10|0)>($13|0);
 if (!($14)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = ((($0)) + 392|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (_findmatch($16,272)|0);
 $18 = ($17|0)<(0);
 if ($18) {
  (_setError($2,1,213)|0);
  $$0 = 213;
  STACKTOP = sp;return ($$0|0);
 }
 HEAPF64[$1>>3] = 1.0;
 $19 = ($17|0)==(1);
 $20 = ($6|0)==(3);
 $or$cond = $19 & $20;
 do {
  if ($or$cond) {
   $21 = ((($0)) + 396|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = (_getfloat($22,$1)|0);
   $24 = ($23|0)==(0);
   if ($24) {
    (_setError($2,2,202)|0);
    $$0 = 202;
    STACKTOP = sp;return ($$0|0);
   } else {
    $$pr = +HEAPF64[$1>>3];
    $25 = $$pr == 0.0;
    if (!($25)) {
     $37 = $$pr;
     break;
    }
    HEAPF64[$1>>3] = 1.0;
    $37 = 1.0;
    break;
   }
  } else {
   $37 = 1.0;
  }
 } while(0);
 $26 = HEAP32[$12>>2]|0;
 $27 = (($10) - ($26))|0;
 $28 = ((($0)) + 52|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (((($29) + (($27*120)|0)|0)) + 8|0);
 $31 = +HEAPF64[$30>>3];
 $32 = $31 == 0.0;
 if ($32) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $sext = $17 << 24;
 $33 = $sext >> 24;
 $34 = (((($29) + (($27*120)|0)|0)) + 96|0);
 HEAP32[$34>>2] = $33;
 $35 = HEAP32[$28>>2]|0;
 $36 = (((($35) + (($27*120)|0)|0)) + 104|0);
 HEAPF64[$36>>3] = $37;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _statusdata($0) {
 $0 = $0|0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$13 = 0, $$idx = 0, $$idx$val = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ((($0)) + 92|0);
 HEAPF64[$1>>3] = 0.0;
 $3 = ((($0)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  (_setError($2,0,204)|0);
  $$0 = 204;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = ((($0)) + 1104|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -1)|0;
 $9 = ($7|0)<(2);
 if ($9) {
  $$0 = 201;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = (((($0)) + 388|0) + ($8<<2)|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (_match($11,14444)|0);
 $13 = ($12|0)==(0);
 if ($13) {
  $14 = (_match($11,14449)|0);
  $15 = ($14|0)==(0);
  if ($15) {
   $16 = (_getfloat($11,$1)|0);
   $17 = ($16|0)==(0);
   if ($17) {
    (_setError($2,$8,202)|0);
    $$0 = 202;
    STACKTOP = sp;return ($$0|0);
   }
   $18 = +HEAPF64[$1>>3];
   $19 = $18 < 0.0;
   if ($19) {
    (_setError($2,$8,211)|0);
    $$0 = 211;
    STACKTOP = sp;return ($$0|0);
   } else {
    $$1 = 4;$31 = $18;
   }
  } else {
   $$1 = 2;$31 = 0.0;
  }
 } else {
  $$1 = 3;$31 = 0.0;
 }
 $20 = ($8|0)==(1);
 $21 = ((($0)) + 388|0);
 $22 = HEAP32[$21>>2]|0;
 if ($20) {
  $$idx = ((($0)) + 84|0);
  $$idx$val = HEAP32[$$idx>>2]|0;
  $23 = (_findlink($$idx$val,$22)|0);
  $24 = ($23|0)==(0);
  if ($24) {
   (_setError($2,0,204)|0);
   $$0 = 204;
   STACKTOP = sp;return ($$0|0);
  }
  $25 = ((($0)) + 48|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (((($26) + ($23<<7)|0)) + 104|0);
  $28 = HEAP32[$27>>2]|0;
  switch ($28|0) {
  case 0:  {
   (_setError($2,0,207)|0);
   $$0 = 207;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 8:  {
   label = 15;
   break;
  }
  default: {
  }
  }
  if ((label|0) == 15) {
   $29 = ($$1<<24>>24)==(4);
   if ($29) {
    (_setError($2,0,207)|0);
    $$0 = 207;
    STACKTOP = sp;return ($$0|0);
   }
  }
  $30 = $$1&255;
  _changestatus($26,$23,$30,$31);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $32 = (_atol($22)|0);
 $33 = ($32|0)>(0);
 $34 = ((($0)) + 392|0);
 if ($33) {
  $35 = HEAP32[$34>>2]|0;
  $36 = (_atol($35)|0);
  $37 = ($36|0)>(0);
  if ($37) {
   $38 = ((($0)) + 48|0);
   $39 = $$1&255;
   $$02 = 1;
   while(1) {
    $40 = HEAP32[$3>>2]|0;
    $41 = ($$02|0)>($40|0);
    if ($41) {
     $$0 = 0;
     break;
    }
    $42 = HEAP32[$38>>2]|0;
    $43 = (($42) + ($$02<<7)|0);
    $44 = (_atol($43)|0);
    $45 = ($44|0)<($32|0);
    $46 = ($44|0)>($36|0);
    $or$cond = $45 | $46;
    if (!($or$cond)) {
     _changestatus($42,$$02,$39,$31);
    }
    $47 = (($$02) + 1)|0;
    $$02 = $47;
   }
   STACKTOP = sp;return ($$0|0);
  }
 }
 $48 = ((($0)) + 48|0);
 $49 = $$1&255;
 $$13 = 1;
 while(1) {
  $50 = HEAP32[$3>>2]|0;
  $51 = ($$13|0)>($50|0);
  if ($51) {
   $$0 = 0;
   break;
  }
  $52 = HEAP32[$21>>2]|0;
  $53 = HEAP32[$48>>2]|0;
  $54 = (($53) + ($$13<<7)|0);
  $55 = (_strcmp($52,$54)|0);
  $56 = ($55|0)<(1);
  if ($56) {
   $57 = HEAP32[$34>>2]|0;
   $58 = (_strcmp($57,$54)|0);
   $59 = ($58|0)>(-1);
   if ($59) {
    _changestatus($53,$$13,$49,$31);
   }
  }
  $60 = (($$13) + 1)|0;
  $$13 = $60;
 }
 STACKTOP = sp;return ($$0|0);
}
function _changestatus($$0$12$val,$0,$1,$2) {
 $$0$12$val = $$0$12$val|0;
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 var $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (((($$0$12$val) + ($0<<7)|0)) + 104|0);
 $4 = HEAP32[$3>>2]|0;
 switch ($4|0) {
 case 8: case 1:  {
  $5 = ($1|0)==(4);
  if ($5) {
   return;
  }
  $6 = (((($$0$12$val) + ($0<<7)|0)) + 108|0);
  HEAP32[$6>>2] = $1;
  return;
  break;
 }
 case 2:  {
  switch ($1|0) {
  case 4:  {
   $7 = (((($$0$12$val) + ($0<<7)|0)) + 56|0);
   HEAPF64[$7>>3] = $2;
   $8 = $2 == 0.0;
   if ($8) {
    $$1 = 2;
   } else {
    $$1 = 3;
   }
   break;
  }
  case 3:  {
   $9 = (((($$0$12$val) + ($0<<7)|0)) + 56|0);
   HEAPF64[$9>>3] = 1.0;
   $$1 = 3;
   break;
  }
  default: {
   $$1 = $1;
  }
  }
  $10 = (((($$0$12$val) + ($0<<7)|0)) + 108|0);
  HEAP32[$10>>2] = $$1;
  return;
  break;
 }
 default: {
  $11 = ($4>>>0)>(2);
  if (!($11)) {
   return;
  }
  $12 = (((($$0$12$val) + ($0<<7)|0)) + 56|0);
  HEAPF64[$12>>3] = $2;
  $13 = (((($$0$12$val) + ($0<<7)|0)) + 108|0);
  HEAP32[$13>>2] = $1;
  $14 = ($1|0)==(4);
  if ($14) {
   return;
  }
  HEAPF64[$12>>3] = -1.0E+10;
  return;
 }
 }
}
function _energydata($0) {
 $0 = $0|0;
 var $$0 = 0, $$01 = 0, $$idx = 0, $$idx$val = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ((($0)) + 92|0);
 $3 = ((($0)) + 48|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 56|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 1104|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)<(3);
 L1: do {
  if ($9) {
   $$0 = 201;
  } else {
   $10 = ((($0)) + 388|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (_match($11,8306)|0);
   $13 = ($12|0)==(0);
   if (!($13)) {
    $14 = ((($0)) + 396|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = (_getfloat($15,$1)|0);
    $17 = ($16|0)==(0);
    if ($17) {
     (_setError($2,2,202)|0);
     $$0 = 202;
     break;
    }
    $18 = +HEAPF64[$1>>3];
    $19 = $18 < 0.0;
    if ($19) {
     (_setError($2,2,213)|0);
     $$0 = 213;
     break;
    } else {
     $20 = ((($0)) + 4424|0);
     HEAPF64[$20>>3] = $18;
     $$0 = 0;
     break;
    }
   }
   $21 = (_match($11,8301)|0);
   $22 = ($21|0)==(0);
   do {
    if ($22) {
     $23 = (_match($11,14377)|0);
     $24 = ($23|0)==(0);
     if ($24) {
      (_setError($2,0,213)|0);
      $$0 = 213;
      break L1;
     }
     $25 = ($8|0)<(4);
     if ($25) {
      $$0 = 201;
      break L1;
     }
     $26 = ((($0)) + 392|0);
     $27 = HEAP32[$26>>2]|0;
     $$idx = ((($0)) + 84|0);
     $$idx$val = HEAP32[$$idx>>2]|0;
     $28 = (_findlink($$idx$val,$27)|0);
     $29 = ($28|0)==(0);
     if ($29) {
      (_setError($2,1,216)|0);
      $$0 = 216;
      break L1;
     }
     $30 = (((($4) + ($28<<7)|0)) + 104|0);
     $31 = HEAP32[$30>>2]|0;
     $32 = ($31|0)==(2);
     if ($32) {
      $33 = (_findpump($0,$28)|0);
      $$01 = $33;
      break;
     } else {
      (_setError($2,1,216)|0);
      $$0 = 216;
      break L1;
     }
    } else {
     $$01 = 0;
    }
   } while(0);
   $34 = (($8) + -2)|0;
   $35 = (((($0)) + 388|0) + ($34<<2)|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = (_match($36,8312)|0);
   $38 = ($37|0)==(0);
   if (!($38)) {
    $39 = (($8) + -1)|0;
    $40 = (((($0)) + 388|0) + ($39<<2)|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = (_getfloat($41,$1)|0);
    $43 = ($42|0)==(0);
    if ($43) {
     (_setError($2,$39,202)|0);
     $$0 = 202;
     break;
    }
    $44 = +HEAPF64[$1>>3];
    $45 = $44 < 0.0;
    if ($45) {
     (_setError($2,$39,217)|0);
     $$0 = 217;
     break;
    }
    $46 = ($$01|0)==(0);
    if ($46) {
     $47 = ((($0)) + 4416|0);
     HEAPF64[$47>>3] = $44;
     $$0 = 0;
     break;
    } else {
     $48 = (((($6) + ($$01<<7)|0)) + 72|0);
     HEAPF64[$48>>3] = $44;
     $$0 = 0;
     break;
    }
   }
   $49 = (_match($36,8202)|0);
   $50 = ($49|0)==(0);
   if (!($50)) {
    $51 = (($8) + -1)|0;
    $52 = (((($0)) + 388|0) + ($51<<2)|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = (_findpattern($0,$53)|0);
    $55 = ($54|0)<(0);
    if ($55) {
     (_setError($2,$51,205)|0);
     $$0 = 205;
     break;
    }
    $56 = ($$01|0)==(0);
    if ($56) {
     $57 = ((($0)) + 4492|0);
     HEAP32[$57>>2] = $54;
     $$0 = 0;
     break;
    } else {
     $58 = (((($6) + ($$01<<7)|0)) + 68|0);
     HEAP32[$58>>2] = $54;
     $$0 = 0;
     break;
    }
   }
   $59 = (_match($36,8318)|0);
   $60 = ($59|0)==(0);
   if ($60) {
    $$0 = 201;
   } else {
    $61 = ($$01|0)==(0);
    $62 = (($8) + -1)|0;
    $63 = (((($0)) + 388|0) + ($62<<2)|0);
    $64 = HEAP32[$63>>2]|0;
    if (!($61)) {
     $70 = (_findcurve($0,$64)|0);
     $71 = ($70|0)==(0);
     if ($71) {
      (_setError($2,$62,206)|0);
      $$0 = 206;
      break;
     } else {
      $72 = (((($6) + ($$01<<7)|0)) + 60|0);
      HEAP32[$72>>2] = $70;
      $73 = ((($0)) + 68|0);
      $74 = HEAP32[$73>>2]|0;
      $75 = (((($74) + (($70*56)|0)|0)) + 36|0);
      HEAP32[$75>>2] = 2;
      $$0 = 0;
      break;
     }
    }
    $65 = (_getfloat($64,$1)|0);
    $66 = ($65|0)==(0);
    if ($66) {
     (_setError($2,$62,202)|0);
     $$0 = 202;
     break;
    }
    $67 = +HEAPF64[$1>>3];
    $68 = !($67 <= 0.0);
    if ($68) {
     $69 = ((($0)) + 4400|0);
     HEAPF64[$69>>3] = $67;
     $$0 = 0;
     break;
    } else {
     (_setError($2,$62,217)|0);
     $$0 = 217;
     break;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _reportdata($0) {
 $0 = $0|0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$13 = 0, $$257 = 0, $$idx = 0, $$idx$val = 0, $$idx4 = 0, $$idx4$val = 0, $$in = 0.0, $$in$v = 0.0, $$pre = 0, $$pre10 = 0, $$pre11 = 0, $$pre12 = 0, $$pre13 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0.0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ((($0)) + 92|0);
 $3 = ((($0)) + 1104|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + -1)|0;
 $6 = ($4|0)<(2);
 if ($6) {
  $$0 = 201;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = ((($0)) + 388|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (_match($8,8323)|0);
 $10 = ($9|0)==(0);
 if (!($10)) {
  $11 = (((($0)) + 388|0) + ($5<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (_getfloat($12,$1)|0);
  $14 = ($13|0)==(0);
  if ($14) {
   (_setError($2,$5,202)|0);
   $$0 = 202;
   STACKTOP = sp;return ($$0|0);
  }
  $15 = +HEAPF64[$1>>3];
  $16 = $15 < 0.0;
  $17 = $15 > 255.0;
  $or$cond = $16 | $17;
  if ($or$cond) {
   (_setError($2,$5,213)|0);
   $$0 = 213;
   STACKTOP = sp;return ($$0|0);
  } else {
   $18 = (~~(($15)));
   $19 = ((($0)) + 1208|0);
   HEAP32[$19>>2] = $18;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $20 = (_match($8,14301)|0);
 $21 = ($20|0)==(0);
 if (!($21)) {
  $22 = (((($0)) + 388|0) + ($5<<2)|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (_match($23,8196)|0);
  $25 = ($24|0)==(0);
  if ($25) {
   $27 = $23;
  } else {
   $26 = ((($0)) + 1228|0);
   HEAP32[$26>>2] = 0;
   $$pre = HEAP32[$22>>2]|0;
   $27 = $$pre;
  }
  $28 = (_match($27,8192)|0);
  $29 = ($28|0)==(0);
  if ($29) {
   $31 = $27;
  } else {
   $30 = ((($0)) + 1228|0);
   HEAP32[$30>>2] = 1;
   $$pre10 = HEAP32[$22>>2]|0;
   $31 = $$pre10;
  }
  $32 = (_match($31,8328)|0);
  $33 = ($32|0)==(0);
  if ($33) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $34 = ((($0)) + 1228|0);
  HEAP32[$34>>2] = 2;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $35 = (_match($8,8333)|0);
 $36 = ($35|0)==(0);
 if (!($36)) {
  $37 = (((($0)) + 388|0) + ($5<<2)|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (_match($38,8196)|0);
  $40 = ($39|0)==(0);
  if ($40) {
   $42 = $38;
  } else {
   $41 = ((($0)) + 1220|0);
   HEAP32[$41>>2] = 0;
   $$pre11 = HEAP32[$37>>2]|0;
   $42 = $$pre11;
  }
  $43 = (_match($42,8192)|0);
  $44 = ($43|0)==(0);
  if ($44) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $45 = ((($0)) + 1220|0);
  HEAP32[$45>>2] = 1;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $46 = (_match($8,8338)|0);
 $47 = ($46|0)==(0);
 if (!($47)) {
  $48 = (((($0)) + 388|0) + ($5<<2)|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (_match($49,8196)|0);
  $51 = ($50|0)==(0);
  if ($51) {
   $53 = $49;
  } else {
   $52 = ((($0)) + 1224|0);
   HEAP32[$52>>2] = 0;
   $$pre12 = HEAP32[$48>>2]|0;
   $53 = $$pre12;
  }
  $54 = (_match($53,8192)|0);
  $55 = ($54|0)==(0);
  if ($55) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $56 = ((($0)) + 1224|0);
  HEAP32[$56>>2] = 1;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $57 = (_match($8,8343)|0);
 $58 = ($57|0)==(0);
 if (!($58)) {
  $59 = (((($0)) + 388|0) + ($5<<2)|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = (_match($60,8196)|0);
  $62 = ($61|0)==(0);
  if ($62) {
   $64 = $60;
  } else {
   $63 = ((($0)) + 1232|0);
   HEAP32[$63>>2] = 0;
   $$pre13 = HEAP32[$59>>2]|0;
   $64 = $$pre13;
  }
  $65 = (_match($64,8192)|0);
  $66 = ($65|0)==(0);
  if ($66) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $67 = ((($0)) + 1232|0);
  HEAP32[$67>>2] = 1;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $68 = (_match($8,14388)|0);
 $69 = ($68|0)==(0);
 if (!($69)) {
  $70 = (((($0)) + 388|0) + ($5<<2)|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = (_match($71,8348)|0);
  $73 = ($72|0)==(0);
  if (!($73)) {
   $74 = ((($0)) + 1236|0);
   HEAP32[$74>>2] = 0;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $75 = (_match($71,8353)|0);
  $76 = ($75|0)==(0);
  if (!($76)) {
   $77 = ((($0)) + 1236|0);
   HEAP32[$77>>2] = 1;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $78 = HEAP32[$0>>2]|0;
  $79 = ($78|0)==(0);
  if ($79) {
   (_setError($2,1,203)|0);
   $$0 = 203;
   STACKTOP = sp;return ($$0|0);
  }
  $$idx = ((($0)) + 80|0);
  $80 = ((($0)) + 44|0);
  $$02 = 1;
  while(1) {
   $81 = ($$02|0)<($4|0);
   if (!($81)) {
    label = 42;
    break;
   }
   $82 = (((($0)) + 388|0) + ($$02<<2)|0);
   $83 = HEAP32[$82>>2]|0;
   $$idx$val = HEAP32[$$idx>>2]|0;
   $84 = (_findnode($$idx$val,$83)|0);
   $85 = ($84|0)==(0);
   if ($85) {
    label = 40;
    break;
   }
   $86 = HEAP32[$80>>2]|0;
   $87 = (((($86) + (($84*96)|0)|0)) + 80|0);
   HEAP32[$87>>2] = 1;
   $88 = (($$02) + 1)|0;
   $$02 = $88;
  }
  if ((label|0) == 40) {
   (_setError($2,$$02,203)|0);
   $$0 = 203;
   STACKTOP = sp;return ($$0|0);
  }
  else if ((label|0) == 42) {
   $89 = ((($0)) + 1236|0);
   HEAP32[$89>>2] = 2;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $90 = (_match($8,14393)|0);
 $91 = ($90|0)==(0);
 if (!($91)) {
  $92 = (((($0)) + 388|0) + ($5<<2)|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = (_match($93,8348)|0);
  $95 = ($94|0)==(0);
  if (!($95)) {
   $96 = ((($0)) + 1240|0);
   HEAP32[$96>>2] = 0;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $97 = (_match($93,8353)|0);
  $98 = ($97|0)==(0);
  if (!($98)) {
   $99 = ((($0)) + 1240|0);
   HEAP32[$99>>2] = 1;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $100 = ((($0)) + 12|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = ($101|0)==(0);
  if ($102) {
   (_setError($2,1,204)|0);
   $$0 = 204;
   STACKTOP = sp;return ($$0|0);
  }
  $$idx4 = ((($0)) + 84|0);
  $103 = ((($0)) + 48|0);
  $$13 = 1;
  while(1) {
   $104 = ($$13|0)<($4|0);
   if (!($104)) {
    label = 55;
    break;
   }
   $105 = (((($0)) + 388|0) + ($$13<<2)|0);
   $106 = HEAP32[$105>>2]|0;
   $$idx4$val = HEAP32[$$idx4>>2]|0;
   $107 = (_findlink($$idx4$val,$106)|0);
   $108 = ($107|0)==(0);
   if ($108) {
    label = 53;
    break;
   }
   $109 = HEAP32[$103>>2]|0;
   $110 = (((($109) + ($107<<7)|0)) + 116|0);
   HEAP32[$110>>2] = 1;
   $111 = (($$13) + 1)|0;
   $$13 = $111;
  }
  if ((label|0) == 53) {
   (_setError($2,$$13,204)|0);
   $$0 = 204;
   STACKTOP = sp;return ($$0|0);
  }
  else if ((label|0) == 55) {
   $112 = ((($0)) + 1240|0);
   HEAP32[$112>>2] = 2;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $113 = (_strcomp($8,8357)|0);
 $114 = ($113|0)==(0);
 do {
  if ($114) {
   $115 = (_findmatch($8,432)|0);
   $116 = ($115|0)>(-1);
   if ($116) {
    $117 = ($115|0)>(14);
    if (!($117)) {
     $$257 = $115;
     break;
    }
    (_setError($2,0,213)|0);
    $$0 = 213;
    STACKTOP = sp;return ($$0|0);
   }
   $145 = (_match($8,8371)|0);
   $146 = ($145|0)==(0);
   if ($146) {
    $$0 = 201;
    STACKTOP = sp;return ($$0|0);
   }
   $147 = ((($0)) + 1529|0);
   $148 = ((($0)) + 392|0);
   $149 = HEAP32[$148>>2]|0;
   (_strncpy($147,$149,259)|0);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $$257 = 9;
  }
 } while(0);
 $118 = ((($0)) + 392|0);
 $119 = HEAP32[$118>>2]|0;
 $120 = (_match($119,8192)|0);
 $121 = ($120|0)==(0);
 if (!($121)) {
  $122 = (((((($0)) + 1816|0) + (($$257*88)|0)|0)) + 64|0);
  HEAP32[$122>>2] = 1;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $123 = (_match($119,8196)|0);
 $124 = ($123|0)==(0);
 if (!($124)) {
  $125 = (((((($0)) + 1816|0) + (($$257*88)|0)|0)) + 64|0);
  HEAP32[$125>>2] = 0;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $126 = ($4|0)<(3);
 if ($126) {
  $$0 = 201;
  STACKTOP = sp;return ($$0|0);
 }
 $127 = (_match($119,14427)|0);
 $128 = ($127|0)==(0);
 if ($128) {
  $129 = (_match($119,14433)|0);
  $130 = ($129|0)==(0);
  if ($130) {
   $131 = (_match($119,8366)|0);
   $132 = ($131|0)==(0);
   if ($132) {
    (_setError($2,1,213)|0);
    $$0 = 213;
    STACKTOP = sp;return ($$0|0);
   } else {
    $$1 = 2;
   }
  } else {
   $$1 = 1;
  }
 } else {
  $$1 = 0;
 }
 $133 = ((($0)) + 396|0);
 $134 = HEAP32[$133>>2]|0;
 $135 = (_getfloat($134,$1)|0);
 $136 = ($135|0)==(0);
 if ($136) {
  (_setError($2,2,202)|0);
  $$0 = 202;
  STACKTOP = sp;return ($$0|0);
 }
 $137 = ($$1|0)==(2);
 if ($137) {
  $138 = (((((($0)) + 1816|0) + (($$257*88)|0)|0)) + 64|0);
  HEAP32[$138>>2] = 1;
  $139 = +HEAPF64[$1>>3];
  $140 = !($139 >= 0.0);
  $$in$v = $140 ? -0.5 : 0.5;
  $$in = $139 + $$in$v;
  $141 = (~~(($$in)));
  $142 = (((((($0)) + 1816|0) + (($$257*88)|0)|0)) + 68|0);
  HEAP32[$142>>2] = $141;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $143 = +HEAPF64[$1>>3];
  $144 = ((((((($0)) + 1816|0) + (($$257*88)|0)|0)) + 72|0) + ($$1<<3)|0);
  HEAPF64[$144>>3] = $143;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _timedata($0) {
 $0 = $0|0;
 var $$0 = 0, $$pre = 0.0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0.0;
 var $44 = 0.0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ((($0)) + 92|0);
 $3 = ((($0)) + 1104|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + -1)|0;
 $6 = ($4|0)<(2);
 do {
  if ($6) {
   $$0 = 201;
  } else {
   $7 = ((($0)) + 388|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = (_match($8,8376)|0);
   $10 = ($9|0)==(0);
   $11 = (((($0)) + 388|0) + ($5<<2)|0);
   $12 = HEAP32[$11>>2]|0;
   if (!($10)) {
    $13 = (_match($12,8348)|0);
    $14 = ($13|0)==(0);
    if (!($14)) {
     $15 = ((($0)) + 1216|0);
     HEAP32[$15>>2] = 0;
     $$0 = 0;
     break;
    }
    $16 = (_match($12,8196)|0);
    $17 = ($16|0)==(0);
    if (!($17)) {
     $18 = ((($0)) + 1216|0);
     HEAP32[$18>>2] = 0;
     $$0 = 0;
     break;
    }
    $19 = (_match($12,8381)|0);
    $20 = ($19|0)==(0);
    if (!($20)) {
     $21 = ((($0)) + 1216|0);
     HEAP32[$21>>2] = 1;
     $$0 = 0;
     break;
    }
    $22 = (_match($12,8389)|0);
    $23 = ($22|0)==(0);
    if (!($23)) {
     $24 = ((($0)) + 1216|0);
     HEAP32[$24>>2] = 2;
     $$0 = 0;
     break;
    }
    $25 = (_match($12,8397)|0);
    $26 = ($25|0)==(0);
    if (!($26)) {
     $27 = ((($0)) + 1216|0);
     HEAP32[$27>>2] = 3;
     $$0 = 0;
     break;
    }
    $28 = (_match($12,8405)|0);
    $29 = ($28|0)==(0);
    if ($29) {
     (_setError($2,$5,213)|0);
     $$0 = 213;
     break;
    } else {
     $30 = ((($0)) + 1216|0);
     HEAP32[$30>>2] = 4;
     $$0 = 0;
     break;
    }
   }
   $31 = (_getfloat($12,$1)|0);
   $32 = ($31|0)==(0);
   if ($32) {
    $33 = HEAP32[$11>>2]|0;
    $34 = (+_hour($33,21208));
    HEAPF64[$1>>3] = $34;
    $35 = $34 < 0.0;
    if ($35) {
     $36 = (($4) + -2)|0;
     $37 = (((($0)) + 388|0) + ($36<<2)|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = HEAP32[$11>>2]|0;
     $40 = (+_hour($38,$39));
     HEAPF64[$1>>3] = $40;
     $41 = $40 < 0.0;
     if ($41) {
      (_setError($2,$36,213)|0);
      $$0 = 213;
      break;
     } else {
      $43 = $40;
     }
    } else {
     $43 = $34;
    }
   } else {
    $$pre = +HEAPF64[$1>>3];
    $43 = $$pre;
   }
   $42 = $43 * 3600.0;
   $44 = $42 + 0.5;
   $45 = (~~(($44)));
   $46 = HEAP32[$7>>2]|0;
   $47 = (_match($46,8411)|0);
   $48 = ($47|0)==(0);
   if (!($48)) {
    $49 = ((($0)) + 1192|0);
    HEAP32[$49>>2] = $45;
    $$0 = 0;
    break;
   }
   $50 = (_match($46,8416)|0);
   $51 = ($50|0)==(0);
   if (!($51)) {
    $52 = ((($0)) + 1148|0);
    HEAP32[$52>>2] = $45;
    $$0 = 0;
    break;
   }
   $53 = (_match($46,8421)|0);
   $54 = ($53|0)==(0);
   if (!($54)) {
    $55 = ((($0)) + 1180|0);
    HEAP32[$55>>2] = $45;
    $$0 = 0;
    break;
   }
   $56 = (_match($46,14233)|0);
   $57 = ($56|0)==(0);
   if (!($57)) {
    $58 = ((($0)) + 1188|0);
    HEAP32[$58>>2] = $45;
    $$0 = 0;
    break;
   }
   $59 = (_match($46,8426)|0);
   $60 = ($59|0)==(0);
   if ($60) {
    $61 = (_match($46,8202)|0);
    $62 = ($61|0)==(0);
    if (!($62)) {
     $63 = ((($0)) + 392|0);
     $64 = HEAP32[$63>>2]|0;
     $65 = (_match($64,14322)|0);
     $66 = ($65|0)==(0);
     if (!($66)) {
      $67 = ((($0)) + 1152|0);
      HEAP32[$67>>2] = $45;
      $$0 = 0;
      break;
     }
     $68 = (_match($64,8431)|0);
     $69 = ($68|0)==(0);
     if ($69) {
      (_setError($2,1,213)|0);
      $$0 = 213;
      break;
     } else {
      $70 = ((($0)) + 1156|0);
      HEAP32[$70>>2] = $45;
      $$0 = 0;
      break;
     }
    }
    $71 = (_match($46,8436)|0);
    $72 = ($71|0)==(0);
    if ($72) {
     $81 = (_match($46,8431)|0);
     $82 = ($81|0)==(0);
     if ($82) {
      (_setError($2,0,213)|0);
      $$0 = 213;
      break;
     } else {
      $83 = (($45|0) % 86400)&-1;
      $84 = ((($0)) + 1144|0);
      HEAP32[$84>>2] = $83;
      $$0 = 0;
      break;
     }
    }
    $73 = ((($0)) + 392|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = (_match($74,14322)|0);
    $76 = ($75|0)==(0);
    if (!($76)) {
     $77 = ((($0)) + 1160|0);
     HEAP32[$77>>2] = $45;
     $$0 = 0;
     break;
    }
    $78 = (_match($74,8431)|0);
    $79 = ($78|0)==(0);
    if ($79) {
     (_setError($2,1,213)|0);
     $$0 = 213;
     break;
    } else {
     $80 = ((($0)) + 1164|0);
     HEAP32[$80>>2] = $45;
     $$0 = 0;
     break;
    }
   } else {
    $$0 = 0;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _optiondata($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 1104|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + -1)|0;
 $4 = (_optionchoice($0,$3)|0);
 $5 = ($4|0)>(-1);
 if ($5) {
  $$0 = $4;
  return ($$0|0);
 }
 $6 = (_optionvalue($0,$3)|0);
 $$0 = $6;
 return ($$0|0);
}
function _optionchoice($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$idx = 0, $$idx$val = 0, $$pr = 0, $$pre = 0, $$pre$phi2Z2D = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4600|0);
 $3 = ((($0)) + 92|0);
 $4 = ($1|0)<(0);
 if ($4) {
  $$0 = 201;
  return ($$0|0);
 }
 $5 = ((($0)) + 388|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_match($6,8553)|0);
 $8 = ($7|0)==(0);
 if (!($8)) {
  $9 = ($1|0)<(1);
  if ($9) {
   $$0 = 0;
   return ($$0|0);
  }
  $10 = ((($0)) + 392|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (_match($11,8558)|0);
  $13 = ($12|0)==(0);
  if (!($13)) {
   $14 = ((($0)) + 1120|0);
   HEAP32[$14>>2] = 0;
   $$0 = 0;
   return ($$0|0);
  }
  $15 = (_match($11,8562)|0);
  $16 = ($15|0)==(0);
  if (!($16)) {
   $17 = ((($0)) + 1120|0);
   HEAP32[$17>>2] = 1;
   $$0 = 0;
   return ($$0|0);
  }
  $18 = (_match($11,8566)|0);
  $19 = ($18|0)==(0);
  if (!($19)) {
   $20 = ((($0)) + 1120|0);
   HEAP32[$20>>2] = 4;
   $$0 = 0;
   return ($$0|0);
  }
  $21 = (_match($11,8570)|0);
  $22 = ($21|0)==(0);
  if (!($22)) {
   $23 = ((($0)) + 1120|0);
   HEAP32[$23>>2] = 2;
   $$0 = 0;
   return ($$0|0);
  }
  $24 = (_match($11,8574)|0);
  $25 = ($24|0)==(0);
  if (!($25)) {
   $26 = ((($0)) + 1120|0);
   HEAP32[$26>>2] = 3;
   $$0 = 0;
   return ($$0|0);
  }
  $27 = (_match($11,8579)|0);
  $28 = ($27|0)==(0);
  if (!($28)) {
   $29 = ((($0)) + 1120|0);
   HEAP32[$29>>2] = 5;
   $$0 = 0;
   return ($$0|0);
  }
  $30 = (_match($11,8583)|0);
  $31 = ($30|0)==(0);
  if (!($31)) {
   $32 = ((($0)) + 1120|0);
   HEAP32[$32>>2] = 6;
   $$0 = 0;
   return ($$0|0);
  }
  $33 = (_match($11,8587)|0);
  $34 = ($33|0)==(0);
  if (!($34)) {
   $35 = ((($0)) + 1120|0);
   HEAP32[$35>>2] = 8;
   $$0 = 0;
   return ($$0|0);
  }
  $36 = (_match($11,8591)|0);
  $37 = ($36|0)==(0);
  if (!($37)) {
   $38 = ((($0)) + 1120|0);
   HEAP32[$38>>2] = 9;
   $$0 = 0;
   return ($$0|0);
  }
  $39 = (_match($11,8595)|0);
  $40 = ($39|0)==(0);
  if (!($40)) {
   $41 = ((($0)) + 1120|0);
   HEAP32[$41>>2] = 7;
   $$0 = 0;
   return ($$0|0);
  }
  $42 = (_match($11,8599)|0);
  $43 = ($42|0)==(0);
  if ($43) {
   (_setError($3,1,213)|0);
   $$0 = 213;
   return ($$0|0);
  } else {
   $44 = ((($0)) + 1120|0);
   HEAP32[$44>>2] = 5;
   $$0 = 0;
   return ($$0|0);
  }
 }
 $45 = (_match($6,14287)|0);
 $46 = ($45|0)==(0);
 if (!($46)) {
  $47 = ($1|0)<(1);
  if ($47) {
   $$0 = 0;
   return ($$0|0);
  }
  $48 = ((($0)) + 392|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (_match($49,8602)|0);
  $51 = ($50|0)==(0);
  if (!($51)) {
   $$0 = -1;
   return ($$0|0);
  }
  $52 = (_match($49,8606)|0);
  $53 = ($52|0)==(0);
  if (!($53)) {
   $54 = ((($0)) + 1124|0);
   HEAP32[$54>>2] = 0;
   $$0 = 0;
   return ($$0|0);
  }
  $55 = (_match($49,8610)|0);
  $56 = ($55|0)==(0);
  if (!($56)) {
   $57 = ((($0)) + 1124|0);
   HEAP32[$57>>2] = 1;
   $$0 = 0;
   return ($$0|0);
  }
  $58 = (_match($49,8614)|0);
  $59 = ($58|0)==(0);
  if ($59) {
   (_setError($3,1,213)|0);
   $$0 = 213;
   return ($$0|0);
  } else {
   $60 = ((($0)) + 1124|0);
   HEAP32[$60>>2] = 2;
   $$0 = 0;
   return ($$0|0);
  }
 }
 $61 = (_match($6,8621)|0);
 $62 = ($61|0)==(0);
 if (!($62)) {
  $63 = ($1|0)<(1);
  if ($63) {
   $$0 = 0;
   return ($$0|0);
  }
  $64 = ((($0)) + 392|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = (_match($65,8627)|0);
  $67 = ($66|0)==(0);
  if (!($67)) {
   $68 = ((($0)) + 4500|0);
   HEAP32[$68>>2] = 0;
   $$0 = 0;
   return ($$0|0);
  }
  $69 = (_match($65,8631)|0);
  $70 = ($69|0)==(0);
  if (!($70)) {
   $71 = ((($0)) + 4500|0);
   HEAP32[$71>>2] = 1;
   $$0 = 0;
   return ($$0|0);
  }
  $72 = (_match($65,8635)|0);
  $73 = ($72|0)==(0);
  if ($73) {
   (_setError($3,1,213)|0);
   $$0 = 213;
   return ($$0|0);
  } else {
   $74 = ((($0)) + 4500|0);
   HEAP32[$74>>2] = 2;
   $$0 = 0;
   return ($$0|0);
  }
 }
 $75 = (_match($6,8416)|0);
 $76 = ($75|0)==(0);
 if (!($76)) {
  $77 = ($1|0)<(2);
  if ($77) {
   $$0 = 0;
   return ($$0|0);
  }
  $78 = ((($0)) + 392|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = (_match($79,8639)|0);
  $81 = ($80|0)==(0);
  do {
   if ($81) {
    $83 = (_match($79,8643)|0);
    $84 = ($83|0)==(0);
    if (!($84)) {
     $85 = ((($0)) + 4188|0);
     HEAP32[$85>>2] = 1;
     break;
    }
    (_setError($3,1,213)|0);
    $$0 = 213;
    return ($$0|0);
   } else {
    $82 = ((($0)) + 4188|0);
    HEAP32[$82>>2] = 0;
   }
  } while(0);
  $86 = ((($0)) + 3664|0);
  $87 = ((($0)) + 396|0);
  $88 = HEAP32[$87>>2]|0;
  (_strncpy($86,$88,259)|0);
  $$0 = 0;
  return ($$0|0);
 }
 $89 = (_match($6,8421)|0);
 $90 = ($89|0)==(0);
 if (!($90)) {
  $91 = ($1|0)<(1);
  if ($91) {
   $$0 = 0;
   return ($$0|0);
  }
  $92 = ((($0)) + 392|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = (_match($93,8348)|0);
  $95 = ($94|0)==(0);
  if (!($95)) {
   HEAP32[$2>>2] = 0;
   $$0 = 0;
   return ($$0|0);
  }
  $96 = (_match($93,8648)|0);
  $97 = ($96|0)==(0);
  if (!($97)) {
   HEAP32[$2>>2] = 1;
   $$0 = 0;
   return ($$0|0);
  }
  $98 = (_match($93,8653)|0);
  $99 = ($98|0)==(0);
  if ($99) {
   $100 = (_match($93,8657)|0);
   $101 = ($100|0)==(0);
   if ($101) {
    HEAP32[$2>>2] = 1;
    $102 = ((($0)) + 4624|0);
    (_strncpy($102,$93,31)|0);
    $103 = ($1|0)>(1);
    if ($103) {
     $104 = ((($0)) + 4656|0);
     $105 = ((($0)) + 396|0);
     $106 = HEAP32[$105>>2]|0;
     (_strncpy($104,$106,31)|0);
    }
    $$pr = HEAP32[$2>>2]|0;
    $107 = ($$pr|0)==(3);
    if ($107) {
     $$pre$phi2Z2D = $2;
     label = 67;
    } else {
     $121 = $$pr;
    }
   } else {
    HEAP32[$2>>2] = 3;
    $$pre$phi2Z2D = $2;
    label = 67;
   }
   do {
    if ((label|0) == 67) {
     $108 = HEAP32[$5>>2]|0;
     (_strcpy($108,21208)|0);
     $109 = ($1|0)<(2);
     if ($109) {
      $$0 = 201;
      return ($$0|0);
     }
     $110 = HEAP32[$5>>2]|0;
     $111 = ((($0)) + 396|0);
     $112 = HEAP32[$111>>2]|0;
     (_strcpy($110,$112)|0);
     $113 = HEAP32[$111>>2]|0;
     $$idx = ((($0)) + 80|0);
     $$idx$val = HEAP32[$$idx>>2]|0;
     $114 = (_findnode($$idx$val,$113)|0);
     $115 = ((($0)) + 4616|0);
     HEAP32[$115>>2] = $114;
     $116 = ($114|0)==(0);
     if (!($116)) {
      $117 = ((($0)) + 4624|0);
      (_strncpy($117,8663,31)|0);
      $118 = ((($0)) + 4656|0);
      $119 = HEAP32[$111>>2]|0;
      (_strncpy($118,$119,31)|0);
      $$pre = HEAP32[$$pre$phi2Z2D>>2]|0;
      $121 = $$pre;
      break;
     }
     (_setError($3,2,212)|0);
     $$0 = 212;
     return ($$0|0);
    }
   } while(0);
   $120 = ($121|0)==(2);
   if (!($120)) {
    $$0 = 0;
    return ($$0|0);
   }
  } else {
   HEAP32[$2>>2] = 2;
  }
  $122 = ((($0)) + 4624|0);
  (_strncpy($122,8653,31)|0);
  $123 = ((($0)) + 4656|0);
  (_strncpy($123,8670,31)|0);
  $$0 = 0;
  return ($$0|0);
 }
 $124 = (_match($6,8674)|0);
 $125 = ($124|0)==(0);
 if (!($125)) {
  $126 = ($1|0)<(1);
  if ($126) {
   $$0 = 0;
   return ($$0|0);
  }
  $127 = ((($0)) + 5576|0);
  $128 = ((($0)) + 392|0);
  $129 = HEAP32[$128>>2]|0;
  (_strncpy($127,$129,259)|0);
  $$0 = 0;
  return ($$0|0);
 }
 $130 = (_match($6,8678)|0);
 $131 = ($130|0)==(0);
 if (!($131)) {
  $$0 = 0;
  return ($$0|0);
 }
 $132 = (_match($6,8683)|0);
 $133 = ($132|0)==(0);
 if (!($133)) {
  $134 = ($1|0)<(1);
  if ($134) {
   $$0 = 0;
   return ($$0|0);
  }
  $135 = ((($0)) + 392|0);
  $136 = HEAP32[$135>>2]|0;
  $137 = (_match($136,8688)|0);
  $138 = ($137|0)==(0);
  if (!($138)) {
   $139 = ((($0)) + 4512|0);
   HEAP32[$139>>2] = -1;
   $$0 = 0;
   return ($$0|0);
  }
  $140 = (_match($136,8693)|0);
  $141 = ($140|0)==(0);
  if ($141) {
   (_setError($3,1,213)|0);
   $$0 = 213;
   return ($$0|0);
  }
  $142 = ($1|0)>(1);
  if ($142) {
   $143 = ((($0)) + 396|0);
   $144 = HEAP32[$143>>2]|0;
   $145 = (_atoi($144)|0);
   $146 = ((($0)) + 4512|0);
   HEAP32[$146>>2] = $145;
   $$0 = 0;
   return ($$0|0);
  } else {
   $147 = ((($0)) + 4512|0);
   HEAP32[$147>>2] = 0;
   $$0 = 0;
   return ($$0|0);
  }
 }
 $148 = (_match($6,8202)|0);
 $149 = ($148|0)==(0);
 if (!($149)) {
  $150 = ($1|0)<(1);
  if ($150) {
   $$0 = 0;
   return ($$0|0);
  }
  $151 = ((($0)) + 96|0);
  $152 = ((($0)) + 392|0);
  $153 = HEAP32[$152>>2]|0;
  (_strncpy($151,$153,31)|0);
  $$0 = 0;
  return ($$0|0);
 }
 $154 = (_match($6,14263)|0);
 $155 = ($154|0)==(0);
 if ($155) {
  $$0 = -1;
  return ($$0|0);
 }
 $156 = ($1|0)<(2);
 if ($156) {
  $$0 = 0;
  return ($$0|0);
 }
 $157 = ((($0)) + 392|0);
 $158 = HEAP32[$157>>2]|0;
 $159 = (_match($158,8698)|0);
 $160 = ($159|0)==(0);
 if ($160) {
  $$0 = -1;
  return ($$0|0);
 }
 $161 = ((($0)) + 396|0);
 $162 = HEAP32[$161>>2]|0;
 $163 = (_findmatch($162,3464)|0);
 $164 = ($163|0)<(0);
 if ($164) {
  (_setError($3,2,213)|0);
  $$0 = 213;
  return ($$0|0);
 } else {
  $165 = ((($0)) + 4496|0);
  HEAP32[$165>>2] = $163;
  $$0 = 0;
  return ($$0|0);
 }
 return (0)|0;
}
function _optionvalue($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$01 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0.0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = ((($0)) + 92|0);
 $4 = ((($0)) + 388|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_match($5,8441)|0);
 $7 = ($6|0)==(0);
 do {
  if ($7) {
   $8 = (_match($5,8446)|0);
   $9 = ($8|0)==(0);
   if ($9) {
    $10 = (_match($5,8451)|0);
    $11 = ($10|0)==(0);
    if ($11) {
     $12 = (_match($5,14263)|0);
     $13 = ($12|0)==(0);
     if ($13) {
      $14 = (_match($5,8426)|0);
      $15 = ($14|0)==(0);
      if ($15) {
       $16 = (_match($5,8456)|0);
       $17 = ($16|0)==(0);
       if ($17) {
        $18 = (_match($5,14287)|0);
        $19 = ($18|0)==(0);
        if ($19) {
         $20 = (_match($5,8366)|0);
         $21 = ($20|0)==(0);
         if ($21) {
          $$01 = 1;
         } else {
          label = 9;
         }
        } else {
         label = 9;
        }
       } else {
        label = 9;
       }
      } else {
       label = 9;
      }
     } else {
      label = 9;
     }
    } else {
     label = 9;
    }
   } else {
    label = 9;
   }
   if ((label|0) == 9) {
    $$01 = 2;
   }
   $22 = ($$01|0)>($1|0);
   if ($22) {
    $$0 = 0;
   } else {
    $23 = (((($0)) + 388|0) + ($$01<<2)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = (_getfloat($24,$2)|0);
    $26 = ($25|0)==(0);
    if ($26) {
     (_setError($3,$$01,202)|0);
     $$0 = 202;
     break;
    }
    $27 = (_match($5,8460)|0);
    $28 = ($27|0)==(0);
    if (!($28)) {
     $29 = +HEAPF64[$2>>3];
     $30 = $29 < 0.0;
     if ($30) {
      (_setError($3,$$01,213)|0);
      $$0 = 213;
      break;
     } else {
      $31 = ((($0)) + 4688|0);
      HEAPF64[$31>>3] = $29;
      $$0 = 0;
      break;
     }
    }
    $32 = (_match($5,8466)|0);
    $33 = ($32|0)==(0);
    if (!($33)) {
     $34 = +HEAPF64[$2>>3];
     $35 = $34 < 0.0;
     if ($35) {
      (_setError($3,$$01,213)|0);
      $$0 = 213;
      break;
     } else {
      $36 = ((($0)) + 4696|0);
      HEAPF64[$36>>3] = $34;
      $$0 = 0;
      break;
     }
    }
    $37 = (_match($5,8471)|0);
    $38 = ($37|0)==(0);
    if (!($38)) {
     $39 = +HEAPF64[$2>>3];
     $40 = ((($0)) + 4376|0);
     HEAPF64[$40>>3] = $39;
     $$0 = 0;
     break;
    }
    $41 = (_match($5,8481)|0);
    $42 = ($41|0)==(0);
    if (!($42)) {
     $43 = +HEAPF64[$2>>3];
     $44 = $43 < 0.0;
     if ($44) {
      (_setError($3,$$01,213)|0);
      $$0 = 213;
      break;
     } else {
      $45 = ((($0)) + 4360|0);
      HEAPF64[$45>>3] = $43;
      $$0 = 0;
      break;
     }
    }
    $46 = (_match($5,8492)|0);
    $47 = ($46|0)==(0);
    if (!($47)) {
     $48 = +HEAPF64[$2>>3];
     $49 = $48 < 0.0;
     if ($49) {
      (_setError($3,$$01,213)|0);
      $$0 = 213;
      break;
     } else {
      $50 = ((($0)) + 4368|0);
      HEAPF64[$50>>3] = $48;
      $$0 = 0;
      break;
     }
    }
    $51 = (_match($5,8426)|0);
    $52 = ($51|0)==(0);
    if (!($52)) {
     $53 = +HEAPF64[$2>>3];
     $54 = $53 < 0.0;
     if ($54) {
      (_setError($3,$$01,213)|0);
      $$0 = 213;
      break;
     }
     $55 = ((($0)) + 4336|0);
     $56 = +HEAPF64[$55>>3];
     $57 = $56 == 0.10000000000000001;
     if ($57) {
      $58 = $53 + 0.10000000000000001;
      HEAPF64[$55>>3] = $58;
     } else {
      $59 = $56 - $53;
      $60 = $59 < 0.10000000000000001;
      if ($60) {
       (_setError($3,$$01,208)|0);
       $$0 = 208;
       break;
      }
     }
     $61 = ((($0)) + 4328|0);
     HEAPF64[$61>>3] = $53;
     $$0 = 0;
     break;
    }
    $62 = (_match($5,8456)|0);
    $63 = ($62|0)==(0);
    if (!($63)) {
     $64 = +HEAPF64[$2>>3];
     $65 = $64 < 0.0;
     if ($65) {
      (_setError($3,$$01,213)|0);
      $$0 = 213;
      break;
     }
     $66 = ((($0)) + 4328|0);
     $67 = +HEAPF64[$66>>3];
     $68 = $64 - $67;
     $69 = $68 < 0.10000000000000001;
     if ($69) {
      (_setError($3,$$01,208)|0);
      $$0 = 208;
      break;
     } else {
      $70 = ((($0)) + 4336|0);
      HEAPF64[$70>>3] = $64;
      $$0 = 0;
      break;
     }
    }
    $71 = (_match($5,14287)|0);
    $72 = ($71|0)==(0);
    $73 = +HEAPF64[$2>>3];
    if (!($72)) {
     $74 = $73 < 0.0;
     if ($74) {
      (_setError($3,$$01,213)|0);
      $$0 = 213;
      break;
     } else {
      $75 = ((($0)) + 4320|0);
      HEAPF64[$75>>3] = $73;
      $$0 = 0;
      break;
     }
    }
    $76 = !($73 <= 0.0);
    if (!($76)) {
     (_setError($3,$$01,213)|0);
     $$0 = 213;
     break;
    }
    $77 = (_match($5,8502)|0);
    $78 = ($77|0)==(0);
    if (!($78)) {
     $79 = ((($0)) + 4384|0);
     HEAPF64[$79>>3] = $73;
     $$0 = 0;
     break;
    }
    $80 = (_match($5,8446)|0);
    $81 = ($80|0)==(0);
    if (!($81)) {
     $82 = ((($0)) + 4392|0);
     HEAPF64[$82>>3] = $73;
     $$0 = 0;
     break;
    }
    $83 = (_match($5,8507)|0);
    $84 = ($83|0)==(0);
    if (!($84)) {
     $85 = (~~(($73)));
     $86 = ((($0)) + 4508|0);
     HEAP32[$86>>2] = $85;
     $$0 = 0;
     break;
    }
    $87 = (_match($5,8513)|0);
    $88 = ($87|0)==(0);
    if (!($88)) {
     $89 = !($73 >= 1.0000000000000001E-5);
     if ($89) {
      HEAPF64[$2>>3] = 1.0000000000000001E-5;
      $118 = 1.0000000000000001E-5;
      label = 61;
     } else {
      $90 = !($73 <= 0.10000000000000001);
      if ($90) {
       $91 = 0.10000000000000001;
      } else {
       $118 = $73;
       label = 61;
      }
     }
     if ((label|0) == 61) {
      $91 = $118;
     }
     HEAPF64[$2>>3] = $91;
     $92 = ((($0)) + 4352|0);
     HEAPF64[$92>>3] = $91;
     $$0 = 0;
     break;
    }
    $93 = (_match($5,8518)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $95 = ((($0)) + 4280|0);
     HEAPF64[$95>>3] = $73;
     $$0 = 0;
     break;
    }
    $96 = (_match($5,8523)|0);
    $97 = ($96|0)==(0);
    if (!($97)) {
     $98 = ((($0)) + 4288|0);
     HEAPF64[$98>>3] = $73;
     $$0 = 0;
     break;
    }
    $99 = (_match($5,8528)|0);
    $100 = ($99|0)==(0);
    if (!($100)) {
     $101 = !($73 >= 1.0);
     if (!($101)) {
      $$0 = 213;
      break;
     }
     $102 = ((($0)) + 4296|0);
     HEAPF64[$102>>3] = $73;
     $$0 = 0;
     break;
    }
    $103 = (_match($5,8534)|0);
    $104 = ($103|0)==(0);
    if (!($104)) {
     $105 = (~~(($73)));
     $106 = ((($0)) + 4516|0);
     HEAP32[$106>>2] = $105;
     $$0 = 0;
     break;
    }
    $107 = (_match($5,8544)|0);
    $108 = ($107|0)==(0);
    if (!($108)) {
     $109 = (~~(($73)));
     $110 = ((($0)) + 4520|0);
     HEAP32[$110>>2] = $109;
     $$0 = 0;
     break;
    }
    $111 = (_match($5,8451)|0);
    $112 = ($111|0)==(0);
    if (!($112)) {
     $113 = 1.0 / $73;
     $114 = ((($0)) + 4312|0);
     HEAPF64[$114>>3] = $113;
     $$0 = 0;
     break;
    }
    $115 = (_match($5,14263)|0);
    $116 = ($115|0)==(0);
    if ($116) {
     $$0 = 201;
     break;
    }
    $117 = ((($0)) + 4344|0);
    HEAPF64[$117>>3] = $73;
    $$0 = 0;
   }
  } else {
   $$0 = 0;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _f_save($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 4|0);
 $4 = (_fwrite($3,4,$1,$2)|0);
 return ($4|0);
}
function _f_read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 4|0);
 $4 = (_fread($3,$1,$2)|0);
 return ($4|0);
}
function _savenetdata($0) {
 $0 = $0|0;
 var $$ = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$2 = 0, $$3 = 0, $$4 = 0, $$5 = 0, $$6 = 0, $$7 = 0, $$8 = 0, $$9 = 0, $$pre = 0, $$sink = 0.0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0.0, $139 = 0.0, $14 = 0;
 var $140 = 0.0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4216|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = ((($0)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3|0)<($5|0);
 $$ = $6 ? $5 : $3;
 $7 = ($$|0)>(13);
 $8 = (($$) + 1)|0;
 $9 = $7 ? $8 : 15;
 $10 = (_calloc($9,4)|0);
 $11 = (_calloc($9,4)|0);
 $12 = ($10|0)==(0|0);
 $13 = $12 ? 101 : 0;
 if ($12) {
  $$1 = $13;
  _free($10);
  _free($11);
  return ($$1|0);
 }
 $14 = ($11|0)==(0|0);
 if ($14) {
  $$1 = 101;
  _free($10);
  _free($11);
  return ($$1|0);
 }
 HEAP32[$10>>2] = 516114521;
 $15 = ((($10)) + 4|0);
 HEAP32[$15>>2] = 20012;
 $16 = HEAP32[$0>>2]|0;
 $17 = ((($10)) + 8|0);
 HEAP32[$17>>2] = $16;
 $18 = ((($0)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($10)) + 12|0);
 HEAP32[$20>>2] = $19;
 $21 = HEAP32[$4>>2]|0;
 $22 = ((($10)) + 16|0);
 HEAP32[$22>>2] = $21;
 $23 = ((($0)) + 20|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($10)) + 20|0);
 HEAP32[$25>>2] = $24;
 $26 = ((($0)) + 24|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ((($10)) + 24|0);
 HEAP32[$28>>2] = $27;
 $29 = ((($0)) + 4600|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ((($10)) + 28|0);
 HEAP32[$31>>2] = $30;
 $32 = ((($0)) + 4616|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ((($10)) + 32|0);
 HEAP32[$34>>2] = $33;
 $35 = ((($0)) + 1120|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ((($10)) + 36|0);
 HEAP32[$37>>2] = $36;
 $38 = ((($0)) + 1124|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ((($10)) + 40|0);
 HEAP32[$40>>2] = $39;
 $41 = ((($0)) + 1216|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ((($10)) + 44|0);
 HEAP32[$43>>2] = $42;
 $44 = ((($0)) + 1164|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = ((($10)) + 48|0);
 HEAP32[$46>>2] = $45;
 $47 = ((($0)) + 1160|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = ((($10)) + 52|0);
 HEAP32[$49>>2] = $48;
 $50 = ((($0)) + 1192|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = ((($10)) + 56|0);
 HEAP32[$52>>2] = $51;
 (_fwrite($10,4,15,$2)|0);
 $53 = ((($0)) + 5336|0);
 (_fwrite($53,1,80,$2)|0);
 $54 = ((($0)) + 5416|0);
 (_fwrite($54,1,80,$2)|0);
 $55 = ((($0)) + 5496|0);
 (_fwrite($55,1,80,$2)|0);
 $56 = ((($0)) + 128|0);
 (_fwrite($56,1,260,$2)|0);
 $57 = ((($0)) + 1529|0);
 (_fwrite($57,1,260,$2)|0);
 $58 = ((($0)) + 4624|0);
 (_fwrite($58,1,32,$2)|0);
 $59 = ((($0)) + 2200|0);
 (_fwrite($59,1,32,$2)|0);
 $60 = ((($0)) + 44|0);
 $$01 = 1;
 while(1) {
  $61 = HEAP32[$0>>2]|0;
  $62 = ($$01|0)>($61|0);
  if ($62) {
   break;
  }
  $63 = HEAP32[$60>>2]|0;
  $64 = (($63) + (($$01*96)|0)|0);
  (_fwrite($64,32,1,$2)|0);
  $65 = (($$01) + 1)|0;
  $$01 = $65;
 }
 $66 = ((($0)) + 48|0);
 $$12 = 1;
 while(1) {
  $67 = HEAP32[$4>>2]|0;
  $68 = ($$12|0)>($67|0);
  if ($68) {
   break;
  }
  $69 = HEAP32[$66>>2]|0;
  $70 = (($69) + ($$12<<7)|0);
  (_fwrite($70,32,1,$2)|0);
  $71 = (($$12) + 1)|0;
  $$12 = $71;
 }
 $$2 = 1;$73 = $67;
 while(1) {
  $72 = ($$2|0)>($73|0);
  if ($72) {
   break;
  }
  $74 = HEAP32[$66>>2]|0;
  $75 = (((($74) + ($$2<<7)|0)) + 32|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = (($10) + ($$2<<2)|0);
  HEAP32[$77>>2] = $76;
  $78 = (($$2) + 1)|0;
  $$pre = HEAP32[$4>>2]|0;
  $$2 = $78;$73 = $$pre;
 }
 (_fwrite($15,4,$73,$2)|0);
 $$3 = 1;
 while(1) {
  $79 = HEAP32[$4>>2]|0;
  $80 = ($$3|0)>($79|0);
  if ($80) {
   break;
  }
  $81 = HEAP32[$66>>2]|0;
  $82 = (((($81) + ($$3<<7)|0)) + 36|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = (($10) + ($$3<<2)|0);
  HEAP32[$84>>2] = $83;
  $85 = (($$3) + 1)|0;
  $$3 = $85;
 }
 (_fwrite($15,4,$79,$2)|0);
 $$4 = 1;
 while(1) {
  $86 = HEAP32[$4>>2]|0;
  $87 = ($$4|0)>($86|0);
  if ($87) {
   break;
  }
  $88 = HEAP32[$66>>2]|0;
  $89 = (((($88) + ($$4<<7)|0)) + 104|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = (($10) + ($$4<<2)|0);
  HEAP32[$91>>2] = $90;
  $92 = (($$4) + 1)|0;
  $$4 = $92;
 }
 (_fwrite($15,4,$86,$2)|0);
 $93 = ((($0)) + 52|0);
 $$5 = 1;
 while(1) {
  $94 = HEAP32[$18>>2]|0;
  $95 = ($$5|0)>($94|0);
  if ($95) {
   break;
  }
  $96 = HEAP32[$93>>2]|0;
  $97 = (($96) + (($$5*120)|0)|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = (($10) + ($$5<<2)|0);
  HEAP32[$99>>2] = $98;
  $100 = (($$5) + 1)|0;
  $$5 = $100;
 }
 (_fwrite($15,4,$94,$2)|0);
 $$6 = 1;
 while(1) {
  $101 = HEAP32[$18>>2]|0;
  $102 = ($$6|0)>($101|0);
  if ($102) {
   break;
  }
  $103 = HEAP32[$93>>2]|0;
  $104 = (((($103) + (($$6*120)|0)|0)) + 8|0);
  $105 = +HEAPF64[$104>>3];
  $106 = $105;
  $107 = (($11) + ($$6<<2)|0);
  HEAPF32[$107>>2] = $106;
  $108 = (($$6) + 1)|0;
  $$6 = $108;
 }
 (_f_save($11,$101,$2)|0);
 $109 = ((($0)) + 4904|0);
 $$7 = 1;
 while(1) {
  $110 = HEAP32[$0>>2]|0;
  $111 = ($$7|0)>($110|0);
  if ($111) {
   break;
  }
  $112 = HEAP32[$60>>2]|0;
  $113 = (((($112) + (($$7*96)|0)|0)) + 48|0);
  $114 = +HEAPF64[$113>>3];
  $115 = +HEAPF64[$109>>3];
  $116 = $114 * $115;
  $117 = $116;
  $118 = (($11) + ($$7<<2)|0);
  HEAPF32[$118>>2] = $117;
  $119 = (($$7) + 1)|0;
  $$7 = $119;
 }
 (_f_save($11,$110,$2)|0);
 $$8 = 1;
 while(1) {
  $120 = HEAP32[$4>>2]|0;
  $121 = ($$8|0)>($120|0);
  if ($121) {
   break;
  }
  $122 = HEAP32[$66>>2]|0;
  $123 = (((($122) + ($$8<<7)|0)) + 48|0);
  $124 = +HEAPF64[$123>>3];
  $125 = +HEAPF64[$109>>3];
  $126 = $124 * $125;
  $127 = $126;
  $128 = (($11) + ($$8<<2)|0);
  HEAPF32[$128>>2] = $127;
  $129 = (($$8) + 1)|0;
  $$8 = $129;
 }
 (_f_save($11,$120,$2)|0);
 $130 = ((($0)) + 4952|0);
 $$9 = 1;
 while(1) {
  $131 = HEAP32[$4>>2]|0;
  $132 = ($$9|0)>($131|0);
  if ($132) {
   break;
  }
  $133 = HEAP32[$66>>2]|0;
  $134 = (((($133) + ($$9<<7)|0)) + 104|0);
  $135 = HEAP32[$134>>2]|0;
  $136 = ($135|0)==(2);
  if ($136) {
   $$sink = 0.0;
  } else {
   $137 = (((($133) + ($$9<<7)|0)) + 40|0);
   $138 = +HEAPF64[$137>>3];
   $139 = +HEAPF64[$130>>3];
   $140 = $138 * $139;
   $141 = $140;
   $$sink = $141;
  }
  $142 = (($11) + ($$9<<2)|0);
  HEAPF32[$142>>2] = $$sink;
  $143 = (($$9) + 1)|0;
  $$9 = $143;
 }
 $144 = (_f_save($11,$131,$2)|0);
 $145 = HEAP32[$4>>2]|0;
 $146 = ($144>>>0)<($145>>>0);
 $spec$select = $146 ? 308 : 0;
 $$1 = $spec$select;
 _free($10);
 _free($11);
 return ($$1|0);
}
function _savehyd($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$0 = 0, $$02 = 0, $$1 = 0, $$2 = 0, $$3 = 0, $$4 = 0, $$sink = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = ((($0)) + 4220|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$0>>2]|0;
 $6 = ((($0)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5|0)<($7|0);
 $$ = $8 ? $7 : $5;
 $9 = (($$) + 1)|0;
 $10 = (_calloc($9,4)|0);
 $11 = ($10|0)==(0|0);
 if ($11) {
  $$0 = 101;
  STACKTOP = sp;return ($$0|0);
 }
 $12 = HEAP32[$1>>2]|0;
 HEAP32[$2>>2] = $12;
 (_fwrite($2,4,1,$4)|0);
 $13 = ((($0)) + 4260|0);
 $$02 = 1;
 while(1) {
  $14 = HEAP32[$0>>2]|0;
  $15 = ($$02|0)>($14|0);
  if ($15) {
   break;
  }
  $16 = HEAP32[$13>>2]|0;
  $17 = (($16) + ($$02<<3)|0);
  $18 = +HEAPF64[$17>>3];
  $19 = $18;
  $20 = (($10) + ($$02<<2)|0);
  HEAPF32[$20>>2] = $19;
  $21 = (($$02) + 1)|0;
  $$02 = $21;
 }
 $22 = ((($10)) + 4|0);
 (_fwrite($22,4,$14,$4)|0);
 $23 = ((($0)) + 4256|0);
 $$1 = 1;
 while(1) {
  $24 = HEAP32[$0>>2]|0;
  $25 = ($$1|0)>($24|0);
  if ($25) {
   break;
  }
  $26 = HEAP32[$23>>2]|0;
  $27 = (($26) + ($$1<<3)|0);
  $28 = +HEAPF64[$27>>3];
  $29 = $28;
  $30 = (($10) + ($$1<<2)|0);
  HEAPF32[$30>>2] = $29;
  $31 = (($$1) + 1)|0;
  $$1 = $31;
 }
 (_fwrite($22,4,$24,$4)|0);
 $32 = ((($0)) + 4536|0);
 $33 = ((($0)) + 4272|0);
 $$2 = 1;
 while(1) {
  $34 = HEAP32[$6>>2]|0;
  $35 = ($$2|0)>($34|0);
  if ($35) {
   break;
  }
  $36 = HEAP32[$32>>2]|0;
  $37 = (($36) + ($$2<<2)|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($38>>>0)<(3);
  if ($39) {
   $$sink = 0.0;
  } else {
   $40 = HEAP32[$33>>2]|0;
   $41 = (($40) + ($$2<<3)|0);
   $42 = +HEAPF64[$41>>3];
   $43 = $42;
   $$sink = $43;
  }
  $44 = (($10) + ($$2<<2)|0);
  HEAPF32[$44>>2] = $$sink;
  $45 = (($$2) + 1)|0;
  $$2 = $45;
 }
 (_fwrite($22,4,$34,$4)|0);
 $$3 = 1;
 while(1) {
  $46 = HEAP32[$6>>2]|0;
  $47 = ($$3|0)>($46|0);
  if ($47) {
   break;
  }
  $48 = HEAP32[$32>>2]|0;
  $49 = (($48) + ($$3<<2)|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (+($50>>>0));
  $52 = (($10) + ($$3<<2)|0);
  HEAPF32[$52>>2] = $51;
  $53 = (($$3) + 1)|0;
  $$3 = $53;
 }
 (_fwrite($22,4,$46,$4)|0);
 $54 = ((($0)) + 4276|0);
 $$4 = 1;
 while(1) {
  $55 = HEAP32[$6>>2]|0;
  $56 = ($$4|0)>($55|0);
  if ($56) {
   break;
  }
  $57 = HEAP32[$54>>2]|0;
  $58 = (($57) + ($$4<<3)|0);
  $59 = +HEAPF64[$58>>3];
  $60 = $59;
  $61 = (($10) + ($$4<<2)|0);
  HEAPF32[$61>>2] = $60;
  $62 = (($$4) + 1)|0;
  $$4 = $62;
 }
 $63 = (_fwrite($22,4,$55,$4)|0);
 $64 = HEAP32[$6>>2]|0;
 $65 = ($63>>>0)<($64>>>0);
 $spec$select = $65 ? 308 : 0;
 _free($10);
 (_fflush($4)|0);
 $$0 = $spec$select;
 STACKTOP = sp;return ($$0|0);
}
function _savehydstep($0,$$val) {
 $0 = $0|0;
 $$val = $$val|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $$val;
 $2 = ((($0)) + 4220|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_fwrite($1,4,1,$3)|0);
 $5 = ($4|0)==(0);
 $spec$select = $5 ? 308 : 0;
 $6 = HEAP32[$1>>2]|0;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = HEAP32[$2>>2]|0;
  _fputc(26,$8);
 }
 $9 = HEAP32[$2>>2]|0;
 (_fflush($9)|0);
 STACKTOP = sp;return ($spec$select|0);
}
function _saveenergy($0) {
 $0 = $0|0;
 var $$01 = 0, $$phi$trans$insert = 0, $$pre = 0.0, $$pre$phiZ2D = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0;
 var $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0;
 var $42 = 0.0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0.0, $6 = 0;
 var $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0, $8 = 0.0;
 var $9 = 0, $spec$select = 0, $storemerge = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp + 24|0;
 $2 = sp;
 $3 = ((($0)) + 4216|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 1192|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (+($6|0));
 $8 = $7 / 3600.0;
 $9 = ((($0)) + 20|0);
 $10 = ((($0)) + 56|0);
 $11 = $8 == 0.0;
 $12 = ((($0)) + 1116|0);
 $13 = ((($2)) + 4|0);
 $14 = ((($2)) + 8|0);
 $15 = ((($2)) + 12|0);
 $16 = ((($2)) + 16|0);
 $17 = ((($2)) + 20|0);
 $18 = 24.0 / $8;
 $$01 = 1;
 while(1) {
  $19 = HEAP32[$9>>2]|0;
  $20 = ($$01|0)>($19|0);
  if ($20) {
   label = 11;
   break;
  }
  $21 = HEAP32[$10>>2]|0;
  if ($11) {
   $22 = (((($21) + ($$01<<7)|0)) + 120|0);
   $23 = +HEAPF64[$22>>3];
   $24 = $23 * 24.0;
   HEAPF64[$22>>3] = $24;
   $$phi$trans$insert = (((($21) + ($$01<<7)|0)) + 80|0);
   $$pre = +HEAPF64[$$phi$trans$insert>>3];
   $$pre$phiZ2D = $$phi$trans$insert;$42 = $$pre;$62 = $24;
  } else {
   $25 = (((($21) + ($$01<<7)|0)) + 80|0);
   $26 = +HEAPF64[$25>>3];
   $27 = $26 / $8;
   HEAPF64[$25>>3] = $27;
   $28 = $26 > 0.0;
   if ($28) {
    $29 = (((($21) + ($$01<<7)|0)) + 88|0);
    $30 = +HEAPF64[$29>>3];
    $31 = $30 / $26;
    HEAPF64[$29>>3] = $31;
    $32 = (((($21) + ($$01<<7)|0)) + 96|0);
    $33 = +HEAPF64[$32>>3];
    $34 = $33 / $26;
    HEAPF64[$32>>3] = $34;
    $35 = (((($21) + ($$01<<7)|0)) + 104|0);
    $36 = +HEAPF64[$35>>3];
    $37 = $36 / $26;
    HEAPF64[$35>>3] = $37;
   }
   $38 = (((($21) + ($$01<<7)|0)) + 120|0);
   $39 = +HEAPF64[$38>>3];
   $40 = $39 * $18;
   HEAPF64[$38>>3] = $40;
   $$pre$phiZ2D = $25;$42 = $27;$62 = $40;
  }
  $41 = $42 * 100.0;
  HEAPF64[$$pre$phiZ2D>>3] = $41;
  $43 = (((($21) + ($$01<<7)|0)) + 88|0);
  $44 = +HEAPF64[$43>>3];
  $45 = $44 * 100.0;
  HEAPF64[$43>>3] = $45;
  $46 = HEAP32[$12>>2]|0;
  $47 = ($46|0)==(1);
  $48 = (((($21) + ($$01<<7)|0)) + 96|0);
  $49 = +HEAPF64[$48>>3];
  $50 = $49 * 37.133501622362687;
  $51 = $49 * 0.0098095765009633007;
  $storemerge = $47 ? $51 : $50;
  HEAPF64[$48>>3] = $storemerge;
  $52 = $41;
  HEAPF32[$2>>2] = $52;
  $53 = $45;
  HEAPF32[$13>>2] = $53;
  $54 = $storemerge;
  HEAPF32[$14>>2] = $54;
  $55 = (((($21) + ($$01<<7)|0)) + 104|0);
  $56 = +HEAPF64[$55>>3];
  $57 = $56;
  HEAPF32[$15>>2] = $57;
  $58 = (((($21) + ($$01<<7)|0)) + 112|0);
  $59 = +HEAPF64[$58>>3];
  $60 = $59;
  HEAPF32[$16>>2] = $60;
  $61 = $62;
  HEAPF32[$17>>2] = $61;
  $63 = (($21) + ($$01<<7)|0);
  $64 = HEAP32[$63>>2]|0;
  HEAP32[$1>>2] = $64;
  $65 = (_fwrite($1,4,1,$4)|0);
  $66 = ($65|0)==(0);
  if ($66) {
   label = 12;
   break;
  }
  $67 = (_fwrite($2,4,6,$4)|0);
  $68 = ($67>>>0)<(6);
  if ($68) {
   label = 12;
   break;
  }
  $69 = (($$01) + 1)|0;
  $$01 = $69;
 }
 if ((label|0) == 11) {
  $70 = ((($0)) + 4432|0);
  $71 = +HEAPF64[$70>>3];
  $72 = ((($0)) + 4424|0);
  $73 = +HEAPF64[$72>>3];
  $74 = $71 * $73;
  HEAPF64[$70>>3] = $74;
  $75 = $74;
  HEAPF32[$2>>2] = $75;
  $76 = (_fwrite($2,4,1,$4)|0);
  $77 = ($76|0)==(0);
  $spec$select = $77 ? 308 : 0;
  STACKTOP = sp;return ($spec$select|0);
 }
 else if ((label|0) == 12) {
  STACKTOP = sp;return 308;
 }
 return (0)|0;
}
function _readhyd($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$0 = 0, $$02 = 0, $$1 = 0, $$13 = 0, $$2 = 0, $$24 = 0, $$3 = 0, $$35 = 0, $$4 = 0, $$46 = 0, $$5 = 0, $$pre11 = 0, $$pre12 = 0, $$pre13 = 0, $$pre14 = 0, $$pre15 = 0, $10 = 0, $11 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0;
 var $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = ((($0)) + 4220|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$0>>2]|0;
 $6 = ((($0)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5|0)<($7|0);
 $$ = $8 ? $7 : $5;
 $9 = (($$) + 1)|0;
 $10 = (_calloc($9,4)|0);
 $11 = ($10|0)==(0|0);
 if ($11) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $12 = (_fread($2,1,$4)|0);
 $13 = ($12|0)!=(0);
 $spec$select = $13&1;
 $14 = HEAP32[$2>>2]|0;
 HEAP32[$1>>2] = $14;
 $15 = HEAP32[$0>>2]|0;
 $16 = (_f_read($10,$15,$4)|0);
 $17 = HEAP32[$0>>2]|0;
 $18 = ($16>>>0)<($17>>>0);
 L4: do {
  if ($18) {
   $$1 = 0;$28 = $17;
  } else {
   $19 = ((($0)) + 4260|0);
   $$02 = 1;$21 = $17;
   while(1) {
    $20 = ($$02|0)>($21|0);
    if ($20) {
     $$1 = $spec$select;$28 = $21;
     break L4;
    }
    $22 = (($10) + ($$02<<2)|0);
    $23 = +HEAPF32[$22>>2];
    $24 = $23;
    $25 = HEAP32[$19>>2]|0;
    $26 = (($25) + ($$02<<3)|0);
    HEAPF64[$26>>3] = $24;
    $27 = (($$02) + 1)|0;
    $$pre11 = HEAP32[$0>>2]|0;
    $$02 = $27;$21 = $$pre11;
   }
  }
 } while(0);
 $29 = (_f_read($10,$28,$4)|0);
 $30 = HEAP32[$0>>2]|0;
 $31 = ($29>>>0)<($30>>>0);
 L10: do {
  if ($31) {
   $$2 = 0;
  } else {
   $32 = ((($0)) + 4256|0);
   $$13 = 1;$34 = $30;
   while(1) {
    $33 = ($$13|0)>($34|0);
    if ($33) {
     $$2 = $$1;
     break L10;
    }
    $35 = (($10) + ($$13<<2)|0);
    $36 = +HEAPF32[$35>>2];
    $37 = $36;
    $38 = HEAP32[$32>>2]|0;
    $39 = (($38) + ($$13<<3)|0);
    HEAPF64[$39>>3] = $37;
    $40 = (($$13) + 1)|0;
    $$pre12 = HEAP32[$0>>2]|0;
    $$13 = $40;$34 = $$pre12;
   }
  }
 } while(0);
 $41 = HEAP32[$6>>2]|0;
 $42 = (_f_read($10,$41,$4)|0);
 $43 = HEAP32[$6>>2]|0;
 $44 = ($42>>>0)<($43>>>0);
 L16: do {
  if ($44) {
   $$3 = 0;$54 = $43;
  } else {
   $45 = ((($0)) + 4272|0);
   $$24 = 1;$47 = $43;
   while(1) {
    $46 = ($$24|0)>($47|0);
    if ($46) {
     $$3 = $$2;$54 = $47;
     break L16;
    }
    $48 = (($10) + ($$24<<2)|0);
    $49 = +HEAPF32[$48>>2];
    $50 = $49;
    $51 = HEAP32[$45>>2]|0;
    $52 = (($51) + ($$24<<3)|0);
    HEAPF64[$52>>3] = $50;
    $53 = (($$24) + 1)|0;
    $$pre13 = HEAP32[$6>>2]|0;
    $$24 = $53;$47 = $$pre13;
   }
  }
 } while(0);
 $55 = (_f_read($10,$54,$4)|0);
 $56 = HEAP32[$6>>2]|0;
 $57 = ($55>>>0)<($56>>>0);
 L22: do {
  if ($57) {
   $$4 = 0;$68 = $56;
  } else {
   $58 = ((($0)) + 4536|0);
   $$35 = 1;$60 = $56;
   while(1) {
    $59 = ($$35|0)>($60|0);
    if ($59) {
     $$4 = $$3;$68 = $60;
     break L22;
    }
    $61 = (($10) + ($$35<<2)|0);
    $62 = +HEAPF32[$61>>2];
    $63 = (~~(($62)));
    $64 = $63 << 24 >> 24;
    $65 = HEAP32[$58>>2]|0;
    $66 = (($65) + ($$35<<2)|0);
    HEAP32[$66>>2] = $64;
    $67 = (($$35) + 1)|0;
    $$pre14 = HEAP32[$6>>2]|0;
    $$35 = $67;$60 = $$pre14;
   }
  }
 } while(0);
 $69 = (_f_read($10,$68,$4)|0);
 $70 = HEAP32[$6>>2]|0;
 $71 = ($69>>>0)<($70>>>0);
 L28: do {
  if ($71) {
   $$5 = 0;
  } else {
   $72 = ((($0)) + 4276|0);
   $$46 = 1;$74 = $70;
   while(1) {
    $73 = ($$46|0)>($74|0);
    if ($73) {
     $$5 = $$4;
     break L28;
    }
    $75 = (($10) + ($$46<<2)|0);
    $76 = +HEAPF32[$75>>2];
    $77 = $76;
    $78 = HEAP32[$72>>2]|0;
    $79 = (($78) + ($$46<<3)|0);
    HEAPF64[$79>>3] = $77;
    $80 = (($$46) + 1)|0;
    $$pre15 = HEAP32[$6>>2]|0;
    $$46 = $80;$74 = $$pre15;
   }
  }
 } while(0);
 _free($10);
 $$0 = $$5;
 STACKTOP = sp;return ($$0|0);
}
function _readhydstep($$0$4$11$val,$0) {
 $$0$4$11$val = $$0$4$11$val|0;
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = (_fread($1,1,$$0$4$11$val)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $$0 = 0;
 } else {
  $4 = HEAP32[$1>>2]|0;
  HEAP32[$0>>2] = $4;
  $$0 = 1;
 }
 STACKTOP = sp;return ($$0|0);
}
function _saveoutput($0) {
 $0 = $0|0;
 var $$ = 0, $$0 = 0, $$01 = 0, $$02 = 0, $$1 = 0, $$13 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1|0)<($3|0);
 $$ = $4 ? $3 : $1;
 $5 = (($$) + 1)|0;
 $6 = (_calloc($5,4)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  $$0 = 101;
  return ($$0|0);
 }
 $$01 = 0;$$02 = 1;
 while(1) {
  $exitcond4 = ($$02|0)==(5);
  if ($exitcond4) {
   break;
  }
  $8 = ($$01|0)>(100);
  if ($8) {
   $18 = $$01;
  } else {
   $9 = (((($0)) + 4904|0) + ($$02<<3)|0);
   $10 = +HEAPF64[$9>>3];
   $11 = (_nodeoutput($0,$$02,$6,$10)|0);
   $18 = $11;
  }
  $12 = (($$02) + 1)|0;
  $$01 = $18;$$02 = $12;
 }
 $$1 = $$01;$$13 = 7;
 while(1) {
  $exitcond = ($$13|0)==(15);
  if ($exitcond) {
   break;
  }
  $13 = ($$1|0)>(100);
  if ($13) {
   $19 = $$1;
  } else {
   $14 = (((($0)) + 4904|0) + ($$13<<3)|0);
   $15 = +HEAPF64[$14>>3];
   $16 = (_linkoutput($0,$$13,$6,$15)|0);
   $19 = $16;
  }
  $17 = (($$13) + 1)|0;
  $$1 = $19;$$13 = $17;
 }
 _free($6);
 $$0 = $$1;
 return ($$0|0);
}
function _nodeoutput($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 var $$01 = 0, $$1 = 0, $$2 = 0, $$3 = 0, $$pre = 0, $$pre$phiZ2D = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 4256|0);
 $5 = ((($0)) + 4224|0);
 $6 = HEAP32[$5>>2]|0;
 L1: do {
  switch ($1|0) {
  case 1:  {
   $7 = ((($0)) + 4260|0);
   $$01 = 1;
   while(1) {
    $8 = HEAP32[$0>>2]|0;
    $9 = ($$01|0)>($8|0);
    if ($9) {
     $$pre$phiZ2D = $0;$50 = $8;
     break L1;
    }
    $10 = HEAP32[$7>>2]|0;
    $11 = (($10) + ($$01<<3)|0);
    $12 = +HEAPF64[$11>>3];
    $13 = $12 * $3;
    $14 = $13;
    $15 = (($2) + ($$01<<2)|0);
    HEAPF32[$15>>2] = $14;
    $16 = (($$01) + 1)|0;
    $$01 = $16;
   }
   break;
  }
  case 2:  {
   $$1 = 1;
   while(1) {
    $17 = HEAP32[$0>>2]|0;
    $18 = ($$1|0)>($17|0);
    if ($18) {
     $$pre$phiZ2D = $0;$50 = $17;
     break L1;
    }
    $19 = HEAP32[$4>>2]|0;
    $20 = (($19) + ($$1<<3)|0);
    $21 = +HEAPF64[$20>>3];
    $22 = $21 * $3;
    $23 = $22;
    $24 = (($2) + ($$1<<2)|0);
    HEAPF32[$24>>2] = $23;
    $25 = (($$1) + 1)|0;
    $$1 = $25;
   }
   break;
  }
  case 3:  {
   $26 = ((($0)) + 44|0);
   $$2 = 1;
   while(1) {
    $27 = HEAP32[$0>>2]|0;
    $28 = ($$2|0)>($27|0);
    if ($28) {
     $$pre$phiZ2D = $0;$50 = $27;
     break L1;
    }
    $29 = HEAP32[$4>>2]|0;
    $30 = (($29) + ($$2<<3)|0);
    $31 = +HEAPF64[$30>>3];
    $32 = HEAP32[$26>>2]|0;
    $33 = (((($32) + (($$2*96)|0)|0)) + 48|0);
    $34 = +HEAPF64[$33>>3];
    $35 = $31 - $34;
    $36 = $35 * $3;
    $37 = $36;
    $38 = (($2) + ($$2<<2)|0);
    HEAPF32[$38>>2] = $37;
    $39 = (($$2) + 1)|0;
    $$2 = $39;
   }
   break;
  }
  case 4:  {
   $40 = ((($0)) + 4824|0);
   $$3 = 1;
   while(1) {
    $41 = HEAP32[$0>>2]|0;
    $42 = ($$3|0)>($41|0);
    if ($42) {
     $$pre$phiZ2D = $0;$50 = $41;
     break L1;
    }
    $43 = HEAP32[$40>>2]|0;
    $44 = (($43) + ($$3<<3)|0);
    $45 = +HEAPF64[$44>>3];
    $46 = $45 * $3;
    $47 = $46;
    $48 = (($2) + ($$3<<2)|0);
    HEAPF32[$48>>2] = $47;
    $49 = (($$3) + 1)|0;
    $$3 = $49;
   }
   break;
  }
  default: {
   $$pre = HEAP32[$0>>2]|0;
   $$pre$phiZ2D = $0;$50 = $$pre;
  }
  }
 } while(0);
 $51 = (_f_save($2,$50,$6)|0);
 $52 = HEAP32[$$pre$phiZ2D>>2]|0;
 $53 = ($51>>>0)<($52>>>0);
 $spec$select = $53 ? 308 : 0;
 return ($spec$select|0);
}
function _linkoutput($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 var $$01 = 0.0, $$02 = 0, $$1 = 0, $$2 = 0, $$3 = 0, $$4 = 0, $$5 = 0, $$6 = 0, $$7 = 0, $$pre = 0, $$pre$phiZ2D = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0.0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0, $115 = 0.0, $116 = 0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0, $125 = 0.0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0.0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0.0, $140 = 0, $141 = 0, $142 = 0, $143 = 0.0;
 var $144 = 0.0, $145 = 0.0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0.0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0.0, $16 = 0, $160 = 0, $161 = 0.0;
 var $162 = 0.0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0.0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0.0, $173 = 0.0, $174 = 0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0, $179 = 0.0, $18 = 0;
 var $180 = 0.0, $181 = 0.0, $182 = 0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0;
 var $98 = 0, $99 = 0, $or$cond = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 4256|0);
 $5 = ((($0)) + 4224|0);
 $6 = HEAP32[$5>>2]|0;
 L1: do {
  switch ($1|0) {
  case 7:  {
   $7 = ((($0)) + 12|0);
   $8 = ((($0)) + 4272|0);
   $$02 = 1;
   while(1) {
    $9 = HEAP32[$7>>2]|0;
    $10 = ($$02|0)>($9|0);
    if ($10) {
     $$pre$phiZ2D = $7;
     break L1;
    }
    $11 = HEAP32[$8>>2]|0;
    $12 = (($11) + ($$02<<3)|0);
    $13 = +HEAPF64[$12>>3];
    $14 = $13 * $3;
    $15 = $14;
    $16 = (($2) + ($$02<<2)|0);
    HEAPF32[$16>>2] = $15;
    $17 = (($$02) + 1)|0;
    $$02 = $17;
   }
   break;
  }
  case 8:  {
   $18 = ((($0)) + 12|0);
   $19 = ((($0)) + 48|0);
   $20 = ((($0)) + 4272|0);
   $$1 = 1;
   while(1) {
    $21 = HEAP32[$18>>2]|0;
    $22 = ($$1|0)>($21|0);
    if ($22) {
     $$pre$phiZ2D = $18;
     break L1;
    }
    $23 = HEAP32[$19>>2]|0;
    $24 = (((($23) + ($$1<<7)|0)) + 104|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ($25|0)==(2);
    if ($26) {
     $27 = (($2) + ($$1<<2)|0);
     HEAPF32[$27>>2] = 0.0;
    } else {
     $28 = HEAP32[$20>>2]|0;
     $29 = (($28) + ($$1<<3)|0);
     $30 = +HEAPF64[$29>>3];
     $31 = $30 < 0.0;
     $32 = - $30;
     $33 = $31 ? $32 : $30;
     $34 = (((($23) + ($$1<<7)|0)) + 40|0);
     $35 = +HEAPF64[$34>>3];
     $36 = $35 * $35;
     $37 = $36 * 3.1415926535897931;
     $38 = $37 * 0.25;
     $39 = $33 / $38;
     $40 = $39 * $3;
     $41 = $40;
     $42 = (($2) + ($$1<<2)|0);
     HEAPF32[$42>>2] = $41;
    }
    $43 = (($$1) + 1)|0;
    $$1 = $43;
   }
   break;
  }
  case 9:  {
   $44 = ((($0)) + 12|0);
   $45 = ((($0)) + 4536|0);
   $46 = ((($0)) + 48|0);
   $$2 = 1;
   while(1) {
    $47 = HEAP32[$44>>2]|0;
    $48 = ($$2|0)>($47|0);
    if ($48) {
     $$pre$phiZ2D = $44;
     break L1;
    }
    $49 = HEAP32[$45>>2]|0;
    $50 = (($49) + ($$2<<2)|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = ($51>>>0)<(3);
    do {
     if ($52) {
      $53 = (($2) + ($$2<<2)|0);
      HEAPF32[$53>>2] = 0.0;
     } else {
      $54 = HEAP32[$4>>2]|0;
      $55 = HEAP32[$46>>2]|0;
      $56 = (((($55) + ($$2<<7)|0)) + 32|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = (($54) + ($57<<3)|0);
      $59 = +HEAPF64[$58>>3];
      $60 = (((($55) + ($$2<<7)|0)) + 36|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = (($54) + ($61<<3)|0);
      $63 = +HEAPF64[$62>>3];
      $64 = $59 - $63;
      $65 = (((($55) + ($$2<<7)|0)) + 104|0);
      $66 = HEAP32[$65>>2]|0;
      $67 = ($66|0)!=(2);
      $68 = $64 < 0.0;
      $or$cond = $67 & $68;
      $69 = - $64;
      $$01 = $or$cond ? $69 : $64;
      $70 = ($66>>>0)<(2);
      if ($70) {
       $71 = $$01 * 1000.0;
       $72 = (((($55) + ($$2<<7)|0)) + 48|0);
       $73 = +HEAPF64[$72>>3];
       $74 = $71 / $73;
       $75 = $74;
       $76 = (($2) + ($$2<<2)|0);
       HEAPF32[$76>>2] = $75;
       break;
      } else {
       $77 = $$01 * $3;
       $78 = $77;
       $79 = (($2) + ($$2<<2)|0);
       HEAPF32[$79>>2] = $78;
       break;
      }
     }
    } while(0);
    $80 = (($$2) + 1)|0;
    $$2 = $80;
   }
   break;
  }
  case 10:  {
   $81 = ((($0)) + 12|0);
   $$3 = 1;
   while(1) {
    $82 = HEAP32[$81>>2]|0;
    $83 = ($$3|0)>($82|0);
    if ($83) {
     $$pre$phiZ2D = $81;
     break L1;
    }
    $84 = (+_avgqual($0,$$3));
    $85 = $84 * $3;
    $86 = $85;
    $87 = (($2) + ($$3<<2)|0);
    HEAPF32[$87>>2] = $86;
    $88 = (($$3) + 1)|0;
    $$3 = $88;
   }
   break;
  }
  case 11:  {
   $89 = ((($0)) + 12|0);
   $90 = ((($0)) + 4536|0);
   $$4 = 1;
   while(1) {
    $91 = HEAP32[$89>>2]|0;
    $92 = ($$4|0)>($91|0);
    if ($92) {
     $$pre$phiZ2D = $89;
     break L1;
    }
    $93 = HEAP32[$90>>2]|0;
    $94 = (($93) + ($$4<<2)|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = (+($95>>>0));
    $97 = (($2) + ($$4<<2)|0);
    HEAPF32[$97>>2] = $96;
    $98 = (($$4) + 1)|0;
    $$4 = $98;
   }
   break;
  }
  case 12:  {
   $99 = ((($0)) + 12|0);
   $100 = ((($0)) + 4276|0);
   $101 = ((($0)) + 48|0);
   $102 = ((($0)) + 4928|0);
   $103 = ((($0)) + 4960|0);
   $$5 = 1;
   while(1) {
    $104 = HEAP32[$99>>2]|0;
    $105 = ($$5|0)>($104|0);
    if ($105) {
     $$pre$phiZ2D = $99;
     break L1;
    }
    $106 = HEAP32[$100>>2]|0;
    $107 = (($106) + ($$5<<3)|0);
    $108 = +HEAPF64[$107>>3];
    $109 = $108 != -1.0E+10;
    L38: do {
     if ($109) {
      $110 = HEAP32[$101>>2]|0;
      $111 = (((($110) + ($$5<<7)|0)) + 104|0);
      $112 = HEAP32[$111>>2]|0;
      switch ($112|0) {
      case 1: case 0:  {
       $113 = $108;
       $114 = (($2) + ($$5<<2)|0);
       HEAPF32[$114>>2] = $113;
       break L38;
       break;
      }
      case 2:  {
       $115 = $108;
       $116 = (($2) + ($$5<<2)|0);
       HEAPF32[$116>>2] = $115;
       break L38;
       break;
      }
      case 5: case 4: case 3:  {
       $117 = +HEAPF64[$102>>3];
       $118 = $108 * $117;
       $119 = $118;
       $120 = (($2) + ($$5<<2)|0);
       HEAPF32[$120>>2] = $119;
       break L38;
       break;
      }
      case 6:  {
       $121 = +HEAPF64[$103>>3];
       $122 = $108 * $121;
       $123 = $122;
       $124 = (($2) + ($$5<<2)|0);
       HEAPF32[$124>>2] = $123;
       break L38;
       break;
      }
      case 7:  {
       $125 = $108;
       $126 = (($2) + ($$5<<2)|0);
       HEAPF32[$126>>2] = $125;
       break L38;
       break;
      }
      default: {
       $127 = (($2) + ($$5<<2)|0);
       HEAPF32[$127>>2] = 0.0;
       break L38;
      }
      }
     } else {
      $128 = (($2) + ($$5<<2)|0);
      HEAPF32[$128>>2] = 0.0;
     }
    } while(0);
    $129 = (($$5) + 1)|0;
    $$5 = $129;
   }
   break;
  }
  case 13:  {
   $130 = ((($0)) + 4600|0);
   $131 = HEAP32[$130>>2]|0;
   $132 = ($131|0)==(0);
   if ($132) {
    $133 = ((($0)) + 12|0);
    $134 = HEAP32[$133>>2]|0;
    $135 = $134 << 2;
    $136 = (($135) + 4)|0;
    _memset(($2|0),0,($136|0))|0;
    $$pre$phiZ2D = $133;
    break L1;
   }
   $137 = ((($0)) + 12|0);
   $138 = ((($0)) + 4828|0);
   $$6 = 1;
   while(1) {
    $139 = HEAP32[$137>>2]|0;
    $140 = ($$6|0)>($139|0);
    if ($140) {
     $$pre$phiZ2D = $137;
     break L1;
    }
    $141 = HEAP32[$138>>2]|0;
    $142 = (($141) + ($$6<<3)|0);
    $143 = +HEAPF64[$142>>3];
    $144 = $143 * $3;
    $145 = $144;
    $146 = (($2) + ($$6<<2)|0);
    HEAPF32[$146>>2] = $145;
    $147 = (($$6) + 1)|0;
    $$6 = $147;
   }
   break;
  }
  case 14:  {
   $148 = ((($0)) + 12|0);
   $149 = ((($0)) + 48|0);
   $150 = ((($0)) + 4272|0);
   $$7 = 1;
   while(1) {
    $151 = HEAP32[$148>>2]|0;
    $152 = ($$7|0)>($151|0);
    if ($152) {
     $$pre$phiZ2D = $148;
     break L1;
    }
    $153 = HEAP32[$149>>2]|0;
    $154 = (((($153) + ($$7<<7)|0)) + 104|0);
    $155 = HEAP32[$154>>2]|0;
    $156 = ($155>>>0)<(2);
    if ($156) {
     $157 = HEAP32[$150>>2]|0;
     $158 = (($157) + ($$7<<3)|0);
     $159 = +HEAPF64[$158>>3];
     $160 = $159 < 0.0;
     $161 = - $159;
     $162 = $160 ? $161 : $159;
     $163 = $162 > 9.9999999999999995E-7;
     if ($163) {
      $164 = HEAP32[$4>>2]|0;
      $165 = (((($153) + ($$7<<7)|0)) + 32|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = (($164) + ($166<<3)|0);
      $168 = +HEAPF64[$167>>3];
      $169 = (((($153) + ($$7<<7)|0)) + 36|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = (($164) + ($170<<3)|0);
      $172 = +HEAPF64[$171>>3];
      $173 = $168 - $172;
      $174 = $173 < 0.0;
      $175 = - $173;
      $176 = $174 ? $175 : $173;
      $177 = $176 * 39.725000000000001;
      $178 = (((($153) + ($$7<<7)|0)) + 40|0);
      $179 = +HEAPF64[$178>>3];
      $180 = (+Math_pow((+$179),5.0));
      $181 = $177 * $180;
      $182 = (((($153) + ($$7<<7)|0)) + 48|0);
      $183 = +HEAPF64[$182>>3];
      $184 = $181 / $183;
      $185 = $159 * $159;
      $186 = $184 / $185;
      $187 = $186;
      $188 = (($2) + ($$7<<2)|0);
      HEAPF32[$188>>2] = $187;
     } else {
      label = 48;
     }
    } else {
     label = 48;
    }
    if ((label|0) == 48) {
     label = 0;
     $189 = (($2) + ($$7<<2)|0);
     HEAPF32[$189>>2] = 0.0;
    }
    $190 = (($$7) + 1)|0;
    $$7 = $190;
   }
   break;
  }
  default: {
   $$pre = ((($0)) + 12|0);
   $$pre$phiZ2D = $$pre;
  }
  }
 } while(0);
 $191 = HEAP32[$$pre$phiZ2D>>2]|0;
 $192 = (_f_save($2,$191,$6)|0);
 $193 = HEAP32[$$pre$phiZ2D>>2]|0;
 $194 = ($192>>>0)<($193>>>0);
 $spec$select = $194 ? 308 : 0;
 return ($spec$select|0);
}
function _savefinaloutput($0) {
 $0 = $0|0;
 var $$ = 0, $$0 = 0, $$01 = 0, $$idx = 0, $$idx$val = 0, $$idx2$val = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4216|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 1216|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  $$01 = 0;
 } else {
  $6 = ((($0)) + 4224|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0|0);
  if ($8) {
   $$01 = 0;
  } else {
   $9 = HEAP32[$0>>2]|0;
   $10 = ((($0)) + 12|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($9|0)<($11|0);
   $$ = $12 ? $11 : $9;
   $13 = (($$) + 1)|0;
   $14 = (_calloc($13,4)|0);
   $15 = ($14|0)==(0|0);
   if ($15) {
    $$0 = 101;
    return ($$0|0);
   }
   $16 = (_savetimestat($0,$14,2)|0);
   $17 = ($16|0)>(100);
   if ($17) {
    $35 = $16;
   } else {
    $18 = (_savetimestat($0,$14,3)|0);
    $19 = ($18|0)==(0);
    if ($19) {
     $20 = ((($0)) + 1204|0);
     HEAP32[$20>>2] = 1;
     $35 = 0;
    } else {
     $35 = $18;
    }
   }
   $21 = HEAP32[$6>>2]|0;
   _fclose($21);
   HEAP32[$6>>2] = 0;
   _free($14);
   $$01 = $35;
  }
 }
 $22 = ($2|0)==(0|0);
 $23 = ($$01|0)>(100);
 $or$cond = $22 | $23;
 if ($or$cond) {
  $$0 = $$01;
  return ($$0|0);
 }
 $24 = ((($0)) + 4704|0);
 $25 = +HEAPF64[$24>>3];
 $26 = ((($0)) + 4712|0);
 $27 = +HEAPF64[$26>>3];
 $28 = ((($0)) + 4720|0);
 $29 = +HEAPF64[$28>>3];
 $30 = ((($0)) + 4728|0);
 $31 = +HEAPF64[$30>>3];
 $$idx = ((($0)) + 1192|0);
 $$idx$val = HEAP32[$$idx>>2]|0;
 $$idx2$val = HEAP32[$1>>2]|0;
 $32 = (_savenetreacts($$idx$val,$$idx2$val,$25,$27,$29,$31)|0);
 $33 = ($32|0)>(100);
 if ($33) {
  $$0 = $32;
  return ($$0|0);
 }
 $34 = (_saveepilog($0)|0);
 $$0 = $34;
 return ($$0|0);
}
function _savetimestat($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0.0, $$01 = 0, $$01$in = 0, $$012 = 0, $$013 = 0, $$014 = 0, $$02 = 0, $$03 = 0, $$06 = 0, $$08 = 0, $$10 = 0, $$19 = 0, $$210 = 0, $$25 = 0, $$3 = 0.0, $$311 = 0, $$4 = 0, $$5 = 0, $$6 = 0, $$7 = 0;
 var $$8 = 0, $$9 = 0, $$inv = 0, $$inv27 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0.0, $113 = 0.0;
 var $114 = 0.0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0;
 var $132 = 0.0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0.0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0, $98 = 0.0, $99 = 0.0, $brmerge$demorgan = 0, $spec$select = 0, $trunc = 0, $trunc$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 4216|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2|0)==(2);
 $6 = HEAP32[$0>>2]|0;
 if ($5) {
  $7 = ($6*3)|0;
  $8 = ((($0)) + 12|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $9 << 3;
  $11 = (($7) + ($10))|0;
  $$01$in = $11;$$012 = 4;$$013 = $6;$$014 = 1;$$02 = 0;
 } else {
  $12 = $6 << 4;
  $13 = $6 << 2;
  $14 = ((($0)) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15*7)|0;
  $17 = (($13) + ($16))|0;
  $$01$in = $17;$$012 = 14;$$013 = $15;$$014 = 7;$$02 = $12;
 }
 $$01 = $$01$in << 2;
 $18 = (($$013) + 1)|0;
 $19 = (_calloc($18,4)|0);
 $20 = (_calloc($18,4)|0);
 $21 = ($19|0)==(0|0);
 $22 = $21 ? 101 : 0;
 if ($21) {
  $$25 = $22;
  _free($19);
  _free($20);
  return ($$25|0);
 }
 $23 = ($20|0)==(0|0);
 if ($23) {
  $$25 = 101;
  _free($19);
  _free($20);
  return ($$25|0);
 }
 $24 = ((($0)) + 1216|0);
 $25 = $$013 << 2;
 $26 = (($25) + 4)|0;
 $27 = ((($0)) + 4224|0);
 $28 = ((($0)) + 1204|0);
 $29 = ($2|0)==(3);
 $30 = ((($0)) + 4912|0);
 $31 = ((($0)) + 4260|0);
 $32 = ((($0)) + 4920|0);
 $33 = ((($0)) + 4256|0);
 $34 = ((($0)) + 4936|0);
 $35 = ((($0)) + 4824|0);
 $36 = ((($0)) + 4960|0);
 $37 = ((($0)) + 4272|0);
 $$03 = 0;$trunc = $$014;
 while(1) {
  $38 = ($trunc>>>0)>($$012>>>0);
  if ($38) {
   $$25 = $$03;
   break;
  }
  $39 = HEAP32[$24>>2]|0;
  $40 = ($39|0)==(1);
  L14: do {
   if ($40) {
    _memset(($19|0),0,($26|0))|0;
   } else {
    $$08 = 1;
    while(1) {
     $41 = ($$08|0)>($$013|0);
     if ($41) {
      break L14;
     }
     $42 = (($19) + ($$08<<2)|0);
     HEAPF32[$42>>2] = 1.0E+10;
     $43 = (($20) + ($$08<<2)|0);
     HEAPF32[$43>>2] = -1.0E+10;
     $44 = (($$08) + 1)|0;
     $$08 = $44;
    }
   }
  } while(0);
  $45 = HEAP32[$27>>2]|0;
  $46 = (($trunc) - ($$014))|0;
  $47 = Math_imul($46, $$013)|0;
  $48 = $47 << 2;
  $49 = (($$02) + ($48))|0;
  _fseek($45,$49,0);
  $50 = ($trunc|0)==(7);
  $51 = ($trunc|0)==(11);
  $$06 = 1;
  while(1) {
   $52 = HEAP32[$28>>2]|0;
   $53 = ($$06|0)>($52|0);
   if ($53) {
    break;
   }
   $54 = HEAP32[$27>>2]|0;
   (_f_read($1,$$013,$54)|0);
   $$19 = 1;
   while(1) {
    $55 = ($$19|0)>($$013|0);
    if ($55) {
     break;
    }
    $56 = (($1) + ($$19<<2)|0);
    $57 = +HEAPF32[$56>>2];
    do {
     if ($29) {
      if ($50) {
       $58 = $57 < 0.0;
       if (!($58)) {
        $$3 = $57;
        break;
       }
       $59 = - $57;
       $$3 = $59;
       break;
      }
      if ($51) {
       $60 = !($57 >= 3.0);
       if ($60) {
        $$3 = 0.0;
       } else {
        $$3 = 1.0;
       }
      } else {
       $$3 = $57;
      }
     } else {
      $$3 = $57;
     }
    } while(0);
    $61 = HEAP32[$24>>2]|0;
    $62 = ($61|0)==(1);
    $63 = (($19) + ($$19<<2)|0);
    $64 = +HEAPF32[$63>>2];
    if ($62) {
     $65 = $64 + $$3;
     HEAPF32[$63>>2] = $65;
    } else {
     $$inv = $64 <= $$3;
     $66 = $$inv ? $64 : $$3;
     HEAPF32[$63>>2] = $66;
     $67 = (($20) + ($$19<<2)|0);
     $68 = +HEAPF32[$67>>2];
     $$inv27 = $68 >= $$3;
     $69 = $$inv27 ? $68 : $$3;
     HEAPF32[$67>>2] = $69;
    }
    $70 = (($$19) + 1)|0;
    $$19 = $70;
   }
   $71 = HEAP32[$28>>2]|0;
   $72 = ($$06|0)<($71|0);
   if ($72) {
    $73 = HEAP32[$27>>2]|0;
    _fseek($73,$$01,1);
   }
   $74 = (($$06) + 1)|0;
   $$06 = $74;
  }
  $75 = HEAP32[$24>>2]|0;
  L45: do {
   switch ($75|0) {
   case 1:  {
    $$210 = 1;
    while(1) {
     $76 = ($$210|0)>($$013|0);
     if ($76) {
      break L45;
     }
     $77 = (($19) + ($$210<<2)|0);
     $78 = +HEAPF32[$77>>2];
     $79 = HEAP32[$28>>2]|0;
     $80 = (+($79|0));
     $81 = $78 / $80;
     $82 = (($1) + ($$210<<2)|0);
     HEAPF32[$82>>2] = $81;
     $83 = (($$210) + 1)|0;
     $$210 = $83;
    }
    break;
   }
   case 2:  {
    $$311 = 1;
    while(1) {
     $84 = ($$311|0)>($$013|0);
     if ($84) {
      break L45;
     }
     $85 = (($19) + ($$311<<2)|0);
     $86 = HEAP32[$85>>2]|0;
     $87 = (($1) + ($$311<<2)|0);
     HEAP32[$87>>2] = $86;
     $88 = (($$311) + 1)|0;
     $$311 = $88;
    }
    break;
   }
   case 3:  {
    $$4 = 1;
    while(1) {
     $89 = ($$4|0)>($$013|0);
     if ($89) {
      break L45;
     }
     $90 = (($20) + ($$4<<2)|0);
     $91 = HEAP32[$90>>2]|0;
     $92 = (($1) + ($$4<<2)|0);
     HEAP32[$92>>2] = $91;
     $93 = (($$4) + 1)|0;
     $$4 = $93;
    }
    break;
   }
   case 4:  {
    $$5 = 1;
    while(1) {
     $94 = ($$5|0)>($$013|0);
     if ($94) {
      break L45;
     }
     $95 = (($20) + ($$5<<2)|0);
     $96 = +HEAPF32[$95>>2];
     $97 = (($19) + ($$5<<2)|0);
     $98 = +HEAPF32[$97>>2];
     $99 = $96 - $98;
     $100 = (($1) + ($$5<<2)|0);
     HEAPF32[$100>>2] = $99;
     $101 = (($$5) + 1)|0;
     $$5 = $101;
    }
    break;
   }
   default: {
   }
   }
  } while(0);
  $brmerge$demorgan = $29 & $51;
  L63: do {
   if ($brmerge$demorgan) {
    $$6 = 1;
    while(1) {
     $102 = ($$6|0)>($$013|0);
     if ($102) {
      break L63;
     }
     $103 = (($1) + ($$6<<2)|0);
     $104 = +HEAPF32[$103>>2];
     $105 = $104 < 0.5;
     $$ = $105 ? 2.0 : 3.0;
     HEAPF32[$103>>2] = $$;
     $106 = (($$6) + 1)|0;
     $$6 = $106;
    }
   }
  } while(0);
  $107 = (_f_save($1,$$013,$4)|0);
  $108 = ($107>>>0)<($$013>>>0);
  $spec$select = $108 ? 308 : $$03;
  L69: do {
   if ($5) {
    $trunc$clear = $trunc & 2147483647;
    switch ($trunc$clear|0) {
    case 1:  {
     $$7 = 1;
     while(1) {
      $109 = ($$7|0)>($$013|0);
      if ($109) {
       break L69;
      }
      $110 = (($1) + ($$7<<2)|0);
      $111 = +HEAPF32[$110>>2];
      $112 = $111;
      $113 = +HEAPF64[$30>>3];
      $114 = $112 / $113;
      $115 = HEAP32[$31>>2]|0;
      $116 = (($115) + ($$7<<3)|0);
      HEAPF64[$116>>3] = $114;
      $117 = (($$7) + 1)|0;
      $$7 = $117;
     }
     break;
    }
    case 2:  {
     $$8 = 1;
     while(1) {
      $118 = ($$8|0)>($$013|0);
      if ($118) {
       break L69;
      }
      $119 = (($1) + ($$8<<2)|0);
      $120 = +HEAPF32[$119>>2];
      $121 = $120;
      $122 = +HEAPF64[$32>>3];
      $123 = $121 / $122;
      $124 = HEAP32[$33>>2]|0;
      $125 = (($124) + ($$8<<3)|0);
      HEAPF64[$125>>3] = $123;
      $126 = (($$8) + 1)|0;
      $$8 = $126;
     }
     break;
    }
    case 4:  {
     $$9 = 1;
     while(1) {
      $127 = ($$9|0)>($$013|0);
      if ($127) {
       break L69;
      }
      $128 = (($1) + ($$9<<2)|0);
      $129 = +HEAPF32[$128>>2];
      $130 = $129;
      $131 = +HEAPF64[$34>>3];
      $132 = $130 / $131;
      $133 = HEAP32[$35>>2]|0;
      $134 = (($133) + ($$9<<3)|0);
      HEAPF64[$134>>3] = $132;
      $135 = (($$9) + 1)|0;
      $$9 = $135;
     }
     break;
    }
    default: {
     break L69;
    }
    }
   } else {
    if ($50) {
     $$10 = 1;
     while(1) {
      $136 = ($$10|0)>($$013|0);
      if ($136) {
       break L69;
      }
      $137 = (($1) + ($$10<<2)|0);
      $138 = +HEAPF32[$137>>2];
      $139 = $138;
      $140 = +HEAPF64[$36>>3];
      $141 = $139 / $140;
      $142 = HEAP32[$37>>2]|0;
      $143 = (($142) + ($$10<<3)|0);
      HEAPF64[$143>>3] = $141;
      $144 = (($$10) + 1)|0;
      $$10 = $144;
     }
    }
   }
  } while(0);
  $145 = (($trunc) + 1)|0;
  $$03 = $spec$select;$trunc = $145;
 }
 _free($19);
 _free($20);
 return ($$25|0);
}
function _savenetreacts($$0$2$12$val,$$0$4$10$val,$0,$1,$2,$3) {
 $$0$2$12$val = $$0$2$12$val|0;
 $$0$4$10$val = $$0$4$10$val|0;
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 var $$0 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $spec$select = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = ($$0$2$12$val|0)>(0);
 if ($5) {
  $6 = (+($$0$2$12$val|0));
  $7 = $6 / 3600.0;
  $$0 = $7;
 } else {
  $$0 = 1.0;
 }
 $8 = $0 / $$0;
 $9 = $8;
 HEAPF32[$4>>2] = $9;
 $10 = $1 / $$0;
 $11 = $10;
 $12 = ((($4)) + 4|0);
 HEAPF32[$12>>2] = $11;
 $13 = $2 / $$0;
 $14 = $13;
 $15 = ((($4)) + 8|0);
 HEAPF32[$15>>2] = $14;
 $16 = $3 / $$0;
 $17 = $16;
 $18 = ((($4)) + 12|0);
 HEAPF32[$18>>2] = $17;
 $19 = (_fwrite($4,4,4,$$0$4$10$val)|0);
 $20 = ($19>>>0)<(4);
 $spec$select = $20 ? 308 : 0;
 STACKTOP = sp;return ($spec$select|0);
}
function _saveepilog($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ((($0)) + 4216|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 1204|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$1>>2] = $5;
 $6 = (_fwrite($1,4,1,$3)|0);
 $7 = ($6|0)==(0);
 $8 = ((($0)) + 5076|0);
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$1>>2] = $9;
 $10 = (_fwrite($1,4,1,$3)|0);
 $11 = ($10|0)==(0);
 $12 = $11 | $7;
 HEAP32[$1>>2] = 516114521;
 $13 = (_fwrite($1,4,1,$3)|0);
 $14 = ($13|0)==(0);
 $15 = $14 | $12;
 $spec$select1 = $15 ? 308 : 0;
 STACKTOP = sp;return ($spec$select1|0);
}
function _openfiles($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $strlenfirst = 0, $strlenfirst1 = 0, $strlenfirst2 = 0, $strlenfirst4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 92|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 1200|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($0)) + 4216|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($0)) + 4220|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($0)) + 4224|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($0)) + 128|0);
 (_strncpy($9,$1,259)|0);
 $10 = ((($0)) + 1269|0);
 (_strncpy($10,$2,259)|0);
 $11 = ((($0)) + 3924|0);
 (_strncpy($11,$3,259)|0);
 $strlenfirst = HEAP8[$3>>0]|0;
 $12 = ($strlenfirst<<24>>24)==(0);
 $13 = ((($0)) + 4184|0);
 if ($12) {
  HEAP32[$13>>2] = 2;
  $14 = ((($0)) + 6096|0);
  (_strcpy($11,$14)|0);
 } else {
  HEAP32[$13>>2] = 1;
 }
 $strlenfirst1 = HEAP8[$1>>0]|0;
 $15 = ($strlenfirst1<<24>>24)==(0);
 if (!($15)) {
  $16 = (_strcomp($1,$2)|0);
  $17 = ($16|0)==(0);
  if (!($17)) {
   $$0 = 301;
   return ($$0|0);
  }
  $18 = (_strcomp($1,$3)|0);
  $19 = ($18|0)==(0);
  if (!($19)) {
   $$0 = 301;
   return ($$0|0);
  }
 }
 $strlenfirst2 = HEAP8[$3>>0]|0;
 $20 = ($strlenfirst2<<24>>24)==(0);
 if (!($20)) {
  $21 = (_strcomp($2,$3)|0);
  $22 = ($21|0)==(0);
  if (!($22)) {
   $$0 = 301;
   return ($$0|0);
  }
 }
 if (!($15)) {
  $23 = (_fopen($1,8704)|0);
  HEAP32[$4>>2] = $23;
  $24 = ($23|0)==(0|0);
  if ($24) {
   $$0 = 302;
   return ($$0|0);
  }
 }
 $strlenfirst4 = HEAP8[$2>>0]|0;
 $25 = ($strlenfirst4<<24>>24)==(0);
 if ($25) {
  HEAP32[$5>>2] = 2712;
 } else {
  $26 = (_fopen($2,11010)|0);
  HEAP32[$5>>2] = $26;
  $27 = ($26|0)==(0|0);
  if ($27) {
   $$0 = 303;
   return ($$0|0);
  }
 }
 _writelogo($0);
 $$0 = 0;
 return ($$0|0);
}
function _strcomp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$01 = 0, $$off = 0, $$off3 = 0, $$pre = 0, $$v = 0, $$v4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$pre = HEAP8[$0>>0]|0;
 $$01 = 0;$2 = $$pre;
 while(1) {
  $$off = (($2) + -97)<<24>>24;
  $3 = ($$off&255)<(26);
  $4 = $2 & -33;
  $$v = $3 ? $4 : $2;
  $5 = (($1) + ($$01)|0);
  $6 = HEAP8[$5>>0]|0;
  $$off3 = (($6) + -97)<<24>>24;
  $7 = ($$off3&255)<(26);
  $8 = $6 & -33;
  $$v4 = $7 ? $8 : $6;
  $9 = ($$v<<24>>24)==($$v4<<24>>24);
  if (!($9)) {
   $$0 = 0;
   label = 6;
   break;
  }
  $10 = (($$01) + 1)|0;
  $11 = (($0) + ($10)|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = ($12<<24>>24)==(0);
  if ($13) {
   $14 = (($1) + ($10)|0);
   $15 = HEAP8[$14>>0]|0;
   $16 = ($15<<24>>24)==(0);
   if ($16) {
    $$0 = 1;
    label = 6;
    break;
   }
  }
  $$01 = $10;$2 = $12;
 }
 if ((label|0) == 6) {
  return ($$0|0);
 }
 return (0)|0;
}
function _openhydfile($0) {
 $0 = $0|0;
 var $$0 = 0, $$pre = 0, $$pre1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp;
 $2 = sp + 28|0;
 $3 = sp + 24|0;
 $4 = HEAP32[$0>>2]|0;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 24|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($0)) + 20|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($0)) + 4220|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(0|0);
 $$pre1 = ((($0)) + 4188|0);
 do {
  if (!($15)) {
   $16 = HEAP32[$$pre1>>2]|0;
   $17 = ($16|0)==(2);
   if ($17) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   } else {
    _fclose($14);
    HEAP32[$13>>2] = 0;
    break;
   }
  }
 } while(0);
 HEAP32[$13>>2] = 0;
 $18 = HEAP32[$$pre1>>2]|0;
 switch ($18|0) {
 case 2:  {
  $19 = ((($0)) + 3664|0);
  $20 = ((($0)) + 5836|0);
  (_strcpy($19,$20)|0);
  $21 = (_fopen($19,8707)|0);
  HEAP32[$13>>2] = $21;
  $27 = $21;
  break;
 }
 case 1:  {
  $22 = ((($0)) + 3664|0);
  $23 = (_fopen($22,8707)|0);
  HEAP32[$13>>2] = $23;
  $27 = $23;
  break;
 }
 case 0:  {
  $24 = ((($0)) + 3664|0);
  $25 = (_fopen($24,12501)|0);
  HEAP32[$13>>2] = $25;
  $27 = $25;
  break;
 }
 default: {
  $$0 = 305;
  STACKTOP = sp;return ($$0|0);
 }
 }
 $26 = ($27|0)==(0|0);
 if ($26) {
  $$0 = 305;
  STACKTOP = sp;return ($$0|0);
 }
 $28 = HEAP32[$$pre1>>2]|0;
 $29 = ($28|0)==(0);
 if ($29) {
  label = 11;
 } else {
  HEAP32[$2>>2] = 516114521;
  HEAP32[$3>>2] = 201;
  HEAP32[$1>>2] = $4;
  $30 = ((($1)) + 4|0);
  HEAP32[$30>>2] = $8;
  $31 = ((($1)) + 8|0);
  HEAP32[$31>>2] = $6;
  $32 = ((($1)) + 12|0);
  HEAP32[$32>>2] = $12;
  $33 = ((($1)) + 16|0);
  HEAP32[$33>>2] = $10;
  $34 = ((($0)) + 1192|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = ((($1)) + 20|0);
  HEAP32[$36>>2] = $35;
  (_fwrite($2,4,1,$27)|0);
  $37 = HEAP32[$13>>2]|0;
  (_fwrite($3,4,1,$37)|0);
  $38 = HEAP32[$13>>2]|0;
  (_fwrite($1,4,6,$38)|0);
  $$pre = HEAP32[$$pre1>>2]|0;
  $phitmp = ($$pre|0)==(0);
  if ($phitmp) {
   label = 11;
  }
 }
 do {
  if ((label|0) == 11) {
   $39 = HEAP32[$13>>2]|0;
   (_fread($2,1,$39)|0);
   $40 = HEAP32[$2>>2]|0;
   $41 = ($40|0)==(516114521);
   if (!($41)) {
    $$0 = 306;
    STACKTOP = sp;return ($$0|0);
   }
   $42 = HEAP32[$13>>2]|0;
   (_fread($3,1,$42)|0);
   $43 = HEAP32[$3>>2]|0;
   $44 = ($43|0)==(201);
   if (!($44)) {
    $$0 = 306;
    STACKTOP = sp;return ($$0|0);
   }
   $45 = HEAP32[$13>>2]|0;
   $46 = (_fread($1,6,$45)|0);
   $47 = ($46>>>0)<(6);
   if ($47) {
    $$0 = 306;
    STACKTOP = sp;return ($$0|0);
   }
   $48 = HEAP32[$1>>2]|0;
   $49 = ($48|0)==($4|0);
   if (!($49)) {
    $$0 = 306;
    STACKTOP = sp;return ($$0|0);
   }
   $50 = ((($1)) + 4|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = ($51|0)==($8|0);
   if (!($52)) {
    $$0 = 306;
    STACKTOP = sp;return ($$0|0);
   }
   $53 = ((($1)) + 8|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = ($54|0)==($6|0);
   if (!($55)) {
    $$0 = 306;
    STACKTOP = sp;return ($$0|0);
   }
   $56 = ((($1)) + 12|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = ($57|0)==($12|0);
   if (!($58)) {
    $$0 = 306;
    STACKTOP = sp;return ($$0|0);
   }
   $59 = ((($1)) + 16|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = ($60|0)==($10|0);
   if (!($61)) {
    $$0 = 306;
    STACKTOP = sp;return ($$0|0);
   }
   $62 = ((($1)) + 20|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = ((($0)) + 1192|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = ($63|0)==($65|0);
   if ($66) {
    $67 = ((($0)) + 4192|0);
    HEAP32[$67>>2] = 1;
    break;
   } else {
    $$0 = 306;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $68 = HEAP32[$13>>2]|0;
 $69 = (_ftell($68)|0);
 $70 = ((($0)) + 4204|0);
 HEAP32[$70>>2] = $69;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _openoutfile($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _closeoutfile($0);
 $1 = ((($0)) + 3924|0);
 $2 = (_fopen($1,8707)|0);
 $3 = ((($0)) + 4216|0);
 HEAP32[$3>>2] = $2;
 $4 = ($2|0)==(0|0);
 if ($4) {
  $$0 = 304;
  return ($$0|0);
 }
 $5 = (_savenetdata($0)|0);
 $6 = HEAP32[$3>>2]|0;
 $7 = (_ftell($6)|0);
 $8 = ((($0)) + 4208|0);
 HEAP32[$8>>2] = $7;
 $9 = ($5|0)>(100);
 if ($9) {
  $15 = $5;
 } else {
  $10 = (_saveenergy($0)|0);
  $15 = $10;
 }
 $11 = HEAP32[$3>>2]|0;
 $12 = (_ftell($11)|0);
 $13 = ((($0)) + 4212|0);
 HEAP32[$13>>2] = $12;
 $14 = ($15|0)==(0);
 if (!($14)) {
  $$0 = $15;
  return ($$0|0);
 }
 $16 = ((($0)) + 1216|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(0);
 if (!($18)) {
  $19 = ((($0)) + 6356|0);
  $20 = (_fopen($19,8707)|0);
  $21 = ((($0)) + 4224|0);
  HEAP32[$21>>2] = $20;
  $22 = ($20|0)==(0|0);
  $spec$select = $22 ? 304 : 0;
  return ($spec$select|0);
 }
 $23 = HEAP32[$3>>2]|0;
 $24 = ((($0)) + 4224|0);
 HEAP32[$24>>2] = $23;
 $$0 = 0;
 return ($$0|0);
}
function _closeoutfile($0) {
 $0 = $0|0;
 var $$pre = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4224|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 4216|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2|0)==($4|0);
 if ($5) {
  $10 = $2;$8 = $2;
 } else {
  $6 = ($2|0)==(0|0);
  if ($6) {
   $10 = 0;$8 = $4;
  } else {
   _fclose($2);
   HEAP32[$1>>2] = 0;
   $$pre = HEAP32[$3>>2]|0;
   $10 = 0;$8 = $$pre;
  }
 }
 $7 = ($8|0)==(0|0);
 if ($7) {
  return;
 }
 $9 = ($8|0)==($10|0);
 if ($9) {
  HEAP32[$1>>2] = 0;
 }
 _fclose($8);
 HEAP32[$3>>2] = 0;
 return;
}
function _initpointers($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4260|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($0)) + 4256|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 4272|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($0)) + 4536|0);
 $5 = ((($0)) + 4276|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($0)) + 4480|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($0)) + 4484|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($0)) + 4488|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($0)) + 4824|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($0)) + 4828|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($0)) + 88|0);
 HEAP32[$11>>2] = 0;
 $12 = ((($0)) + 80|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($0)) + 84|0);
 HEAP32[$13>>2] = 0;
 $14 = ((($0)) + 4564|0);
 dest=$0; stop=dest+76|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;HEAP32[$4+16>>2]=0|0;
 ;HEAP32[$14>>2]=0|0;HEAP32[$14+4>>2]=0|0;HEAP32[$14+8>>2]=0|0;HEAP32[$14+12>>2]=0|0;HEAP32[$14+16>>2]=0|0;HEAP32[$14+20>>2]=0|0;
 _initrules($0);
 return;
}
function _allocdata($0) {
 $0 = $0|0;
 var $$01 = 0, $$12 = 0, $$3 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $or$cond = 0, $or$cond35 = 0, $or$cond36 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_hashtable_create()|0);
 $2 = ((($0)) + 80|0);
 HEAP32[$2>>2] = $1;
 $3 = (_hashtable_create()|0);
 $4 = ((($0)) + 84|0);
 HEAP32[$4>>2] = $3;
 $5 = HEAP32[$2>>2]|0;
 $6 = ($5|0)==(0|0);
 $7 = $6 ? 101 : 0;
 if ($6) {
  $$3 = $7;
  return ($$3|0);
 }
 $8 = ($3|0)==(0|0);
 if ($8) {
  $$3 = 101;
  return ($$3|0);
 }
 $9 = ((($0)) + 1060|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + 1)|0;
 $12 = (_calloc($11,96)|0);
 $13 = ((($0)) + 44|0);
 HEAP32[$13>>2] = $12;
 $14 = (_calloc($11,8)|0);
 $15 = ((($0)) + 4260|0);
 HEAP32[$15>>2] = $14;
 $16 = (_calloc($11,8)|0);
 $17 = ((($0)) + 4256|0);
 HEAP32[$17>>2] = $16;
 $18 = (_calloc($11,8)|0);
 $19 = ((($0)) + 4824|0);
 HEAP32[$19>>2] = $18;
 $20 = HEAP32[$13>>2]|0;
 $21 = ($20|0)==(0|0);
 $22 = $21 ? 101 : 0;
 if ($21) {
  $$3 = $22;
  return ($$3|0);
 }
 $23 = HEAP32[$15>>2]|0;
 $24 = ($23|0)==(0|0);
 if ($24) {
  $$3 = 101;
  return ($$3|0);
 }
 $25 = HEAP32[$17>>2]|0;
 $26 = ($25|0)==(0|0);
 $27 = ($18|0)==(0|0);
 $or$cond = $26 | $27;
 if ($or$cond) {
  $$3 = 101;
  return ($$3|0);
 }
 $28 = ((($0)) + 1064|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (($29) + 1)|0;
 $31 = (_calloc($30,128)|0);
 $32 = ((($0)) + 48|0);
 HEAP32[$32>>2] = $31;
 $33 = (_calloc($30,8)|0);
 $34 = ((($0)) + 4272|0);
 HEAP32[$34>>2] = $33;
 $35 = (_calloc($30,8)|0);
 $36 = ((($0)) + 4276|0);
 HEAP32[$36>>2] = $35;
 $37 = (_calloc($30,4)|0);
 $38 = ((($0)) + 4536|0);
 HEAP32[$38>>2] = $37;
 $39 = HEAP32[$32>>2]|0;
 $40 = ($39|0)==(0|0);
 $41 = $40 ? 101 : 0;
 if ($40) {
  $$3 = $41;
  return ($$3|0);
 }
 $42 = HEAP32[$34>>2]|0;
 $43 = ($42|0)==(0|0);
 if ($43) {
  $$3 = 101;
  return ($$3|0);
 }
 $44 = HEAP32[$36>>2]|0;
 $45 = ($44|0)==(0|0);
 $46 = ($37|0)==(0|0);
 $or$cond35 = $45 | $46;
 if ($or$cond35) {
  $$3 = 101;
  return ($$3|0);
 }
 $47 = ((($0)) + 1076|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = (($48) + 1)|0;
 $50 = (_calloc($49,120)|0);
 $51 = ((($0)) + 52|0);
 HEAP32[$51>>2] = $50;
 $52 = ((($0)) + 1080|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = (($53) + 1)|0;
 $55 = (_calloc($54,128)|0);
 $56 = ((($0)) + 56|0);
 HEAP32[$56>>2] = $55;
 $57 = ((($0)) + 1084|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = (($58) + 1)|0;
 $60 = (_calloc($59,4)|0);
 $61 = ((($0)) + 60|0);
 HEAP32[$61>>2] = $60;
 $62 = ((($0)) + 1088|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = (($63) + 1)|0;
 $65 = (_calloc($64,40)|0);
 $66 = ((($0)) + 72|0);
 HEAP32[$66>>2] = $65;
 $67 = HEAP32[$51>>2]|0;
 $68 = ($67|0)==(0|0);
 $69 = $68 ? 101 : 0;
 if ($68) {
  $$3 = $69;
  return ($$3|0);
 }
 $70 = HEAP32[$56>>2]|0;
 $71 = ($70|0)==(0|0);
 if ($71) {
  $$3 = 101;
  return ($$3|0);
 }
 $72 = HEAP32[$61>>2]|0;
 $73 = ($72|0)==(0|0);
 $74 = ($65|0)==(0|0);
 $or$cond36 = $73 | $74;
 if ($or$cond36) {
  $$3 = 101;
  return ($$3|0);
 }
 $$01 = 0;
 while(1) {
  $75 = HEAP32[$9>>2]|0;
  $76 = ($$01|0)>($75|0);
  if ($76) {
   break;
  }
  $77 = HEAP32[$13>>2]|0;
  $78 = (((($77) + (($$01*96)|0)|0)) + 56|0);
  HEAP32[$78>>2] = 0;
  $79 = HEAP32[$13>>2]|0;
  $80 = (((($79) + (($$01*96)|0)|0)) + 60|0);
  HEAP32[$80>>2] = 0;
  $81 = HEAP32[$13>>2]|0;
  $82 = (((($81) + (($$01*96)|0)|0)) + 92|0);
  HEAP32[$82>>2] = 0;
  $83 = (($$01) + 1)|0;
  $$01 = $83;
 }
 $$12 = 0;
 while(1) {
  $84 = HEAP32[$28>>2]|0;
  $85 = ($$12|0)>($84|0);
  if ($85) {
   break;
  }
  $86 = HEAP32[$32>>2]|0;
  $87 = (((($86) + ($$12<<7)|0)) + 112|0);
  HEAP32[$87>>2] = 0;
  $88 = HEAP32[$32>>2]|0;
  $89 = (((($88) + ($$12<<7)|0)) + 124|0);
  HEAP32[$89>>2] = 0;
  $90 = (($$12) + 1)|0;
  $$12 = $90;
 }
 $91 = (_allocrules($0)|0);
 $$3 = $91;
 return ($$3|0);
}
function _freedata($0) {
 $0 = $0|0;
 var $$0 = 0, $$1 = 0, $$2 = 0, $$3 = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4260|0);
 $2 = HEAP32[$1>>2]|0;
 _free($2);
 $3 = ((($0)) + 4256|0);
 $4 = HEAP32[$3>>2]|0;
 _free($4);
 $5 = ((($0)) + 4272|0);
 $6 = HEAP32[$5>>2]|0;
 _free($6);
 $7 = ((($0)) + 4276|0);
 $8 = HEAP32[$7>>2]|0;
 _free($8);
 $9 = ((($0)) + 4536|0);
 $10 = HEAP32[$9>>2]|0;
 _free($10);
 $11 = ((($0)) + 4824|0);
 $12 = HEAP32[$11>>2]|0;
 _free($12);
 _freeadjlists($0);
 $13 = ((($0)) + 44|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(0|0);
 if (!($15)) {
  $$0 = 1;
  while(1) {
   $16 = HEAP32[$0>>2]|0;
   $17 = ($$0|0)>($16|0);
   if ($17) {
    break;
   }
   $18 = HEAP32[$13>>2]|0;
   $19 = (($18) + (($$0*96)|0)|0);
   _freedemands($19);
   $20 = HEAP32[$13>>2]|0;
   $21 = (((($20) + (($$0*96)|0)|0)) + 60|0);
   $22 = HEAP32[$21>>2]|0;
   _free($22);
   $23 = HEAP32[$13>>2]|0;
   $24 = (((($23) + (($$0*96)|0)|0)) + 92|0);
   $25 = HEAP32[$24>>2]|0;
   _free($25);
   $26 = (($$0) + 1)|0;
   $$0 = $26;
  }
  $27 = HEAP32[$13>>2]|0;
  _free($27);
 }
 $28 = ((($0)) + 48|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)==(0|0);
 if ($30) {
  $40 = $29;
 } else {
  $31 = ((($0)) + 12|0);
  $$1 = 1;
  while(1) {
   $32 = HEAP32[$31>>2]|0;
   $33 = ($$1|0)>($32|0);
   if ($33) {
    break;
   }
   $34 = HEAP32[$28>>2]|0;
   $35 = (($34) + ($$1<<7)|0);
   _freelinkvertices($35);
   $36 = HEAP32[$28>>2]|0;
   $37 = (((($36) + ($$1<<7)|0)) + 124|0);
   $38 = HEAP32[$37>>2]|0;
   _free($38);
   $39 = (($$1) + 1)|0;
   $$1 = $39;
  }
  $$pre = HEAP32[$28>>2]|0;
  $40 = $$pre;
 }
 _free($40);
 $41 = ((($0)) + 52|0);
 $42 = HEAP32[$41>>2]|0;
 _free($42);
 $43 = ((($0)) + 56|0);
 $44 = HEAP32[$43>>2]|0;
 _free($44);
 $45 = ((($0)) + 60|0);
 $46 = HEAP32[$45>>2]|0;
 _free($46);
 $47 = ((($0)) + 72|0);
 $48 = HEAP32[$47>>2]|0;
 _free($48);
 $49 = ((($0)) + 64|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = ($50|0)==(0|0);
 if (!($51)) {
  $52 = ((($0)) + 36|0);
  $$2 = 0;
  while(1) {
   $53 = HEAP32[$52>>2]|0;
   $54 = ($$2|0)>($53|0);
   if ($54) {
    break;
   }
   $55 = HEAP32[$49>>2]|0;
   $56 = (((($55) + (($$2*44)|0)|0)) + 40|0);
   $57 = HEAP32[$56>>2]|0;
   _free($57);
   $58 = HEAP32[$49>>2]|0;
   $59 = (((($58) + (($$2*44)|0)|0)) + 32|0);
   $60 = HEAP32[$59>>2]|0;
   _free($60);
   $61 = (($$2) + 1)|0;
   $$2 = $61;
  }
  $62 = HEAP32[$49>>2]|0;
  _free($62);
 }
 $63 = ((($0)) + 68|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = ($64|0)==(0|0);
 if (!($65)) {
  $66 = ((($0)) + 40|0);
  $$3 = 1;
  while(1) {
   $67 = HEAP32[$66>>2]|0;
   $68 = ($$3|0)>($67|0);
   if ($68) {
    break;
   }
   $69 = HEAP32[$63>>2]|0;
   $70 = (((($69) + (($$3*56)|0)|0)) + 48|0);
   $71 = HEAP32[$70>>2]|0;
   _free($71);
   $72 = HEAP32[$63>>2]|0;
   $73 = (((($72) + (($$3*56)|0)|0)) + 52|0);
   $74 = HEAP32[$73>>2]|0;
   _free($74);
   $75 = HEAP32[$63>>2]|0;
   $76 = (((($75) + (($$3*56)|0)|0)) + 32|0);
   $77 = HEAP32[$76>>2]|0;
   _free($77);
   $78 = (($$3) + 1)|0;
   $$3 = $78;
  }
  $79 = HEAP32[$63>>2]|0;
  _free($79);
 }
 _freerules($0);
 $80 = ((($0)) + 80|0);
 $81 = HEAP32[$80>>2]|0;
 $82 = ($81|0)==(0|0);
 if (!($82)) {
  _hashtable_free($81);
 }
 $83 = ((($0)) + 84|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = ($84|0)==(0|0);
 if ($85) {
  return;
 }
 _hashtable_free($84);
 return;
}
function _freeadjlists($0) {
 $0 = $0|0;
 var $$0 = 0, $$0$in = 0, $$01 = 0, $$pn$pre = 0, $$pn2 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 88|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  return;
 }
 $$01 = 0;$$pn2 = $2;$11 = $2;
 while(1) {
  $4 = HEAP32[$0>>2]|0;
  $5 = ($$01|0)>($4|0);
  if ($5) {
   break;
  }
  $12 = $11;$6 = $$pn2;
  while(1) {
   $$0$in = (($6) + ($$01<<2)|0);
   $$0 = HEAP32[$$0$in>>2]|0;
   $7 = ($$0|0)==(0|0);
   if ($7) {
    break;
   }
   $8 = ((($$0)) + 8|0);
   $9 = HEAP32[$8>>2]|0;
   HEAP32[$$0$in>>2] = $9;
   _free($$0);
   $$pn$pre = HEAP32[$1>>2]|0;
   $12 = $$pn$pre;$6 = $$pn$pre;
  }
  $10 = (($$01) + 1)|0;
  $$01 = $10;$$pn2 = $6;$11 = $12;
 }
 _free($11);
 HEAP32[$1>>2] = 0;
 return;
}
function _freedemands($0) {
 $0 = $0|0;
 var $$in1 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 56|0);
 $2 = HEAP32[$1>>2]|0;
 $$in1 = $2;
 while(1) {
  $3 = ($$in1|0)==(0|0);
  if ($3) {
   break;
  }
  $4 = ((($$in1)) + 16|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($$in1)) + 12|0);
  $7 = HEAP32[$6>>2]|0;
  _free($7);
  _free($$in1);
  $$in1 = $5;
 }
 HEAP32[$1>>2] = 0;
 return;
}
function _freelinkvertices($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 112|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  return;
 }
 $4 = HEAP32[$2>>2]|0;
 _free($4);
 $5 = HEAP32[$1>>2]|0;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 _free($7);
 $8 = HEAP32[$1>>2]|0;
 _free($8);
 HEAP32[$1>>2] = 0;
 return;
}
function _finddemand($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)<(1);
 if ($2) {
  $$0 = 0;
  return ($$0|0);
 }
 $$01 = $0;$$02 = 1;
 while(1) {
  $3 = ($$01|0)==(0|0);
  $4 = ($$02|0)==($1|0);
  $or$cond = $3 | $4;
  if ($or$cond) {
   $$0 = $$01;
   break;
  }
  $5 = (($$02) + 1)|0;
  $6 = ((($$01)) + 16|0);
  $7 = HEAP32[$6>>2]|0;
  $$01 = $7;$$02 = $5;
 }
 return ($$0|0);
}
function _adddemand($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$01 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $strlenfirst = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (_malloc(24)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  $$0 = 0;
  return ($$0|0);
 }
 HEAPF64[$4>>3] = $1;
 $6 = ((($4)) + 8|0);
 HEAP32[$6>>2] = $2;
 $7 = ((($4)) + 12|0);
 HEAP32[$7>>2] = 0;
 $8 = ($3|0)==(0|0);
 if (!($8)) {
  $strlenfirst = HEAP8[$3>>0]|0;
  $9 = ($strlenfirst<<24>>24)==(0);
  if (!($9)) {
   (_xstrcpy($7,$3,31)|0);
  }
 }
 $10 = ((($4)) + 16|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($0)) + 56|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0|0);
 if ($13) {
  HEAP32[$11>>2] = $4;
  $$0 = 1;
  return ($$0|0);
 }
 $$01 = $12;
 while(1) {
  $14 = ((($$01)) + 16|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==(0|0);
  if ($16) {
   break;
  }
  $$01 = $15;
 }
 HEAP32[$14>>2] = $4;
 $$0 = 1;
 return ($$0|0);
}
function _xstrcpy($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$02 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1|0)==(0|0);
 if (!($3)) {
  $4 = (_strlen($1)|0);
  $5 = ($4>>>0)>($2>>>0);
  $spec$select = $5 ? $2 : $4;
  $6 = ($spec$select|0)==(0);
  if (!($6)) {
   $8 = HEAP32[$0>>2]|0;
   $9 = ($8|0)==(0|0);
   if ($9) {
    $$02 = 0;
   } else {
    $10 = (_strlen($8)|0);
    $$02 = $10;
   }
   $11 = ($spec$select>>>0)>($$02>>>0);
   $12 = (($spec$select) + 1)|0;
   if ($11) {
    $13 = (_realloc($8,$12)|0);
    HEAP32[$0>>2] = $13;
    $14 = $13;
   } else {
    $14 = $8;
   }
   (_strncpy($14,$1,$12)|0);
   $15 = HEAP32[$0>>2]|0;
   $$0 = $15;
   return ($$0|0);
  }
 }
 $7 = HEAP32[$0>>2]|0;
 _free($7);
 HEAP32[$0>>2] = 0;
 $$0 = 0;
 return ($$0|0);
}
function _addlinkvertex($0,$1,$2) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 112|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 do {
  if ($5) {
   $6 = (_malloc(16)|0);
   $7 = ($6|0)==(0|0);
   if ($7) {
    $$0 = 101;
    return ($$0|0);
   } else {
    $8 = ((($6)) + 8|0);
    HEAP32[$8>>2] = 0;
    $9 = ((($6)) + 12|0);
    HEAP32[$9>>2] = 5;
    $10 = (_calloc(5,8)|0);
    HEAP32[$6>>2] = $10;
    $11 = HEAP32[$9>>2]|0;
    $12 = (_calloc($11,8)|0);
    $13 = ((($6)) + 4|0);
    HEAP32[$13>>2] = $12;
    HEAP32[$3>>2] = $6;
    $15 = $6;
    break;
   }
  } else {
   $15 = $4;
  }
 } while(0);
 $14 = ((($15)) + 8|0);
 $16 = HEAP32[$14>>2]|0;
 $17 = ((($15)) + 12|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($16|0)<($18|0);
 if (!($19)) {
  $20 = (($18) + 5)|0;
  HEAP32[$17>>2] = $20;
  $21 = HEAP32[$15>>2]|0;
  $22 = $20 << 3;
  $23 = (_realloc($21,$22)|0);
  HEAP32[$15>>2] = $23;
  $24 = ((($15)) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = HEAP32[$17>>2]|0;
  $27 = $26 << 3;
  $28 = (_realloc($25,$27)|0);
  HEAP32[$24>>2] = $28;
 }
 $29 = HEAP32[$15>>2]|0;
 $30 = ($29|0)==(0|0);
 if ($30) {
  $$0 = 101;
  return ($$0|0);
 }
 $31 = ((($15)) + 4|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)==(0|0);
 if ($33) {
  $$0 = 101;
  return ($$0|0);
 }
 $34 = HEAP32[$14>>2]|0;
 $35 = (($29) + ($34<<3)|0);
 HEAPF64[$35>>3] = $1;
 $36 = HEAP32[$31>>2]|0;
 $37 = (($36) + ($34<<3)|0);
 HEAPF64[$37>>3] = $2;
 $38 = HEAP32[$14>>2]|0;
 $39 = (($38) + 1)|0;
 HEAP32[$14>>2] = $39;
 $$0 = 0;
 return ($$0|0);
}
function _buildadjlists($0) {
 $0 = $0|0;
 var $$0 = 0, $$01 = 0, $$03 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _freeadjlists($0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 1)|0;
 $3 = (_calloc($2,4)|0);
 $4 = ((($0)) + 88|0);
 HEAP32[$4>>2] = $3;
 $5 = ($3|0)==(0|0);
 if ($5) {
  $$0 = 101;
  return ($$0|0);
 }
 $$01 = 0;
 while(1) {
  $6 = HEAP32[$0>>2]|0;
  $7 = ($$01|0)>($6|0);
  if ($7) {
   break;
  }
  $8 = HEAP32[$4>>2]|0;
  $9 = (($8) + ($$01<<2)|0);
  HEAP32[$9>>2] = 0;
  $10 = (($$01) + 1)|0;
  $$01 = $10;
 }
 $11 = ((($0)) + 12|0);
 $12 = ((($0)) + 48|0);
 $$03 = 1;
 while(1) {
  $13 = HEAP32[$11>>2]|0;
  $14 = ($$03|0)>($13|0);
  if ($14) {
   $$0 = 0;
   label = 11;
   break;
  }
  $15 = HEAP32[$12>>2]|0;
  $16 = (((($15) + ($$03<<7)|0)) + 32|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (((($15) + ($$03<<7)|0)) + 36|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (_malloc(12)|0);
  $21 = ($20|0)==(0|0);
  if ($21) {
   break;
  }
  HEAP32[$20>>2] = $19;
  $22 = ((($20)) + 4|0);
  HEAP32[$22>>2] = $$03;
  $23 = HEAP32[$4>>2]|0;
  $24 = (($23) + ($17<<2)|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ((($20)) + 8|0);
  HEAP32[$26>>2] = $25;
  $27 = HEAP32[$4>>2]|0;
  $28 = (($27) + ($17<<2)|0);
  HEAP32[$28>>2] = $20;
  $29 = (_malloc(12)|0);
  $30 = ($29|0)==(0|0);
  if ($30) {
   break;
  }
  HEAP32[$29>>2] = $17;
  $31 = ((($29)) + 4|0);
  HEAP32[$31>>2] = $$03;
  $32 = HEAP32[$4>>2]|0;
  $33 = (($32) + ($19<<2)|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = ((($29)) + 8|0);
  HEAP32[$35>>2] = $34;
  $36 = HEAP32[$4>>2]|0;
  $37 = (($36) + ($19<<2)|0);
  HEAP32[$37>>2] = $29;
  $38 = (($$03) + 1)|0;
  $$03 = $38;
 }
 if ((label|0) == 11) {
  return ($$0|0);
 }
 _freeadjlists($0);
 $$0 = 101;
 return ($$0|0);
}
function _incontrols($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$01 = 0, $$01$in = 0, $$02 = 0, $$02$in = 0, $$04 = 0, $$1 = 0, $$1$in = 0, $$15 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($1|0)==(0);
 $6 = ((($0)) + 72|0);
 $7 = ($1|0)==(1);
 $$04 = 1;
 while(1) {
  $8 = ($$04|0)>($4|0);
  if ($8) {
   label = 8;
   break;
  }
  if ($5) {
   $9 = HEAP32[$6>>2]|0;
   $10 = (((($9) + (($$04*40)|0)|0)) + 4|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==($2|0);
   if ($12) {
    $$0 = 1;
    label = 25;
    break;
   }
  } else {
   if ($7) {
    $13 = HEAP32[$6>>2]|0;
    $14 = (($13) + (($$04*40)|0)|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ($15|0)==($2|0);
    if ($16) {
     $$0 = 1;
     label = 25;
     break;
    }
   }
  }
  $17 = (($$04) + 1)|0;
  $$04 = $17;
 }
 if ((label|0) == 8) {
  $18 = ((($0)) + 32|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($0)) + 76|0);
  $$15 = 1;
  L11: while(1) {
   $21 = ($$15|0)>($19|0);
   if ($21) {
    $$0 = 0;
    label = 25;
    break;
   }
   $spec$select = $5 ? 6 : 7;
   $22 = HEAP32[$20>>2]|0;
   $23 = (((($22) + (($$15*56)|0)|0)) + 40|0);
   $$02$in = $23;
   while(1) {
    $$02 = HEAP32[$$02$in>>2]|0;
    $24 = ($$02|0)==(0|0);
    if ($24) {
     break;
    }
    $25 = ((($$02)) + 4|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = ($spec$select|0)==($26|0);
    if ($27) {
     $28 = ((($$02)) + 8|0);
     $29 = HEAP32[$28>>2]|0;
     $30 = ($29|0)==($2|0);
     if ($30) {
      $$0 = 1;
      label = 25;
      break L11;
     }
    }
    $31 = ((($$02)) + 32|0);
    $$02$in = $31;
   }
   L21: do {
    if ($7) {
     $32 = (((($22) + (($$15*56)|0)|0)) + 44|0);
     $$01$in = $32;
     while(1) {
      $$01 = HEAP32[$$01$in>>2]|0;
      $33 = ($$01|0)==(0|0);
      if ($33) {
       break;
      }
      $34 = HEAP32[$$01>>2]|0;
      $35 = ($34|0)==($2|0);
      if ($35) {
       $$0 = 1;
       label = 25;
       break L11;
      }
      $36 = ((($$01)) + 16|0);
      $$01$in = $36;
     }
     $37 = (((($22) + (($$15*56)|0)|0)) + 48|0);
     $$1$in = $37;
     while(1) {
      $$1 = HEAP32[$$1$in>>2]|0;
      $38 = ($$1|0)==(0|0);
      if ($38) {
       break L21;
      }
      $39 = HEAP32[$$1>>2]|0;
      $40 = ($39|0)==($2|0);
      if ($40) {
       $$0 = 1;
       label = 25;
       break L11;
      }
      $41 = ((($$1)) + 16|0);
      $$1$in = $41;
     }
    }
   } while(0);
   $42 = (($$15) + 1)|0;
   $$15 = $42;
  }
  if ((label|0) == 25) {
   return ($$0|0);
  }
 }
 else if ((label|0) == 25) {
  return ($$0|0);
 }
 return (0)|0;
}
function _valvecheck($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$01 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond23 = 0, $or$cond24 = 0, $or$cond25 = 0;
 var $or$cond26 = 0, $or$cond27 = 0, $or$cond28 = 0, $or$cond31 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ($2|0)==(3);
 switch ($2|0) {
 case 3: case 4: case 6:  {
  break;
 }
 default: {
  $$0 = 0;
  return ($$0|0);
 }
 }
 $6 = ((($0)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)<($3|0);
 $9 = ($7|0)<($4|0);
 $or$cond31 = $8 | $9;
 if ($or$cond31) {
  $$0 = 219;
  return ($$0|0);
 }
 $10 = ((($0)) + 24|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($0)) + 60|0);
 $13 = ((($0)) + 48|0);
 $14 = ($2|0)==(4);
 $15 = ($2|0)==(6);
 $$01 = 1;
 L7: while(1) {
  $16 = ($$01|0)>($11|0);
  if ($16) {
   $$0 = 0;
   label = 21;
   break;
  }
  $17 = HEAP32[$12>>2]|0;
  $18 = (($17) + ($$01<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19|0)==($1|0);
  L10: do {
   if (!($20)) {
    $21 = HEAP32[$13>>2]|0;
    $22 = (((($21) + ($19<<7)|0)) + 32|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = (((($21) + ($19<<7)|0)) + 36|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = (((($21) + ($19<<7)|0)) + 104|0);
    $27 = HEAP32[$26>>2]|0;
    switch ($27|0) {
    case 3:  {
     if ($5) {
      $28 = ($25|0)==($4|0);
      $29 = ($25|0)==($3|0);
      $or$cond27 = $28 | $29;
      $30 = ($23|0)==($4|0);
      $or$cond28 = $or$cond27 | $30;
      if ($or$cond28) {
       $$0 = 220;
       label = 21;
       break L7;
      } else {
       break L10;
      }
     }
     $35 = ($25|0)==($3|0);
     if ($14) {
      if ($35) {
       $$0 = 220;
       label = 21;
       break L7;
      } else {
       break L10;
      }
     } else {
      $or$cond26 = $15 & $35;
      if ($or$cond26) {
       $$0 = 220;
       label = 21;
       break L7;
      } else {
       break L10;
      }
     }
     break;
    }
    case 4:  {
     if ($14) {
      $31 = ($23|0)==($3|0);
      $32 = ($23|0)==($4|0);
      $or$cond24 = $31 | $32;
      $33 = ($25|0)==($3|0);
      $or$cond25 = $or$cond24 | $33;
      if ($or$cond25) {
       $$0 = 220;
       label = 21;
       break L7;
      } else {
       break L10;
      }
     }
     $34 = ($23|0)==($4|0);
     if ($5) {
      if ($34) {
       $$0 = 220;
       label = 21;
       break L7;
      } else {
       break L10;
      }
     } else {
      $or$cond23 = $15 & $34;
      if ($or$cond23) {
       $$0 = 220;
       label = 21;
       break L7;
      } else {
       break L10;
      }
     }
     break;
    }
    case 6:  {
     if ($14) {
      $36 = ($25|0)==($3|0);
      if ($36) {
       $$0 = 220;
       label = 21;
       break L7;
      } else {
       break L10;
      }
     } else {
      $37 = ($23|0)==($4|0);
      $or$cond = $5 & $37;
      if ($or$cond) {
       $$0 = 220;
       label = 21;
       break L7;
      } else {
       break L10;
      }
     }
     break;
    }
    default: {
     break L10;
    }
    }
   }
  } while(0);
  $38 = (($$01) + 1)|0;
  $$01 = $38;
 }
 if ((label|0) == 21) {
  return ($$0|0);
 }
 return (0)|0;
}
function _findnode($$0$20$val,$0) {
 $$0$20$val = $$0$20$val|0;
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_hashtable_find($$0$20$val,$0)|0);
 return ($1|0);
}
function _findlink($$0$21$val,$0) {
 $$0$21$val = $$0$21$val|0;
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_hashtable_find($$0$21$val,$0)|0);
 return ($1|0);
}
function _findtank($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$01 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 52|0);
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $$01 = 1;
 while(1) {
  $5 = ($$01|0)>($4|0);
  if ($5) {
   $$0 = 0;
   label = 5;
   break;
  }
  $6 = HEAP32[$2>>2]|0;
  $7 = (($6) + (($$01*120)|0)|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==($1|0);
  if ($9) {
   $$0 = $$01;
   label = 5;
   break;
  }
  $10 = (($$01) + 1)|0;
  $$01 = $10;
 }
 if ((label|0) == 5) {
  return ($$0|0);
 }
 return (0)|0;
}
function _findpump($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$01 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 56|0);
 $3 = ((($0)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $$01 = 1;
 while(1) {
  $5 = ($$01|0)>($4|0);
  if ($5) {
   $$0 = 0;
   label = 5;
   break;
  }
  $6 = HEAP32[$2>>2]|0;
  $7 = (($6) + ($$01<<7)|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==($1|0);
  if ($9) {
   $$0 = $$01;
   label = 5;
   break;
  }
  $10 = (($$01) + 1)|0;
  $$01 = $10;
 }
 if ((label|0) == 5) {
  return ($$0|0);
 }
 return (0)|0;
}
function _findvalve($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$01 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 60|0);
 $3 = ((($0)) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $$01 = 1;
 while(1) {
  $5 = ($$01|0)>($4|0);
  if ($5) {
   $$0 = 0;
   label = 5;
   break;
  }
  $6 = HEAP32[$2>>2]|0;
  $7 = (($6) + ($$01<<2)|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==($1|0);
  if ($9) {
   $$0 = $$01;
   label = 5;
   break;
  }
  $10 = (($$01) + 1)|0;
  $$01 = $10;
 }
 if ((label|0) == 5) {
  return ($$0|0);
 }
 return (0)|0;
}
function _findpattern($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$01 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 64|0);
 $3 = ((($0)) + 36|0);
 $4 = HEAP32[$3>>2]|0;
 $$01 = 0;
 while(1) {
  $5 = ($$01|0)>($4|0);
  if ($5) {
   $$0 = -1;
   label = 5;
   break;
  }
  $6 = HEAP32[$2>>2]|0;
  $7 = (($6) + (($$01*44)|0)|0);
  $8 = (_strcmp($1,$7)|0);
  $9 = ($8|0)==(0);
  if ($9) {
   $$0 = $$01;
   label = 5;
   break;
  }
  $10 = (($$01) + 1)|0;
  $$01 = $10;
 }
 if ((label|0) == 5) {
  return ($$0|0);
 }
 return (0)|0;
}
function _findcurve($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$01 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 68|0);
 $3 = ((($0)) + 40|0);
 $4 = HEAP32[$3>>2]|0;
 $$01 = 1;
 while(1) {
  $5 = ($$01|0)>($4|0);
  if ($5) {
   $$0 = 0;
   label = 5;
   break;
  }
  $6 = HEAP32[$2>>2]|0;
  $7 = (($6) + (($$01*56)|0)|0);
  $8 = (_strcmp($1,$7)|0);
  $9 = ($8|0)==(0);
  if ($9) {
   $$0 = $$01;
   label = 5;
   break;
  }
  $10 = (($$01) + 1)|0;
  $$01 = $10;
 }
 if ((label|0) == 5) {
  return ($$0|0);
 }
 return (0)|0;
}
function _adjustpattern($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ($2|0)==($1|0);
 if ($3) {
  HEAP32[$0>>2] = 0;
  return;
 }
 $4 = ($2|0)>($1|0);
 if (!($4)) {
  return;
 }
 $5 = (($2) + -1)|0;
 HEAP32[$0>>2] = $5;
 return;
}
function _adjustpatterns($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$0$in = 0, $$01 = 0, $$1 = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 44|0);
 $$01 = 1;
 while(1) {
  $3 = HEAP32[$0>>2]|0;
  $4 = ($$01|0)>($3|0);
  if ($4) {
   break;
  }
  $5 = HEAP32[$2>>2]|0;
  $6 = (((($5) + (($$01*96)|0)|0)) + 56|0);
  $$0$in = $6;
  while(1) {
   $$0 = HEAP32[$$0$in>>2]|0;
   $7 = ($$0|0)==(0|0);
   if ($7) {
    break;
   }
   $8 = ((($$0)) + 8|0);
   _adjustpattern($8,$1);
   $9 = ((($$0)) + 16|0);
   $$0$in = $9;
  }
  $10 = HEAP32[$2>>2]|0;
  $11 = (((($10) + (($$01*96)|0)|0)) + 60|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==(0|0);
  if (!($13)) {
   $14 = ((($12)) + 8|0);
   _adjustpattern($14,$1);
  }
  $15 = (($$01) + 1)|0;
  $$01 = $15;
 }
 $16 = ((($0)) + 4|0);
 $17 = ((($0)) + 52|0);
 $$1 = 1;
 while(1) {
  $18 = HEAP32[$16>>2]|0;
  $19 = ($$1|0)>($18|0);
  if ($19) {
   break;
  }
  $20 = HEAP32[$17>>2]|0;
  $21 = (((($20) + (($$1*120)|0)|0)) + 88|0);
  _adjustpattern($21,$1);
  $22 = (($$1) + 1)|0;
  $$1 = $22;
 }
 $23 = ((($0)) + 20|0);
 $24 = ((($0)) + 56|0);
 $$2 = 1;
 while(1) {
  $25 = HEAP32[$23>>2]|0;
  $26 = ($$2|0)>($25|0);
  if ($26) {
   break;
  }
  $27 = HEAP32[$24>>2]|0;
  $28 = (((($27) + ($$2<<7)|0)) + 64|0);
  _adjustpattern($28,$1);
  $29 = HEAP32[$24>>2]|0;
  $30 = (((($29) + ($$2<<7)|0)) + 68|0);
  _adjustpattern($30,$1);
  $31 = (($$2) + 1)|0;
  $$2 = $31;
 }
 return;
}
function _adjustcurve($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ($2|0)==($1|0);
 if ($3) {
  HEAP32[$0>>2] = 0;
  return;
 }
 $4 = ($2|0)>($1|0);
 if (!($4)) {
  return;
 }
 $5 = (($2) + -1)|0;
 HEAP32[$0>>2] = $5;
 return;
}
function _adjustcurves($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$1 = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = ((($0)) + 4|0);
 $4 = ((($0)) + 52|0);
 $$0 = 1;
 while(1) {
  $5 = HEAP32[$3>>2]|0;
  $6 = ($$0|0)>($5|0);
  if ($6) {
   break;
  }
  $7 = HEAP32[$4>>2]|0;
  $8 = (((($7) + (($$0*120)|0)|0)) + 92|0);
  _adjustcurve($8,$1);
  $9 = (($$0) + 1)|0;
  $$0 = $9;
 }
 $10 = ((($0)) + 20|0);
 $11 = ((($0)) + 56|0);
 $$1 = 1;
 while(1) {
  $12 = HEAP32[$10>>2]|0;
  $13 = ($$1|0)>($12|0);
  if ($13) {
   break;
  }
  $14 = HEAP32[$11>>2]|0;
  $15 = (((($14) + ($$1<<7)|0)) + 56|0);
  _adjustcurve($15,$1);
  $16 = HEAP32[$11>>2]|0;
  $17 = (((($16) + ($$1<<7)|0)) + 60|0);
  _adjustcurve($17,$1);
  $18 = (($$1) + 1)|0;
  $$1 = $18;
 }
 $19 = ((($0)) + 24|0);
 $20 = ((($0)) + 60|0);
 $21 = ((($0)) + 48|0);
 $$2 = 1;
 while(1) {
  $22 = HEAP32[$19>>2]|0;
  $23 = ($$2|0)>($22|0);
  if ($23) {
   break;
  }
  $24 = HEAP32[$20>>2]|0;
  $25 = (($24) + ($$2<<2)|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = HEAP32[$21>>2]|0;
  $28 = (((($27) + ($26<<7)|0)) + 104|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ($29|0)==(8);
  if ($30) {
   $31 = (((($27) + ($26<<7)|0)) + 56|0);
   $32 = +HEAPF64[$31>>3];
   $33 = (~~(($32)));
   HEAP32[$2>>2] = $33;
   _adjustcurve($2,$1);
   $34 = HEAP32[$2>>2]|0;
   $35 = (+($34|0));
   $36 = HEAP32[$21>>2]|0;
   $37 = (((($36) + ($26<<7)|0)) + 56|0);
   HEAPF64[$37>>3] = $35;
  }
  $38 = (($$2) + 1)|0;
  $$2 = $38;
 }
 STACKTOP = sp;return;
}
function _adjustpumpparams($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0;
 var $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 20|0);
 $3 = ((($0)) + 56|0);
 $4 = ((($0)) + 4920|0);
 $5 = ((($0)) + 4960|0);
 $$0 = 0;$$01 = 1;
 while(1) {
  $6 = HEAP32[$2>>2]|0;
  $7 = ($$01|0)>($6|0);
  if ($7) {
   $$2 = $$0;
   label = 9;
   break;
  }
  $8 = HEAP32[$3>>2]|0;
  $9 = (((($8) + ($$01<<7)|0)) + 56|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==($1|0);
  if ($11) {
   $12 = (((($8) + ($$01<<7)|0)) + 4|0);
   HEAP32[$12>>2] = 3;
   $13 = (_updatepumpparams($0,$1)|0);
   $14 = ($13|0)>(0);
   if ($14) {
    $$2 = $13;
    label = 9;
    break;
   }
   $15 = HEAP32[$12>>2]|0;
   $16 = ($15|0)==(1);
   if ($16) {
    $17 = +HEAPF64[$4>>3];
    $18 = (((($8) + ($$01<<7)|0)) + 32|0);
    $19 = +HEAPF64[$18>>3];
    $20 = $19 / $17;
    HEAPF64[$18>>3] = $20;
    $21 = +HEAPF64[$5>>3];
    $22 = (((($8) + ($$01<<7)|0)) + 48|0);
    $23 = +HEAPF64[$22>>3];
    $24 = (+Math_pow((+$21),(+$23)));
    $25 = +HEAPF64[$4>>3];
    $26 = $24 / $25;
    $27 = (((($8) + ($$01<<7)|0)) + 40|0);
    $28 = +HEAPF64[$27>>3];
    $29 = $28 * $26;
    HEAPF64[$27>>3] = $29;
   }
   $30 = +HEAPF64[$5>>3];
   $31 = (((($8) + ($$01<<7)|0)) + 8|0);
   $32 = +HEAPF64[$31>>3];
   $33 = $32 / $30;
   HEAPF64[$31>>3] = $33;
   $34 = +HEAPF64[$5>>3];
   $35 = (((($8) + ($$01<<7)|0)) + 16|0);
   $36 = +HEAPF64[$35>>3];
   $37 = $36 / $34;
   HEAPF64[$35>>3] = $37;
   $38 = +HEAPF64[$4>>3];
   $39 = (((($8) + ($$01<<7)|0)) + 24|0);
   $40 = +HEAPF64[$39>>3];
   $41 = $40 / $38;
   HEAPF64[$39>>3] = $41;
   $$1 = $13;
  } else {
   $$1 = $$0;
  }
  $42 = (($$01) + 1)|0;
  $$0 = $$1;$$01 = $42;
 }
 if ((label|0) == 9) {
  return ($$2|0);
 }
 return (0)|0;
}
function _resizecurve($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 44|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<($1|0);
 if (!($4)) {
  $$0 = 0;
  return ($$0|0);
 }
 $5 = ((($0)) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $1 << 3;
 $8 = (_realloc($6,$7)|0);
 $9 = ($8|0)==(0|0);
 if ($9) {
  $$0 = 101;
  return ($$0|0);
 }
 $10 = ((($0)) + 52|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (_realloc($11,$7)|0);
 $13 = ($12|0)==(0|0);
 if ($13) {
  _free($8);
  $$0 = 101;
  return ($$0|0);
 } else {
  HEAP32[$5>>2] = $8;
  HEAP32[$10>>2] = $12;
  HEAP32[$2>>2] = $1;
  $$0 = 0;
  return ($$0|0);
 }
 return (0)|0;
}
function _namevalid($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strlen($0)|0);
 $2 = (($1) + -1)|0;
 $3 = ($2>>>0)>(30);
 if ($3) {
  return 0;
 }
 $4 = (_strpbrk($0)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  $6 = HEAP8[$0>>0]|0;
  $7 = ($6<<24>>24)!=(34);
  $spec$select = $7&1;
  return ($spec$select|0);
 } else {
  return 0;
 }
 return (0)|0;
}
function _getTmpName($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 (_strcpy($0,8714)|0);
 $1 = (_mkstemp($0)|0);
 $2 = (___fdopen($1,11008)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  (_strcpy($0,21208)|0);
  _remove($0);
  return;
 } else {
  _fclose($2);
  _remove($0);
  return;
 }
}
function _interp($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 var $$0 = 0.0, $$01 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0;
 var $28 = 0.0, $29 = 0, $30 = 0, $31 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (($0) + -1)|0;
 $5 = +HEAPF64[$1>>3];
 $6 = !($5 >= $3);
 if (!($6)) {
  $7 = +HEAPF64[$2>>3];
  $$0 = $7;
  return (+$$0);
 }
 $$01 = 1;
 while(1) {
  $8 = ($$01|0)<($0|0);
  if (!($8)) {
   label = 9;
   break;
  }
  $9 = (($1) + ($$01<<3)|0);
  $10 = +HEAPF64[$9>>3];
  $11 = !($10 >= $3);
  if (!($11)) {
   break;
  }
  $29 = (($$01) + 1)|0;
  $$01 = $29;
 }
 if ((label|0) == 9) {
  $30 = (($2) + ($4<<3)|0);
  $31 = +HEAPF64[$30>>3];
  $$0 = $31;
  return (+$$0);
 }
 $12 = (($$01) + -1)|0;
 $13 = (($1) + ($12<<3)|0);
 $14 = +HEAPF64[$13>>3];
 $15 = $10 - $14;
 $16 = (($2) + ($$01<<3)|0);
 $17 = +HEAPF64[$16>>3];
 $18 = $15 < 0.0;
 $19 = - $15;
 $20 = $18 ? $19 : $15;
 $21 = $20 < 9.9999999999999995E-7;
 if ($21) {
  $$0 = $17;
  return (+$$0);
 }
 $22 = (($2) + ($12<<3)|0);
 $23 = +HEAPF64[$22>>3];
 $24 = $17 - $23;
 $25 = $10 - $3;
 $26 = $25 * $24;
 $27 = $26 / $15;
 $28 = $17 - $27;
 $$0 = $28;
 return (+$$0);
}
function _geterrmsg($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 do {
  switch ($0|0) {
  case 0:  {
   (_strcpy($1,8723)|0);
   break;
  }
  case 101:  {
   (_strcpy($1,8726)|0);
   break;
  }
  case 102:  {
   (_strcpy($1,8756)|0);
   break;
  }
  case 103:  {
   (_strcpy($1,8782)|0);
   break;
  }
  case 104:  {
   (_strcpy($1,8810)|0);
   break;
  }
  case 105:  {
   (_strcpy($1,8851)|0);
   break;
  }
  case 106:  {
   (_strcpy($1,8883)|0);
   break;
  }
  case 107:  {
   (_strcpy($1,8913)|0);
   break;
  }
  case 108:  {
   (_strcpy($1,8952)|0);
   break;
  }
  case 110:  {
   (_strcpy($1,9011)|0);
   break;
  }
  case 120:  {
   (_strcpy($1,9052)|0);
   break;
  }
  case 200:  {
   (_strcpy($1,9099)|0);
   break;
  }
  case 201:  {
   (_strcpy($1,9132)|0);
   break;
  }
  case 202:  {
   (_strcpy($1,9145)|0);
   break;
  }
  case 203:  {
   (_strcpy($1,9167)|0);
   break;
  }
  case 204:  {
   (_strcpy($1,9182)|0);
   break;
  }
  case 205:  {
   (_strcpy($1,9197)|0);
   break;
  }
  case 206:  {
   (_strcpy($1,9220)|0);
   break;
  }
  case 207:  {
   (_strcpy($1,9236)|0);
   break;
  }
  case 208:  {
   (_strcpy($1,9267)|0);
   break;
  }
  case 209:  {
   (_strcpy($1,9295)|0);
   break;
  }
  case 211:  {
   (_strcpy($1,9323)|0);
   break;
  }
  case 212:  {
   (_strcpy($1,9351)|0);
   break;
  }
  case 213:  {
   (_strcpy($1,9372)|0);
   break;
  }
  case 214:  {
   (_strcpy($1,9393)|0);
   break;
  }
  case 215:  {
   (_strcpy($1,9427)|0);
   break;
  }
  case 216:  {
   (_strcpy($1,9446)|0);
   break;
  }
  case 217:  {
   (_strcpy($1,9474)|0);
   break;
  }
  case 219:  {
   (_strcpy($1,9499)|0);
   break;
  }
  case 220:  {
   (_strcpy($1,9537)|0);
   break;
  }
  case 221:  {
   (_strcpy($1,9579)|0);
   break;
  }
  case 222:  {
   (_strcpy($1,9624)|0);
   break;
  }
  case 223:  {
   (_strcpy($1,9658)|0);
   break;
  }
  case 224:  {
   (_strcpy($1,9686)|0);
   break;
  }
  case 225:  {
   (_strcpy($1,9720)|0);
   break;
  }
  case 226:  {
   (_strcpy($1,9756)|0);
   break;
  }
  case 227:  {
   (_strcpy($1,9795)|0);
   break;
  }
  case 230:  {
   (_strcpy($1,9823)|0);
   break;
  }
  case 233:  {
   (_strcpy($1,9856)|0);
   break;
  }
  case 240:  {
   (_strcpy($1,9885)|0);
   break;
  }
  case 241:  {
   (_strcpy($1,9904)|0);
   break;
  }
  case 250:  {
   (_strcpy($1,9924)|0);
   break;
  }
  case 251:  {
   (_strcpy($1,9939)|0);
   break;
  }
  case 252:  {
   (_strcpy($1,9962)|0);
   break;
  }
  case 253:  {
   (_strcpy($1,9978)|0);
   break;
  }
  case 254:  {
   (_strcpy($1,10006)|0);
   break;
  }
  case 255:  {
   (_strcpy($1,10031)|0);
   break;
  }
  case 257:  {
   (_strcpy($1,10051)|0);
   break;
  }
  case 258:  {
   (_strcpy($1,10068)|0);
   break;
  }
  case 259:  {
   (_strcpy($1,10092)|0);
   break;
  }
  case 260:  {
   (_strcpy($1,10154)|0);
   break;
  }
  case 261:  {
   (_strcpy($1,10202)|0);
   break;
  }
  case 262:  {
   (_strcpy($1,10258)|0);
   break;
  }
  case 301:  {
   (_strcpy($1,10317)|0);
   break;
  }
  case 302:  {
   (_strcpy($1,10338)|0);
   break;
  }
  case 303:  {
   (_strcpy($1,10361)|0);
   break;
  }
  case 304:  {
   (_strcpy($1,10385)|0);
   break;
  }
  case 305:  {
   (_strcpy($1,10416)|0);
   break;
  }
  case 306:  {
   (_strcpy($1,10444)|0);
   break;
  }
  case 307:  {
   (_strcpy($1,10488)|0);
   break;
  }
  case 308:  {
   (_strcpy($1,10516)|0);
   break;
  }
  case 309:  {
   (_strcpy($1,10544)|0);
   break;
  }
  default: {
   (_strcpy($1,21208)|0);
  }
  }
 } while(0);
 return ($1|0);
}
function _errmsg($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(272|0);
 $vararg_buffer = sp + 256|0;
 $2 = sp;
 _memset(($2|0),0,256)|0;
 $3 = ($1|0)==(309);
 if ($3) {
  STACKTOP = sp;return;
 }
 $4 = ((($0)) + 1200|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  STACKTOP = sp;return;
 }
 $7 = ((($0)) + 1224|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0);
 $10 = ($1|0)>(100);
 $or$cond = $9 & $10;
 if (!($or$cond)) {
  STACKTOP = sp;return;
 }
 $11 = ((($0)) + 5080|0);
 $12 = (_geterrmsg($1,$2)|0);
 HEAP32[$vararg_buffer>>2] = $1;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $12;
 _sprintf($11,10579,$vararg_buffer);
 _writeline($0,$11);
 STACKTOP = sp;return;
}
function _writewin($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $2 = sp;
 $3 = ($0|0)==(0|0);
 if ($3) {
  STACKTOP = sp;return;
 }
 (_strncpy($2,$1,255)|0);
 FUNCTION_TABLE_vi[$0 & 31]($2);
 STACKTOP = sp;return;
}
function _openqual($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4600|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  $$0 = 0;
  return ($$0|0);
 }
 $4 = ((($0)) + 88|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = (_buildadjlists($0)|0);
  $8 = ($7|0)==(0);
  if (!($8)) {
   $$0 = $7;
   return ($$0|0);
  }
 }
 $9 = ((($0)) + 4612|0);
 HEAP32[$9>>2] = 0;
 $10 = (_mempool_create()|0);
 $11 = ((($0)) + 4832|0);
 HEAP32[$11>>2] = $10;
 $12 = ($10|0)==(0|0);
 $spec$select = $12 ? 101 : 0;
 $13 = ((($0)) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + 1)|0;
 $16 = (_calloc($15,4)|0);
 $17 = ((($0)) + 4848|0);
 HEAP32[$17>>2] = $16;
 $18 = (_calloc($15,8)|0);
 $19 = ((($0)) + 4828|0);
 HEAP32[$19>>2] = $18;
 $20 = HEAP32[$13>>2]|0;
 $21 = ((($0)) + 4|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($20) + ($22))|0;
 $24 = (($23) + 1)|0;
 $25 = (_calloc($24,4)|0);
 $26 = ((($0)) + 4840|0);
 HEAP32[$26>>2] = $25;
 $27 = (_calloc($24,4)|0);
 $28 = ((($0)) + 4844|0);
 HEAP32[$28>>2] = $27;
 $29 = (_calloc($24,4)|0);
 $30 = ((($0)) + 4620|0);
 HEAP32[$30>>2] = $29;
 if ($12) {
  $$0 = $spec$select;
  return ($$0|0);
 }
 $31 = HEAP32[$17>>2]|0;
 $32 = ($31|0)==(0|0);
 if ($32) {
  $$0 = 101;
  return ($$0|0);
 }
 $33 = HEAP32[$19>>2]|0;
 $34 = ($33|0)==(0|0);
 if ($34) {
  $$0 = 101;
  return ($$0|0);
 }
 $35 = HEAP32[$26>>2]|0;
 $36 = ($35|0)==(0|0);
 if ($36) {
  $$0 = 101;
  return ($$0|0);
 }
 $37 = HEAP32[$28>>2]|0;
 $38 = ($37|0)==(0|0);
 if ($38) {
  $$0 = 101;
  return ($$0|0);
 }
 $39 = ($29|0)==(0|0);
 $40 = $39 ? 101 : 0;
 $$0 = $40;
 return ($$0|0);
}
function _initqual($0) {
 $0 = $0|0;
 var $$01 = 0, $$1 = 0, $$2 = 0, $$sink = 0.0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0, $84 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4524|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = ((($0)) + 4220|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($0)) + 4204|0);
  $7 = HEAP32[$6>>2]|0;
  _fseek($5,$7,0);
 }
 $8 = ((($0)) + 1184|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($0)) + 1172|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($0)) + 1164|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($0)) + 1168|0);
 HEAP32[$12>>2] = $11;
 $13 = ((($0)) + 1204|0);
 HEAP32[$13>>2] = 0;
 $14 = ((($0)) + 4600|0);
 $15 = ((($0)) + 4824|0);
 $16 = ((($0)) + 44|0);
 $$01 = 1;
 while(1) {
  $17 = HEAP32[$0>>2]|0;
  $18 = ($$01|0)>($17|0);
  $19 = HEAP32[$14>>2]|0;
  if ($18) {
   break;
  }
  $20 = ($19|0)==(3);
  if ($20) {
   $21 = HEAP32[$15>>2]|0;
   $22 = (($21) + ($$01<<3)|0);
   HEAPF64[$22>>3] = 0.0;
  } else {
   $23 = HEAP32[$16>>2]|0;
   $24 = (((($23) + (($$01*96)|0)|0)) + 64|0);
   $25 = +HEAPF64[$24>>3];
   $26 = HEAP32[$15>>2]|0;
   $27 = (($26) + ($$01<<3)|0);
   HEAPF64[$27>>3] = $25;
  }
  $28 = HEAP32[$16>>2]|0;
  $29 = (((($28) + (($$01*96)|0)|0)) + 60|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($30|0)==(0|0);
  if (!($31)) {
   $32 = ((($30)) + 16|0);
   HEAPF64[$32>>3] = 0.0;
  }
  $33 = (($$01) + 1)|0;
  $$01 = $33;
 }
 $34 = ($19|0)==(0);
 if ($34) {
  return;
 }
 $35 = ((($0)) + 4|0);
 $36 = ((($0)) + 52|0);
 $$1 = 1;
 while(1) {
  $37 = HEAP32[$35>>2]|0;
  $38 = ($$1|0)>($37|0);
  if ($38) {
   break;
  }
  $39 = HEAP32[$15>>2]|0;
  $40 = HEAP32[$36>>2]|0;
  $41 = (($40) + (($$1*120)|0)|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = (($39) + ($42<<3)|0);
  $44 = +HEAPF64[$43>>3];
  $45 = (((($40) + (($$1*120)|0)|0)) + 80|0);
  HEAPF64[$45>>3] = $44;
  $46 = (($$1) + 1)|0;
  $$1 = $46;
 }
 $47 = HEAP32[$14>>2]|0;
 $48 = ($47|0)==(3);
 if ($48) {
  $49 = HEAP32[$15>>2]|0;
  $50 = ((($0)) + 4616|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (($49) + ($51<<3)|0);
  HEAPF64[$52>>3] = 100.0;
 }
 $53 = ((($0)) + 4696|0);
 $54 = +HEAPF64[$53>>3];
 $55 = $54 > 0.0;
 if ($55) {
  $56 = ((($0)) + 4384|0);
  $57 = +HEAPF64[$56>>3];
  $58 = $57 / $54;
  $$sink = $58;
 } else {
  $$sink = 0.0;
 }
 $59 = ((($0)) + 4744|0);
 HEAPF64[$59>>3] = $$sink;
 $60 = ((($0)) + 4768|0);
 $61 = +HEAPF64[$60>>3];
 $62 = (+_getucf($61));
 $63 = ((($0)) + 4752|0);
 HEAPF64[$63>>3] = $62;
 $64 = ((($0)) + 4784|0);
 $65 = +HEAPF64[$64>>3];
 $66 = (+_getucf($65));
 $67 = ((($0)) + 4760|0);
 HEAPF64[$67>>3] = $66;
 $68 = (_setreactflag($0)|0);
 $69 = $68 << 24 >> 24;
 $70 = ((($0)) + 4608|0);
 HEAP32[$70>>2] = $69;
 $71 = ((($0)) + 4836|0);
 HEAP32[$71>>2] = 0;
 $72 = ((($0)) + 4832|0);
 $73 = HEAP32[$72>>2]|0;
 _mempool_reset($73);
 _initsegs($0);
 $74 = ((($0)) + 12|0);
 $75 = ((($0)) + 4848|0);
 $$2 = 1;
 while(1) {
  $76 = HEAP32[$74>>2]|0;
  $77 = ($$2|0)>($76|0);
  if ($77) {
   break;
  }
  $78 = HEAP32[$75>>2]|0;
  $79 = (($78) + ($$2<<2)|0);
  HEAP32[$79>>2] = 0;
  $80 = (($$2) + 1)|0;
  $$2 = $80;
 }
 $81 = ((($0)) + 4704|0);
 ;HEAP32[$81>>2]=0|0;HEAP32[$81+4>>2]=0|0;HEAP32[$81+8>>2]=0|0;HEAP32[$81+12>>2]=0|0;HEAP32[$81+16>>2]=0|0;HEAP32[$81+20>>2]=0|0;HEAP32[$81+24>>2]=0|0;HEAP32[$81+28>>2]=0|0;
 $82 = (+_findstoredmass($0));
 $83 = ((($0)) + 4856|0);
 HEAPF64[$83>>3] = $82;
 $84 = ((($0)) + 4864|0);
 dest=$84; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 return;
}
function _findstoredmass($0) {
 $0 = $0|0;
 var $$0 = 0, $$0$in = 0, $$01 = 0.0, $$03 = 0, $$04 = 0, $$1 = 0, $$1$in = 0, $$12 = 0.0, $$2 = 0.0, $$3 = 0.0, $$4 = 0.0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 4840|0);
 $$01 = 0.0;$$03 = 1;
 while(1) {
  $4 = ($$03|0)>($2|0);
  if ($4) {
   break;
  }
  $5 = HEAP32[$3>>2]|0;
  $6 = (($5) + ($$03<<2)|0);
  $$0$in = $6;$$12 = $$01;
  while(1) {
   $$0 = HEAP32[$$0$in>>2]|0;
   $7 = ($$0|0)==(0|0);
   if ($7) {
    break;
   }
   $8 = ((($$0)) + 8|0);
   $9 = +HEAPF64[$8>>3];
   $10 = +HEAPF64[$$0>>3];
   $11 = $9 * $10;
   $12 = $$12 + $11;
   $13 = ((($$0)) + 16|0);
   $$0$in = $13;$$12 = $12;
  }
  $14 = (($$03) + 1)|0;
  $$01 = $$12;$$03 = $14;
 }
 $15 = ((($0)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($0)) + 52|0);
 $$04 = 1;$$2 = $$01;
 while(1) {
  $18 = ($$04|0)>($16|0);
  if ($18) {
   break;
  }
  $19 = HEAP32[$17>>2]|0;
  $20 = (((($19) + (($$04*120)|0)|0)) + 8|0);
  $21 = +HEAPF64[$20>>3];
  $22 = $21 == 0.0;
  L12: do {
   if ($22) {
    $$4 = $$2;
   } else {
    $23 = (($2) + ($$04))|0;
    $24 = HEAP32[$3>>2]|0;
    $25 = (($24) + ($23<<2)|0);
    $$1$in = $25;$$3 = $$2;
    while(1) {
     $$1 = HEAP32[$$1$in>>2]|0;
     $26 = ($$1|0)==(0|0);
     if ($26) {
      $$4 = $$3;
      break L12;
     }
     $27 = ((($$1)) + 8|0);
     $28 = +HEAPF64[$27>>3];
     $29 = +HEAPF64[$$1>>3];
     $30 = $28 * $29;
     $31 = $$3 + $30;
     $32 = ((($$1)) + 16|0);
     $$1$in = $32;$$3 = $31;
    }
   }
  } while(0);
  $33 = (($$04) + 1)|0;
  $$04 = $33;$$2 = $$4;
 }
 return (+$$2);
}
function _runqual($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$3 = 0, $$idx = 0, $$idx$val = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 4|0;
 $3 = sp;
 HEAP32[$2>>2] = 0;
 HEAP32[$3>>2] = 0;
 $4 = ((($0)) + 1184|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$1>>2] = $5;
 $6 = HEAP32[$4>>2]|0;
 $7 = ((($0)) + 1172|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($6|0)==($8|0);
 if (!($9)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = ((($0)) + 4524|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0);
 do {
  if ($12) {
   $13 = (_readhyd($0,$2)|0);
   $14 = ($13|0)==(0);
   if ($14) {
    $$0 = 307;
    STACKTOP = sp;return ($$0|0);
   }
   $$idx = ((($0)) + 4220|0);
   $$idx$val = HEAP32[$$idx>>2]|0;
   $15 = (_readhydstep($$idx$val,$3)|0);
   $16 = ($15|0)==(0);
   if ($16) {
    $$0 = 307;
    STACKTOP = sp;return ($$0|0);
   } else {
    $17 = HEAP32[$2>>2]|0;
    HEAP32[$7>>2] = $17;
    $21 = $17;$54 = $17;
    break;
   }
  } else {
   $21 = $6;$54 = 0;
  }
 } while(0);
 $18 = ((($0)) + 1168|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($21|0)<($19|0);
 do {
  if (!($20)) {
   $22 = ((($0)) + 4200|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ($23|0)==(0);
   if ($24) {
    $25 = ((($0)) + 1160|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = (($19) + ($26))|0;
    HEAP32[$18>>2] = $27;
    break;
   }
   $28 = (_saveoutput($0)|0);
   $29 = ((($0)) + 1204|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = (($30) + 1)|0;
   HEAP32[$29>>2] = $31;
   $$pre = HEAP32[$18>>2]|0;
   $32 = ((($0)) + 1160|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = (($$pre) + ($33))|0;
   HEAP32[$18>>2] = $34;
   $35 = ($28|0)==(0);
   if (!($35)) {
    $$0 = $28;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $36 = ((($0)) + 4600|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ($37|0)==(0);
 if ($38) {
  $$3 = 0;
 } else {
  $39 = HEAP32[$4>>2]|0;
  $40 = ((($0)) + 1192|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ($39|0)<($41|0);
  if ($42) {
   $43 = ((($0)) + 4608|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ($44|0)==(0);
   $46 = ($37|0)==(2);
   $or$cond = $45 | $46;
   if (!($or$cond)) {
    _ratecoeffs($0);
   }
   $47 = (_flowdirchanged($0)|0);
   $48 = ($47|0)==(1);
   if ($48) {
    $49 = (_sortnodes($0)|0);
    $$3 = $49;
   } else {
    $$3 = 0;
   }
  } else {
   $$3 = 0;
  }
 }
 $50 = HEAP32[$10>>2]|0;
 $51 = ($50|0)==(0);
 if (!($51)) {
  $$0 = $$3;
  STACKTOP = sp;return ($$0|0);
 }
 $52 = HEAP32[$3>>2]|0;
 $53 = (($54) + ($52))|0;
 HEAP32[$7>>2] = $53;
 $$0 = $$3;
 STACKTOP = sp;return ($$0|0);
}
function _flowdirchanged($0) {
 $0 = $0|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 12|0);
 $2 = ((($0)) + 4848|0);
 $3 = ((($0)) + 4536|0);
 $4 = ((($0)) + 4272|0);
 $$01 = 0;$$02 = 1;
 while(1) {
  $5 = HEAP32[$1>>2]|0;
  $6 = ($$02|0)>($5|0);
  if ($6) {
   break;
  }
  $7 = HEAP32[$2>>2]|0;
  $8 = (($7) + ($$02<<2)|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = HEAP32[$3>>2]|0;
  $11 = (($10) + ($$02<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12>>>0)<(3);
  if ($13) {
   $18 = 0.0;
  } else {
   $14 = HEAP32[$4>>2]|0;
   $15 = (($14) + ($$02<<3)|0);
   $16 = +HEAPF64[$15>>3];
   $18 = $16;
  }
  $17 = $18 < 0.0;
  $19 = $17 ? -1 : 1;
  $20 = (+Math_abs((+$18)));
  $21 = $20 < 1.1140050486708806E-5;
  $$0 = $21 ? 0 : $19;
  $22 = Math_imul($$0, $9)|0;
  $23 = ($22|0)<(0);
  if ($23) {
   _reversesegs($0,$$02);
  }
  $24 = ($$0|0)==($9|0);
  $spec$select = $24 ? $$01 : 1;
  $25 = HEAP32[$2>>2]|0;
  $26 = (($25) + ($$02<<2)|0);
  HEAP32[$26>>2] = $$0;
  $27 = (($$02) + 1)|0;
  $$01 = $spec$select;$$02 = $27;
 }
 return ($$01|0);
}
function _nextqual($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$01 = 0, $$0211 = 0, $$3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$1>>2] = 0;
 $2 = ((($0)) + 1172|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 1192|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3|0)>($5|0);
 if ($6) {
  $7 = ((($0)) + 4600|0);
  $$0211 = 0;$33 = $7;
 } else {
  $8 = ((($0)) + 1184|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (($3) - ($9))|0;
  $11 = ((($0)) + 4600|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)!=(0);
  $14 = ($10|0)>(0);
  $or$cond8 = $13 & $14;
  if ($or$cond8) {
   $15 = ((($0)) + 4612|0);
   $16 = ((($0)) + 1180|0);
   $$01 = 0;
   while(1) {
    $17 = HEAP32[$15>>2]|0;
    $18 = ($17|0)==(0);
    $19 = ($10|0)>($$01|0);
    $or$cond = $18 & $19;
    if (!($or$cond)) {
     break;
    }
    $20 = HEAP32[$16>>2]|0;
    $21 = (($10) - ($$01))|0;
    $22 = ($20|0)>($21|0);
    $$ = $22 ? $21 : $20;
    $23 = (($$01) + ($$))|0;
    _transport($0,$$);
    $$01 = $23;
   }
   if ($18) {
    $$0211 = $10;$33 = $11;
   } else {
    _evalmassbalance($0);
    $24 = ((($0)) + 1184|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = (($25) + ($10))|0;
    HEAP32[$24>>2] = $26;
    $$3 = 101;
    return ($$3|0);
   }
  } else {
   $$0211 = $10;$33 = $11;
  }
 }
 _evalmassbalance($0);
 HEAP32[$1>>2] = $$0211;
 $27 = ((($0)) + 1184|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($28) + ($$0211))|0;
 HEAP32[$27>>2] = $29;
 $30 = HEAP32[$1>>2]|0;
 $31 = ($30|0)==(0);
 if (!($31)) {
  $$3 = 0;
  return ($$3|0);
 }
 $32 = HEAP32[$33>>2]|0;
 $34 = ($32|0)==(0);
 if (!($34)) {
  $35 = ((($0)) + 1228|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ($36|0)==(0);
  if (!($37)) {
   _writemassbalance($0);
  }
 }
 $38 = ((($0)) + 4200|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ($39|0)==(0);
 if ($40) {
  $$3 = 0;
  return ($$3|0);
 }
 $41 = (_savefinaloutput($0)|0);
 $$3 = $41;
 return ($$3|0);
}
function _evalmassbalance($0) {
 $0 = $0|0;
 var $$0 = 0.0, $$01 = 0.0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0.0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4600|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = ((($0)) + 4896|0);
  HEAPF64[$4>>3] = 1.0;
  return;
 }
 $5 = (+_findstoredmass($0));
 $6 = ((($0)) + 4888|0);
 HEAPF64[$6>>3] = $5;
 $7 = ((($0)) + 4856|0);
 $8 = +HEAPF64[$7>>3];
 $9 = ((($0)) + 4864|0);
 $10 = +HEAPF64[$9>>3];
 $11 = $8 + $10;
 $12 = ((($0)) + 4872|0);
 $13 = +HEAPF64[$12>>3];
 $14 = $13 + $5;
 $15 = ((($0)) + 4880|0);
 $16 = +HEAPF64[$15>>3];
 $17 = $16 > 0.0;
 $18 = $11 - $16;
 $$01 = $17 ? $11 : $18;
 $19 = $$01 == 0.0;
 if ($19) {
  $20 = ((($0)) + 4896|0);
  HEAPF64[$20>>3] = 1.0;
  return;
 } else {
  $21 = $14 + $16;
  $$0 = $17 ? $21 : $14;
  $22 = $$0 / $$01;
  $23 = ((($0)) + 4896|0);
  HEAPF64[$23>>3] = $22;
  return;
 }
}
function _stepqual($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$01 = 0, $$02 = 0, $$1 = 0, $$3 = 0, $$5 = 0, $$pre = 0, $$pre5 = 0, $$pre6 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = ((($0)) + 1180|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 1172|0);
 $6 = ((($0)) + 1184|0);
 $7 = ((($0)) + 4600|0);
 $8 = ((($0)) + 4612|0);
 $9 = ((($0)) + 4524|0);
 $$pre = HEAP32[$6>>2]|0;
 $$01 = $4;$12 = $$pre;
 while(1) {
  $10 = HEAP32[$5>>2]|0;
  $11 = (($10) - ($12))|0;
  $13 = ($11|0)<($$01|0);
  $14 = HEAP32[$7>>2]|0;
  $15 = ($14|0)==(0);
  if ($13) {
   if ($15) {
    $17 = $12;
   } else {
    _transport($0,$11);
    $$pre6 = HEAP32[$6>>2]|0;
    $17 = $$pre6;
   }
   $16 = (($17) + ($11))|0;
   HEAP32[$6>>2] = $16;
   $18 = HEAP32[$9>>2]|0;
   $19 = ($18|0)==(0);
   if (!($19)) {
    $$3 = 0;
    break;
   }
   $20 = (_runqual($0,$2)|0);
   $21 = HEAP32[$2>>2]|0;
   $$02 = $11;$$1 = $20;$storemerge = $21;
  } else {
   if ($15) {
    $23 = $12;
   } else {
    _transport($0,$$01);
    $$pre5 = HEAP32[$6>>2]|0;
    $23 = $$pre5;
   }
   $22 = (($23) + ($$01))|0;
   $$02 = $$01;$$1 = 0;$storemerge = $22;
  }
  HEAP32[$6>>2] = $storemerge;
  $24 = (($$01) - ($$02))|0;
  $25 = HEAP32[$8>>2]|0;
  $26 = ($25|0)==(0);
  if (!($26)) {
   $$3 = 101;
   break;
  }
  $27 = ($$1|0)==(0);
  $28 = ($24|0)>(0);
  $or$cond = $27 & $28;
  if ($or$cond) {
   $$01 = $24;$12 = $storemerge;
  } else {
   $$3 = $$1;
   break;
  }
 }
 _evalmassbalance($0);
 $29 = ((($0)) + 1192|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = HEAP32[$6>>2]|0;
 $32 = (($30) - ($31))|0;
 HEAP32[$1>>2] = $32;
 $33 = ($$3|0)==(0);
 if (!($33)) {
  $$5 = $$3;
  STACKTOP = sp;return ($$5|0);
 }
 $34 = ($32|0)==(0);
 if (!($34)) {
  $$5 = 0;
  STACKTOP = sp;return ($$5|0);
 }
 $35 = HEAP32[$7>>2]|0;
 $36 = ($35|0)==(0);
 if (!($36)) {
  $37 = ((($0)) + 1228|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($38|0)==(0);
  if (!($39)) {
   _writemassbalance($0);
  }
 }
 $40 = ((($0)) + 4200|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ($41|0)==(0);
 if ($42) {
  $$5 = 0;
  STACKTOP = sp;return ($$5|0);
 }
 $43 = (_savefinaloutput($0)|0);
 $$5 = $43;
 STACKTOP = sp;return ($$5|0);
}
function _closequal($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4600|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  return;
 }
 $4 = ((($0)) + 4832|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  _mempool_delete($5);
 }
 $7 = ((($0)) + 4840|0);
 $8 = HEAP32[$7>>2]|0;
 _free($8);
 HEAP32[$7>>2] = 0;
 $9 = ((($0)) + 4844|0);
 $10 = HEAP32[$9>>2]|0;
 _free($10);
 HEAP32[$9>>2] = 0;
 $11 = ((($0)) + 4828|0);
 $12 = HEAP32[$11>>2]|0;
 _free($12);
 HEAP32[$11>>2] = 0;
 $13 = ((($0)) + 4848|0);
 $14 = HEAP32[$13>>2]|0;
 _free($14);
 HEAP32[$13>>2] = 0;
 $15 = ((($0)) + 4620|0);
 $16 = HEAP32[$15>>2]|0;
 _free($16);
 HEAP32[$15>>2] = 0;
 return;
}
function _avgqual($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0.0, $$01 = 0, $$01$in = 0, $$02 = 0.0, $$03 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4600|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $$0 = 0.0;
  return (+$$0);
 }
 $5 = ((($0)) + 4840|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if (!($7)) {
  $8 = (($6) + ($1<<2)|0);
  $$01$in = $8;$$02 = 0.0;$$03 = 0.0;
  while(1) {
   $$01 = HEAP32[$$01$in>>2]|0;
   $9 = ($$01|0)==(0|0);
   if ($9) {
    break;
   }
   $10 = +HEAPF64[$$01>>3];
   $11 = $$03 + $10;
   $12 = ((($$01)) + 8|0);
   $13 = +HEAPF64[$12>>3];
   $14 = $13 * $10;
   $15 = $$02 + $14;
   $16 = ((($$01)) + 16|0);
   $$01$in = $16;$$02 = $15;$$03 = $11;
  }
  $17 = $$03 > 0.0;
  if ($17) {
   $18 = $$02 / $$03;
   $$0 = $18;
   return (+$$0);
  }
 }
 $19 = ((($0)) + 4824|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($0)) + 48|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (((($22) + ($1<<7)|0)) + 32|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($20) + ($24<<3)|0);
 $26 = +HEAPF64[$25>>3];
 $27 = (((($22) + ($1<<7)|0)) + 36|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($20) + ($28<<3)|0);
 $30 = +HEAPF64[$29>>3];
 $31 = $26 + $30;
 $32 = $31 * 0.5;
 $$0 = $32;
 return (+$$0);
}
function _findsourcequal($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 var $$0 = 0.0, $$2 = 0.0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0;
 var $28 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 4600|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(1);
 if (!($6)) {
  $$0 = 0.0;
  return (+$$0);
 }
 $7 = ((($0)) + 44|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (((($8) + (($1*96)|0)|0)) + 60|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $$0 = 0.0;
  return (+$$0);
 }
 $12 = +HEAPF64[$10>>3];
 $13 = $12 == 0.0;
 if ($13) {
  $$0 = 0.0;
  return (+$$0);
 }
 $14 = (+($3|0));
 $15 = $2 / $14;
 $16 = !($15 <= 1.1140050486708806E-5);
 if (!($16)) {
  $$0 = 0.0;
  return (+$$0);
 }
 $17 = (+_sourcequal($0,$10));
 $18 = ((($10)) + 24|0);
 $19 = HEAP32[$18>>2]|0;
 switch ($19|0) {
 case 0:  {
  $20 = (((($8) + (($1*96)|0)|0)) + 88|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)==(0);
  if ($22) {
   $23 = ((($0)) + 4260|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (($24) + ($1<<3)|0);
   $26 = +HEAPF64[$25>>3];
   $27 = $26 < 0.0;
   if ($27) {
    $28 = $17 * $26;
    $29 = $28 * $14;
    $30 = - $29;
    $31 = $30 / $2;
    $$2 = $31;
   } else {
    $$2 = 0.0;
   }
  } else {
   $$2 = $17;
  }
  break;
 }
 case 1:  {
  $32 = $17 * $14;
  $33 = $32 / $2;
  $$2 = $33;
  break;
 }
 case 2:  {
  $34 = ((($0)) + 4824|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = (($35) + ($1<<3)|0);
  $37 = +HEAPF64[$36>>3];
  $38 = $17 - $37;
  $39 = !($38 >= 0.0);
  if ($39) {
   $$2 = 0.0;
  } else {
   $$2 = $38;
  }
  break;
 }
 default: {
  $$2 = $17;
 }
 }
 $40 = $$2 * $2;
 $41 = ((($10)) + 16|0);
 $42 = +HEAPF64[$41>>3];
 $43 = $42 + $40;
 HEAPF64[$41>>3] = $43;
 $44 = ((($0)) + 1172|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = ((($0)) + 1164|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = ($45|0)<($47|0);
 if ($48) {
  $$0 = $$2;
  return (+$$0);
 }
 $49 = ((($0)) + 4728|0);
 $50 = +HEAPF64[$49>>3];
 $51 = $50 + $40;
 HEAPF64[$49>>3] = $51;
 $$0 = $$2;
 return (+$$0);
}
function _sourcequal($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0.0, $$01 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = +HEAPF64[$1>>3];
 $3 = ((($1)) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(1);
 if ($5) {
  $6 = $2 / 60.0;
  $$01 = $6;
 } else {
  $7 = ((($0)) + 4936|0);
  $8 = +HEAPF64[$7>>3];
  $9 = $2 / $8;
  $$01 = $9;
 }
 $10 = ((($1)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0);
 if ($12) {
  $$0 = $$01;
  return (+$$0);
 }
 $13 = ((($0)) + 1184|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($0)) + 1156|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($14) + ($16))|0;
 $18 = ((($0)) + 1152|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($17|0) / ($19|0))&-1;
 $21 = ((($0)) + 64|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (((($22) + (($11*44)|0)|0)) + 36|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($20|0) % ($24|0))&-1;
 $26 = (((($22) + (($11*44)|0)|0)) + 40|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (($27) + ($25<<3)|0);
 $29 = +HEAPF64[$28>>3];
 $30 = $$01 * $29;
 $$0 = $30;
 return (+$$0);
}
function _setreactflag($0) {
 $0 = $0|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0;
 var $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4600|0);
 $2 = HEAP32[$1>>2]|0;
 switch ($2|0) {
 case 2:  {
  $$0 = 1;
  return ($$0|0);
  break;
 }
 case 3:  {
  $$0 = 0;
  return ($$0|0);
  break;
 }
 default: {
  $3 = ((($0)) + 12|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ((($0)) + 48|0);
  $$01 = 1;
  while(1) {
   $6 = ($$01|0)>($4|0);
   if ($6) {
    label = 8;
    break;
   }
   $7 = HEAP32[$5>>2]|0;
   $8 = (((($7) + ($$01<<7)|0)) + 104|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9>>>0)<(2);
   if ($10) {
    $11 = (((($7) + ($$01<<7)|0)) + 72|0);
    $12 = +HEAPF64[$11>>3];
    $13 = $12 != 0.0;
    if ($13) {
     $$0 = 1;
     label = 13;
     break;
    }
    $14 = (((($7) + ($$01<<7)|0)) + 80|0);
    $15 = +HEAPF64[$14>>3];
    $16 = $15 != 0.0;
    if ($16) {
     $$0 = 1;
     label = 13;
     break;
    }
   }
   $17 = (($$01) + 1)|0;
   $$01 = $17;
  }
  if ((label|0) == 8) {
   $18 = ((($0)) + 52|0);
   $19 = ((($0)) + 4|0);
   $20 = HEAP32[$19>>2]|0;
   $$1 = 1;
   while(1) {
    $21 = ($$1|0)>($20|0);
    if ($21) {
     $$0 = 0;
     label = 13;
     break;
    }
    $22 = HEAP32[$18>>2]|0;
    $23 = (((($22) + (($$1*120)|0)|0)) + 64|0);
    $24 = +HEAPF64[$23>>3];
    $25 = $24 != 0.0;
    if ($25) {
     $$0 = 1;
     label = 13;
     break;
    }
    $26 = (($$1) + 1)|0;
    $$1 = $26;
   }
   if ((label|0) == 13) {
    return ($$0|0);
   }
  }
  else if ((label|0) == 13) {
   return ($$0|0);
  }
 }
 }
 return (0)|0;
}
function _getucf($0) {
 $0 = +$0;
 var $$0 = 0.0, $$012 = 0.0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 < 0.0;
 if ($1) {
  $$012 = 0.0;
 } else {
  $2 = $0 == 1.0;
  if ($2) {
   $$0 = 1.0;
   return (+$$0);
  } else {
   $$012 = $0;
  }
 }
 $3 = $$012 + -1.0;
 $4 = (+Math_pow(28.317,(+$3)));
 $5 = 1.0 / $4;
 $$0 = $5;
 return (+$$0);
}
function _ratecoeffs($0) {
 $0 = $0|0;
 var $$0 = 0.0, $$01 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 12|0);
 $2 = ((($0)) + 48|0);
 $3 = ((($0)) + 4828|0);
 $$01 = 1;
 while(1) {
  $4 = HEAP32[$1>>2]|0;
  $5 = ($$01|0)>($4|0);
  if ($5) {
   break;
  }
  $6 = HEAP32[$2>>2]|0;
  $7 = (((($6) + ($$01<<7)|0)) + 80|0);
  $8 = +HEAPF64[$7>>3];
  $9 = $8 != 0.0;
  if ($9) {
   $10 = (+_piperate($0,$$01));
   $$0 = $10;
  } else {
   $$0 = $8;
  }
  $11 = (((($6) + ($$01<<7)|0)) + 96|0);
  HEAPF64[$11>>3] = $$0;
  $12 = HEAP32[$3>>2]|0;
  $13 = (($12) + ($$01<<3)|0);
  HEAPF64[$13>>3] = 0.0;
  $14 = (($$01) + 1)|0;
  $$01 = $14;
 }
 return;
}
function _piperate($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0.0, $$1 = 0.0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0;
 var $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0;
 var $63 = 0.0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (((($3) + ($1<<7)|0)) + 40|0);
 $5 = +HEAPF64[$4>>3];
 $6 = ((($0)) + 4744|0);
 $7 = +HEAPF64[$6>>3];
 $8 = $7 == 0.0;
 if ($8) {
  $9 = ((($0)) + 4776|0);
  $10 = +HEAPF64[$9>>3];
  $11 = $10 == 0.0;
  if ($11) {
   $$0 = 1.0E+10;
   return (+$$0);
  }
  $12 = (((($3) + ($1<<7)|0)) + 80|0);
  $13 = +HEAPF64[$12>>3];
  $14 = 4.0 / $5;
  $15 = $13 * $14;
  $16 = ((($0)) + 4904|0);
  $17 = +HEAPF64[$16>>3];
  $18 = $15 / $17;
  $$0 = $18;
  return (+$$0);
 }
 $19 = ((($0)) + 4536|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($20) + ($1<<2)|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22>>>0)<(3);
 if ($23) {
  $31 = 0.0;
 } else {
  $24 = ((($0)) + 4272|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (($25) + ($1<<3)|0);
  $27 = +HEAPF64[$26>>3];
  $31 = $27;
 }
 $28 = $5 * 3.1415926535897931;
 $29 = $28 * $5;
 $30 = $29 * 0.25;
 $32 = (+Math_abs((+$31)));
 $33 = $32 / $30;
 $34 = $33 * $5;
 $35 = ((($0)) + 4384|0);
 $36 = +HEAPF64[$35>>3];
 $37 = $34 / $36;
 $38 = $37 < 1.0;
 do {
  if ($38) {
   $$1 = 2.0;
  } else {
   $39 = !($37 >= 2300.0);
   if ($39) {
    $44 = (((($3) + ($1<<7)|0)) + 48|0);
    $45 = +HEAPF64[$44>>3];
    $46 = $5 / $45;
    $47 = $46 * $37;
    $48 = $47 * $7;
    $49 = $48 * 0.066799999999999998;
    $50 = (+Math_pow((+$48),0.66700000000000004));
    $51 = $50 * 0.040000000000000001;
    $52 = $51 + 1.0;
    $53 = $49 / $52;
    $54 = $53 + 3.6499999999999999;
    $$1 = $54;
    break;
   } else {
    $40 = (+Math_pow((+$37),0.88));
    $41 = $40 * 0.0149;
    $42 = (+Math_pow((+$7),0.33300000000000002));
    $43 = $41 * $42;
    $$1 = $43;
    break;
   }
  }
 } while(0);
 $55 = ((($0)) + 4696|0);
 $56 = +HEAPF64[$55>>3];
 $57 = $$1 * $56;
 $58 = $57 / $5;
 $59 = ((($0)) + 4776|0);
 $60 = +HEAPF64[$59>>3];
 $61 = $60 == 0.0;
 if ($61) {
  $$0 = $58;
  return (+$$0);
 }
 $62 = (((($3) + ($1<<7)|0)) + 80|0);
 $63 = +HEAPF64[$62>>3];
 $64 = ((($0)) + 4904|0);
 $65 = +HEAPF64[$64>>3];
 $66 = $63 / $65;
 $67 = 4.0 / $5;
 $68 = $67 * $66;
 $69 = $68 * $58;
 $70 = (+Math_abs((+$66)));
 $71 = $58 + $70;
 $72 = $69 / $71;
 $$0 = $72;
 return (+$$0);
}
function _reactpipes($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0.0, $$01 = 0.0, $$03 = 0, $$03$in = 0, $$04 = 0, $$1 = 0.0, $$12 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0;
 var $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0;
 var $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 12|0);
 $3 = ((($0)) + 48|0);
 $4 = ((($0)) + 4840|0);
 $5 = ((($0)) + 4880|0);
 $6 = ((($0)) + 4600|0);
 $7 = (+($1|0));
 $8 = ((($0)) + 4828|0);
 $$04 = 1;
 while(1) {
  $9 = HEAP32[$2>>2]|0;
  $10 = ($$04|0)>($9|0);
  if ($10) {
   break;
  }
  $11 = HEAP32[$3>>2]|0;
  $12 = (((($11) + ($$04<<7)|0)) + 104|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(1);
  do {
   if ($14) {
    $15 = HEAP32[$4>>2]|0;
    $16 = (($15) + ($$04<<2)|0);
    $$0 = 0.0;$$01 = 0.0;$$03$in = $16;
    while(1) {
     $$03 = HEAP32[$$03$in>>2]|0;
     $17 = ($$03|0)==(0|0);
     if ($17) {
      break;
     }
     $18 = ((($$03)) + 8|0);
     $19 = +HEAPF64[$18>>3];
     $20 = +HEAPF64[$$03>>3];
     $21 = (+_pipereact($0,$$04,$19,$20,$1));
     HEAPF64[$18>>3] = $21;
     $22 = $19 - $21;
     $23 = +HEAPF64[$$03>>3];
     $24 = $22 * $23;
     $25 = +HEAPF64[$5>>3];
     $26 = $25 + $24;
     HEAPF64[$5>>3] = $26;
     $27 = HEAP32[$6>>2]|0;
     $28 = ($27|0)==(1);
     if ($28) {
      $29 = +HEAPF64[$18>>3];
      $30 = $29 - $19;
      $31 = (+Math_abs((+$30)));
      $32 = +HEAPF64[$$03>>3];
      $33 = $31 * $32;
      $34 = $$01 + $33;
      $35 = $$0 + $32;
      $$1 = $35;$$12 = $34;
     } else {
      $$1 = $$0;$$12 = $$01;
     }
     $36 = ((($$03)) + 16|0);
     $$0 = $$1;$$01 = $$12;$$03$in = $36;
    }
    $37 = $$0 > 0.0;
    if ($37) {
     $38 = $$01 / $$0;
     $39 = $38 / $7;
     $40 = $39 * 86400.0;
     $41 = HEAP32[$8>>2]|0;
     $42 = (($41) + ($$04<<3)|0);
     HEAPF64[$42>>3] = $40;
     break;
    } else {
     $43 = HEAP32[$8>>2]|0;
     $44 = (($43) + ($$04<<3)|0);
     HEAPF64[$44>>3] = 0.0;
     break;
    }
   }
  } while(0);
  $45 = (($$04) + 1)|0;
  $$04 = $45;
 }
 return;
}
function _pipereact($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = +$3;
 $4 = $4|0;
 var $$0 = 0.0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0.0;
 var $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0;
 var $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($0)) + 4600|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(2);
 if ($7) {
  $8 = (+($4|0));
  $9 = $8 / 3600.0;
  $10 = $9 + $2;
  $11 = !($10 <= 0.0);
  if (!($11)) {
   $$0 = 0.0;
   return (+$$0);
  }
  $$0 = $10;
  return (+$$0);
 }
 $12 = ((($0)) + 48|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (((($13) + ($1<<7)|0)) + 72|0);
 $15 = +HEAPF64[$14>>3];
 $16 = ((($0)) + 4768|0);
 $17 = +HEAPF64[$16>>3];
 $18 = (+_bulkrate($0,$2,$15,$17));
 $19 = ((($0)) + 4752|0);
 $20 = +HEAPF64[$19>>3];
 $21 = $18 * $20;
 $22 = (((($13) + ($1<<7)|0)) + 40|0);
 $23 = +HEAPF64[$22>>3];
 $24 = (((($13) + ($1<<7)|0)) + 80|0);
 $25 = +HEAPF64[$24>>3];
 $26 = (((($13) + ($1<<7)|0)) + 96|0);
 $27 = +HEAPF64[$26>>3];
 $28 = (+_wallrate($0,$2,$23,$25,$27));
 $29 = (+($4|0));
 $30 = $21 * $29;
 $31 = $28 * $29;
 $32 = ((($0)) + 1172|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ((($0)) + 1164|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33|0)<($35|0);
 if (!($36)) {
  $37 = (+Math_abs((+$30)));
  $38 = $37 * $3;
  $39 = ((($0)) + 4704|0);
  $40 = +HEAPF64[$39>>3];
  $41 = $40 + $38;
  HEAPF64[$39>>3] = $41;
  $42 = (+Math_abs((+$31)));
  $43 = $42 * $3;
  $44 = ((($0)) + 4712|0);
  $45 = +HEAPF64[$44>>3];
  $46 = $45 + $43;
  HEAPF64[$44>>3] = $46;
 }
 $47 = $30 + $31;
 $48 = $47 + $2;
 $49 = !($48 <= 0.0);
 if (!($49)) {
  $$0 = 0.0;
  return (+$$0);
 }
 $$0 = $48;
 return (+$$0);
}
function _bulkrate($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 var $$0 = 0.0, $$01 = 0.0, $$1 = 0.0, $$3 = 0.0, $$4 = 0.0, $$inv = 0, $$pn = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $3 == 0.0;
 if ($4) {
  $$4 = 1.0;
  $29 = $$4 * $2;
  return (+$29);
 }
 $5 = $3 < 0.0;
 $6 = ((($0)) + 4808|0);
 $7 = +HEAPF64[$6>>3];
 if ($5) {
  $8 = $2 < 0.0;
  $9 = $8 ? -1.0 : 1.0;
  $10 = $9 * $1;
  $11 = $7 + $10;
  $12 = (+Math_abs((+$11)));
  $13 = $12 < 9.9999999999999995E-7;
  $14 = $11 < 0.0;
  $15 = $14 ? -9.9999999999999995E-7 : 9.9999999999999995E-7;
  $$0 = $13 ? $15 : $11;
  $16 = $1 / $$0;
  $$3 = $16;
 } else {
  $17 = $7 == 0.0;
  if ($17) {
   $$1 = $1;
  } else {
   $18 = $2 < 0.0;
   $19 = $18 ? -1.0 : 1.0;
   $20 = $7 - $1;
   $21 = $19 * $20;
   $22 = !($21 <= 0.0);
   if ($22) {
    $$1 = $21;
   } else {
    $$1 = 0.0;
   }
  }
  $23 = $3 == 1.0;
  if ($23) {
   $$3 = $$1;
  } else {
   $24 = $3 == 2.0;
   if ($24) {
    $$pn = $1;
   } else {
    $$inv = $1 <= 0.0;
    $25 = $$inv ? 0.0 : $1;
    $26 = $3 + -1.0;
    $27 = (+Math_pow((+$25),(+$26)));
    $$pn = $27;
   }
   $$01 = $$1 * $$pn;
   $$3 = $$01;
  }
 }
 $28 = $$3 < 0.0;
 if (!($28)) {
  $$4 = $$3;
  $29 = $$4 * $2;
  return (+$29);
 }
 $$4 = 0.0;
 $29 = $$4 * $2;
 return (+$29);
}
function _wallrate($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 var $$0 = 0.0, $$01 = 0.0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0;
 var $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = $3 == 0.0;
 $6 = $2 == 0.0;
 $or$cond = $5 | $6;
 if ($or$cond) {
  $$0 = 0.0;
  return (+$$0);
 }
 $7 = ((($0)) + 4776|0);
 $8 = +HEAPF64[$7>>3];
 $9 = $8 == 0.0;
 if ($9) {
  $10 = $3 < 0.0;
  $11 = $10 ? -1.0 : 1.0;
  $12 = $11 * $1;
  $13 = $12 * $4;
  $14 = ((($0)) + 4904|0);
  $15 = +HEAPF64[$14>>3];
  $16 = $15 * $15;
  $17 = $16 * $3;
  $18 = (+Math_abs((+$13)));
  $19 = (+Math_abs((+$17)));
  $20 = $18 < $19;
  $$01 = $20 ? $13 : $17;
  $21 = $$01 * 4.0;
  $22 = $21 / $2;
  $$0 = $22;
  return (+$$0);
 } else {
  $23 = $1 * $4;
  $$0 = $23;
  return (+$$0);
 }
 return +(0.0);
}
function _reacttanks($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$0$in = 0, $$01 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0;
 var $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = ((($0)) + 52|0);
 $4 = ((($0)) + 12|0);
 $5 = ((($0)) + 4840|0);
 $6 = ((($0)) + 4880|0);
 $$01 = 1;
 while(1) {
  $7 = HEAP32[$2>>2]|0;
  $8 = ($$01|0)>($7|0);
  if ($8) {
   break;
  }
  $9 = HEAP32[$3>>2]|0;
  $10 = (((($9) + (($$01*120)|0)|0)) + 8|0);
  $11 = +HEAPF64[$10>>3];
  $12 = $11 == 0.0;
  L4: do {
   if (!($12)) {
    $13 = HEAP32[$4>>2]|0;
    $14 = (($13) + ($$01))|0;
    $15 = HEAP32[$5>>2]|0;
    $16 = (($15) + ($14<<2)|0);
    $17 = (((($9) + (($$01*120)|0)|0)) + 64|0);
    $$0$in = $16;
    while(1) {
     $$0 = HEAP32[$$0$in>>2]|0;
     $18 = ($$0|0)==(0|0);
     if ($18) {
      break L4;
     }
     $19 = ((($$0)) + 8|0);
     $20 = +HEAPF64[$19>>3];
     $21 = +HEAPF64[$$0>>3];
     $22 = +HEAPF64[$17>>3];
     $23 = (+_tankreact($0,$20,$21,$22,$1));
     HEAPF64[$19>>3] = $23;
     $24 = $20 - $23;
     $25 = +HEAPF64[$$0>>3];
     $26 = $24 * $25;
     $27 = +HEAPF64[$6>>3];
     $28 = $27 + $26;
     HEAPF64[$6>>3] = $28;
     $29 = ((($$0)) + 16|0);
     $$0$in = $29;
    }
   }
  } while(0);
  $30 = (($$01) + 1)|0;
  $$01 = $30;
 }
 return;
}
function _tankreact($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = $4|0;
 var $$0 = 0.0, $$inv = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0.0;
 var $28 = 0.0, $29 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($0)) + 4600|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(2);
 if ($7) {
  $8 = (+($4|0));
  $9 = $8 / 3600.0;
  $$0 = $9;
 } else {
  $10 = ((($0)) + 4784|0);
  $11 = +HEAPF64[$10>>3];
  $12 = (+_bulkrate($0,$1,$3,$11));
  $13 = ((($0)) + 4760|0);
  $14 = +HEAPF64[$13>>3];
  $15 = $12 * $14;
  $16 = (+($4|0));
  $17 = $15 * $16;
  $18 = ((($0)) + 1172|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($0)) + 1164|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($19|0)<($21|0);
  if ($22) {
   $$0 = $17;
  } else {
   $23 = (+Math_abs((+$17)));
   $24 = $23 * $2;
   $25 = ((($0)) + 4720|0);
   $26 = +HEAPF64[$25>>3];
   $27 = $26 + $24;
   HEAPF64[$25>>3] = $27;
   $$0 = $17;
  }
 }
 $28 = $$0 + $1;
 $$inv = $28 <= 0.0;
 $29 = $$inv ? 0.0 : $28;
 return (+$29);
}
function _mixtank($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 var $$idx = 0, $$idx$val = 0, $$idx2 = 0, $$idx2$val = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($0)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($1) - ($6))|0;
 $8 = $2 - $4;
 $9 = ((($0)) + 52|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (((($10) + (($7*120)|0)|0)) + 96|0);
 $12 = HEAP32[$11>>2]|0;
 switch ($12|0) {
 case 0:  {
  $$idx = ((($0)) + 12|0);
  $$idx$val = HEAP32[$$idx>>2]|0;
  $$idx2 = ((($0)) + 4840|0);
  $$idx2$val = HEAP32[$$idx2>>2]|0;
  _tankmix1($$idx$val,$10,$$idx2$val,$7,$2,$3,$8);
  break;
 }
 case 1:  {
  _tankmix2($0,$7,$2,$3,$8);
  break;
 }
 case 2:  {
  _tankmix3($0,$7,$2,$3,$8);
  break;
 }
 case 3:  {
  _tankmix4($0,$7,$2,$3,$8);
  break;
 }
 default: {
 }
 }
 $13 = HEAP32[$9>>2]|0;
 $14 = (((($13) + (($7*120)|0)|0)) + 80|0);
 $15 = +HEAPF64[$14>>3];
 return (+$15);
}
function _tankmix1($$0$0$3$val,$$0$0$13$val,$$0$7$29$val,$0,$1,$2,$3) {
 $$0$0$3$val = $$0$0$3$val|0;
 $$0$0$13$val = $$0$0$13$val|0;
 $$0$7$29$val = $$0$7$29$val|0;
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 var $$inv = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (($$0$0$3$val) + ($0))|0;
 $5 = (($$0$7$29$val) + ($4<<2)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  return;
 }
 $8 = +HEAPF64[$6>>3];
 $9 = $8 + $1;
 $10 = $9 > 0.0;
 if ($10) {
  $11 = ((($6)) + 8|0);
  $12 = +HEAPF64[$11>>3];
  $13 = $12 * $8;
  $14 = $13 + $2;
  $15 = $14 / $9;
  HEAPF64[$11>>3] = $15;
 }
 $16 = $8 + $3;
 $$inv = $16 <= 0.0;
 $17 = $$inv ? 0.0 : $16;
 HEAPF64[$6>>3] = $17;
 $18 = ((($6)) + 8|0);
 $19 = +HEAPF64[$18>>3];
 $20 = (((($$0$0$13$val) + (($0*120)|0)|0)) + 80|0);
 HEAPF64[$20>>3] = $19;
 return;
}
function _tankmix2($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 var $$ = 0.0, $$0 = 0.0, $$2 = 0.0, $$inv = 0, $$inv1 = 0, $$inv2 = 0, $$inv3 = 0, $$inv4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0.0;
 var $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $40 = 0.0, $41 = 0.0;
 var $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0.0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0;
 var $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0.0, $74 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $5 = ((($0)) + 52|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + ($1))|0;
 $10 = ((($0)) + 4844|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + ($9<<2)|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($0)) + 4840|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($15) + ($9<<2)|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($13|0)==(0|0);
 $19 = ($17|0)==(0|0);
 $or$cond = $18 | $19;
 if ($or$cond) {
  return;
 }
 $20 = (((($6) + (($1*120)|0)|0)) + 104|0);
 $21 = +HEAPF64[$20>>3];
 $22 = $4 > 0.0;
 if ($22) {
  $23 = +HEAPF64[$13>>3];
  $24 = $23 + $4;
  $25 = $24 - $21;
  $$inv4 = $25 <= 0.0;
  $26 = $$inv4 ? 0.0 : $25;
  $27 = $2 > 0.0;
  if ($27) {
   $28 = ((($13)) + 8|0);
   $29 = +HEAPF64[$28>>3];
   $30 = $29 * $23;
   $31 = $30 + $3;
   $32 = $23 + $2;
   $33 = $31 / $32;
   HEAPF64[$28>>3] = $33;
  }
  $34 = $26 > 0.0;
  if ($34) {
   $35 = ((($17)) + 8|0);
   $36 = +HEAPF64[$35>>3];
   $37 = +HEAPF64[$17>>3];
   $38 = $36 * $37;
   $39 = ((($13)) + 8|0);
   $40 = +HEAPF64[$39>>3];
   $41 = $40 * $26;
   $42 = $38 + $41;
   $43 = $37 + $26;
   $44 = $42 / $43;
   HEAPF64[$35>>3] = $44;
   $$2 = $26;
   label = 12;
  } else {
   $$2 = $26;
   label = 12;
  }
 } else {
  $45 = $4 < 0.0;
  if ($45) {
   $46 = +HEAPF64[$17>>3];
   $47 = $46 > 0.0;
   if ($47) {
    $48 = - $4;
    $$inv3 = $46 <= $48;
    $$ = $$inv3 ? $46 : $48;
    $$0 = $$;
   } else {
    $$0 = 0.0;
   }
   $49 = $$0 + $2;
   $50 = $49 > 0.0;
   if ($50) {
    $51 = ((($13)) + 8|0);
    $52 = +HEAPF64[$51>>3];
    $53 = +HEAPF64[$13>>3];
    $54 = $52 * $53;
    $55 = $54 + $3;
    $56 = ((($17)) + 8|0);
    $57 = +HEAPF64[$56>>3];
    $58 = $57 * $$0;
    $59 = $55 + $58;
    $60 = $53 + $2;
    $61 = $60 + $$0;
    $62 = $59 / $61;
    HEAPF64[$51>>3] = $62;
    $$2 = $$0;
    label = 12;
   } else {
    $$2 = $$0;
    label = 12;
   }
  } else {
   label = 16;
  }
 }
 do {
  if ((label|0) == 12) {
   $63 = $$2 > 0.0;
   if ($63) {
    HEAPF64[$13>>3] = $21;
    $64 = +HEAPF64[$17>>3];
    if ($22) {
     $65 = $64 + $$2;
     HEAPF64[$17>>3] = $65;
     break;
    } else {
     $66 = $64 - $$2;
     $$inv2 = $66 <= 0.0;
     $67 = $$inv2 ? 0.0 : $66;
     HEAPF64[$17>>3] = $67;
     break;
    }
   } else {
    label = 16;
   }
  }
 } while(0);
 if ((label|0) == 16) {
  $68 = +HEAPF64[$13>>3];
  $69 = $68 + $4;
  $$inv = $69 <= $21;
  $70 = $$inv ? $69 : $21;
  $$inv1 = $70 <= 0.0;
  $71 = $$inv1 ? 0.0 : $70;
  HEAPF64[$13>>3] = $71;
  HEAPF64[$17>>3] = 0.0;
 }
 $72 = ((($13)) + 8|0);
 $73 = +HEAPF64[$72>>3];
 $74 = (((($6) + (($1*120)|0)|0)) + 80|0);
 HEAPF64[$74>>3] = $73;
 return;
}
function _tankmix3($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 var $$0 = 0.0, $$01 = 0.0, $$03 = 0.0, $$inv = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0;
 var $26 = 0, $27 = 0.0, $28 = 0, $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0;
 var $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $spec$select = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($0)) + 52|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + ($1))|0;
 $10 = ((($0)) + 4844|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + ($9<<2)|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0|0);
 if ($14) {
  return;
 }
 $15 = ((($0)) + 4840|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + ($9<<2)|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(0|0);
 if ($19) {
  return;
 }
 $20 = $2 > 0.0;
 do {
  if ($20) {
   $21 = $3 / $2;
   $22 = ((($13)) + 8|0);
   $23 = +HEAPF64[$22>>3];
   $24 = $23 - $21;
   $25 = (+Math_abs((+$24)));
   $26 = ((($0)) + 4688|0);
   $27 = +HEAPF64[$26>>3];
   $28 = $25 < $27;
   if ($28) {
    $29 = +HEAPF64[$13>>3];
    $30 = $29 + $2;
    HEAPF64[$13>>3] = $30;
    break;
   } else {
    _addseg($0,$9,$2,$21);
    break;
   }
  }
 } while(0);
 $31 = $2 - $4;
 $32 = ((($0)) + 4836|0);
 $$0 = 0.0;$$01 = 0.0;$$03 = $31;
 while(1) {
  $33 = $$03 > 0.0;
  if (!($33)) {
   break;
  }
  $34 = HEAP32[$15>>2]|0;
  $35 = (($34) + ($9<<2)|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ($36|0)==(0|0);
  if ($37) {
   break;
  }
  $38 = +HEAPF64[$36>>3];
  $$inv = $38 <= $$03;
  $39 = $$inv ? $38 : $$03;
  $40 = HEAP32[$10>>2]|0;
  $41 = (($40) + ($9<<2)|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = ($36|0)==($42|0);
  $spec$select = $43 ? $$03 : $39;
  $44 = $$01 + $spec$select;
  $45 = ((($36)) + 8|0);
  $46 = +HEAPF64[$45>>3];
  $47 = $46 * $spec$select;
  $48 = $$0 + $47;
  $49 = $$03 - $spec$select;
  $50 = !($49 >= 0.0);
  $51 = !($spec$select >= $38);
  $or$cond = $50 | $51;
  if ($or$cond) {
   $57 = $38 - $spec$select;
   HEAPF64[$36>>3] = $57;
  } else {
   $52 = ((($36)) + 16|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = ($53|0)==(0|0);
   if (!($54)) {
    $55 = $53;
    HEAP32[$35>>2] = $55;
    $56 = HEAP32[$32>>2]|0;
    HEAP32[$52>>2] = $56;
    HEAP32[$32>>2] = $36;
   }
  }
  $$0 = $48;$$01 = $44;$$03 = $49;
 }
 $58 = $$01 > 0.0;
 if ($58) {
  $59 = $$0 / $$01;
  $60 = (((($6) + (($1*120)|0)|0)) + 80|0);
  HEAPF64[$60>>3] = $59;
  return;
 }
 $61 = HEAP32[$15>>2]|0;
 $62 = (($61) + ($9<<2)|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = ($63|0)==(0|0);
 if ($64) {
  $65 = (((($6) + (($1*120)|0)|0)) + 80|0);
  HEAPF64[$65>>3] = 0.0;
  return;
 } else {
  $66 = ((($63)) + 8|0);
  $67 = +HEAPF64[$66>>3];
  $68 = (((($6) + (($1*120)|0)|0)) + 80|0);
  HEAPF64[$68>>3] = $67;
  return;
 }
}
function _tankmix4($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 var $$01 = 0.0, $$02 = 0.0, $$03 = 0.0, $$04 = 0.0, $$inv = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0.0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $8 = 0, $9 = 0, $or$cond = 0, $spec$select = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($0)) + 52|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + ($1))|0;
 $10 = ((($0)) + 4844|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + ($9<<2)|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0|0);
 if ($14) {
  return;
 }
 $15 = ((($0)) + 4840|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + ($9<<2)|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(0|0);
 if ($19) {
  return;
 }
 $20 = $2 > 0.0;
 $21 = $3 / $2;
 $$04 = $20 ? $21 : 0.0;
 $22 = ((($13)) + 8|0);
 $23 = +HEAPF64[$22>>3];
 $24 = (((($6) + (($1*120)|0)|0)) + 80|0);
 HEAPF64[$24>>3] = $23;
 $25 = HEAP32[$10>>2]|0;
 $26 = (($25) + ($9<<2)|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $4 > 0.0;
 if ($28) {
  $29 = ((($27)) + 8|0);
  $30 = +HEAPF64[$29>>3];
  $31 = $30 - $$04;
  $32 = (+Math_abs((+$31)));
  $33 = ((($0)) + 4688|0);
  $34 = +HEAPF64[$33>>3];
  $35 = $32 < $34;
  if ($35) {
   $36 = +HEAPF64[$27>>3];
   $37 = $36 + $4;
   HEAPF64[$27>>3] = $37;
  } else {
   _addseg($0,$9,$4,$$04);
  }
  $38 = HEAP32[$10>>2]|0;
  $39 = (($38) + ($9<<2)|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ((($40)) + 8|0);
  $42 = +HEAPF64[$41>>3];
  HEAPF64[$24>>3] = $42;
  return;
 }
 $43 = $4 < 0.0;
 if (!($43)) {
  return;
 }
 $44 = - $4;
 _reversesegs($0,$9);
 $45 = ((($0)) + 4836|0);
 $$01 = 0.0;$$02 = 0.0;$$03 = $44;
 while(1) {
  $46 = $$03 > 0.0;
  if (!($46)) {
   break;
  }
  $47 = HEAP32[$15>>2]|0;
  $48 = (($47) + ($9<<2)|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ($49|0)==(0|0);
  if ($50) {
   break;
  }
  $51 = +HEAPF64[$49>>3];
  $$inv = $51 <= $$03;
  $52 = $$inv ? $51 : $$03;
  $53 = HEAP32[$10>>2]|0;
  $54 = (($53) + ($9<<2)|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = ($49|0)==($55|0);
  $spec$select = $56 ? $$03 : $52;
  $57 = $$02 + $spec$select;
  $58 = ((($49)) + 8|0);
  $59 = +HEAPF64[$58>>3];
  $60 = $59 * $spec$select;
  $61 = $$01 + $60;
  $62 = $$03 - $spec$select;
  $63 = !($62 >= 0.0);
  $64 = !($spec$select >= $51);
  $or$cond = $63 | $64;
  if ($or$cond) {
   $70 = $51 - $spec$select;
   HEAPF64[$49>>3] = $70;
  } else {
   $65 = ((($49)) + 16|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = ($66|0)==(0|0);
   if (!($67)) {
    $68 = $66;
    HEAP32[$48>>2] = $68;
    $69 = HEAP32[$45>>2]|0;
    HEAP32[$65>>2] = $69;
    HEAP32[$45>>2] = $49;
   }
  }
  $$01 = $61;$$02 = $57;$$03 = $62;
 }
 _reversesegs($0,$9);
 $71 = $$01 + $3;
 $72 = $$02 + $2;
 $73 = $71 / $72;
 HEAPF64[$24>>3] = $73;
 return;
}
function _transport($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$0$in = 0, $$01 = 0.0, $$03 = 0, $$05 = 0, $$1 = 0, $$1$in = 0, $$12 = 0.0, $$14 = 0, $$2 = 0.0, $$inv = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0;
 var $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $8 = 0, $9 = 0, $spec$select = 0, $spec$select6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 8|0;
 $3 = sp;
 $4 = ((($0)) + 4608|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if (!($6)) {
  _reactpipes($0,$1);
  _reacttanks($0,$1);
 }
 $7 = ((($0)) + 4620|0);
 $8 = ((($0)) + 88|0);
 $9 = ((($0)) + 48|0);
 $10 = ((($0)) + 4848|0);
 $11 = ((($0)) + 4536|0);
 $12 = ((($0)) + 4272|0);
 $13 = ((($0)) + 44|0);
 $14 = ((($0)) + 4260|0);
 $15 = (+($1|0));
 $$05 = 1;
 while(1) {
  $16 = HEAP32[$0>>2]|0;
  $17 = ($$05|0)>($16|0);
  if ($17) {
   break;
  }
  $18 = HEAP32[$7>>2]|0;
  $19 = (($18) + ($$05<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  HEAPF64[$2>>3] = 0.0;
  HEAPF64[$3>>3] = 0.0;
  $21 = HEAP32[$8>>2]|0;
  $22 = (($21) + ($20<<2)|0);
  $$0$in = $22;$$01 = 0.0;
  while(1) {
   $$0 = HEAP32[$$0$in>>2]|0;
   $23 = ($$0|0)==(0|0);
   if ($23) {
    break;
   }
   $24 = ((($$0)) + 4|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = HEAP32[$9>>2]|0;
   $27 = (((($26) + ($25<<7)|0)) + 36|0);
   $28 = HEAP32[$10>>2]|0;
   $29 = (($28) + ($25<<2)|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ($30|0)<(0);
   $32 = (((($26) + ($25<<7)|0)) + 32|0);
   $spec$select = $31 ? $32 : $27;
   $$03 = HEAP32[$spec$select>>2]|0;
   $33 = ($$03|0)==($20|0);
   if ($33) {
    _evalnodeinflow($0,$25,$1,$2,$3);
    $$12 = $$01;
   } else {
    $34 = HEAP32[$11>>2]|0;
    $35 = (($34) + ($25<<2)|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ($36>>>0)<(3);
    if ($37) {
     $41 = 0.0;
    } else {
     $38 = HEAP32[$12>>2]|0;
     $39 = (($38) + ($25<<3)|0);
     $40 = +HEAPF64[$39>>3];
     $41 = $40;
    }
    $42 = (+Math_abs((+$41)));
    $43 = $$01 + $42;
    $$12 = $43;
   }
   $44 = ((($$0)) + 8|0);
   $$0$in = $44;$$01 = $$12;
  }
  $45 = HEAP32[$13>>2]|0;
  $46 = (((($45) + (($20*96)|0)|0)) + 88|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = ($47|0)==(0);
  if ($48) {
   $49 = HEAP32[$14>>2]|0;
   $50 = (($49) + ($20<<3)|0);
   $51 = +HEAPF64[$50>>3];
   $$inv = $51 <= 0.0;
   $52 = $$inv ? 0.0 : $51;
   $53 = $$01 + $52;
   $$2 = $53;
  } else {
   $$2 = $$01;
  }
  $54 = $$2 * $15;
  $55 = +HEAPF64[$2>>3];
  $56 = +HEAPF64[$3>>3];
  $57 = (+_findnodequal($0,$20,$55,$56,$54,$1));
  $58 = HEAP32[$8>>2]|0;
  $59 = (($58) + ($20<<2)|0);
  $$1$in = $59;
  while(1) {
   $$1 = HEAP32[$$1$in>>2]|0;
   $60 = ($$1|0)==(0|0);
   if ($60) {
    break;
   }
   $61 = ((($$1)) + 4|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = HEAP32[$9>>2]|0;
   $64 = (((($63) + ($62<<7)|0)) + 32|0);
   $65 = HEAP32[$10>>2]|0;
   $66 = (($65) + ($62<<2)|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = ($67|0)<(0);
   $69 = (((($63) + ($62<<7)|0)) + 36|0);
   $spec$select6 = $68 ? $69 : $64;
   $$14 = HEAP32[$spec$select6>>2]|0;
   $70 = ($$14|0)==($20|0);
   if ($70) {
    _evalnodeoutflow($0,$62,$57,$1);
   }
   $71 = ((($$1)) + 8|0);
   $$1$in = $71;
  }
  _updatemassbalance($0,$20,$56,$54,$1);
  $72 = (($$05) + 1)|0;
  $$05 = $72;
 }
 STACKTOP = sp;return;
}
function _evalnodeinflow($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0.0, $$inv = 0, $$pre = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($0)) + 4536|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + ($1<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8>>>0)<(3);
 if ($9) {
  $14 = 0.0;
 } else {
  $10 = ((($0)) + 4272|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($11) + ($1<<3)|0);
  $13 = +HEAPF64[$12>>3];
  $14 = $13;
 }
 $15 = (+Math_abs((+$14)));
 $16 = (+($2|0));
 $17 = $15 * $16;
 $18 = ((($0)) + 4840|0);
 $19 = ((($0)) + 4844|0);
 $20 = ((($0)) + 4836|0);
 $$0 = $17;
 while(1) {
  $21 = $$0 > 0.0;
  if (!($21)) {
   label = 12;
   break;
  }
  $22 = HEAP32[$18>>2]|0;
  $23 = (($22) + ($1<<2)|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($24|0)==(0|0);
  if ($25) {
   label = 12;
   break;
  }
  $26 = +HEAPF64[$24>>3];
  $$inv = $26 <= $$0;
  $27 = $$inv ? $26 : $$0;
  $28 = +HEAPF64[$3>>3];
  $29 = $28 + $27;
  HEAPF64[$3>>3] = $29;
  $30 = ((($24)) + 8|0);
  $31 = +HEAPF64[$30>>3];
  $32 = $27 * $31;
  $33 = +HEAPF64[$4>>3];
  $34 = $33 + $32;
  HEAPF64[$4>>3] = $34;
  $35 = $$0 - $27;
  $36 = !($35 >= 0.0);
  $$pre = +HEAPF64[$24>>3];
  $37 = !($27 >= $$pre);
  $or$cond = $36 | $37;
  if ($or$cond) {
   $49 = $$pre - $27;
   HEAPF64[$24>>3] = $49;
  } else {
   $38 = ((($24)) + 16|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = HEAP32[$18>>2]|0;
   $41 = (($40) + ($1<<2)|0);
   HEAP32[$41>>2] = $39;
   $42 = HEAP32[$18>>2]|0;
   $43 = (($42) + ($1<<2)|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ($44|0)==(0|0);
   if ($45) {
    $46 = HEAP32[$19>>2]|0;
    $47 = (($46) + ($1<<2)|0);
    HEAP32[$47>>2] = 0;
   }
   $48 = HEAP32[$20>>2]|0;
   HEAP32[$38>>2] = $48;
   HEAP32[$20>>2] = $24;
  }
  $$0 = $35;
 }
 if ((label|0) == 12) {
  return;
 }
}
function _findnodequal($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = $5|0;
 var $$0 = 0.0, $$inv = 0, $$inv5 = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre$phi2Z2D = 0, $$pre$phi4Z2D = 0, $$pre$phiZ2D = 0, $$pre1 = 0, $$pre3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0.0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($0)) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (((($7) + (($1*96)|0)|0)) + 88|0);
 $9 = HEAP32[$8>>2]|0;
 L1: do {
  switch ($9|0) {
  case 0:  {
   $10 = ((($0)) + 4260|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (($11) + ($1<<3)|0);
   $13 = +HEAPF64[$12>>3];
   $$inv5 = $13 >= 0.0;
   $14 = $$inv5 ? 0.0 : $13;
   $15 = (+($5|0));
   $16 = $14 * $15;
   $17 = $2 - $16;
   $18 = $17 > 0.0;
   if ($18) {
    $19 = $3 / $17;
    $20 = ((($0)) + 4824|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = (($21) + ($1<<3)|0);
    HEAPF64[$22>>3] = $19;
    break L1;
   }
   $23 = ((($0)) + 4608|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ($24|0)==(0);
   if (!($25)) {
    $26 = (+_noflowqual($0,$1));
    $27 = ((($0)) + 4824|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (($28) + ($1<<3)|0);
    HEAPF64[$29>>3] = $26;
   }
   break;
  }
  case 2:  {
   $30 = (+_mixtank($0,$1,$2,$3,$4));
   $31 = ((($0)) + 4824|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = (($32) + ($1<<3)|0);
   HEAPF64[$33>>3] = $30;
   break;
  }
  default: {
  }
  }
 } while(0);
 $34 = ((($0)) + 4816|0);
 HEAPF64[$34>>3] = 0.0;
 $35 = ((($0)) + 4600|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($36|0)==(3);
 if ($37) {
  $38 = ((($0)) + 4616|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = ($39|0)==($1|0);
  if ($40) {
   $41 = HEAP32[$6>>2]|0;
   $42 = (((($41) + (($1*96)|0)|0)) + 88|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = ($43|0)==(1);
   if ($44) {
    HEAPF64[$34>>3] = 100.0;
    $$phi$trans$insert = ((($0)) + 4824|0);
    $$pre = HEAP32[$$phi$trans$insert>>2]|0;
    $$pre1 = (($$pre) + ($1<<3)|0);
    $$pre$phi2Z2D = $$pre1;$$pre$phiZ2D = $$phi$trans$insert;
   } else {
    $45 = ((($0)) + 4824|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = (($46) + ($1<<3)|0);
    $48 = +HEAPF64[$47>>3];
    $49 = 100.0 - $48;
    $$inv = $49 >= 0.0;
    $50 = $$inv ? $49 : 0.0;
    HEAPF64[$34>>3] = $50;
    $$pre$phi2Z2D = $47;$$pre$phiZ2D = $45;
   }
   HEAPF64[$$pre$phi2Z2D>>3] = 100.0;
   $$pre$phi4Z2D = $$pre$phiZ2D;
  } else {
   $$pre3 = ((($0)) + 4824|0);
   $$pre$phi4Z2D = $$pre3;
  }
  $51 = HEAP32[$$pre$phi4Z2D>>2]|0;
  $52 = (($51) + ($1<<3)|0);
  $53 = +HEAPF64[$52>>3];
  $$0 = $53;
  return (+$$0);
 }
 $54 = (+_findsourcequal($0,$1,$4,$5));
 HEAPF64[$34>>3] = $54;
 $55 = $54 == 0.0;
 if ($55) {
  $56 = ((($0)) + 4824|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = (($57) + ($1<<3)|0);
  $59 = +HEAPF64[$58>>3];
  $$0 = $59;
  return (+$$0);
 }
 $60 = HEAP32[$6>>2]|0;
 $61 = (((($60) + (($1*96)|0)|0)) + 88|0);
 $62 = HEAP32[$61>>2]|0;
 switch ($62|0) {
 case 0:  {
  $63 = ((($0)) + 4824|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = (($64) + ($1<<3)|0);
  $66 = +HEAPF64[$65>>3];
  $67 = $66 + $54;
  HEAPF64[$65>>3] = $67;
  $68 = HEAP32[$63>>2]|0;
  $69 = (($68) + ($1<<3)|0);
  $70 = +HEAPF64[$69>>3];
  $$0 = $70;
  return (+$$0);
  break;
 }
 case 2:  {
  $71 = ((($0)) + 4824|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = (($72) + ($1<<3)|0);
  $74 = +HEAPF64[$73>>3];
  $75 = $74 + $54;
  $$0 = $75;
  return (+$$0);
  break;
 }
 case 1:  {
  $76 = ((($0)) + 4824|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = (($77) + ($1<<3)|0);
  HEAPF64[$78>>3] = $54;
  $79 = +HEAPF64[$34>>3];
  $$0 = $79;
  return (+$$0);
  break;
 }
 default: {
  $80 = ((($0)) + 4824|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = (($81) + ($1<<3)|0);
  $83 = +HEAPF64[$82>>3];
  $$0 = $83;
  return (+$$0);
 }
 }
 return +(0.0);
}
function _evalnodeoutflow($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0;
 var $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 4536|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($1<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7>>>0)<(3);
 if ($8) {
  $13 = 0.0;
 } else {
  $9 = ((($0)) + 4272|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10) + ($1<<3)|0);
  $12 = +HEAPF64[$11>>3];
  $13 = $12;
 }
 $14 = (+Math_abs((+$13)));
 $15 = (+($3|0));
 $16 = $14 * $15;
 $17 = $16 == 0.0;
 if ($17) {
  return;
 }
 $18 = ((($0)) + 4844|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($19) + ($1<<2)|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)==(0|0);
 if ($22) {
  _addseg($0,$1,$16,$2);
  return;
 }
 $23 = ((($21)) + 8|0);
 $24 = +HEAPF64[$23>>3];
 $25 = $24 - $2;
 $26 = (+Math_abs((+$25)));
 $27 = ((($0)) + 4688|0);
 $28 = +HEAPF64[$27>>3];
 $29 = $26 < $28;
 if ($29) {
  $30 = +HEAPF64[$21>>3];
  $31 = $24 * $30;
  $32 = $16 * $2;
  $33 = $31 + $32;
  $34 = $30 + $16;
  $35 = $33 / $34;
  HEAPF64[$23>>3] = $35;
  HEAPF64[$21>>3] = $34;
  return;
 } else {
  _addseg($0,$1,$16,$2);
  return;
 }
}
function _updatemassbalance($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = +$3;
 $4 = $4|0;
 var $$0 = 0.0, $$01 = 0.0, $$1 = 0.0, $$inv = 0, $$pn = 0.0, $$pn$in = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0;
 var $24 = 0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($0)) + 44|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (((($6) + (($1*96)|0)|0)) + 88|0);
 $8 = HEAP32[$7>>2]|0;
 switch ($8|0) {
 case 0:  {
  $9 = ((($0)) + 4260|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10) + ($1<<3)|0);
  $12 = +HEAPF64[$11>>3];
  $$inv = $12 <= 0.0;
  $13 = $$inv ? 0.0 : $12;
  $14 = (+($4|0));
  $15 = $13 * $14;
  $16 = ((($0)) + 4824|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($17) + ($1<<3)|0);
  $19 = +HEAPF64[$18>>3];
  $20 = $15 * $19;
  $21 = ((($0)) + 4816|0);
  $22 = +HEAPF64[$21>>3];
  $23 = $22 * $3;
  $$01 = $20;$$1 = $23;
  break;
 }
 case 1:  {
  $24 = ((($0)) + 4816|0);
  $25 = +HEAPF64[$24>>3];
  $26 = $25 > 0.0;
  if ($26) {
   $$pn$in = $24;
  } else {
   $27 = ((($0)) + 4824|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = (($28) + ($1<<3)|0);
   $$pn$in = $29;
  }
  $$pn = +HEAPF64[$$pn$in>>3];
  $$0 = $$pn * $3;
  $$01 = $2;$$1 = $$0;
  break;
 }
 case 2:  {
  $30 = ((($0)) + 4816|0);
  $31 = +HEAPF64[$30>>3];
  $32 = $31 * $3;
  $$01 = 0.0;$$1 = $32;
  break;
 }
 default: {
  $$01 = 0.0;$$1 = 0.0;
 }
 }
 $33 = ((($0)) + 4872|0);
 $34 = +HEAPF64[$33>>3];
 $35 = $34 + $$01;
 HEAPF64[$33>>3] = $35;
 $36 = ((($0)) + 4864|0);
 $37 = +HEAPF64[$36>>3];
 $38 = $37 + $$1;
 HEAPF64[$36>>3] = $38;
 return;
}
function _addseg($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = +$3;
 var $$0 = 0, $$pre = 0, $$pre$phi3Z2D = 0, $$pre$phiZ2D = 0, $$pre1 = 0, $$pre2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 4836|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 do {
  if ($6) {
   $9 = ((($0)) + 4832|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (_mempool_alloc($10)|0);
   $12 = ($11|0)==(0|0);
   if (!($12)) {
    $$pre1 = ((($11)) + 16|0);
    $$0 = $11;$$pre$phiZ2D = $$pre1;
    break;
   }
   $13 = ((($0)) + 4612|0);
   HEAP32[$13>>2] = 1;
   return;
  } else {
   $7 = ((($5)) + 16|0);
   $8 = HEAP32[$7>>2]|0;
   HEAP32[$4>>2] = $8;
   $$0 = $5;$$pre$phiZ2D = $7;
  }
 } while(0);
 HEAPF64[$$0>>3] = $2;
 $14 = ((($$0)) + 8|0);
 HEAPF64[$14>>3] = $3;
 HEAP32[$$pre$phiZ2D>>2] = 0;
 $15 = ((($0)) + 4840|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + ($1<<2)|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(0|0);
 if ($19) {
  HEAP32[$17>>2] = $$0;
 }
 $20 = ((($0)) + 4844|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($21) + ($1<<2)|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==(0|0);
 if ($24) {
  $$pre$phi3Z2D = $22;
 } else {
  $25 = ((($23)) + 16|0);
  HEAP32[$25>>2] = $$0;
  $$pre = HEAP32[$20>>2]|0;
  $$pre2 = (($$pre) + ($1<<2)|0);
  $$pre$phi3Z2D = $$pre2;
 }
 HEAP32[$$pre$phi3Z2D>>2] = $$0;
 return;
}
function _noflowqual($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$0$in = 0, $$01 = 0.0, $$02 = 0, $$2 = 0.0, $$24 = 0, $$3 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 88|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + ($1<<2)|0);
 $5 = ((($0)) + 4848|0);
 $6 = ((($0)) + 48|0);
 $7 = ((($0)) + 4840|0);
 $8 = ((($0)) + 4844|0);
 $$0$in = $4;$$01 = 0.0;$$02 = 0;
 while(1) {
  $$0 = HEAP32[$$0$in>>2]|0;
  $9 = ($$0|0)==(0|0);
  if ($9) {
   break;
  }
  $10 = ((($$0)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = HEAP32[$5>>2]|0;
  $13 = (($12) + ($11<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = HEAP32[$6>>2]|0;
  $16 = (((($15) + ($11<<7)|0)) + 36|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)==($1|0);
  $19 = ($14|0)>(-1);
  $or$cond = $18 & $19;
  if ($or$cond) {
   label = 5;
  } else {
   $20 = (((($15) + ($11<<7)|0)) + 32|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ($21|0)==($1|0);
   $23 = ($14|0)<(0);
   $or$cond9 = $22 & $23;
   if ($or$cond9) {
    label = 5;
   } else {
    $32 = HEAP32[$8>>2]|0;
    $33 = (($32) + ($11<<2)|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = ($34|0)==(0|0);
    if ($35) {
     $$2 = $$01;$$24 = $$02;
    } else {
     $36 = ((($34)) + 8|0);
     $37 = +HEAPF64[$36>>3];
     $38 = $$01 + $37;
     $39 = (($$02) + 1)|0;
     $$2 = $38;$$24 = $39;
    }
   }
  }
  if ((label|0) == 5) {
   label = 0;
   $24 = HEAP32[$7>>2]|0;
   $25 = (($24) + ($11<<2)|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ($26|0)==(0|0);
   if ($27) {
    $$2 = $$01;$$24 = $$02;
   } else {
    $28 = ((($26)) + 8|0);
    $29 = +HEAPF64[$28>>3];
    $30 = $$01 + $29;
    $31 = (($$02) + 1)|0;
    $$2 = $30;$$24 = $31;
   }
  }
  $40 = ((($$0)) + 8|0);
  $$0$in = $40;$$01 = $$2;$$02 = $$24;
 }
 $41 = ($$02|0)>(0);
 if (!($41)) {
  $$3 = $$01;
  return (+$$3);
 }
 $42 = (+($$02|0));
 $43 = $$01 / $42;
 $$3 = $43;
 return (+$$3);
}
function _sortnodes($0) {
 $0 = $0|0;
 var $$0 = 0, $$0$in = 0, $$01 = 0, $$02 = 0, $$04 = 0, $$05 = 0, $$07 = 0, $$08 = 0, $$08$in = 0, $$13 = 0, $$16 = 0, $$19 = 0, $$2 = 0, $$3 = 0, $$4 = 0, $$7 = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre10 = 0, $1 = 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $or$cond = 0, $spec$select = 0, $spec$select11 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 1)|0;
 $3 = (_calloc($2,4)|0);
 $4 = HEAP32[$0>>2]|0;
 $5 = (($4) + 1)|0;
 $6 = (_calloc($5,4)|0);
 $7 = ($3|0)==(0|0);
 $8 = ($6|0)==(0|0);
 $or$cond = $7 | $8;
 if ($or$cond) {
  $$01 = 101;$$13 = 0;
  $69 = HEAP32[$0>>2]|0;
  $70 = ($$13|0)<($69|0);
  $spec$select11 = $70 ? 120 : $$01;
  _free($3);
  _free($6);
  return ($spec$select11|0);
 }
 $9 = ((($0)) + 12|0);
 $10 = ((($0)) + 4848|0);
 $11 = ((($0)) + 48|0);
 $$07 = 1;
 while(1) {
  $12 = HEAP32[$9>>2]|0;
  $13 = ($$07|0)>($12|0);
  if ($13) {
   break;
  }
  $14 = HEAP32[$10>>2]|0;
  $15 = (($14) + ($$07<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  switch ($16|0) {
  case 1:  {
   $17 = HEAP32[$11>>2]|0;
   $18 = (((($17) + ($$07<<7)|0)) + 36|0);
   $$08$in = $18;
   label = 7;
   break;
  }
  case -1:  {
   $19 = HEAP32[$11>>2]|0;
   $20 = (((($19) + ($$07<<7)|0)) + 32|0);
   $$08$in = $20;
   label = 7;
   break;
  }
  default: {
  }
  }
  if ((label|0) == 7) {
   label = 0;
   $$08 = HEAP32[$$08$in>>2]|0;
   $21 = (($3) + ($$08<<2)|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = (($22) + 1)|0;
   HEAP32[$21>>2] = $23;
  }
  $24 = (($$07) + 1)|0;
  $$07 = $24;
 }
 $$04 = 1;$$05 = 0;
 while(1) {
  $25 = HEAP32[$0>>2]|0;
  $26 = ($$04|0)>($25|0);
  if ($26) {
   break;
  }
  $27 = (($3) + ($$04<<2)|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ($28|0)==(0);
  if ($29) {
   $30 = (($$05) + 1)|0;
   $31 = (($6) + ($30<<2)|0);
   HEAP32[$31>>2] = $$04;
   $$16 = $30;
  } else {
   $$16 = $$05;
  }
  $32 = (($$04) + 1)|0;
  $$04 = $32;$$05 = $$16;
 }
 $33 = ((($0)) + 4620|0);
 $34 = ((($0)) + 88|0);
 $$02 = 0;$$2 = $$05;$36 = $25;
 while(1) {
  $35 = ($$02|0)<($36|0);
  if (!($35)) {
   $$01 = 0;$$13 = $$02;
   label = 29;
   break;
  }
  $37 = ($$2|0)==(0);
  if ($37) {
   $38 = (_selectnonstacknode($0,$$02,$3)|0);
   $39 = ($38|0)==(0);
   if ($39) {
    $$01 = 0;$$13 = $$02;
    label = 29;
    break;
   }
   $40 = (($3) + ($38<<2)|0);
   HEAP32[$40>>2] = 0;
   $41 = ((($6)) + 4|0);
   HEAP32[$41>>2] = $38;
   $$3 = 1;$46 = $38;
  } else {
   $$phi$trans$insert = (($6) + ($$2<<2)|0);
   $$pre10 = HEAP32[$$phi$trans$insert>>2]|0;
   $$3 = $$2;$46 = $$pre10;
  }
  $42 = (($$3) + -1)|0;
  $43 = (($$02) + 1)|0;
  $44 = HEAP32[$33>>2]|0;
  $45 = (($44) + ($43<<2)|0);
  HEAP32[$45>>2] = $46;
  $47 = HEAP32[$34>>2]|0;
  $48 = (($47) + ($46<<2)|0);
  $$0$in = $48;$$4 = $42;
  while(1) {
   $$0 = HEAP32[$$0$in>>2]|0;
   $49 = ($$0|0)==(0|0);
   if ($49) {
    break;
   }
   $50 = ((($$0)) + 4|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = HEAP32[$10>>2]|0;
   $53 = (($52) + ($51<<2)|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = ($54|0)==(0);
   if ($55) {
    $$7 = $$4;
   } else {
    $56 = HEAP32[$11>>2]|0;
    $57 = (((($56) + ($51<<7)|0)) + 36|0);
    $58 = ($54|0)<(0);
    $59 = (((($56) + ($51<<7)|0)) + 32|0);
    $spec$select = $58 ? $59 : $57;
    $$19 = HEAP32[$spec$select>>2]|0;
    $60 = ($$19|0)==($46|0);
    if ($60) {
     $$7 = $$4;
    } else {
     $61 = (($3) + ($$19<<2)|0);
     $62 = HEAP32[$61>>2]|0;
     $63 = ($62|0)>(0);
     if ($63) {
      $64 = (($62) + -1)|0;
      HEAP32[$61>>2] = $64;
      $65 = ($64|0)==(0);
      if ($65) {
       $66 = (($$4) + 1)|0;
       $67 = (($6) + ($66<<2)|0);
       HEAP32[$67>>2] = $$19;
       $$7 = $66;
      } else {
       $$7 = $$4;
      }
     } else {
      $$7 = $$4;
     }
    }
   }
   $68 = ((($$0)) + 8|0);
   $$0$in = $68;$$4 = $$7;
  }
  $$pre = HEAP32[$0>>2]|0;
  $$02 = $43;$$2 = $$4;$36 = $$pre;
 }
 if ((label|0) == 29) {
  $69 = HEAP32[$0>>2]|0;
  $70 = ($$13|0)<($69|0);
  $spec$select11 = $70 ? 120 : $$01;
  _free($3);
  _free($6);
  return ($spec$select11|0);
 }
 return (0)|0;
}
function _selectnonstacknode($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$01 = 0, $$01$in = 0, $$02 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 4620|0);
 $4 = ((($0)) + 88|0);
 $$02 = $1;
 L1: while(1) {
  $5 = ($$02|0)>(0);
  if (!($5)) {
   break;
  }
  $6 = HEAP32[$3>>2]|0;
  $7 = (($6) + ($$02<<2)|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$4>>2]|0;
  $10 = (($9) + ($8<<2)|0);
  $$01$in = $10;
  while(1) {
   $$01 = HEAP32[$$01$in>>2]|0;
   $11 = ($$01|0)==(0|0);
   if ($11) {
    break;
   }
   $12 = HEAP32[$$01>>2]|0;
   $13 = (($2) + ($12<<2)|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($14|0)>(0);
   if ($15) {
    $$0 = $12;
    label = 12;
    break L1;
   }
   $16 = ((($$01)) + 8|0);
   $$01$in = $16;
  }
  $17 = (($$02) + -1)|0;
  $$02 = $17;
 }
 if ((label|0) == 12) {
  return ($$0|0);
 }
 $18 = HEAP32[$0>>2]|0;
 $$1 = 1;
 while(1) {
  $19 = ($$1|0)>($18|0);
  if ($19) {
   $$0 = 0;
   label = 12;
   break;
  }
  $20 = (($2) + ($$1<<2)|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)>(0);
  if ($22) {
   $$0 = $$1;
   label = 12;
   break;
  }
  $23 = (($$1) + 1)|0;
  $$1 = $23;
 }
 if ((label|0) == 12) {
  return ($$0|0);
 }
 return (0)|0;
}
function _initsegs($0) {
 $0 = $0|0;
 var $$0 = 0, $$01 = 0, $$inv = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0;
 var $43 = 0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0.0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 12|0);
 $2 = ((($0)) + 4840|0);
 $3 = ((($0)) + 4844|0);
 $4 = ((($0)) + 48|0);
 $5 = ((($0)) + 4824|0);
 $$0 = 1;
 while(1) {
  $6 = HEAP32[$1>>2]|0;
  $7 = ($$0|0)>($6|0);
  if ($7) {
   break;
  }
  $8 = HEAP32[$2>>2]|0;
  $9 = (($8) + ($$0<<2)|0);
  HEAP32[$9>>2] = 0;
  $10 = HEAP32[$3>>2]|0;
  $11 = (($10) + ($$0<<2)|0);
  HEAP32[$11>>2] = 0;
  $12 = HEAP32[$4>>2]|0;
  $13 = (((($12) + ($$0<<7)|0)) + 104|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)==(1);
  if ($15) {
   $16 = (((($12) + ($$0<<7)|0)) + 48|0);
   $17 = +HEAPF64[$16>>3];
   $18 = $17 * 0.78539800000000004;
   $19 = (((($12) + ($$0<<7)|0)) + 40|0);
   $20 = +HEAPF64[$19>>3];
   $21 = $20 * $20;
   $22 = $18 * $21;
   $23 = (((($12) + ($$0<<7)|0)) + 36|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = HEAP32[$5>>2]|0;
   $26 = (($25) + ($24<<3)|0);
   $27 = +HEAPF64[$26>>3];
   _addseg($0,$$0,$22,$27);
  }
  $28 = (($$0) + 1)|0;
  $$0 = $28;
 }
 $29 = ((($0)) + 4|0);
 $30 = ((($0)) + 52|0);
 $31 = ((($0)) + 44|0);
 $$01 = 1;
 while(1) {
  $32 = HEAP32[$29>>2]|0;
  $33 = ($$01|0)>($32|0);
  if ($33) {
   break;
  }
  $34 = HEAP32[$30>>2]|0;
  $35 = (((($34) + (($$01*120)|0)|0)) + 8|0);
  $36 = +HEAPF64[$35>>3];
  $37 = $36 == 0.0;
  if (!($37)) {
   $38 = (($34) + (($$01*120)|0)|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = HEAP32[$31>>2]|0;
   $41 = (((($40) + (($39*96)|0)|0)) + 64|0);
   $42 = +HEAPF64[$41>>3];
   $43 = (((($34) + (($$01*120)|0)|0)) + 56|0);
   $44 = +HEAPF64[$43>>3];
   $45 = HEAP32[$1>>2]|0;
   $46 = (($45) + ($$01))|0;
   $47 = HEAP32[$2>>2]|0;
   $48 = (($47) + ($46<<2)|0);
   HEAP32[$48>>2] = 0;
   $49 = HEAP32[$3>>2]|0;
   $50 = (($49) + ($46<<2)|0);
   HEAP32[$50>>2] = 0;
   _addseg($0,$46,$44,$42);
   $51 = HEAP32[$30>>2]|0;
   $52 = (((($51) + (($$01*120)|0)|0)) + 96|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = ($53|0)==(1);
   if ($54) {
    $55 = (((($51) + (($$01*120)|0)|0)) + 104|0);
    $56 = +HEAPF64[$55>>3];
    $57 = $44 - $56;
    $$inv = $57 <= 0.0;
    $58 = $$inv ? 0.0 : $57;
    $59 = HEAP32[$2>>2]|0;
    $60 = (($59) + ($46<<2)|0);
    $61 = HEAP32[$60>>2]|0;
    HEAPF64[$61>>3] = $58;
    $62 = $44 - $58;
    _addseg($0,$46,$62,$42);
   }
  }
  $63 = (($$01) + 1)|0;
  $$01 = $63;
 }
 return;
}
function _reversesegs($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$0$phi = 0, $$01 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4840|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + ($1<<2)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 4844|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + ($1<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$4>>2] = $9;
 $10 = HEAP32[$6>>2]|0;
 $11 = (($10) + ($1<<2)|0);
 HEAP32[$11>>2] = $5;
 $$0 = 0;$$01 = $5;
 while(1) {
  $12 = ($$01|0)==(0|0);
  if ($12) {
   break;
  }
  $13 = ((($$01)) + 16|0);
  $14 = HEAP32[$13>>2]|0;
  HEAP32[$13>>2] = $$0;
  $$0$phi = $$01;$$01 = $14;$$0 = $$0$phi;
 }
 return;
}
function _clearreport($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 1200|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = 0;
  return ($$0|0);
 }
 $4 = ((($0)) + 1269|0);
 $5 = (_freopen($4,$2)|0);
 $6 = ($5|0)==(0|0);
 if ($6) {
  $$0 = 303;
  return ($$0|0);
 }
 _writelogo($0);
 $$0 = 0;
 return ($$0|0);
}
function _writelogo($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $vararg_buffer = sp + 80|0;
 $1 = sp;
 $2 = sp + 88|0;
 (_time(($2|0))|0);
 $3 = ((($0)) + 1789|0);
 $4 = (_ctime(($2|0))|0);
 (_strcpy($3,$4)|0);
 $5 = ((($0)) + 1252|0);
 HEAP32[$5>>2] = 1;
 $6 = ((($0)) + 1248|0);
 HEAP32[$6>>2] = 2;
 $7 = ((($0)) + 1200|0);
 $8 = HEAP32[$7>>2]|0;
 (_fwrite(10594,44,1,$8)|0);
 $9 = HEAP32[$7>>2]|0;
 _fputs($3,$9);
 _writeline($0,10639);
 _writeline($0,10706);
 _writeline($0,10773);
 _writeline($0,10840);
 HEAP32[$vararg_buffer>>2] = 2;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 2;
 _sprintf($1,10907,$vararg_buffer);
 _writeline($0,$1);
 _writeline($0,10639);
 _writeline($0,21208);
 STACKTOP = sp;return;
}
function _writeline($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 1200|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $5 = ((($0)) + 1212|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 if ($7) {
  $20 = $3;
 } else {
  $8 = ((($0)) + 1248|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($0)) + 1208|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($9|0)==($11|0);
  if ($12) {
   $13 = ((($0)) + 1252|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (($14) + 1)|0;
   HEAP32[$13>>2] = $15;
   $16 = ((($0)) + 5336|0);
   HEAP32[$vararg_buffer>>2] = $15;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $16;
   $17 = (_fprintf($3,10976,$vararg_buffer)|0);
   $18 = ($17|0)<(0);
   if ($18) {
    $19 = ((($0)) + 1244|0);
    HEAP32[$19>>2] = 1;
   }
   HEAP32[$8>>2] = 3;
   $$pre = HEAP32[$2>>2]|0;
   $20 = $$pre;
  } else {
   $20 = $3;
  }
 }
 HEAP32[$vararg_buffer2>>2] = $1;
 $21 = (_fprintf($20,11002,$vararg_buffer2)|0);
 $22 = ($21|0)<(0);
 if ($22) {
  $23 = ((($0)) + 1244|0);
  HEAP32[$23>>2] = 1;
 }
 $24 = ((($0)) + 1248|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($25) + 1)|0;
 HEAP32[$24>>2] = $26;
 STACKTOP = sp;return;
}
function _copyreport($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 1200|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 0;
  return ($$0|0);
 }
 $5 = (_fopen($1,10592)|0);
 $6 = ($5|0)==(0|0);
 if ($6) {
  $$0 = 303;
  return ($$0|0);
 }
 $7 = HEAP32[$2>>2]|0;
 _fclose($7);
 $8 = ((($0)) + 1269|0);
 $9 = (_fopen($8,11008)|0);
 HEAP32[$2>>2] = $9;
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  $11 = $9;
  while(1) {
   $12 = (_fgetc($11)|0);
   $13 = ($12|0)==(-1);
   if ($13) {
    break;
   }
   _fputc($12,$5);
   $$pre = HEAP32[$2>>2]|0;
   $11 = $$pre;
  }
  $14 = HEAP32[$2>>2]|0;
  _fclose($14);
 }
 _fclose($5);
 $15 = (_fopen($8,15007)|0);
 HEAP32[$2>>2] = $15;
 $16 = ($15|0)==(0|0);
 $spec$select = $16 ? 303 : 0;
 return ($spec$select|0);
}
function _writereport($0) {
 $0 = $0|0;
 var $$3 = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $strlenfirst = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 1200|0);
 $2 = ((($0)) + 1244|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 1212|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 $$pre = ((($0)) + 1529|0);
 if ($5) {
  label = 7;
 } else {
  $6 = (_strlen($$pre)|0);
  $7 = ($6|0)==(0);
  if ($7) {
   $8 = HEAP32[$1>>2]|0;
   $9 = ($8|0)==(0|0);
   if ($9) {
    label = 7;
   } else {
    $10 = ((($0)) + 1232|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($11|0)==(0);
    if (!($12)) {
     _writeenergy($0);
    }
    $13 = (_writeresults($0)|0);
    $$3 = $13;
   }
  } else {
   label = 7;
  }
 }
 do {
  if ((label|0) == 7) {
   $strlenfirst = HEAP8[$$pre>>0]|0;
   $14 = ($strlenfirst<<24>>24)==(0);
   if ($14) {
    $$3 = 0;
   } else {
    $15 = ((($0)) + 128|0);
    $16 = (_strcomp($$pre,$15)|0);
    $17 = ($16|0)==(0);
    if ($17) {
     $18 = ((($0)) + 1269|0);
     $19 = (_strcomp($$pre,$18)|0);
     $20 = ($19|0)==(0);
     if ($20) {
      $25 = HEAP32[$1>>2]|0;
      $26 = (_fopen($$pre,11010)|0);
      HEAP32[$1>>2] = $26;
      $27 = ($26|0)==(0|0);
      if ($27) {
       HEAP32[$1>>2] = $25;
       HEAP32[$3>>2] = $4;
       $$3 = 303;
       break;
      }
      HEAP32[$3>>2] = 1;
      _writelogo($0);
      $28 = ((($0)) + 1220|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = ($29|0)==(0);
      if (!($30)) {
       _writesummary($0);
      }
      $31 = ((($0)) + 1232|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = ($32|0)==(0);
      if (!($33)) {
       _writeenergy($0);
      }
      $34 = (_writeresults($0)|0);
      $35 = HEAP32[$1>>2]|0;
      _fclose($35);
      HEAP32[$1>>2] = $25;
      HEAP32[$3>>2] = $4;
      $$3 = $34;
      break;
     }
    }
    $21 = ((($0)) + 1232|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ($22|0)==(0);
    if (!($23)) {
     _writeenergy($0);
    }
    $24 = (_writeresults($0)|0);
    $$3 = $24;
   }
  }
 } while(0);
 $36 = HEAP32[$2>>2]|0;
 $37 = ($36|0)==(0);
 if ($37) {
  return ($$3|0);
 }
 _errmsg($0,309);
 return ($$3|0);
}
function _writeenergy($0) {
 $0 = $0|0;
 var $$0 = 0.0, $$01 = 0, $$pre = 0.0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0;
 var $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr14 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1120|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1120|0);
 $vararg_buffer11 = sp + 1104|0;
 $vararg_buffer7 = sp + 1088|0;
 $vararg_buffer = sp + 1032|0;
 $1 = sp;
 $2 = ((($0)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  STACKTOP = sp;return;
 }
 _writeline($0,14809);
 _writeheader($0,1,0);
 $5 = ((($0)) + 56|0);
 $6 = ((($0)) + 1248|0);
 $7 = ((($0)) + 1208|0);
 $8 = ((($0)) + 48|0);
 $$0 = 0.0;$$01 = 1;
 while(1) {
  $9 = HEAP32[$2>>2]|0;
  $10 = ($$01|0)>($9|0);
  if ($10) {
   break;
  }
  $11 = HEAP32[$5>>2]|0;
  $12 = (((($11) + ($$01<<7)|0)) + 120|0);
  $13 = +HEAPF64[$12>>3];
  $14 = $$0 + $13;
  $15 = HEAP32[$6>>2]|0;
  $16 = HEAP32[$7>>2]|0;
  $17 = ($15|0)==($16|0);
  if ($17) {
   _writeheader($0,1,1);
   $$pre = +HEAPF64[$12>>3];
   $32 = $$pre;
  } else {
   $32 = $13;
  }
  $18 = HEAP32[$8>>2]|0;
  $19 = (($11) + ($$01<<7)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($18) + ($20<<7)|0);
  $22 = (((($11) + ($$01<<7)|0)) + 80|0);
  $23 = +HEAPF64[$22>>3];
  $24 = (((($11) + ($$01<<7)|0)) + 88|0);
  $25 = +HEAPF64[$24>>3];
  $26 = (((($11) + ($$01<<7)|0)) + 96|0);
  $27 = +HEAPF64[$26>>3];
  $28 = (((($11) + ($$01<<7)|0)) + 104|0);
  $29 = +HEAPF64[$28>>3];
  $30 = (((($11) + ($$01<<7)|0)) + 112|0);
  $31 = +HEAPF64[$30>>3];
  HEAP32[$vararg_buffer>>2] = $21;
  $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
  HEAPF64[$vararg_ptr1>>3] = $23;
  $vararg_ptr2 = ((($vararg_buffer)) + 16|0);
  HEAPF64[$vararg_ptr2>>3] = $25;
  $vararg_ptr3 = ((($vararg_buffer)) + 24|0);
  HEAPF64[$vararg_ptr3>>3] = $27;
  $vararg_ptr4 = ((($vararg_buffer)) + 32|0);
  HEAPF64[$vararg_ptr4>>3] = $29;
  $vararg_ptr5 = ((($vararg_buffer)) + 40|0);
  HEAPF64[$vararg_ptr5>>3] = $31;
  $vararg_ptr6 = ((($vararg_buffer)) + 48|0);
  HEAPF64[$vararg_ptr6>>3] = $32;
  _sprintf($1,12867,$vararg_buffer);
  _writeline($0,$1);
  $33 = (($$01) + 1)|0;
  $$0 = $14;$$01 = $33;
 }
 _fillstr($1,63);
 _writeline($0,$1);
 $34 = ((($0)) + 4432|0);
 $35 = +HEAPF64[$34>>3];
 $36 = ((($0)) + 4424|0);
 $37 = +HEAPF64[$36>>3];
 $38 = $35 * $37;
 HEAP32[$vararg_buffer7>>2] = 21208;
 $vararg_ptr10 = ((($vararg_buffer7)) + 8|0);
 HEAPF64[$vararg_ptr10>>3] = $38;
 _sprintf($1,12909,$vararg_buffer7);
 _writeline($0,$1);
 $39 = +HEAPF64[$34>>3];
 $40 = +HEAPF64[$36>>3];
 $41 = $39 * $40;
 $42 = $$0 + $41;
 HEAP32[$vararg_buffer11>>2] = 21208;
 $vararg_ptr14 = ((($vararg_buffer11)) + 8|0);
 HEAPF64[$vararg_ptr14>>3] = $42;
 _sprintf($1,12935,$vararg_buffer11);
 _writeline($0,$1);
 _writeline($0,14809);
 STACKTOP = sp;return;
}
function _writeresults($0) {
 $0 = $0|0;
 var $$ = 0, $$0 = 0, $$018 = 0, $$02 = 0, $$03 = 0, $$04 = 0, $$05 = 0, $$06 = 0, $$17 = 0, $$2 = 0, $$3 = 0, $$4 = 0, $$5 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond10 = 0, $exitcond11 = 0, $exitcond12 = 0, $exitcond13 = 0, $exitcond14 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4216|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 1236|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = ((($0)) + 1240|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0);
  if ($8) {
   $$0 = 0;
   return ($$0|0);
  }
 }
 $$04 = 0;$$06 = 0;
 while(1) {
  $exitcond14 = ($$06|0)==(5);
  if ($exitcond14) {
   break;
  }
  $9 = (((((($0)) + 1816|0) + (($$06*88)|0)|0)) + 64|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($$04) + ($10))|0;
  $12 = (($$06) + 1)|0;
  $$04 = $11;$$06 = $12;
 }
 $$03 = 0;$$17 = 5;
 while(1) {
  $exitcond13 = ($$17|0)==(15);
  if ($exitcond13) {
   break;
  }
  $13 = (((((($0)) + 1816|0) + (($$17*88)|0)|0)) + 64|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($$03) + ($14))|0;
  $16 = (($$17) + 1)|0;
  $$03 = $15;$$17 = $16;
 }
 $17 = $$04 | $$03;
 $18 = ($17|0)==(0);
 if ($18) {
  $$0 = 0;
  return ($$0|0);
 }
 $19 = ($2|0)==(0|0);
 if ($19) {
  $20 = ((($0)) + 3924|0);
  $21 = (_fopen($20,12501)|0);
  $22 = ($21|0)==(0|0);
  if ($22) {
   $$0 = 106;
   return ($$0|0);
  } else {
   $$018 = $21;
  }
 } else {
  $$018 = $2;
 }
 $23 = HEAP32[$0>>2]|0;
 $24 = ((($0)) + 12|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($23|0)<($25|0);
 $$ = $26 ? $25 : $23;
 $27 = (($$) + 1)|0;
 $28 = (_calloc(8,4)|0);
 $29 = ($28|0)==(0|0);
 $30 = $29 ? 101 : 0;
 if ($29) {
  $$0 = $30;
  return ($$0|0);
 }
 $$02 = 0;$$2 = 0;
 while(1) {
  $exitcond12 = ($$2|0)==(8);
  if ($exitcond12) {
   break;
  }
  $31 = (_calloc($27,4)|0);
  $32 = (($28) + ($$2<<2)|0);
  HEAP32[$32>>2] = $31;
  $33 = ($31|0)==(0|0);
  $spec$select = $33 ? 101 : $$02;
  $34 = (($$2) + 1)|0;
  $$02 = $spec$select;$$2 = $34;
 }
 $35 = ($$02|0)==(0);
 L27: do {
  if ($35) {
   $36 = ((($0)) + 4212|0);
   $37 = HEAP32[$36>>2]|0;
   _fseek($$018,$37,0);
   $38 = ((($0)) + 1164|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = ((($0)) + 1172|0);
   HEAP32[$40>>2] = $39;
   $41 = ((($0)) + 1204|0);
   $42 = ($$04|0)>(0);
   $43 = ($$03|0)>(0);
   $44 = ((($0)) + 1240|0);
   $45 = ((($0)) + 1160|0);
   $$05 = 1;
   while(1) {
    $46 = HEAP32[$41>>2]|0;
    $47 = ($$05|0)>($46|0);
    if ($47) {
     break L27;
    }
    $$3 = 1;
    while(1) {
     $exitcond10 = ($$3|0)==(5);
     if ($exitcond10) {
      break;
     }
     $48 = (($$3) + -1)|0;
     $49 = (($28) + ($48<<2)|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = ((($50)) + 4|0);
     $52 = HEAP32[$0>>2]|0;
     (_fread($51,$52,$$018)|0);
     $53 = (($$3) + 1)|0;
     $$3 = $53;
    }
    if ($42) {
     $54 = HEAP32[$3>>2]|0;
     $55 = ($54|0)>(0);
     if ($55) {
      _writenodetable($0,$28);
     }
    }
    $$4 = 7;
    while(1) {
     $exitcond11 = ($$4|0)==(15);
     if ($exitcond11) {
      break;
     }
     $56 = (($$4) + -7)|0;
     $57 = (($28) + ($56<<2)|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ((($58)) + 4|0);
     $60 = HEAP32[$24>>2]|0;
     (_fread($59,$60,$$018)|0);
     $61 = (($$4) + 1)|0;
     $$4 = $61;
    }
    if ($43) {
     $62 = HEAP32[$44>>2]|0;
     $63 = ($62|0)>(0);
     if ($63) {
      _writelinktable($0,$28);
     }
    }
    $64 = HEAP32[$45>>2]|0;
    $65 = HEAP32[$40>>2]|0;
    $66 = (($65) + ($64))|0;
    HEAP32[$40>>2] = $66;
    $67 = (($$05) + 1)|0;
    $$05 = $67;
   }
  }
 } while(0);
 _fclose($$018);
 $$5 = 0;
 while(1) {
  $exitcond = ($$5|0)==(8);
  if ($exitcond) {
   break;
  }
  $68 = (($28) + ($$5<<2)|0);
  $69 = HEAP32[$68>>2]|0;
  _free($69);
  $70 = (($$5) + 1)|0;
  $$5 = $70;
 }
 _free($28);
 $$0 = $$02;
 return ($$0|0);
}
function _writesummary($0) {
 $0 = $0|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$pre = 0, $$pre3 = 0, $$pre4 = 0, $$pre5 = 0, $$pre6 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0.0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $13 = 0, $14 = 0, $15 = 0.0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0.0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0.0;
 var $89 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0, $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0.0, $exitcond = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer22 = 0;
 var $vararg_buffer25 = 0, $vararg_buffer28 = 0, $vararg_buffer32 = 0, $vararg_buffer35 = 0, $vararg_buffer39 = 0, $vararg_buffer4 = 0, $vararg_buffer43 = 0, $vararg_buffer46 = 0, $vararg_buffer49 = 0, $vararg_buffer52 = 0, $vararg_buffer55 = 0, $vararg_buffer58 = 0, $vararg_buffer61 = 0, $vararg_buffer64 = 0, $vararg_buffer67 = 0, $vararg_buffer7 = 0, $vararg_buffer71 = 0, $vararg_buffer74 = 0, $vararg_buffer77 = 0, $vararg_buffer80 = 0;
 var $vararg_buffer83 = 0, $vararg_ptr31 = 0, $vararg_ptr38 = 0, $vararg_ptr42 = 0, $vararg_ptr70 = 0, $vararg_ptr86 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1296|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1296|0);
 $vararg_buffer83 = sp + 1280|0;
 $vararg_buffer80 = sp + 1272|0;
 $vararg_buffer77 = sp + 1264|0;
 $vararg_buffer74 = sp + 1256|0;
 $vararg_buffer71 = sp + 1248|0;
 $vararg_buffer67 = sp + 1232|0;
 $vararg_buffer64 = sp + 1224|0;
 $vararg_buffer61 = sp + 1216|0;
 $vararg_buffer58 = sp + 1208|0;
 $vararg_buffer55 = sp + 1200|0;
 $vararg_buffer52 = sp + 1192|0;
 $vararg_buffer49 = sp + 1184|0;
 $vararg_buffer46 = sp + 1176|0;
 $vararg_buffer43 = sp + 1168|0;
 $vararg_buffer39 = sp + 1152|0;
 $vararg_buffer35 = sp + 1136|0;
 $vararg_buffer32 = sp + 1128|0;
 $vararg_buffer28 = sp + 1112|0;
 $vararg_buffer25 = sp + 1104|0;
 $vararg_buffer22 = sp + 1096|0;
 $vararg_buffer19 = sp + 1088|0;
 $vararg_buffer16 = sp + 1080|0;
 $vararg_buffer13 = sp + 1072|0;
 $vararg_buffer10 = sp + 1064|0;
 $vararg_buffer7 = sp + 1056|0;
 $vararg_buffer4 = sp + 1048|0;
 $vararg_buffer1 = sp + 1040|0;
 $vararg_buffer = sp + 1032|0;
 $1 = sp;
 $$01 = 0;
 while(1) {
  $exitcond = ($$01|0)==(3);
  if ($exitcond) {
   break;
  }
  $2 = (((($0)) + 5336|0) + (($$01*80)|0)|0);
  $3 = (_strlen($2)|0);
  $4 = ($3|0)==(0);
  if (!($4)) {
   HEAP32[$vararg_buffer>>2] = $2;
   _sprintf($1,11013,$vararg_buffer);
   _writeline($0,$1);
  }
  $5 = (($$01) + 1)|0;
  $$01 = $5;
 }
 _writeline($0,14809);
 $6 = ((($0)) + 128|0);
 HEAP32[$vararg_buffer1>>2] = $6;
 _sprintf($1,11020,$vararg_buffer1);
 _writeline($0,$1);
 $7 = ((($0)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$vararg_buffer4>>2] = $8;
 _sprintf($1,11063,$vararg_buffer4);
 _writeline($0,$1);
 $9 = ((($0)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($0)) + 52|0);
 $$0 = 0;$$12 = 1;
 while(1) {
  $12 = ($$12|0)>($10|0);
  if ($12) {
   break;
  }
  $13 = HEAP32[$11>>2]|0;
  $14 = (((($13) + (($$12*120)|0)|0)) + 8|0);
  $15 = +HEAPF64[$14>>3];
  $16 = $15 == 0.0;
  $17 = $16&1;
  $$1 = (($$0) + ($17))|0;
  $18 = (($$12) + 1)|0;
  $$0 = $$1;$$12 = $18;
 }
 HEAP32[$vararg_buffer7>>2] = $$0;
 _sprintf($1,11107,$vararg_buffer7);
 _writeline($0,$1);
 $19 = HEAP32[$9>>2]|0;
 $20 = (($19) - ($$0))|0;
 HEAP32[$vararg_buffer10>>2] = $20;
 _sprintf($1,11151,$vararg_buffer10);
 _writeline($0,$1);
 $21 = ((($0)) + 16|0);
 $22 = HEAP32[$21>>2]|0;
 HEAP32[$vararg_buffer13>>2] = $22;
 _sprintf($1,11195,$vararg_buffer13);
 _writeline($0,$1);
 $23 = ((($0)) + 20|0);
 $24 = HEAP32[$23>>2]|0;
 HEAP32[$vararg_buffer16>>2] = $24;
 _sprintf($1,11239,$vararg_buffer16);
 _writeline($0,$1);
 $25 = ((($0)) + 24|0);
 $26 = HEAP32[$25>>2]|0;
 HEAP32[$vararg_buffer19>>2] = $26;
 _sprintf($1,11283,$vararg_buffer19);
 _writeline($0,$1);
 $27 = ((($0)) + 4500|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (3440 + ($28<<2)|0);
 $30 = HEAP32[$29>>2]|0;
 HEAP32[$vararg_buffer22>>2] = $30;
 _sprintf($1,11327,$vararg_buffer22);
 _writeline($0,$1);
 $31 = ((($0)) + 4496|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (3464 + ($32<<2)|0);
 $34 = HEAP32[$33>>2]|0;
 HEAP32[$vararg_buffer25>>2] = $34;
 _sprintf($1,11370,$vararg_buffer25);
 _writeline($0,$1);
 $35 = ((($0)) + 1148|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (+($36|0));
 $38 = ((($0)) + 5032|0);
 $39 = +HEAPF64[$38>>3];
 $40 = $39 * $37;
 $41 = ((($0)) + 3256|0);
 HEAPF64[$vararg_buffer28>>3] = $40;
 $vararg_ptr31 = ((($vararg_buffer28)) + 8|0);
 HEAP32[$vararg_ptr31>>2] = $41;
 _sprintf($1,11413,$vararg_buffer28);
 _writeline($0,$1);
 $42 = ((($0)) + 4352|0);
 $43 = +HEAPF64[$42>>3];
 HEAPF64[$vararg_buffer32>>3] = $43;
 _sprintf($1,11462,$vararg_buffer32);
 _writeline($0,$1);
 $44 = ((($0)) + 4368|0);
 $45 = +HEAPF64[$44>>3];
 $46 = $45 > 0.0;
 if ($46) {
  $47 = ((($0)) + 4920|0);
  $48 = +HEAPF64[$47>>3];
  $49 = $45 * $48;
  $50 = ((($0)) + 2024|0);
  HEAPF64[$vararg_buffer35>>3] = $49;
  $vararg_ptr38 = ((($vararg_buffer35)) + 8|0);
  HEAP32[$vararg_ptr38>>2] = $50;
  _sprintf($1,11508,$vararg_buffer35);
  _writeline($0,$1);
 }
 $51 = ((($0)) + 4360|0);
 $52 = +HEAPF64[$51>>3];
 $53 = $52 > 0.0;
 if ($53) {
  $54 = ((($0)) + 4960|0);
  $55 = +HEAPF64[$54>>3];
  $56 = $52 * $55;
  $57 = ((($0)) + 2464|0);
  HEAPF64[$vararg_buffer39>>3] = $56;
  $vararg_ptr42 = ((($vararg_buffer39)) + 8|0);
  HEAP32[$vararg_ptr42>>2] = $57;
  _sprintf($1,11557,$vararg_buffer39);
  _writeline($0,$1);
 }
 $58 = ((($0)) + 4516|0);
 $59 = HEAP32[$58>>2]|0;
 HEAP32[$vararg_buffer43>>2] = $59;
 _sprintf($1,11606,$vararg_buffer43);
 _writeline($0,$1);
 $60 = ((($0)) + 4520|0);
 $61 = HEAP32[$60>>2]|0;
 HEAP32[$vararg_buffer46>>2] = $61;
 _sprintf($1,11650,$vararg_buffer46);
 _writeline($0,$1);
 $62 = ((($0)) + 4376|0);
 $63 = +HEAPF64[$62>>3];
 HEAPF64[$vararg_buffer49>>3] = $63;
 _sprintf($1,11694,$vararg_buffer49);
 _writeline($0,$1);
 $64 = ((($0)) + 4508|0);
 $65 = HEAP32[$64>>2]|0;
 HEAP32[$vararg_buffer52>>2] = $65;
 _sprintf($1,11740,$vararg_buffer52);
 _writeline($0,$1);
 $66 = ((($0)) + 4600|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = ($67|0)==(0);
 L18: do {
  if ($68) {
   label = 15;
  } else {
   $69 = ((($0)) + 1192|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = ($70|0)==(0);
   if ($71) {
    label = 15;
   } else {
    switch ($67|0) {
    case 1:  {
     $72 = ((($0)) + 4624|0);
     HEAP32[$vararg_buffer55>>2] = $72;
     _sprintf($1,11829,$vararg_buffer55);
     break L18;
     break;
    }
    case 3:  {
     $73 = ((($0)) + 44|0);
     $74 = HEAP32[$73>>2]|0;
     $75 = ((($0)) + 4616|0);
     $76 = HEAP32[$75>>2]|0;
     $77 = (($74) + (($76*96)|0)|0);
     HEAP32[$vararg_buffer58>>2] = $77;
     _sprintf($1,11872,$vararg_buffer58);
     break L18;
     break;
    }
    case 2:  {
     HEAP32[$vararg_buffer61>>2] = 11931;
     _printf($1,$vararg_buffer61);
     break L18;
     break;
    }
    default: {
     break L18;
    }
    }
   }
  }
 } while(0);
 if ((label|0) == 15) {
  dest=$1; src=11784; stop=dest+45|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 }
 _writeline($0,$1);
 $78 = HEAP32[$66>>2]|0;
 $79 = ($78|0)==(0);
 $$pre6 = ((($0)) + 1192|0);
 if (!($79)) {
  $80 = HEAP32[$$pre6>>2]|0;
  $81 = ($80|0)>(0);
  if ($81) {
   $82 = ((($0)) + 1180|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = (+($83|0));
   $85 = $84;
   $86 = $85 / 60.0;
   HEAPF64[$vararg_buffer64>>3] = $86;
   _sprintf($1,11975,$vararg_buffer64);
   _writeline($0,$1);
   $87 = ((($0)) + 4688|0);
   $88 = +HEAPF64[$87>>3];
   $89 = ((($0)) + 4936|0);
   $90 = +HEAPF64[$89>>3];
   $91 = $88 * $90;
   $92 = ((($0)) + 2200|0);
   HEAPF64[$vararg_buffer67>>3] = $91;
   $vararg_ptr70 = ((($vararg_buffer67)) + 8|0);
   HEAP32[$vararg_ptr70>>2] = $92;
   _sprintf($1,12025,$vararg_buffer67);
   _writeline($0,$1);
  }
 }
 $93 = ((($0)) + 4392|0);
 $94 = +HEAPF64[$93>>3];
 HEAPF64[$vararg_buffer71>>3] = $94;
 _sprintf($1,12074,$vararg_buffer71);
 _writeline($0,$1);
 $95 = ((($0)) + 4384|0);
 $96 = +HEAPF64[$95>>3];
 $97 = $96 / 1.1E-5;
 HEAPF64[$vararg_buffer74>>3] = $97;
 _sprintf($1,12120,$vararg_buffer74);
 _writeline($0,$1);
 $98 = ((($0)) + 4696|0);
 $99 = +HEAPF64[$98>>3];
 $100 = $99 / 1.3000000000000001E-8;
 HEAPF64[$vararg_buffer77>>3] = $100;
 _sprintf($1,12166,$vararg_buffer77);
 _writeline($0,$1);
 $101 = ((($0)) + 4344|0);
 $102 = +HEAPF64[$101>>3];
 HEAPF64[$vararg_buffer80>>3] = $102;
 _sprintf($1,12212,$vararg_buffer80);
 _writeline($0,$1);
 $103 = HEAP32[$$pre6>>2]|0;
 $104 = (+($103|0));
 $105 = +HEAPF64[$38>>3];
 $106 = $105 * $104;
 HEAPF64[$vararg_buffer83>>3] = $106;
 $vararg_ptr86 = ((($vararg_buffer83)) + 8|0);
 HEAP32[$vararg_ptr86>>2] = $41;
 _sprintf($1,12258,$vararg_buffer83);
 _writeline($0,$1);
 $107 = ((($0)) + 1212|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = ($108|0)==(0);
 if ($109) {
  _writeline($0,14809);
  STACKTOP = sp;return;
 }
 dest=$1; src=12307; stop=dest+24|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 _writeline($0,$1);
 $110 = ((($0)) + 1236|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = ($111|0)==(0);
 if ($112) {
  _writeline($0,12331);
  $$pre = HEAP32[$110>>2]|0;
  $114 = $$pre;
 } else {
  $114 = $111;
 }
 $113 = ($114|0)==(1);
 if ($113) {
  _writeline($0,12347);
  $$pre3 = HEAP32[$110>>2]|0;
  $116 = $$pre3;
 } else {
  $116 = $114;
 }
 $115 = ($116|0)==(2);
 if ($115) {
  _writeline($0,12364);
 }
 _writelimits($0,1,4);
 $117 = ((($0)) + 1240|0);
 $118 = HEAP32[$117>>2]|0;
 $119 = ($118|0)==(0);
 if ($119) {
  _writeline($0,12386);
  $$pre4 = HEAP32[$117>>2]|0;
  $121 = $$pre4;
 } else {
  $121 = $118;
 }
 $120 = ($121|0)==(1);
 if ($120) {
  _writeline($0,12402);
  $$pre5 = HEAP32[$117>>2]|0;
  $123 = $$pre5;
 } else {
  $123 = $121;
 }
 $122 = ($123|0)==(2);
 if ($122) {
  _writeline($0,12419);
 }
 _writelimits($0,6,9);
 _writeline($0,14809);
 STACKTOP = sp;return;
}
function _writelimits($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer3 = sp + 24|0;
 $vararg_buffer = sp;
 $3 = ((($0)) + 5080|0);
 $$0 = $1;
 while(1) {
  $4 = ($$0|0)>($2|0);
  if ($4) {
   break;
  }
  $5 = (((((($0)) + 1816|0) + (($$0*88)|0)|0)) + 72|0);
  $6 = +HEAPF64[$5>>3];
  $7 = $6 < 1.0E+10;
  if ($7) {
   $8 = (((($0)) + 1816|0) + (($$0*88)|0)|0);
   $9 = (((((($0)) + 1816|0) + (($$0*88)|0)|0)) + 32|0);
   HEAP32[$vararg_buffer>>2] = $8;
   $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
   HEAPF64[$vararg_ptr1>>3] = $6;
   $vararg_ptr2 = ((($vararg_buffer)) + 16|0);
   HEAP32[$vararg_ptr2>>2] = $9;
   _sprintf($3,12441,$vararg_buffer);
   _writeline($0,$3);
  }
  $10 = (((((($0)) + 1816|0) + (($$0*88)|0)|0)) + 80|0);
  $11 = +HEAPF64[$10>>3];
  $12 = $11 > -1.0E+10;
  if ($12) {
   $13 = (((($0)) + 1816|0) + (($$0*88)|0)|0);
   $14 = (((((($0)) + 1816|0) + (($$0*88)|0)|0)) + 32|0);
   HEAP32[$vararg_buffer3>>2] = $13;
   $vararg_ptr6 = ((($vararg_buffer3)) + 8|0);
   HEAPF64[$vararg_ptr6>>3] = $11;
   $vararg_ptr7 = ((($vararg_buffer3)) + 16|0);
   HEAP32[$vararg_ptr7>>2] = $14;
   _sprintf($3,12471,$vararg_buffer3);
   _writeline($0,$3);
  }
  $15 = (($$0) + 1)|0;
  $$0 = $15;
 }
 STACKTOP = sp;return;
}
function _writenodetable($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond2 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0;
 var $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1264|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1264|0);
 $vararg_buffer4 = sp + 1240|0;
 $vararg_buffer1 = sp + 1232|0;
 $vararg_buffer = sp + 1224|0;
 $2 = sp + 192|0;
 $3 = sp + 176|0;
 $4 = sp;
 $5 = ((($0)) + 1200|0);
 _writeheader($0,2,0);
 $6 = ((($0)) + 44|0);
 $7 = ((($0)) + 4904|0);
 $8 = ((($0)) + 1236|0);
 $9 = ((($0)) + 1248|0);
 $10 = ((($0)) + 1208|0);
 $11 = ((($0)) + 8|0);
 $$01 = 1;
 while(1) {
  $12 = HEAP32[$0>>2]|0;
  $13 = ($$01|0)>($12|0);
  if ($13) {
   break;
  }
  $14 = HEAP32[$6>>2]|0;
  $15 = (((($14) + (($$01*96)|0)|0)) + 48|0);
  $16 = +HEAPF64[$15>>3];
  $17 = +HEAPF64[$7>>3];
  $18 = $16 * $17;
  HEAPF64[$4>>3] = $18;
  $$0 = 1;
  while(1) {
   $exitcond = ($$0|0)==(5);
   if ($exitcond) {
    break;
   }
   $19 = (($$0) + -1)|0;
   $20 = (($1) + ($19<<2)|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (($21) + ($$01<<2)|0);
   $23 = +HEAPF32[$22>>2];
   $24 = $23;
   $25 = (($4) + ($$0<<3)|0);
   HEAPF64[$25>>3] = $24;
   $26 = (($$0) + 1)|0;
   $$0 = $26;
  }
  $27 = HEAP32[$8>>2]|0;
  $28 = ($27|0)==(1);
  if ($28) {
   label = 8;
  } else {
   $29 = (((($14) + (($$01*96)|0)|0)) + 80|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ($30|0)==(0);
   if (!($31)) {
    label = 8;
   }
  }
  if ((label|0) == 8) {
   label = 0;
   $32 = (_checklimits($5,$4,0,4)|0);
   $33 = ($32|0)==(0);
   if (!($33)) {
    $34 = HEAP32[$9>>2]|0;
    $35 = HEAP32[$10>>2]|0;
    $36 = ($34|0)==($35|0);
    if ($36) {
     _writeheader($0,2,1);
    }
    $37 = (($14) + (($$01*96)|0)|0);
    HEAP32[$vararg_buffer>>2] = $37;
    _sprintf($2,12504,$vararg_buffer);
    $$1 = 0;
    while(1) {
     $exitcond2 = ($$1|0)==(5);
     if ($exitcond2) {
      break;
     }
     $38 = (((((($0)) + 1816|0) + (($$1*88)|0)|0)) + 64|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = ($39|0)==(1);
     if ($40) {
      $41 = (($4) + ($$1<<3)|0);
      $42 = +HEAPF64[$41>>3];
      $43 = (+Math_abs((+$42)));
      $44 = $43 > 1.0E+6;
      if ($44) {
       HEAPF64[$vararg_buffer1>>3] = $42;
       _sprintf($3,12515,$vararg_buffer1);
      } else {
       $45 = (((((($0)) + 1816|0) + (($$1*88)|0)|0)) + 68|0);
       $46 = HEAP32[$45>>2]|0;
       HEAP32[$vararg_buffer4>>2] = $46;
       $vararg_ptr7 = ((($vararg_buffer4)) + 8|0);
       HEAPF64[$vararg_ptr7>>3] = $42;
       _sprintf($3,12522,$vararg_buffer4);
      }
      (_strcat($2,$3)|0);
     }
     $47 = (($$1) + 1)|0;
     $$1 = $47;
    }
    $48 = HEAP32[$11>>2]|0;
    $49 = ($$01|0)>($48|0);
    if ($49) {
     (_strcat($2,12529)|0);
     $50 = (_getnodetype($0,$$01)|0);
     $51 = (3416 + ($50<<2)|0);
     $52 = HEAP32[$51>>2]|0;
     (_strcat($2,$52)|0);
    }
    _writeline($0,$2);
   }
  }
  $53 = (($$01) + 1)|0;
  $$01 = $53;
 }
 _writeline($0,14809);
 STACKTOP = sp;return;
}
function _writelinktable($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$01 = 0, $$03 = 0, $$1 = 0, $$12 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0;
 var $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond4 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, $vararg_ptr10 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1264|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1264|0);
 $vararg_buffer7 = sp + 1248|0;
 $vararg_buffer4 = sp + 1240|0;
 $vararg_buffer1 = sp + 1232|0;
 $vararg_buffer = sp + 1224|0;
 $2 = sp + 192|0;
 $3 = sp + 176|0;
 $4 = sp;
 $5 = ((($0)) + 1200|0);
 $6 = ((($0)) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 _writeheader($0,3,0);
 $8 = ((($0)) + 12|0);
 $9 = ((($0)) + 4944|0);
 $10 = ((($4)) + 40|0);
 $11 = ((($0)) + 4952|0);
 $12 = ((($4)) + 48|0);
 $13 = ((($0)) + 1240|0);
 $14 = ((($0)) + 1248|0);
 $15 = ((($0)) + 1208|0);
 $$03 = 1;
 while(1) {
  $16 = HEAP32[$8>>2]|0;
  $17 = ($$03|0)>($16|0);
  if ($17) {
   break;
  }
  $18 = (((($7) + ($$03<<7)|0)) + 48|0);
  $19 = +HEAPF64[$18>>3];
  $20 = +HEAPF64[$9>>3];
  $21 = $19 * $20;
  HEAPF64[$10>>3] = $21;
  $22 = (((($7) + ($$03<<7)|0)) + 40|0);
  $23 = +HEAPF64[$22>>3];
  $24 = +HEAPF64[$11>>3];
  $25 = $23 * $24;
  HEAPF64[$12>>3] = $25;
  $$01 = 7;
  while(1) {
   $exitcond = ($$01|0)==(15);
   if ($exitcond) {
    break;
   }
   $26 = (($$01) + -7)|0;
   $27 = (($1) + ($26<<2)|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = (($28) + ($$03<<2)|0);
   $30 = +HEAPF32[$29>>2];
   $31 = $30;
   $32 = (($4) + ($$01<<3)|0);
   HEAPF64[$32>>3] = $31;
   $33 = (($$01) + 1)|0;
   $$01 = $33;
  }
  $34 = HEAP32[$13>>2]|0;
  $35 = ($34|0)==(1);
  if ($35) {
   label = 8;
  } else {
   $36 = (((($7) + ($$03<<7)|0)) + 116|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = ($37|0)==(0);
   if (!($38)) {
    label = 8;
   }
  }
  if ((label|0) == 8) {
   label = 0;
   $39 = (_checklimits($5,$4,6,14)|0);
   $40 = ($39|0)==(0);
   if (!($40)) {
    $41 = HEAP32[$14>>2]|0;
    $42 = HEAP32[$15>>2]|0;
    $43 = ($41|0)==($42|0);
    if ($43) {
     _writeheader($0,3,1);
    }
    $44 = (($7) + ($$03<<7)|0);
    HEAP32[$vararg_buffer>>2] = $44;
    _sprintf($2,12504,$vararg_buffer);
    $$12 = 5;
    while(1) {
     $exitcond4 = ($$12|0)==(15);
     if ($exitcond4) {
      break;
     }
     $45 = (((((($0)) + 1816|0) + (($$12*88)|0)|0)) + 64|0);
     $46 = HEAP32[$45>>2]|0;
     $47 = ($46|0)==(1);
     if ($47) {
      $48 = ($$12|0)==(11);
      do {
       if ($48) {
        $49 = ((($4)) + 88|0);
        $50 = +HEAPF64[$49>>3];
        $51 = !($50 <= 2.0);
        if ($51) {
         $52 = $50 == 4.0;
         if ($52) {
          $$1 = 4;
         } else {
          $$1 = 3;
         }
        } else {
         $$1 = 2;
        }
        $53 = (64 + ($$1<<2)|0);
        $54 = HEAP32[$53>>2]|0;
        HEAP32[$vararg_buffer1>>2] = $54;
        _sprintf($3,12510,$vararg_buffer1);
       } else {
        $55 = (($4) + ($$12<<3)|0);
        $56 = +HEAPF64[$55>>3];
        $57 = (+Math_abs((+$56)));
        $58 = $57 > 1.0E+6;
        if ($58) {
         HEAPF64[$vararg_buffer4>>3] = $56;
         _sprintf($3,12515,$vararg_buffer4);
         break;
        } else {
         $59 = (((((($0)) + 1816|0) + (($$12*88)|0)|0)) + 68|0);
         $60 = HEAP32[$59>>2]|0;
         HEAP32[$vararg_buffer7>>2] = $60;
         $vararg_ptr10 = ((($vararg_buffer7)) + 8|0);
         HEAPF64[$vararg_ptr10>>3] = $56;
         _sprintf($3,12522,$vararg_buffer7);
         break;
        }
       }
      } while(0);
      (_strcat($2,$3)|0);
     }
     $61 = (($$12) + 1)|0;
     $$12 = $61;
    }
    $62 = (((($7) + ($$03<<7)|0)) + 104|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = ($63|0)>(1);
    if ($64) {
     (_strcat($2,12529)|0);
     $65 = (16 + ($63<<2)|0);
     $66 = HEAP32[$65>>2]|0;
     (_strcat($2,$66)|0);
    }
    _writeline($0,$2);
   }
  }
  $67 = (($$03) + 1)|0;
  $$03 = $67;
 }
 _writeline($0,14809);
 STACKTOP = sp;return;
}
function _writeheader($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$2 = 0, $$3 = 0, $$4 = 0, $$pre = 0, $$pre5 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond10 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0;
 var $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer22 = 0, $vararg_buffer25 = 0, $vararg_buffer28 = 0, $vararg_buffer31 = 0, $vararg_buffer34 = 0, $vararg_buffer37 = 0, $vararg_buffer4 = 0, $vararg_buffer40 = 0, $vararg_buffer43 = 0, $vararg_buffer46 = 0, $vararg_buffer7 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(4288|0);
 $vararg_buffer46 = sp + 4280|0;
 $vararg_buffer43 = sp + 4272|0;
 $vararg_buffer40 = sp + 4264|0;
 $vararg_buffer37 = sp + 4256|0;
 $vararg_buffer34 = sp + 4248|0;
 $vararg_buffer31 = sp + 4240|0;
 $vararg_buffer28 = sp + 4232|0;
 $vararg_buffer25 = sp + 4224|0;
 $vararg_buffer22 = sp + 4216|0;
 $vararg_buffer19 = sp + 4208|0;
 $vararg_buffer16 = sp + 4200|0;
 $vararg_buffer13 = sp + 4192|0;
 $vararg_buffer10 = sp + 4184|0;
 $vararg_buffer7 = sp + 4176|0;
 $vararg_buffer4 = sp + 4168|0;
 $vararg_buffer1 = sp + 4160|0;
 $vararg_buffer = sp + 4152|0;
 $3 = sp + 3120|0;
 $4 = sp + 2080|0;
 $5 = sp + 1040|0;
 $6 = sp;
 $7 = ((($0)) + 1212|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0);
 L1: do {
  if (!($9)) {
   $10 = ((($0)) + 1248|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (($11) + 11)|0;
   $13 = ((($0)) + 1208|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($12|0)>($14|0);
   if ($15) {
    $17 = $11;$18 = $14;
    while(1) {
     $16 = ($17|0)<($18|0);
     if (!($16)) {
      break L1;
     }
     _writeline($0,14809);
     $$pre = HEAP32[$10>>2]|0;
     $$pre5 = HEAP32[$13>>2]|0;
     $17 = $$pre;$18 = $$pre5;
    }
   }
  }
 } while(0);
 _writeline($0,14809);
 switch ($1|0) {
 case 0:  {
  dest=$3; src=12532; stop=dest+18|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $19 = ($2|0)==(0);
  if (!($19)) {
   (_strcat($3,12550)|0);
  }
  _writeline($0,$3);
  _fillstr($3,70);
  _writeline($0,$3);
  STACKTOP = sp;return;
  break;
 }
 case 1:  {
  $20 = ((($0)) + 1116|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)==(1);
  if ($22) {
   (_strcpy($4,12563)|0);
  } else {
   (_strcpy($4,12569)|0);
  }
  dest=$3; src=12575; stop=dest+14|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $23 = ($2|0)==(0);
  if (!($23)) {
   (_strcat($3,12550)|0);
  }
  _writeline($0,$3);
  _fillstr($3,63);
  _writeline($0,$3);
  dest=$3; src=12589; stop=dest+64|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  _writeline($0,$3);
  HEAP32[$vararg_buffer>>2] = $4;
  _sprintf($3,12653,$vararg_buffer);
  _writeline($0,$3);
  _fillstr($3,63);
  _writeline($0,$3);
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  $24 = ((($0)) + 1216|0);
  $25 = HEAP32[$24>>2]|0;
  L24: do {
   switch ($25|0) {
   case 4:  {
    HEAP32[$vararg_buffer1>>2] = 12731;
    _sprintf($3,12714,$vararg_buffer1);
    break;
   }
   case 0:  {
    $28 = ((($0)) + 1192|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = ($29|0)==(0);
    if ($30) {
     dest=$3; src=12744; stop=dest+14|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
     break L24;
    } else {
     $31 = ((($0)) + 1256|0);
     $32 = ((($0)) + 1172|0);
     $33 = HEAP32[$32>>2]|0;
     $34 = (_clocktime($31,$33)|0);
     HEAP32[$vararg_buffer7>>2] = $34;
     _sprintf($3,12758,$vararg_buffer7);
     break L24;
    }
    break;
   }
   default: {
    $26 = (240 + ($25<<2)|0);
    $27 = HEAP32[$26>>2]|0;
    HEAP32[$vararg_buffer4>>2] = $27;
    _sprintf($3,12714,$vararg_buffer4);
   }
   }
  } while(0);
  $35 = ($2|0)==(0);
  if (!($35)) {
   (_strcat($3,12550)|0);
  }
  _writeline($0,$3);
  HEAP32[$vararg_buffer10>>2] = 21208;
  _sprintf($5,12782,$vararg_buffer10);
  (_strcpy($3,12787)|0);
  HEAP32[$vararg_buffer13>>2] = $3;
  _sprintf($6,12504,$vararg_buffer13);
  $$0 = 15;$$01 = 0;
  while(1) {
   $exitcond10 = ($$01|0)==(4);
   if ($exitcond10) {
    break;
   }
   $36 = (((((($0)) + 1816|0) + (($$01*88)|0)|0)) + 64|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = ($37|0)==(1);
   if ($38) {
    $39 = (($$0) + 10)|0;
    $40 = (((($0)) + 1816|0) + (($$01*88)|0)|0);
    HEAP32[$vararg_buffer16>>2] = $40;
    _sprintf($3,12510,$vararg_buffer16);
    (_strcat($5,$3)|0);
    $41 = (((((($0)) + 1816|0) + (($$01*88)|0)|0)) + 32|0);
    HEAP32[$vararg_buffer19>>2] = $41;
    _sprintf($3,12510,$vararg_buffer19);
    (_strcat($6,$3)|0);
    $$1 = $39;
   } else {
    $$1 = $$0;
   }
   $42 = (($$01) + 1)|0;
   $$0 = $$1;$$01 = $42;
  }
  $43 = ((($0)) + 2232|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = ($44|0)==(1);
  if ($45) {
   $46 = (($$0) + 10)|0;
   $47 = ((($0)) + 4624|0);
   HEAP32[$vararg_buffer22>>2] = $47;
   _sprintf($3,12510,$vararg_buffer22);
   (_strcat($5,$3)|0);
   $48 = ((($0)) + 4656|0);
   HEAP32[$vararg_buffer25>>2] = $48;
   _sprintf($3,12510,$vararg_buffer25);
   (_strcat($6,$3)|0);
   $$2 = $46;
  } else {
   $$2 = $$0;
  }
  _fillstr($4,$$2);
  _writeline($0,$4);
  _writeline($0,$5);
  _writeline($0,$6);
  _writeline($0,$4);
  $49 = ($1|0)==(3);
  if (!($49)) {
   STACKTOP = sp;return;
  }
  break;
 }
 case 3:  {
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
 $50 = ((($0)) + 1216|0);
 $51 = HEAP32[$50>>2]|0;
 L48: do {
  switch ($51|0) {
  case 4:  {
   HEAP32[$vararg_buffer28>>2] = 12731;
   _sprintf($3,12792,$vararg_buffer28);
   break;
  }
  case 0:  {
   $54 = ((($0)) + 1192|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = ($55|0)==(0);
   if ($56) {
    dest=$3; src=12809; stop=dest+14|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    break L48;
   } else {
    $57 = ((($0)) + 1256|0);
    $58 = ((($0)) + 1172|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = (_clocktime($57,$59)|0);
    HEAP32[$vararg_buffer34>>2] = $60;
    _sprintf($3,12823,$vararg_buffer34);
    break L48;
   }
   break;
  }
  default: {
   $52 = (240 + ($51<<2)|0);
   $53 = HEAP32[$52>>2]|0;
   HEAP32[$vararg_buffer31>>2] = $53;
   _sprintf($3,12792,$vararg_buffer31);
  }
  }
 } while(0);
 $61 = ($2|0)==(0);
 if (!($61)) {
  (_strcat($3,12550)|0);
 }
 _writeline($0,$3);
 HEAP32[$vararg_buffer37>>2] = 21208;
 _sprintf($5,12782,$vararg_buffer37);
 (_strcpy($3,12847)|0);
 HEAP32[$vararg_buffer40>>2] = $3;
 _sprintf($6,12504,$vararg_buffer40);
 $$12 = 5;$$3 = 15;
 while(1) {
  $exitcond = ($$12|0)==(15);
  if ($exitcond) {
   break;
  }
  $62 = (((((($0)) + 1816|0) + (($$12*88)|0)|0)) + 64|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = ($63|0)==(1);
  if ($64) {
   $65 = (($$3) + 10)|0;
   $66 = (((($0)) + 1816|0) + (($$12*88)|0)|0);
   HEAP32[$vararg_buffer43>>2] = $66;
   _sprintf($3,12510,$vararg_buffer43);
   (_strcat($5,$3)|0);
   $67 = (((((($0)) + 1816|0) + (($$12*88)|0)|0)) + 32|0);
   HEAP32[$vararg_buffer46>>2] = $67;
   _sprintf($3,12510,$vararg_buffer46);
   (_strcat($6,$3)|0);
   $$4 = $65;
  } else {
   $$4 = $$3;
  }
  $68 = (($$12) + 1)|0;
  $$12 = $68;$$3 = $$4;
 }
 _fillstr($4,$$3);
 _writeline($0,$4);
 _writeline($0,$5);
 _writeline($0,$6);
 _writeline($0,$4);
 STACKTOP = sp;return;
}
function _checklimits($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$01 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$01 = $2;
 while(1) {
  $4 = ($$01|0)>($3|0);
  if ($4) {
   $$0 = 1;
   label = 6;
   break;
  }
  $5 = (($1) + ($$01<<3)|0);
  $6 = +HEAPF64[$5>>3];
  $7 = (((((($0)) + 616|0) + (($$01*88)|0)|0)) + 72|0);
  $8 = +HEAPF64[$7>>3];
  $9 = $6 > $8;
  if ($9) {
   $$0 = 0;
   label = 6;
   break;
  }
  $10 = (((((($0)) + 616|0) + (($$01*88)|0)|0)) + 80|0);
  $11 = +HEAPF64[$10>>3];
  $12 = $6 < $11;
  if ($12) {
   $$0 = 0;
   label = 6;
   break;
  }
  $13 = (($$01) + 1)|0;
  $$01 = $13;
 }
 if ((label|0) == 6) {
  return ($$0|0);
 }
 return (0)|0;
}
function _fillstr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = 0;
 while(1) {
  $2 = ($$0|0)>($1|0);
  if ($2) {
   break;
  }
  $3 = (($0) + ($$0)|0);
  HEAP8[$3>>0] = 45;
  $4 = (($$0) + 1)|0;
  $$0 = $4;
 }
 $5 = (($1) + 1)|0;
 $6 = (($0) + ($5)|0);
 HEAP8[$6>>0] = 0;
 return;
}
function _clocktime($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = (($1|0) / 3600)&-1;
 $3 = (($1|0) % 3600)&-1;
 $4 = (($3|0) / 60)&-1;
 $5 = Math_imul($2, -3600)|0;
 $6 = (($5) + ($1))|0;
 $7 = Math_imul($4, -60)|0;
 $8 = (($6) + ($7))|0;
 HEAP32[$vararg_buffer>>2] = $2;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $4;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $8;
 _sprintf($0,12852,$vararg_buffer);
 STACKTOP = sp;return ($0|0);
}
function _getnodetype($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<($1|0);
 if (!($4)) {
  $$0 = 0;
  return ($$0|0);
 }
 $5 = ((($0)) + 52|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($1) - ($3))|0;
 $8 = (((($6) + (($7*120)|0)|0)) + 8|0);
 $9 = +HEAPF64[$8>>3];
 $10 = $9 == 0.0;
 if ($10) {
  $$0 = 1;
  return ($$0|0);
 }
 $$0 = 2;
 return ($$0|0);
}
function _writehydstat($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 var $$01 = 0, $$12 = 0, $$3 = 0, $$mux = 0, $$pre$phi3Z2D = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0.0;
 var $55 = 0.0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer14 = 0, $vararg_buffer2 = 0, $vararg_buffer21 = 0, $vararg_buffer26 = 0, $vararg_buffer32 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr13 = 0;
 var $vararg_ptr17 = 0, $vararg_ptr18 = 0, $vararg_ptr19 = 0, $vararg_ptr20 = 0, $vararg_ptr24 = 0, $vararg_ptr25 = 0, $vararg_ptr29 = 0, $vararg_ptr30 = 0, $vararg_ptr31 = 0, $vararg_ptr35 = 0, $vararg_ptr36 = 0, $vararg_ptr37 = 0, $vararg_ptr38 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1184|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1184|0);
 $vararg_buffer32 = sp + 1144|0;
 $vararg_buffer26 = sp + 1128|0;
 $vararg_buffer21 = sp + 1112|0;
 $vararg_buffer14 = sp + 1080|0;
 $vararg_buffer10 = sp + 1064|0;
 $vararg_buffer7 = sp + 1056|0;
 $vararg_buffer2 = sp + 1040|0;
 $vararg_buffer = sp + 1032|0;
 $3 = sp;
 $4 = sp + 1164|0;
 $5 = ((($0)) + 52|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 48|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 1256|0);
 $10 = ((($0)) + 1172|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (_clocktime($9,$11)|0);
 (_strcpy($4,$12)|0);
 $13 = ($1|0)>(0);
 if ($13) {
  $14 = ((($0)) + 4352|0);
  $15 = +HEAPF64[$14>>3];
  $16 = !($15 >= $2);
  if ($16) {
   HEAP32[$vararg_buffer2>>2] = $4;
   $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
   HEAP32[$vararg_ptr5>>2] = $1;
   $vararg_ptr6 = ((($vararg_buffer2)) + 8|0);
   HEAPF64[$vararg_ptr6>>3] = $2;
   _sprintf($3,12993,$vararg_buffer2);
  } else {
   HEAP32[$vararg_buffer>>2] = $4;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $1;
   _sprintf($3,12961,$vararg_buffer);
  }
  _writeline($0,$3);
  $17 = ((($0)) + 4496|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)==(1);
  if ($19) {
   $20 = ((($0)) + 4532|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ($21|0)>(0);
   if ($22) {
    $23 = ($21|0)==(1);
    $24 = ((($0)) + 4464|0);
    $25 = +HEAPF64[$24>>3];
    if ($23) {
     HEAPF64[$vararg_buffer7>>3] = $25;
     _sprintf($3,13049,$vararg_buffer7);
    } else {
     HEAP32[$vararg_buffer10>>2] = $21;
     $vararg_ptr13 = ((($vararg_buffer10)) + 8|0);
     HEAPF64[$vararg_ptr13>>3] = $25;
     _sprintf($3,13112,$vararg_buffer10);
    }
    _writeline($0,$3);
    $$pre$phi3Z2D = $3;
   } else {
    $$pre$phi3Z2D = $3;
   }
  } else {
   $$pre$phi3Z2D = $3;
  }
 } else {
  $$pre$phi3Z2D = $3;
 }
 $26 = ((($0)) + 4|0);
 $27 = ((($0)) + 4260|0);
 $28 = ((($0)) + 4540|0);
 $29 = ((($0)) + 12|0);
 $30 = ((($0)) + 44|0);
 $31 = ((($0)) + 4256|0);
 $32 = ((($0)) + 4920|0);
 $33 = ((($0)) + 2024|0);
 $$01 = 1;
 while(1) {
  $34 = HEAP32[$26>>2]|0;
  $35 = ($$01|0)>($34|0);
  if ($35) {
   break;
  }
  $36 = HEAP32[$5>>2]|0;
  $37 = (($36) + (($$01*120)|0)|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = HEAP32[$27>>2]|0;
  $40 = (($39) + ($38<<3)|0);
  $41 = +HEAPF64[$40>>3];
  $42 = $41 < 0.0;
  $43 = - $41;
  $44 = $42 ? $43 : $41;
  $45 = $44 < 0.001;
  $brmerge = $45 | $42;
  $$mux = $45 ? 2 : 9;
  do {
   if ($brmerge) {
    $$3 = $$mux;
   } else {
    $46 = $41 > 0.0;
    if (!($46)) {
     $60 = HEAP32[$28>>2]|0;
     $61 = HEAP32[$29>>2]|0;
     $62 = (($61) + ($$01))|0;
     $63 = (($60) + ($62<<2)|0);
     $64 = HEAP32[$63>>2]|0;
     $$3 = $64;
     break;
    }
    $47 = (((($6) + (($$01*120)|0)|0)) + 8|0);
    $48 = +HEAPF64[$47>>3];
    $49 = $48 > 0.0;
    if ($49) {
     $50 = HEAP32[$31>>2]|0;
     $51 = (($50) + ($38<<3)|0);
     $52 = +HEAPF64[$51>>3];
     $53 = (((($6) + (($$01*120)|0)|0)) + 24|0);
     $54 = +HEAPF64[$53>>3];
     $55 = $52 - $54;
     $56 = $55 < 0.0;
     $57 = - $55;
     $58 = $56 ? $57 : $55;
     $59 = $58 < 0.001;
     if ($59) {
      $$3 = 10;
      break;
     }
    }
    $$3 = 8;
   }
  } while(0);
  $65 = HEAP32[$28>>2]|0;
  $66 = HEAP32[$29>>2]|0;
  $67 = (($66) + ($$01))|0;
  $68 = (($65) + ($67<<2)|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = ($$3|0)==($69|0);
  if (!($70)) {
   $71 = (((($6) + (($$01*120)|0)|0)) + 8|0);
   $72 = +HEAPF64[$71>>3];
   $73 = $72 > 0.0;
   $74 = HEAP32[$30>>2]|0;
   $75 = (($74) + (($38*96)|0)|0);
   $76 = (64 + ($$3<<2)|0);
   $77 = HEAP32[$76>>2]|0;
   if ($73) {
    $78 = HEAP32[$31>>2]|0;
    $79 = (($78) + ($38<<3)|0);
    $80 = +HEAPF64[$79>>3];
    $81 = (((($74) + (($38*96)|0)|0)) + 48|0);
    $82 = +HEAPF64[$81>>3];
    $83 = $80 - $82;
    $84 = +HEAPF64[$32>>3];
    $85 = $83 * $84;
    HEAP32[$vararg_buffer14>>2] = $4;
    $vararg_ptr17 = ((($vararg_buffer14)) + 4|0);
    HEAP32[$vararg_ptr17>>2] = $75;
    $vararg_ptr18 = ((($vararg_buffer14)) + 8|0);
    HEAP32[$vararg_ptr18>>2] = $77;
    $vararg_ptr19 = ((($vararg_buffer14)) + 16|0);
    HEAPF64[$vararg_ptr19>>3] = $85;
    $vararg_ptr20 = ((($vararg_buffer14)) + 24|0);
    HEAP32[$vararg_ptr20>>2] = $33;
    _snprintf($$pre$phi3Z2D,1024,13175,$vararg_buffer14);
   } else {
    HEAP32[$vararg_buffer21>>2] = $4;
    $vararg_ptr24 = ((($vararg_buffer21)) + 4|0);
    HEAP32[$vararg_ptr24>>2] = $75;
    $vararg_ptr25 = ((($vararg_buffer21)) + 8|0);
    HEAP32[$vararg_ptr25>>2] = $77;
    _snprintf($$pre$phi3Z2D,1024,13207,$vararg_buffer21);
   }
   _writeline($0,$$pre$phi3Z2D);
   $86 = HEAP32[$28>>2]|0;
   $87 = HEAP32[$29>>2]|0;
   $88 = (($87) + ($$01))|0;
   $89 = (($86) + ($88<<2)|0);
   HEAP32[$89>>2] = $$3;
  }
  $90 = (($$01) + 1)|0;
  $$01 = $90;
 }
 $91 = ((($0)) + 4536|0);
 $$12 = 1;
 while(1) {
  $92 = HEAP32[$29>>2]|0;
  $93 = ($$12|0)>($92|0);
  if ($93) {
   break;
  }
  $94 = HEAP32[$91>>2]|0;
  $95 = (($94) + ($$12<<2)|0);
  $96 = HEAP32[$95>>2]|0;
  $97 = HEAP32[$28>>2]|0;
  $98 = (($97) + ($$12<<2)|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = ($96|0)==($99|0);
  if (!($100)) {
   $101 = HEAP32[$10>>2]|0;
   $102 = ($101|0)==(0);
   if ($102) {
    $103 = HEAP32[$7>>2]|0;
    $104 = (((($103) + ($$12<<7)|0)) + 104|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = (16 + ($105<<2)|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = (($103) + ($$12<<7)|0);
    $109 = (64 + ($96<<2)|0);
    $110 = HEAP32[$109>>2]|0;
    HEAP32[$vararg_buffer26>>2] = $4;
    $vararg_ptr29 = ((($vararg_buffer26)) + 4|0);
    HEAP32[$vararg_ptr29>>2] = $107;
    $vararg_ptr30 = ((($vararg_buffer26)) + 8|0);
    HEAP32[$vararg_ptr30>>2] = $108;
    $vararg_ptr31 = ((($vararg_buffer26)) + 12|0);
    HEAP32[$vararg_ptr31>>2] = $110;
    _sprintf($$pre$phi3Z2D,13232,$vararg_buffer26);
   } else {
    $111 = (((($8) + ($$12<<7)|0)) + 104|0);
    $112 = HEAP32[$111>>2]|0;
    $113 = (16 + ($112<<2)|0);
    $114 = HEAP32[$113>>2]|0;
    $115 = HEAP32[$7>>2]|0;
    $116 = (($115) + ($$12<<7)|0);
    $117 = (64 + ($99<<2)|0);
    $118 = HEAP32[$117>>2]|0;
    $119 = (64 + ($96<<2)|0);
    $120 = HEAP32[$119>>2]|0;
    HEAP32[$vararg_buffer32>>2] = $4;
    $vararg_ptr35 = ((($vararg_buffer32)) + 4|0);
    HEAP32[$vararg_ptr35>>2] = $114;
    $vararg_ptr36 = ((($vararg_buffer32)) + 8|0);
    HEAP32[$vararg_ptr36>>2] = $116;
    $vararg_ptr37 = ((($vararg_buffer32)) + 12|0);
    HEAP32[$vararg_ptr37>>2] = $118;
    $vararg_ptr38 = ((($vararg_buffer32)) + 16|0);
    HEAP32[$vararg_ptr38>>2] = $120;
    _sprintf($$pre$phi3Z2D,13247,$vararg_buffer32);
   }
   _writeline($0,$$pre$phi3Z2D);
   $121 = HEAP32[$91>>2]|0;
   $122 = (($121) + ($$12<<2)|0);
   $123 = HEAP32[$122>>2]|0;
   $124 = HEAP32[$28>>2]|0;
   $125 = (($124) + ($$12<<2)|0);
   HEAP32[$125>>2] = $123;
  }
  $126 = (($$12) + 1)|0;
  $$12 = $126;
 }
 _writeline($0,14809);
 STACKTOP = sp;return;
}
function _writemassbalance($0) {
 $0 = $0|0;
 var $$3 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer15 = 0, $vararg_buffer18 = 0, $vararg_buffer21 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(336|0);
 $vararg_buffer21 = sp + 320|0;
 $vararg_buffer18 = sp + 312|0;
 $vararg_buffer15 = sp + 304|0;
 $vararg_buffer12 = sp + 296|0;
 $vararg_buffer9 = sp + 288|0;
 $vararg_buffer6 = sp + 280|0;
 $vararg_buffer3 = sp + 272|0;
 $vararg_buffer1 = sp + 264|0;
 $vararg_buffer = sp + 256|0;
 $1 = sp;
 $2 = ((($0)) + 4600|0);
 $3 = HEAP32[$2>>2]|0;
 switch ($3|0) {
 case 3:  {
  $$3 = 1;
  break;
 }
 case 2:  {
  $$3 = 3;
  break;
 }
 default: {
  $4 = ((($0)) + 4656|0);
  $5 = (_match($4,13281)|0);
  $6 = ($5|0)==(0);
  if ($6) {
   $7 = (_match($4,13284)|0);
   $8 = ($7|0)==(0);
   $spec$select = $8 ? 0 : 2;
   $$3 = $spec$select;
  } else {
   $$3 = 1;
  }
 }
 }
 $9 = (528 + ($$3<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 HEAP32[$vararg_buffer>>2] = $10;
 _snprintf($1,255,13287,$vararg_buffer);
 _writeline($0,$1);
 _snprintf($1,255,13316,$vararg_buffer1);
 _writeline($0,$1);
 $11 = ((($0)) + 4856|0);
 $12 = +HEAPF64[$11>>3];
 HEAPF64[$vararg_buffer3>>3] = $12;
 _snprintf($1,255,13349,$vararg_buffer3);
 _writeline($0,$1);
 $13 = ((($0)) + 4864|0);
 $14 = +HEAPF64[$13>>3];
 HEAPF64[$vararg_buffer6>>3] = $14;
 _snprintf($1,255,13375,$vararg_buffer6);
 _writeline($0,$1);
 $15 = ((($0)) + 4872|0);
 $16 = +HEAPF64[$15>>3];
 HEAPF64[$vararg_buffer9>>3] = $16;
 _snprintf($1,255,13401,$vararg_buffer9);
 _writeline($0,$1);
 $17 = ((($0)) + 4880|0);
 $18 = +HEAPF64[$17>>3];
 HEAPF64[$vararg_buffer12>>3] = $18;
 _snprintf($1,255,13427,$vararg_buffer12);
 _writeline($0,$1);
 $19 = ((($0)) + 4888|0);
 $20 = +HEAPF64[$19>>3];
 HEAPF64[$vararg_buffer15>>3] = $20;
 _snprintf($1,255,13453,$vararg_buffer15);
 _writeline($0,$1);
 $21 = ((($0)) + 4896|0);
 $22 = +HEAPF64[$21>>3];
 HEAPF64[$vararg_buffer18>>3] = $22;
 _snprintf($1,255,13479,$vararg_buffer18);
 _writeline($0,$1);
 _snprintf($1,255,13505,$vararg_buffer21);
 _writeline($0,$1);
 STACKTOP = sp;return;
}
function _writerelerr($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $3 = ($1|0)==(0);
 $4 = ((($0)) + 5080|0);
 if ($3) {
  $5 = ((($0)) + 1256|0);
  $6 = ((($0)) + 1172|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (_clocktime($5,$7)|0);
  HEAP32[$vararg_buffer>>2] = $8;
  _sprintf($4,13558,$vararg_buffer);
  _writeline($0,$4);
  STACKTOP = sp;return;
 } else {
  HEAP32[$vararg_buffer1>>2] = $1;
  $vararg_ptr4 = ((($vararg_buffer1)) + 8|0);
  HEAPF64[$vararg_ptr4>>3] = $2;
  _sprintf($4,13588,$vararg_buffer1);
  _writeline($0,$4);
  STACKTOP = sp;return;
 }
}
function _writestatchange($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0.0, $$1 = 0, $$13 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, $spec$select4 = 0, $vararg_buffer = 0;
 var $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $4 = ((($0)) + 48|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($2<<24>>24)==($3<<24>>24);
 if (!($6)) {
  $23 = ($2<<24>>24)==(4);
  $24 = ($2<<24>>24)<(3);
  $spec$select = $24 ? 2 : 3;
  $$13 = $23 ? 4 : $spec$select;
  $25 = ($3<<24>>24)==(4);
  $26 = ($3<<24>>24)<(3);
  $spec$select4 = $26 ? 2 : 3;
  $$1 = $25 ? 4 : $spec$select4;
  $27 = ($$13|0)==($$1|0);
  if ($27) {
   STACKTOP = sp;return;
  }
  $28 = ((($0)) + 5080|0);
  $29 = (((($5) + ($1<<7)|0)) + 104|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (16 + ($30<<2)|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($5) + ($1<<7)|0);
  $34 = (64 + ($$13<<2)|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = (64 + ($$1<<2)|0);
  $37 = HEAP32[$36>>2]|0;
  HEAP32[$vararg_buffer3>>2] = $32;
  $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
  HEAP32[$vararg_ptr6>>2] = $33;
  $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
  HEAP32[$vararg_ptr7>>2] = $35;
  $vararg_ptr8 = ((($vararg_buffer3)) + 12|0);
  HEAP32[$vararg_ptr8>>2] = $37;
  _sprintf($28,13683,$vararg_buffer3);
  _writeline($0,$28);
  STACKTOP = sp;return;
 }
 $7 = ((($0)) + 4276|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + ($1<<3)|0);
 $10 = +HEAPF64[$9>>3];
 $11 = (((($5) + ($1<<7)|0)) + 104|0);
 $12 = HEAP32[$11>>2]|0;
 switch ($12|0) {
 case 5: case 4: case 3:  {
  $13 = ((($0)) + 4928|0);
  $14 = +HEAPF64[$13>>3];
  $15 = $10 * $14;
  $$0 = $15;
  break;
 }
 case 6:  {
  $16 = ((($0)) + 4960|0);
  $17 = +HEAPF64[$16>>3];
  $18 = $10 * $17;
  $$0 = $18;
  break;
 }
 default: {
  $$0 = $10;
 }
 }
 $19 = ((($0)) + 5080|0);
 $20 = (16 + ($12<<2)|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($5) + ($1<<7)|0);
 HEAP32[$vararg_buffer>>2] = $21;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $22;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAPF64[$vararg_ptr2>>3] = $$0;
 _sprintf($19,13640,$vararg_buffer);
 _writeline($0,$19);
 STACKTOP = sp;return;
}
function _writecontrolaction($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre$phiZ2D = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer5 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0;
 var $vararg_ptr4 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer = sp;
 $3 = ((($0)) + 48|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 72|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (((($6) + (($2*40)|0)|0)) + 36|0);
 $8 = HEAP32[$7>>2]|0;
 switch ($8|0) {
 case 1: case 0:  {
  $9 = ((($0)) + 44|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (((($6) + (($2*40)|0)|0)) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ((($0)) + 5080|0);
  $14 = ((($0)) + 1256|0);
  $15 = ((($0)) + 1172|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (_clocktime($14,$16)|0);
  $18 = (((($4) + ($1<<7)|0)) + 104|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (16 + ($19<<2)|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($4) + ($1<<7)|0);
  $23 = (_getnodetype($0,$12)|0);
  $24 = (3416 + ($23<<2)|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (($10) + (($12*96)|0)|0);
  HEAP32[$vararg_buffer>>2] = $17;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $21;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $22;
  $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
  HEAP32[$vararg_ptr3>>2] = $25;
  $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
  HEAP32[$vararg_ptr4>>2] = $26;
  _sprintf($13,13724,$vararg_buffer);
  $$pre$phiZ2D = $13;
  break;
 }
 case 3: case 2:  {
  $27 = ((($0)) + 5080|0);
  $28 = ((($0)) + 1256|0);
  $29 = ((($0)) + 1172|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (_clocktime($28,$30)|0);
  $32 = (((($4) + ($1<<7)|0)) + 104|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (16 + ($33<<2)|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = (($4) + ($1<<7)|0);
  HEAP32[$vararg_buffer5>>2] = $31;
  $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
  HEAP32[$vararg_ptr8>>2] = $35;
  $vararg_ptr9 = ((($vararg_buffer5)) + 8|0);
  HEAP32[$vararg_ptr9>>2] = $36;
  _sprintf($27,13761,$vararg_buffer5);
  $$pre$phiZ2D = $27;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
 _writeline($0,$$pre$phiZ2D);
 STACKTOP = sp;return;
}
function _writeruleaction($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $3 = ((($0)) + 48|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 5080|0);
 $6 = ((($0)) + 1256|0);
 $7 = ((($0)) + 1172|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (_clocktime($6,$8)|0);
 $10 = (((($4) + ($1<<7)|0)) + 104|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (16 + ($11<<2)|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($4) + ($1<<7)|0);
 HEAP32[$vararg_buffer>>2] = $9;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $13;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $14;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $2;
 _sprintf($5,13798,$vararg_buffer);
 _writeline($0,$5);
 STACKTOP = sp;return;
}
function _writehydwarn($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 var $$01 = 0, $$04 = 0, $$15 = 0, $$23 = 0, $$26 = 0, $$27 = 0, $$3 = 0, $$4 = 0, $$5 = 0, $$6 = 0, $$712 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre14 = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0.0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer15 = 0, $vararg_buffer4 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer15 = sp + 48|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $3 = ((($0)) + 4508|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)<($1|0);
 if ($5) {
  $6 = ((($0)) + 4352|0);
  $7 = +HEAPF64[$6>>3];
  $8 = !($7 >= $2);
  if ($8) {
   $$01 = 0;
  } else {
   $9 = ((($0)) + 5080|0);
   $10 = ((($0)) + 1256|0);
   $11 = ((($0)) + 1172|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (_clocktime($10,$12)|0);
   HEAP32[$vararg_buffer>>2] = $13;
   _sprintf($9,13829,$vararg_buffer);
   $14 = ((($0)) + 1224|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)==(0);
   if ($16) {
    $$01 = 2;
   } else {
    _writeline($0,$9);
    $$01 = 2;
   }
  }
 } else {
  $$01 = 0;
 }
 $17 = ((($0)) + 4496|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(0);
 if ($19) {
  $20 = ((($0)) + 4532|0);
  HEAP32[$20>>2] = 0;
  $21 = ((($0)) + 8|0);
  $22 = ((($0)) + 44|0);
  $23 = ((($0)) + 4256|0);
  $24 = ((($0)) + 4260|0);
  $$pre = HEAP32[$21>>2]|0;
  $$04 = 1;$38 = 0;
  while(1) {
   $25 = ($$04|0)>($$pre|0);
   if ($25) {
    break;
   }
   $26 = HEAP32[$22>>2]|0;
   $27 = HEAP32[$23>>2]|0;
   $28 = (($27) + ($$04<<3)|0);
   $29 = +HEAPF64[$28>>3];
   $30 = (((($26) + (($$04*96)|0)|0)) + 48|0);
   $31 = +HEAPF64[$30>>3];
   $32 = $29 < $31;
   if ($32) {
    $33 = HEAP32[$24>>2]|0;
    $34 = (($33) + ($$04<<3)|0);
    $35 = +HEAPF64[$34>>3];
    $36 = $35 > 0.0;
    if ($36) {
     $37 = (($38) + 1)|0;
     HEAP32[$20>>2] = $37;
     $132 = $37;
    } else {
     $132 = $38;
    }
   } else {
    $132 = $38;
   }
   $39 = (($$04) + 1)|0;
   $$04 = $39;$38 = $132;
  }
  $40 = ($38|0)>(0);
  if ($40) {
   $41 = ((($0)) + 1224|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==(0);
   if ($43) {
    $$23 = 6;
   } else {
    $44 = ((($0)) + 5080|0);
    $45 = ((($0)) + 1256|0);
    $46 = ((($0)) + 1172|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = (_clocktime($45,$47)|0);
    HEAP32[$vararg_buffer1>>2] = $48;
    _sprintf($44,13897,$vararg_buffer1);
    _writeline($0,$44);
    $$23 = 6;
   }
  } else {
   $$23 = $$01;
  }
 } else {
  $$23 = $$01;
 }
 $49 = ((($0)) + 24|0);
 $50 = ((($0)) + 60|0);
 $51 = ((($0)) + 48|0);
 $52 = ((($0)) + 4536|0);
 $53 = ((($0)) + 1224|0);
 $54 = ((($0)) + 5080|0);
 $55 = ((($0)) + 1256|0);
 $56 = ((($0)) + 1172|0);
 $$15 = 1;$$3 = $$23;
 while(1) {
  $57 = HEAP32[$49>>2]|0;
  $58 = ($$15|0)>($57|0);
  if ($58) {
   break;
  }
  $59 = HEAP32[$50>>2]|0;
  $60 = (($59) + ($$15<<2)|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = HEAP32[$51>>2]|0;
  $63 = HEAP32[$52>>2]|0;
  $64 = (($63) + ($61<<2)|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = ($65>>>0)>(5);
  if ($66) {
   $67 = HEAP32[$53>>2]|0;
   $68 = ($67|0)==(0);
   if ($68) {
    $$4 = 5;
   } else {
    $69 = (((($62) + ($61<<7)|0)) + 104|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = (16 + ($70<<2)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = (($62) + ($61<<7)|0);
    $74 = (64 + ($65<<2)|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = HEAP32[$56>>2]|0;
    $77 = (_clocktime($55,$76)|0);
    HEAP32[$vararg_buffer4>>2] = $72;
    $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
    HEAP32[$vararg_ptr7>>2] = $73;
    $vararg_ptr8 = ((($vararg_buffer4)) + 8|0);
    HEAP32[$vararg_ptr8>>2] = $75;
    $vararg_ptr9 = ((($vararg_buffer4)) + 12|0);
    HEAP32[$vararg_ptr9>>2] = $77;
    _sprintf($54,13936,$vararg_buffer4);
    _writeline($0,$54);
    $$4 = 5;
   }
  } else {
   $$4 = $$3;
  }
  $78 = (($$15) + 1)|0;
  $$15 = $78;$$3 = $$4;
 }
 $79 = ((($0)) + 20|0);
 $80 = ((($0)) + 56|0);
 $81 = ((($0)) + 4272|0);
 $82 = ((($0)) + 4276|0);
 $$26 = 1;$$5 = $$3;
 while(1) {
  $83 = HEAP32[$79>>2]|0;
  $84 = ($$26|0)>($83|0);
  if ($84) {
   break;
  }
  $85 = HEAP32[$80>>2]|0;
  $86 = (($85) + ($$26<<7)|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = HEAP32[$52>>2]|0;
  $89 = (($88) + ($87<<2)|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = ($90>>>0)>(2);
  if ($91) {
   $92 = HEAP32[$81>>2]|0;
   $93 = (($92) + ($87<<3)|0);
   $94 = +HEAPF64[$93>>3];
   $95 = $94 < 0.0;
   if ($95) {
    $$27 = 0;
    label = 27;
   } else {
    $97 = HEAP32[$82>>2]|0;
    $98 = (($97) + ($87<<3)|0);
    $99 = +HEAPF64[$98>>3];
    $100 = (((($85) + ($$26<<7)|0)) + 16|0);
    $101 = +HEAPF64[$100>>3];
    $102 = $99 * $101;
    $103 = $94 > $102;
    $104 = ($90|0)==(5);
    $105 = $103 | $104;
    if ($105) {
     $$27 = 5;
     label = 27;
    } else {
     $$6 = $$5;
    }
   }
  } else {
   $96 = ($90|0)==(0);
   if ($96) {
    $$27 = 0;
    label = 27;
   } else {
    $$6 = $$5;
   }
  }
  if ((label|0) == 27) {
   label = 0;
   $106 = HEAP32[$53>>2]|0;
   $107 = ($106|0)==(0);
   if ($107) {
    $$6 = 4;
   } else {
    $108 = HEAP32[$51>>2]|0;
    $109 = (($108) + ($87<<7)|0);
    $110 = (64 + ($$27<<2)|0);
    $111 = HEAP32[$110>>2]|0;
    $112 = HEAP32[$56>>2]|0;
    $113 = (_clocktime($55,$112)|0);
    HEAP32[$vararg_buffer10>>2] = $109;
    $vararg_ptr13 = ((($vararg_buffer10)) + 4|0);
    HEAP32[$vararg_ptr13>>2] = $111;
    $vararg_ptr14 = ((($vararg_buffer10)) + 8|0);
    HEAP32[$vararg_ptr14>>2] = $113;
    _sprintf($54,13965,$vararg_buffer10);
    _writeline($0,$54);
    $$6 = 4;
   }
  }
  $114 = (($$26) + 1)|0;
  $$26 = $114;$$5 = $$6;
 }
 $115 = HEAP32[$3>>2]|0;
 $116 = ($115|0)<($1|0);
 if ($116) {
  $117 = ((($0)) + 4352|0);
  $118 = +HEAPF64[$117>>3];
  $119 = $118 < $2;
  if ($119) {
   $120 = HEAP32[$53>>2]|0;
   $121 = ($120|0)==(0);
   if ($121) {
    $$712 = 1;
   } else {
    $122 = HEAP32[$56>>2]|0;
    $123 = (_clocktime($55,$122)|0);
    HEAP32[$vararg_buffer15>>2] = $123;
    _sprintf($54,13996,$vararg_buffer15);
    $124 = ((($0)) + 4512|0);
    $125 = HEAP32[$124>>2]|0;
    $126 = ($125|0)==(-1);
    if ($126) {
     (_strcat($54,14034)|0);
    }
    _writeline($0,$54);
    $$712 = 1;
   }
  } else {
   label = 36;
  }
 } else {
  label = 36;
 }
 if ((label|0) == 36) {
  $127 = ($$5<<24>>24)>(0);
  if ($127) {
   $$712 = $$5;
  } else {
   $$pre14 = $$5 << 24 >> 24;
   $$pre$phiZ2D = $$pre14;
   STACKTOP = sp;return ($$pre$phiZ2D|0);
  }
 }
 _disconnected($0);
 $128 = $$712 << 24 >> 24;
 $129 = ((($0)) + 5076|0);
 HEAP32[$129>>2] = $128;
 $130 = HEAP32[$53>>2]|0;
 $131 = ($130|0)==(0);
 if ($131) {
  $$pre$phiZ2D = $128;
  STACKTOP = sp;return ($$pre$phiZ2D|0);
 }
 _writeline($0,14809);
 $$pre$phiZ2D = $128;
 STACKTOP = sp;return ($$pre$phiZ2D|0);
}
function _disconnected($0) {
 $0 = $0|0;
 var $$01 = 0, $$02 = 0, $$04 = 0, $$06 = 0, $$1 = 0, $$13 = 0, $$15 = 0, $$17 = 0, $$2 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 1)|0;
 $3 = (_calloc($2,4)|0);
 $4 = HEAP32[$0>>2]|0;
 $5 = (($4) + 1)|0;
 $6 = (_calloc($5,1)|0);
 $7 = ($3|0)==(0|0);
 $8 = ($6|0)==(0|0);
 $or$cond = $7 | $8;
 if ($or$cond) {
  _free($3);
  _free($6);
  STACKTOP = sp;return;
 }
 $9 = ((($0)) + 4|0);
 $10 = ((($0)) + 8|0);
 $$06 = 1;
 while(1) {
  $11 = HEAP32[$9>>2]|0;
  $12 = ($$06|0)>($11|0);
  if ($12) {
   break;
  }
  $13 = HEAP32[$10>>2]|0;
  $14 = (($13) + ($$06))|0;
  $15 = (($3) + ($$06<<2)|0);
  HEAP32[$15>>2] = $14;
  $16 = (($6) + ($14)|0);
  HEAP8[$16>>0] = 1;
  $17 = (($$06) + 1)|0;
  $$06 = $17;
 }
 $18 = ((($0)) + 4260|0);
 $$01 = $11;$$17 = 1;
 while(1) {
  $19 = HEAP32[$10>>2]|0;
  $20 = ($$17|0)>($19|0);
  if ($20) {
   break;
  }
  $21 = HEAP32[$18>>2]|0;
  $22 = (($21) + ($$17<<3)|0);
  $23 = +HEAPF64[$22>>3];
  $24 = $23 < 0.0;
  if ($24) {
   $25 = (($$01) + 1)|0;
   $26 = (($3) + ($25<<2)|0);
   HEAP32[$26>>2] = $$17;
   $27 = (($6) + ($$17)|0);
   HEAP8[$27>>0] = 1;
   $$1 = $25;
  } else {
   $$1 = $$01;
  }
  $28 = (($$17) + 1)|0;
  $$01 = $$1;$$17 = $28;
 }
 _marknodes($0,$$01,$3,$6);
 $29 = ((($0)) + 44|0);
 $30 = ((($0)) + 1224|0);
 $31 = ((($0)) + 5080|0);
 $32 = ((($0)) + 1256|0);
 $33 = ((($0)) + 1172|0);
 $$02 = 0;$$04 = 0;$$2 = 1;
 while(1) {
  $34 = HEAP32[$10>>2]|0;
  $35 = ($$2|0)>($34|0);
  if ($35) {
   break;
  }
  $36 = HEAP32[$29>>2]|0;
  $37 = (($6) + ($$2)|0);
  $38 = HEAP8[$37>>0]|0;
  $39 = ($38<<24>>24)==(0);
  if ($39) {
   $40 = HEAP32[$18>>2]|0;
   $41 = (($40) + ($$2<<3)|0);
   $42 = +HEAPF64[$41>>3];
   $43 = $42 != 0.0;
   if ($43) {
    $44 = (($$02) + 1)|0;
    $45 = ($$02|0)<(10);
    if ($45) {
     $46 = HEAP32[$30>>2]|0;
     $47 = ($46|0)==(0);
     if ($47) {
      $$13 = $44;$$15 = $$2;
     } else {
      $48 = (($36) + (($$2*96)|0)|0);
      $49 = HEAP32[$33>>2]|0;
      $50 = (_clocktime($32,$49)|0);
      HEAP32[$vararg_buffer>>2] = $48;
      $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
      HEAP32[$vararg_ptr1>>2] = $50;
      _sprintf($31,14053,$vararg_buffer);
      _writeline($0,$31);
      $$13 = $44;$$15 = $$2;
     }
    } else {
     $$13 = $44;$$15 = $$2;
    }
   } else {
    $$13 = $$02;$$15 = $$04;
   }
  } else {
   $$13 = $$02;$$15 = $$04;
  }
  $51 = (($$2) + 1)|0;
  $$02 = $$13;$$04 = $$15;$$2 = $51;
 }
 $52 = ($$02|0)>(0);
 if ($52) {
  $53 = HEAP32[$30>>2]|0;
  $54 = ($53|0)==(0);
  if (!($54)) {
   $55 = ($$02|0)>(10);
   if ($55) {
    $56 = (($$02) + -10)|0;
    $57 = HEAP32[$33>>2]|0;
    $58 = (_clocktime($32,$57)|0);
    HEAP32[$vararg_buffer2>>2] = $56;
    $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
    HEAP32[$vararg_ptr5>>2] = $58;
    _sprintf($31,14093,$vararg_buffer2);
    _writeline($0,$31);
   }
   _getclosedlink($0,$$04,$6);
  }
 }
 _free($3);
 _free($6);
 STACKTOP = sp;return;
}
function _marknodes($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$0$in = 0, $$01 = 0, $$02 = 0, $$1 = 0, $$3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 88|0);
 $5 = ((($0)) + 48|0);
 $6 = ((($0)) + 4536|0);
 $$01 = $1;$$02 = 1;
 while(1) {
  $7 = ($$02|0)>($$01|0);
  if ($7) {
   break;
  }
  $8 = (($2) + ($$02<<2)|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = HEAP32[$4>>2]|0;
  $11 = (($10) + ($9<<2)|0);
  $$0$in = $11;$$1 = $$01;
  while(1) {
   $$0 = HEAP32[$$0$in>>2]|0;
   $12 = ($$0|0)==(0|0);
   if ($12) {
    break;
   }
   $13 = ((($$0)) + 4|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = HEAP32[$$0>>2]|0;
   $16 = (($3) + ($15)|0);
   $17 = HEAP8[$16>>0]|0;
   $18 = ($17<<24>>24)==(0);
   L7: do {
    if ($18) {
     $19 = HEAP32[$5>>2]|0;
     $20 = (((($19) + ($14<<7)|0)) + 104|0);
     $21 = HEAP32[$20>>2]|0;
     switch ($21|0) {
     case 4: case 3: case 0:  {
      $22 = (((($19) + ($14<<7)|0)) + 32|0);
      $23 = HEAP32[$22>>2]|0;
      $24 = ($15|0)==($23|0);
      if ($24) {
       $$3 = $$1;
       break L7;
      }
      break;
     }
     default: {
     }
     }
     $25 = HEAP32[$6>>2]|0;
     $26 = (($25) + ($14<<2)|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = ($27>>>0)>(2);
     if ($28) {
      HEAP8[$16>>0] = 1;
      $29 = (($$1) + 1)|0;
      $30 = (($2) + ($29<<2)|0);
      HEAP32[$30>>2] = $15;
      $$3 = $29;
     } else {
      $$3 = $$1;
     }
    } else {
     $$3 = $$1;
    }
   } while(0);
   $31 = ((($$0)) + 8|0);
   $$0$in = $31;$$1 = $$3;
  }
  $32 = (($$02) + 1)|0;
  $$01 = $$1;$$02 = $32;
 }
 return;
}
function _getclosedlink($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0$in = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $3 = (($2) + ($1)|0);
 HEAP8[$3>>0] = 2;
 $4 = ((($0)) + 88|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($1<<2)|0);
 $$0$in = $6;
 L1: while(1) {
  $$0 = HEAP32[$$0$in>>2]|0;
  $7 = ($$0|0)==(0|0);
  if ($7) {
   label = 7;
   break;
  }
  $8 = HEAP32[$$0>>2]|0;
  $9 = (($2) + ($8)|0);
  $10 = HEAP8[$9>>0]|0;
  switch ($10<<24>>24) {
  case 1:  {
   break L1;
   break;
  }
  case 2:  {
   break;
  }
  default: {
   _getclosedlink($0,$8,$2);
  }
  }
  $17 = ((($$0)) + 8|0);
  $$0$in = $17;
 }
 if ((label|0) == 7) {
  STACKTOP = sp;return;
 }
 $11 = ((($$0)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($0)) + 5080|0);
 $14 = ((($0)) + 48|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($15) + ($12<<7)|0);
 HEAP32[$vararg_buffer>>2] = $16;
 _sprintf($13,14145,$vararg_buffer);
 _writeline($0,$13);
 STACKTOP = sp;return;
}
function _writehyderr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = ((($0)) + 1224|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  _writehydstat($0,0,0.0);
  _disconnected($0);
  STACKTOP = sp;return;
 }
 $5 = ((($0)) + 44|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 5080|0);
 $8 = ((($0)) + 1256|0);
 $9 = ((($0)) + 1172|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_clocktime($8,$10)|0);
 $12 = (($6) + (($1*96)|0)|0);
 HEAP32[$vararg_buffer>>2] = $11;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $12;
 _sprintf($7,14193,$vararg_buffer);
 _writeline($0,$7);
 _writehydstat($0,0,0.0);
 _disconnected($0);
 STACKTOP = sp;return;
}
function _writetime($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = sp + 4|0;
 (_time(($2|0))|0);
 $3 = ((($0)) + 5080|0);
 $4 = (_ctime(($2|0))|0);
 HEAP32[$vararg_buffer>>2] = $4;
 _sprintf($3,$1,$vararg_buffer);
 _writeline($0,$3);
 STACKTOP = sp;return;
}
function _initrules($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4232|0);
 HEAP32[$1>>2] = 6;
 $2 = ((($0)) + 4244|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 4248|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($0)) + 4252|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 4228|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($0)) + 76|0);
 HEAP32[$6>>2] = 0;
 return;
}
function _addrule($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_match($1,14233)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  return;
 }
 $4 = ((($0)) + 1000|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 1)|0;
 HEAP32[$4>>2] = $6;
 return;
}
function _deleterule($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 _clearrule($0,$1);
 $2 = ((($0)) + 32|0);
 $3 = ((($0)) + 76|0);
 $$0 = $1;
 while(1) {
  $4 = HEAP32[$2>>2]|0;
  $5 = ($$0|0)<($4|0);
  $6 = HEAP32[$3>>2]|0;
  if (!($5)) {
   break;
  }
  $7 = (($$0) + 1)|0;
  $8 = (($6) + (($$0*56)|0)|0);
  $9 = (($6) + (($7*56)|0)|0);
  dest=$8; src=$9; stop=dest+56|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  $$0 = $7;
 }
 $10 = (((($6) + (($4*56)|0)|0)) + 40|0);
 HEAP32[$10>>2] = 0;
 $11 = (((($6) + (($4*56)|0)|0)) + 44|0);
 HEAP32[$11>>2] = 0;
 $12 = (((($6) + (($4*56)|0)|0)) + 48|0);
 HEAP32[$12>>2] = 0;
 $13 = HEAP32[$2>>2]|0;
 $14 = (($13) + -1)|0;
 HEAP32[$2>>2] = $14;
 return;
}
function _clearrule($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$in4 = 0, $$in5 = 0, $$in6 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (((($3) + (($1*56)|0)|0)) + 40|0);
 $5 = HEAP32[$4>>2]|0;
 $$in4 = $5;
 while(1) {
  $6 = ($$in4|0)==(0|0);
  if ($6) {
   break;
  }
  $7 = ((($$in4)) + 32|0);
  $8 = HEAP32[$7>>2]|0;
  _free($$in4);
  $$in4 = $8;
 }
 $9 = HEAP32[$2>>2]|0;
 $10 = (((($9) + (($1*56)|0)|0)) + 44|0);
 $11 = HEAP32[$10>>2]|0;
 $$in5 = $11;
 while(1) {
  $12 = ($$in5|0)==(0|0);
  if ($12) {
   break;
  }
  $13 = ((($$in5)) + 16|0);
  $14 = HEAP32[$13>>2]|0;
  _free($$in5);
  $$in5 = $14;
 }
 $15 = HEAP32[$2>>2]|0;
 $16 = (((($15) + (($1*56)|0)|0)) + 48|0);
 $17 = HEAP32[$16>>2]|0;
 $$in6 = $17;
 while(1) {
  $18 = ($$in6|0)==(0|0);
  if ($18) {
   break;
  }
  $19 = ((($$in6)) + 16|0);
  $20 = HEAP32[$19>>2]|0;
  _free($$in6);
  $$in6 = $20;
 }
 return;
}
function _allocrules($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 1092|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 1)|0;
 $4 = (_calloc($3,56)|0);
 $5 = ((($0)) + 76|0);
 HEAP32[$5>>2] = $4;
 $6 = ($4|0)==(0|0);
 $spec$select = $6 ? 101 : 0;
 return ($spec$select|0);
}
function _freerules($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  return;
 }
 $4 = ((($0)) + 32|0);
 $$0 = 1;
 while(1) {
  $5 = HEAP32[$4>>2]|0;
  $6 = ($$0|0)>($5|0);
  if ($6) {
   break;
  }
  _clearrule($0,$$0);
  $7 = (($$0) + 1)|0;
  $$0 = $7;
 }
 $8 = HEAP32[$1>>2]|0;
 _free($8);
 HEAP32[$1>>2] = 0;
 return;
}
function _ruledata($0) {
 $0 = $0|0;
 var $$0 = 0, $$3 = 0, $$32 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4232|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(7);
 if ($3) {
  $$0 = 0;
  return ($$0|0);
 }
 $4 = ((($0)) + 388|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_findmatch($5,544)|0);
 L4: do {
  switch ($6|0) {
  case 6:  {
   $24 = $2 & -2;
   $switch = ($24|0)==(4);
   if ($switch) {
    HEAP32[$1>>2] = 6;
    $25 = (_newpriority($0)|0);
    $$3 = $25;
    label = 18;
   } else {
    $$32 = 221;
   }
   break;
  }
  case 0:  {
   $7 = ((($0)) + 1104|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)==(2);
   if ($9) {
    $10 = ((($0)) + 32|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = (($11) + 1)|0;
    HEAP32[$10>>2] = $12;
    _newrule($0);
    HEAP32[$1>>2] = 0;
    $13 = ((($0)) + 4236|0);
    HEAP32[$13>>2] = 0;
    $$0 = 0;
    return ($$0|0);
   } else {
    $$32 = 201;
   }
   break;
  }
  case 1:  {
   $14 = ($2|0)==(0);
   if ($14) {
    HEAP32[$1>>2] = 1;
    $15 = (_newpremise($0,2)|0);
    $$3 = $15;
    label = 18;
   } else {
    $$32 = 221;
   }
   break;
  }
  case 2:  {
   switch ($2|0) {
   case 1:  {
    $16 = (_newpremise($0,2)|0);
    $$3 = $16;
    label = 18;
    break L4;
    break;
   }
   case 5: case 4:  {
    $17 = (_newaction($0)|0);
    $$3 = $17;
    label = 18;
    break L4;
    break;
   }
   default: {
    $$32 = 221;
    break L4;
   }
   }
   break;
  }
  case 3:  {
   $18 = ($2|0)==(1);
   if ($18) {
    $19 = (_newpremise($0,3)|0);
    $$3 = $19;
    label = 18;
   } else {
    $$32 = 221;
   }
   break;
  }
  case 4:  {
   $20 = ($2|0)==(1);
   if ($20) {
    HEAP32[$1>>2] = 4;
    $21 = (_newaction($0)|0);
    $$3 = $21;
    label = 18;
   } else {
    $$32 = 221;
   }
   break;
  }
  case 5:  {
   $22 = ($2|0)==(4);
   if ($22) {
    HEAP32[$1>>2] = 5;
    $23 = (_newaction($0)|0);
    $$3 = $23;
    label = 18;
   } else {
    $$32 = 221;
   }
   break;
  }
  default: {
   $$32 = 201;
  }
  }
 } while(0);
 if ((label|0) == 18) {
  $26 = ($$3|0)==(0);
  if ($26) {
   $$0 = 0;
   return ($$0|0);
  } else {
   $$32 = $$3;
  }
 }
 HEAP32[$1>>2] = 7;
 $27 = ((($0)) + 4236|0);
 HEAP32[$27>>2] = $$32;
 $$0 = 200;
 return ($$0|0);
}
function _newrule($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + (($4*56)|0)|0);
 $6 = ((($0)) + 392|0);
 $7 = HEAP32[$6>>2]|0;
 (_strncpy($5,$7,31)|0);
 $8 = (((($2) + (($4*56)|0)|0)) + 32|0);
 $9 = ((($0)) + 4244|0);
 ;HEAP32[$8>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;HEAP32[$8+12>>2]=0|0;HEAP32[$8+16>>2]=0|0;
 HEAP32[$9>>2] = 0;
 $10 = ((($0)) + 4248|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($0)) + 4252|0);
 HEAP32[$11>>2] = 0;
 return;
}
function _newpremise($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$0116 = 0, $$0116$off = 0, $$0116$off22 = 0, $$03 = 0, $$04 = 0, $$0614 = 0, $$1 = 0, $$1812 = 0, $$idx = 0, $$idx$val = 0, $$idx9 = 0, $$idx9$val = 0, $$off = 0, $$off19 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $storemerge = 0.0, $storemerge$in = 0.0, $switch = 0, $switch20 = 0, $switch21 = 0, $switch23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = ((($0)) + 1104|0);
 $4 = HEAP32[$3>>2]|0;
 $$off19 = (($4) + -5)|0;
 $switch20 = ($$off19>>>0)<(2);
 if (!($switch20)) {
  $$0 = 201;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = ((($0)) + 392|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_findmatch($6,640)|0);
 $8 = ($7|0)==(8);
 L4: do {
  if ($8) {
   $9 = ((($0)) + 396|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (_findmatch($10,576)|0);
   switch ($11|0) {
   case 0:  {
    $$0116 = 0;$$04 = 3;$$0614 = 8;$$1812 = 0;
    break L4;
    break;
   }
   case 9:  {
    $$0116 = 9;$$04 = 3;$$0614 = 8;$$1812 = 0;
    break L4;
    break;
   }
   case 10:  {
    $$0116 = 10;$$04 = 3;$$0614 = 8;$$1812 = 0;
    break L4;
    break;
   }
   default: {
    $$0 = 201;
    STACKTOP = sp;return ($$0|0);
   }
   }
  } else {
   $12 = ((($0)) + 400|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (_findmatch($13,576)|0);
   $15 = ($14|0)<(0);
   if ($15) {
    $$0 = 201;
    STACKTOP = sp;return ($$0|0);
   }
   switch ($7|0) {
   case 2: case 1: case 0: case 6:  {
    $16 = ((($0)) + 396|0);
    $17 = HEAP32[$16>>2]|0;
    $$idx = ((($0)) + 80|0);
    $$idx$val = HEAP32[$$idx>>2]|0;
    $18 = (_findnode($$idx$val,$17)|0);
    $19 = ($18|0)==(0);
    if ($19) {
     $$0 = 203;
     STACKTOP = sp;return ($$0|0);
    }
    switch ($14|0) {
    case 4: case 3: case 2: case 1: case 0:  {
     $$0116 = $14;$$04 = 4;$$0614 = 6;$$1812 = $18;
     break L4;
     break;
    }
    case 12: case 11:  {
     break;
    }
    default: {
     $$0 = 201;
     STACKTOP = sp;return ($$0|0);
    }
    }
    $20 = ((($0)) + 8|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ($18|0)>($21|0);
    if ($22) {
     $$0116 = $14;$$04 = 4;$$0614 = 6;$$1812 = $18;
     break L4;
    } else {
     $$0 = 201;
    }
    STACKTOP = sp;return ($$0|0);
    break;
   }
   case 5: case 4: case 3: case 7:  {
    $23 = ((($0)) + 396|0);
    $24 = HEAP32[$23>>2]|0;
    $$idx9 = ((($0)) + 84|0);
    $$idx9$val = HEAP32[$$idx9>>2]|0;
    $25 = (_findlink($$idx9$val,$24)|0);
    $26 = ($25|0)==(0);
    if ($26) {
     $$0 = 204;
     STACKTOP = sp;return ($$0|0);
    }
    $$off = (($14) + -5)|0;
    $switch = ($$off>>>0)<(3);
    if ($switch) {
     $$0116 = $14;$$04 = 4;$$0614 = 7;$$1812 = $25;
     break L4;
    } else {
     $$0 = 201;
    }
    STACKTOP = sp;return ($$0|0);
    break;
   }
   default: {
    $$0 = 201;
    STACKTOP = sp;return ($$0|0);
   }
   }
  }
 } while(0);
 $27 = (((($0)) + 388|0) + ($$04<<2)|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (_findmatch($28,688)|0);
 $30 = ($29|0)<(0);
 if ($30) {
  $$0 = 201;
  STACKTOP = sp;return ($$0|0);
 }
 switch ($29|0) {
 case 6:  {
  $$03 = 0;
  break;
 }
 case 7:  {
  $$03 = 1;
  break;
 }
 case 8:  {
  $$03 = 4;
  break;
 }
 case 9:  {
  $$03 = 5;
  break;
 }
 default: {
  $$03 = $29;
 }
 }
 HEAPF64[$2>>3] = -1.0E+10;
 $$0116$off = (($$0116) + -9)|0;
 $switch21 = ($$0116$off>>>0)<(2);
 if ($switch21) {
  $31 = ($4|0)==(6);
  $32 = ((($0)) + 404|0);
  $33 = HEAP32[$32>>2]|0;
  if ($31) {
   $34 = ((($0)) + 408|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = (+_hour($33,$35));
   $storemerge$in = $36;
  } else {
   $37 = (+_hour($33,21208));
   $storemerge$in = $37;
  }
  $storemerge = $storemerge$in * 3600.0;
  HEAPF64[$2>>3] = $storemerge;
  $38 = $storemerge < 0.0;
  if ($38) {
   $$0 = 202;
   STACKTOP = sp;return ($$0|0);
  } else {
   $$1 = 0;
  }
 } else {
  $39 = (($4) + -1)|0;
  $40 = (((($0)) + 388|0) + ($39<<2)|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (_findmatch($41,736)|0);
  $43 = ($42|0)>(0);
  if ($43) {
   $$1 = $42;
  } else {
   $44 = (_getfloat($41,$2)|0);
   $45 = ($44|0)==(0);
   if ($45) {
    $$0 = 202;
    STACKTOP = sp;return ($$0|0);
   }
   $$0116$off22 = (($$0116) + -11)|0;
   $switch23 = ($$0116$off22>>>0)<(2);
   if ($switch23) {
    $46 = +HEAPF64[$2>>3];
    $47 = $46 * 3600.0;
    HEAPF64[$2>>3] = $47;
    $$1 = 0;
   } else {
    $$1 = 0;
   }
  }
 }
 $48 = (_malloc(40)|0);
 $49 = ($48|0)==(0|0);
 if ($49) {
  $$0 = 101;
  STACKTOP = sp;return ($$0|0);
 }
 $50 = ((($48)) + 4|0);
 HEAP32[$50>>2] = $$0614;
 $51 = ((($48)) + 8|0);
 HEAP32[$51>>2] = $$1812;
 $52 = ((($48)) + 12|0);
 HEAP32[$52>>2] = $$0116;
 $53 = ((($48)) + 16|0);
 HEAP32[$53>>2] = $$03;
 HEAP32[$48>>2] = $1;
 $54 = ((($48)) + 20|0);
 HEAP32[$54>>2] = $$1;
 $55 = +HEAPF64[$2>>3];
 $56 = ((($48)) + 24|0);
 HEAPF64[$56>>3] = $55;
 $57 = ((($48)) + 32|0);
 HEAP32[$57>>2] = 0;
 $58 = ((($0)) + 4244|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = ($59|0)==(0|0);
 if ($60) {
  $61 = ((($0)) + 76|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = ((($0)) + 32|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = (((($62) + (($64*56)|0)|0)) + 40|0);
  HEAP32[$65>>2] = $48;
 } else {
  $66 = ((($59)) + 32|0);
  HEAP32[$66>>2] = $48;
 }
 HEAP32[$58>>2] = $48;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _newaction($0) {
 $0 = $0|0;
 var $$0 = 0, $$1 = 0, $$2 = 0, $$idx = 0, $$idx$val = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ((($0)) + 1104|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(6);
 if (!($4)) {
  $$0 = 201;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = ((($0)) + 396|0);
 $6 = HEAP32[$5>>2]|0;
 $$idx = ((($0)) + 84|0);
 $$idx$val = HEAP32[$$idx>>2]|0;
 $7 = (_findlink($$idx$val,$6)|0);
 $8 = ($7|0)==(0);
 if ($8) {
  $$0 = 204;
  STACKTOP = sp;return ($$0|0);
 }
 $9 = ((($0)) + 48|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (((($10) + ($7<<7)|0)) + 104|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0);
 if ($13) {
  $$0 = 207;
  STACKTOP = sp;return ($$0|0);
 }
 HEAPF64[$1>>3] = -1.0E+10;
 $14 = ((($0)) + 408|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (_findmatch($15,736)|0);
 $17 = ($16|0)>(0);
 if ($17) {
  $$2 = $16;$36 = -1.0E+10;
 } else {
  $18 = (_getfloat($15,$1)|0);
  $19 = ($18|0)==(0);
  if ($19) {
   $$0 = 202;
   STACKTOP = sp;return ($$0|0);
  }
  $20 = +HEAPF64[$1>>3];
  $21 = $20 < 0.0;
  if ($21) {
   $$0 = 202;
   STACKTOP = sp;return ($$0|0);
  }
  $22 = $20 != -1.0E+10;
  if ($22) {
   $23 = HEAP32[$9>>2]|0;
   $24 = (((($23) + ($7<<7)|0)) + 104|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($25|0)==(8);
   if ($26) {
    $$0 = 202;
    STACKTOP = sp;return ($$0|0);
   }
   $27 = HEAP32[$9>>2]|0;
   $28 = (((($27) + ($7<<7)|0)) + 104|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ($29|0)==(1);
   if ($30) {
    $31 = $20 == 0.0;
    $$1 = $31 ? 2 : 1;
    HEAPF64[$1>>3] = -1.0E+10;
    $$2 = $$1;$36 = -1.0E+10;
   } else {
    $$2 = -1;$36 = $20;
   }
  } else {
   $$2 = -1;$36 = -1.0E+10;
  }
 }
 $32 = (_malloc(24)|0);
 $33 = ($32|0)==(0|0);
 if ($33) {
  $$0 = 101;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$32>>2] = $7;
 $34 = ((($32)) + 4|0);
 HEAP32[$34>>2] = $$2;
 $35 = ((($32)) + 8|0);
 HEAPF64[$35>>3] = $36;
 $37 = ((($0)) + 4232|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ($38|0)==(4);
 $40 = ((($32)) + 16|0);
 HEAP32[$40>>2] = 0;
 if ($39) {
  $41 = ((($0)) + 4248|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = ($42|0)==(0|0);
  if ($43) {
   $44 = ((($0)) + 76|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = ((($0)) + 32|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (((($45) + (($47*56)|0)|0)) + 44|0);
   HEAP32[$48>>2] = $32;
  } else {
   $49 = ((($42)) + 16|0);
   HEAP32[$49>>2] = $32;
  }
  HEAP32[$41>>2] = $32;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $50 = ((($0)) + 4252|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = ($51|0)==(0|0);
  if ($52) {
   $53 = ((($0)) + 76|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = ((($0)) + 32|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = (((($54) + (($56*56)|0)|0)) + 48|0);
   HEAP32[$57>>2] = $32;
  } else {
   $58 = ((($51)) + 16|0);
   HEAP32[$58>>2] = $32;
  }
  HEAP32[$50>>2] = $32;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _newpriority($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ((($0)) + 392|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_getfloat($3,$1)|0);
 $5 = ($4|0)==(0);
 if ($5) {
  $$0 = 202;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = +HEAPF64[$1>>3];
 $7 = ((($0)) + 76|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 32|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (((($8) + (($10*56)|0)|0)) + 32|0);
 HEAPF64[$11>>3] = $6;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _ruleerrmsg($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1312|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1312|0);
 $vararg_buffer = sp + 1296|0;
 $1 = sp + 1040|0;
 $2 = sp;
 $3 = ((($0)) + 388|0);
 $4 = ((($0)) + 4236|0);
 $5 = HEAP32[$4>>2]|0;
 switch ($5|0) {
 case 201:  {
  (_strcpy($2,14463)|0);
  break;
 }
 case 202:  {
  (_strcpy($2,14515)|0);
  break;
 }
 case 203:  {
  (_strcpy($2,14576)|0);
  break;
 }
 case 204:  {
  (_strcpy($2,14630)|0);
  break;
 }
 case 207:  {
  (_strcpy($2,14684)|0);
  break;
 }
 case 221:  {
  (_strcpy($2,14747)|0);
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
 $6 = ((($0)) + 32|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)>(0);
 if ($8) {
  (_strncpy($1,14804,255)|0);
  (_strncat($1,14809,255)|0);
  $9 = ((($0)) + 76|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[$6>>2]|0;
  $12 = (($10) + (($11*56)|0)|0);
  (_strncat($1,$12,255)|0);
 } else {
  (_strncpy($1,14811,255)|0);
 }
 $13 = ((($0)) + 5080|0);
 HEAP32[$vararg_buffer>>2] = $2;
 _snprintf($13,255,14827,$vararg_buffer);
 (_strncat($13,$1,255)|0);
 (_strncat($13,14830,255)|0);
 _writeline($0,$13);
 $14 = HEAP32[$3>>2]|0;
 (_strcpy($2,$14)|0);
 $15 = ((($0)) + 1104|0);
 $$0 = 1;
 while(1) {
  $16 = HEAP32[$15>>2]|0;
  $17 = ($$0|0)<($16|0);
  if (!($17)) {
   break;
  }
  (_strncat($2,14809,1024)|0);
  $18 = (((($0)) + 388|0) + ($$0<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  (_strncat($2,$19,1024)|0);
  $20 = (($$0) + 1)|0;
  $$0 = $20;
 }
 _writeline($0,$2);
 STACKTOP = sp;return;
}
function _adjustrules($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0$in = 0, $$01 = 0, $$01$in = 0, $$03 = 0, $$07 = 0, $$1 = 0, $$1$in = 0, $$12 = 0, $$12$in = 0, $$14 = 0, $$18 = 0, $$2 = 0, $$2$in = 0, $$25 = 0, $$3 = 0, $$3$in = 0, $$4 = 0, $$6 = 0, $10 = 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond12 = 0, $spec$select = 0;
 var $spec$select15 = 0, $spec$select16 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 76|0);
 $6 = ($1|0)==(7);
 $$07 = $4;
 while(1) {
  $7 = ($$07|0)>(0);
  if (!($7)) {
   break;
  }
  $8 = HEAP32[$5>>2]|0;
  $9 = (((($8) + (($$07*56)|0)|0)) + 40|0);
  $$01$in = $9;$$03 = 0;
  while(1) {
   $$01 = HEAP32[$$01$in>>2]|0;
   $10 = ($$01|0)!=(0|0);
   $11 = ($$03|0)==(0);
   $or$cond12 = $10 & $11;
   if (!($or$cond12)) {
    break;
   }
   $12 = ((($$01)) + 4|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($13|0)==($1|0);
   if ($14) {
    $15 = ((($$01)) + 8|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($16|0)==($2|0);
    $spec$select = $17&1;
    $$14 = $spec$select;
   } else {
    $$14 = 0;
   }
   $18 = ((($$01)) + 32|0);
   $$01$in = $18;$$03 = $$14;
  }
  L11: do {
   if ($6) {
    $19 = (((($8) + (($$07*56)|0)|0)) + 44|0);
    $$0$in = $19;$$25 = $$03;
    while(1) {
     $$0 = HEAP32[$$0$in>>2]|0;
     $20 = ($$0|0)!=(0|0);
     $21 = ($$25|0)==(0);
     $or$cond = $20 & $21;
     if (!($or$cond)) {
      break;
     }
     $22 = HEAP32[$$0>>2]|0;
     $23 = ($22|0)==($2|0);
     $spec$select15 = $23&1;
     $24 = ((($$0)) + 16|0);
     $$0$in = $24;$$25 = $spec$select15;
    }
    $25 = (((($8) + (($$07*56)|0)|0)) + 48|0);
    $$1$in = $25;$$4 = $$25;
    while(1) {
     $$1 = HEAP32[$$1$in>>2]|0;
     $26 = ($$1|0)==(0|0);
     if ($26) {
      $$6 = $$4;
      label = 16;
      break L11;
     }
     $27 = ($$4|0)==(0);
     if (!($27)) {
      label = 17;
      break L11;
     }
     $28 = HEAP32[$$1>>2]|0;
     $29 = ($28|0)==($2|0);
     $spec$select16 = $29&1;
     $30 = ((($$1)) + 16|0);
     $$1$in = $30;$$4 = $spec$select16;
    }
   } else {
    $$6 = $$03;
    label = 16;
   }
  } while(0);
  if ((label|0) == 16) {
   label = 0;
   $31 = ($$6|0)==(0);
   if (!($31)) {
    label = 17;
   }
  }
  if ((label|0) == 17) {
   label = 0;
   _deleterule($0,$$07);
  }
  $32 = (($$07) + -1)|0;
  $$07 = $32;
 }
 $$18 = 1;
 while(1) {
  $33 = HEAP32[$3>>2]|0;
  $34 = ($$18|0)>($33|0);
  if ($34) {
   break;
  }
  $35 = HEAP32[$5>>2]|0;
  $36 = (((($35) + (($$18*56)|0)|0)) + 40|0);
  $$12$in = $36;
  while(1) {
   $$12 = HEAP32[$$12$in>>2]|0;
   $37 = ($$12|0)==(0|0);
   if ($37) {
    break;
   }
   $38 = ((($$12)) + 4|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = ($39|0)==($1|0);
   if ($40) {
    $41 = ((($$12)) + 8|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = ($42|0)>($2|0);
    if ($43) {
     $44 = (($42) + -1)|0;
     HEAP32[$41>>2] = $44;
    }
   }
   $45 = ((($$12)) + 32|0);
   $$12$in = $45;
  }
  L38: do {
   if ($6) {
    $46 = HEAP32[$5>>2]|0;
    $47 = (((($46) + (($$18*56)|0)|0)) + 44|0);
    $$2$in = $47;
    while(1) {
     $$2 = HEAP32[$$2$in>>2]|0;
     $48 = ($$2|0)==(0|0);
     if ($48) {
      break;
     }
     $49 = HEAP32[$$2>>2]|0;
     $50 = ($49|0)>($2|0);
     if ($50) {
      $51 = (($49) + -1)|0;
      HEAP32[$$2>>2] = $51;
     }
     $52 = ((($$2)) + 16|0);
     $$2$in = $52;
    }
    $53 = HEAP32[$5>>2]|0;
    $54 = (((($53) + (($$18*56)|0)|0)) + 48|0);
    $$3$in = $54;
    while(1) {
     $$3 = HEAP32[$$3$in>>2]|0;
     $55 = ($$3|0)==(0|0);
     if ($55) {
      break L38;
     }
     $56 = HEAP32[$$3>>2]|0;
     $57 = ($56|0)>($2|0);
     if ($57) {
      $58 = (($56) + -1)|0;
      HEAP32[$$3>>2] = $58;
     }
     $59 = ((($$3)) + 16|0);
     $$3$in = $59;
    }
   }
  } while(0);
  $60 = (($$18) + 1)|0;
  $$18 = $60;
 }
 return;
}
function _adjusttankrules($0) {
 $0 = $0|0;
 var $$0 = 0, $$0$in = 0, $$01 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 32|0);
 $4 = ((($0)) + 76|0);
 $$01 = 1;
 while(1) {
  $5 = HEAP32[$3>>2]|0;
  $6 = ($$01|0)>($5|0);
  if ($6) {
   break;
  }
  $7 = HEAP32[$4>>2]|0;
  $8 = (((($7) + (($$01*56)|0)|0)) + 40|0);
  $$0$in = $8;
  while(1) {
   $$0 = HEAP32[$$0$in>>2]|0;
   $9 = ($$0|0)==(0|0);
   if ($9) {
    break;
   }
   $10 = ((($$0)) + 4|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(6);
   if ($12) {
    $13 = ((($$0)) + 8|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($14|0)>($2|0);
    if ($15) {
     $16 = (($14) + 1)|0;
     HEAP32[$13>>2] = $16;
    }
   }
   $17 = ((($$0)) + 32|0);
   $$0$in = $17;
  }
  $18 = (($$01) + 1)|0;
  $$01 = $18;
 }
 return;
}
function _getpremise($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$0$lcssa = 0, $$01 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $0;$$01 = 0;
 while(1) {
  $2 = ($$0|0)==(0|0);
  if ($2) {
   $$0$lcssa = 0;
   label = 5;
   break;
  }
  $3 = (($$01) + 1)|0;
  $4 = ($3|0)==($1|0);
  if ($4) {
   $$0$lcssa = $$0;
   label = 5;
   break;
  }
  $5 = ((($$0)) + 32|0);
  $6 = HEAP32[$5>>2]|0;
  $$0 = $6;$$01 = $3;
 }
 if ((label|0) == 5) {
  return ($$0$lcssa|0);
 }
 return (0)|0;
}
function _getaction($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$0$lcssa = 0, $$01 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $0;$$01 = 0;
 while(1) {
  $2 = ($$0|0)==(0|0);
  if ($2) {
   $$0$lcssa = 0;
   label = 5;
   break;
  }
  $3 = (($$01) + 1)|0;
  $4 = ($3|0)==($1|0);
  if ($4) {
   $$0$lcssa = $$0;
   label = 5;
   break;
  }
  $5 = ((($$0)) + 16|0);
  $6 = HEAP32[$5>>2]|0;
  $$0 = $6;$$01 = $3;
 }
 if ((label|0) == 5) {
  return ($$0$lcssa|0);
 }
 return (0)|0;
}
function _writerule($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $3 = ((($0)) + 76|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (((($4) + (($2*56)|0)|0)) + 40|0);
 $6 = HEAP32[$5>>2]|0;
 (_fwrite(14832,6,1,$1)|0);
 $$01 = $6;
 while(1) {
  $7 = ($$01|0)==(0|0);
  if ($7) {
   break;
  }
  _writepremise($$01,$1,$0);
  $8 = ((($$01)) + 32|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(0|0);
  if (!($10)) {
   $11 = HEAP32[$9>>2]|0;
   $12 = (544 + ($11<<2)|0);
   $13 = HEAP32[$12>>2]|0;
   HEAP32[$vararg_buffer>>2] = $13;
   (_fprintf($1,14839,$vararg_buffer)|0);
  }
  $$01 = $9;
 }
 $14 = (((($4) + (($2*56)|0)|0)) + 44|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0|0);
 if (!($16)) {
  (_fwrite(14845,6,1,$1)|0);
 }
 $$0 = $15;
 while(1) {
  $17 = ($$0|0)==(0|0);
  if ($17) {
   break;
  }
  _writeaction($$0,$1,$0);
  $18 = ((($$0)) + 16|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19|0)==(0|0);
  if (!($20)) {
   (_fwrite(14852,6,1,$1)|0);
  }
  $$0 = $19;
 }
 $21 = (((($4) + (($2*56)|0)|0)) + 48|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)==(0|0);
 if (!($23)) {
  (_fwrite(14859,6,1,$1)|0);
 }
 $$1 = $22;
 while(1) {
  $24 = ($$1|0)==(0|0);
  if ($24) {
   break;
  }
  _writeaction($$1,$1,$0);
  $25 = ((($$1)) + 16|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ($26|0)==(0|0);
  if (!($27)) {
   (_fwrite(14852,6,1,$1)|0);
  }
  $$1 = $26;
 }
 $28 = (((($4) + (($2*56)|0)|0)) + 32|0);
 $29 = +HEAPF64[$28>>3];
 $30 = $29 > 0.0;
 if (!($30)) {
  STACKTOP = sp;return;
 }
 HEAPF64[$vararg_buffer1>>3] = $29;
 (_fprintf($1,14866,$vararg_buffer1)|0);
 STACKTOP = sp;return;
}
function _writepremise($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$off = 0, $$pre = 0, $$pre$phi1Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $switch = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $vararg_buffer1 = sp + 96|0;
 $vararg_buffer = sp + 88|0;
 $3 = sp + 64|0;
 $4 = sp + 32|0;
 $5 = sp;
 $6 = ((($0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 switch ($7|0) {
 case 6:  {
  $8 = ((($2)) + 44|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($0)) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (((($9) + (($11*96)|0)|0)) + 88|0);
  $13 = HEAP32[$12>>2]|0;
  _getobjtxt(6,$13,$3);
  $14 = HEAP32[$8>>2]|0;
  $15 = HEAP32[$10>>2]|0;
  $16 = (($14) + (($15*96)|0)|0);
  (_strcpy($4,$16)|0);
  break;
 }
 case 7:  {
  $17 = ((($2)) + 48|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ((($0)) + 8|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (((($18) + ($20<<7)|0)) + 104|0);
  $22 = HEAP32[$21>>2]|0;
  _getobjtxt(7,$22,$3);
  $23 = HEAP32[$17>>2]|0;
  $24 = HEAP32[$19>>2]|0;
  $25 = (($23) + ($24<<7)|0);
  (_strcpy($4,$25)|0);
  break;
 }
 default: {
  (_strcpy($3,14398)|0);
  (_strcpy($4,21208)|0);
 }
 }
 $26 = ((($0)) + 24|0);
 $27 = +HEAPF64[$26>>3];
 $28 = $27 == -1.0E+10;
 do {
  if ($28) {
   $29 = ((($0)) + 20|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = (736 + ($30<<2)|0);
   $32 = HEAP32[$31>>2]|0;
   (_strcpy($5,$32)|0);
   $$pre = ((($0)) + 12|0);
   $$pre$phi1Z2D = $5;$$pre$phiZ2D = $$pre;
  } else {
   $33 = ((($0)) + 12|0);
   $34 = HEAP32[$33>>2]|0;
   $$off = (($34) + -9)|0;
   $switch = ($$off>>>0)<(4);
   if ($switch) {
    _gettimetxt($27,$5);
    $$pre$phi1Z2D = $5;$$pre$phiZ2D = $33;
    break;
   } else {
    HEAPF64[$vararg_buffer>>3] = $27;
    _sprintf($5,14879,$vararg_buffer);
    $$pre$phi1Z2D = $5;$$pre$phiZ2D = $33;
    break;
   }
  }
 } while(0);
 $35 = HEAP32[$$pre$phiZ2D>>2]|0;
 $36 = (576 + ($35<<2)|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ((($0)) + 16|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = (688 + ($39<<2)|0);
 $41 = HEAP32[$40>>2]|0;
 HEAP32[$vararg_buffer1>>2] = $3;
 $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
 HEAP32[$vararg_ptr4>>2] = $4;
 $vararg_ptr5 = ((($vararg_buffer1)) + 8|0);
 HEAP32[$vararg_ptr5>>2] = $37;
 $vararg_ptr6 = ((($vararg_buffer1)) + 12|0);
 HEAP32[$vararg_ptr6>>2] = $41;
 $vararg_ptr7 = ((($vararg_buffer1)) + 16|0);
 HEAP32[$vararg_ptr7>>2] = $$pre$phi1Z2D;
 (_fprintf($1,14938,$vararg_buffer1)|0);
 STACKTOP = sp;return;
}
function _writeaction($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre$phi1Z2D = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $vararg_buffer1 = sp + 136|0;
 $vararg_buffer = sp + 128|0;
 $3 = sp + 96|0;
 $4 = sp + 64|0;
 $5 = sp + 32|0;
 $6 = sp;
 $7 = ((($2)) + 48|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$0>>2]|0;
 $10 = (((($8) + ($9<<7)|0)) + 104|0);
 $11 = HEAP32[$10>>2]|0;
 _getobjtxt(7,$11,$4);
 $12 = HEAP32[$7>>2]|0;
 $13 = HEAP32[$0>>2]|0;
 $14 = (($12) + ($13<<7)|0);
 (_strcpy($3,$14)|0);
 $15 = ((($0)) + 8|0);
 $16 = +HEAPF64[$15>>3];
 $17 = $16 == -1.0E+10;
 if ($17) {
  (_strcpy($5,14301)|0);
  $18 = ((($0)) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (736 + ($19<<2)|0);
  $21 = HEAP32[$20>>2]|0;
  (_strcpy($6,$21)|0);
  $$pre$phi1Z2D = $6;
 } else {
  (_strcpy($5,14308)|0);
  $22 = +HEAPF64[$15>>3];
  HEAPF64[$vararg_buffer>>3] = $22;
  _sprintf($6,14879,$vararg_buffer);
  $$pre$phi1Z2D = $6;
 }
 HEAP32[$vararg_buffer1>>2] = $4;
 $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
 HEAP32[$vararg_ptr4>>2] = $3;
 $vararg_ptr5 = ((($vararg_buffer1)) + 8|0);
 HEAP32[$vararg_ptr5>>2] = $5;
 $vararg_ptr6 = ((($vararg_buffer1)) + 12|0);
 HEAP32[$vararg_ptr6>>2] = $$pre$phi1Z2D;
 (_fprintf($1,14884,$vararg_buffer1)|0);
 STACKTOP = sp;return;
}
function _getobjtxt($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 L1: do {
  switch ($0|0) {
  case 6:  {
   switch ($1|0) {
   case 0:  {
    (_strcpy($2,14898)|0);
    break L1;
    break;
   }
   case 1:  {
    (_strcpy($2,14907)|0);
    break L1;
    break;
   }
   case 2:  {
    (_strcpy($2,14917)|0);
    break L1;
    break;
   }
   default: {
    (_strcpy($2,14388)|0);
    break L1;
   }
   }
   break;
  }
  case 7:  {
   switch ($1|0) {
   case 1: case 0:  {
    (_strcpy($2,14922)|0);
    break L1;
    break;
   }
   case 2:  {
    (_strcpy($2,14927)|0);
    break L1;
    break;
   }
   default: {
    (_strcpy($2,14932)|0);
    break L1;
   }
   }
   break;
  }
  default: {
   (_strcpy($2,14398)|0);
  }
  }
 } while(0);
 return;
}
function _gettimetxt($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = (~~(($0)));
 $3 = (($2|0) / 3600)&-1;
 $4 = ($2|0)>(608399);
 if ($4) {
  $5 = $0 / 3600.0;
  HEAPF64[$vararg_buffer>>3] = $5;
  _sprintf($1,14879,$vararg_buffer);
  STACKTOP = sp;return;
 } else {
  $6 = ($3*3600)|0;
  $7 = (+($6|0));
  $8 = $0 - $7;
  $9 = $8 / 60.0;
  $10 = (~~(($9)));
  $11 = ($10*60)|0;
  $12 = (+($11|0));
  $13 = $8 - $12;
  $14 = (~~(($13)));
  HEAP32[$vararg_buffer1>>2] = $3;
  $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr4>>2] = $10;
  $vararg_ptr5 = ((($vararg_buffer1)) + 8|0);
  HEAP32[$vararg_ptr5>>2] = $14;
  _sprintf($1,14953,$vararg_buffer1);
  STACKTOP = sp;return;
 }
}
function _checkrules($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$01 = 0, $$idx$val = 0, $$idx$val$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 1172|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) - ($1))|0;
 $5 = (($4) + 1)|0;
 $6 = ((($0)) + 4240|0);
 HEAP32[$6>>2] = $5;
 $7 = ((($0)) + 4228|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($0)) + 32|0);
 $9 = ((($0)) + 76|0);
 $$01 = 1;
 while(1) {
  $10 = HEAP32[$8>>2]|0;
  $11 = ($$01|0)>($10|0);
  if ($11) {
   break;
  }
  $12 = (_evalpremises($0,$$01)|0);
  $13 = ($12|0)==(1);
  $14 = HEAP32[$9>>2]|0;
  if ($13) {
   $15 = (((($14) + (($$01*56)|0)|0)) + 44|0);
   $16 = HEAP32[$15>>2]|0;
   _updateactionlist($0,$$01,$16);
  } else {
   $17 = (((($14) + (($$01*56)|0)|0)) + 48|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($18|0)==(0|0);
   if (!($19)) {
    _updateactionlist($0,$$01,$18);
   }
  }
  $20 = (($$01) + 1)|0;
  $$01 = $20;
 }
 $21 = HEAP32[$7>>2]|0;
 $22 = ($21|0)==(0|0);
 if ($22) {
  $$0 = 0;$$idx$val = 0;
  _clearactionlist($$idx$val);
  return ($$0|0);
 }
 $23 = (_takeactions($0)|0);
 $$idx$val$pre = HEAP32[$7>>2]|0;
 $$0 = $23;$$idx$val = $$idx$val$pre;
 _clearactionlist($$idx$val);
 return ($$0|0);
}
function _evalpremises($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$01 = 0, $$01$in = 0, $$02 = 0, $$2 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (((($3) + (($1*56)|0)|0)) + 40|0);
 $$01$in = $4;$$02 = 1;
 while(1) {
  $$01 = HEAP32[$$01$in>>2]|0;
  $5 = ($$01|0)==(0|0);
  if ($5) {
   $$0 = $$02;
   label = 9;
   break;
  }
  $6 = HEAP32[$$01>>2]|0;
  $7 = ($6|0)==(3);
  $8 = ($$02|0)==(0);
  if ($7) {
   if ($8) {
    $9 = (_checkpremise($0,$$01)|0);
    $$2 = $9;
   } else {
    $$2 = $$02;
   }
  } else {
   if ($8) {
    $$0 = 0;
    label = 9;
    break;
   }
   $10 = (_checkpremise($0,$$01)|0);
   $$2 = $10;
  }
  $11 = ((($$01)) + 32|0);
  $$01$in = $11;$$02 = $$2;
 }
 if ((label|0) == 9) {
  return ($$0|0);
 }
 return (0)|0;
}
function _updateactionlist($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 4228|0);
 $$0 = $2;
 while(1) {
  $4 = ($$0|0)==(0|0);
  if ($4) {
   break;
  }
  $5 = (_onactionlist($0,$1,$$0)|0);
  $6 = ($5|0)==(0);
  if ($6) {
   $7 = (_malloc(12)|0);
   $8 = ($7|0)==(0|0);
   if (!($8)) {
    $9 = ((($7)) + 4|0);
    HEAP32[$9>>2] = $$0;
    HEAP32[$7>>2] = $1;
    $10 = HEAP32[$3>>2]|0;
    $11 = ((($7)) + 8|0);
    HEAP32[$11>>2] = $10;
    HEAP32[$3>>2] = $7;
   }
  }
  $12 = ((($$0)) + 16|0);
  $13 = HEAP32[$12>>2]|0;
  $$0 = $13;
 }
 return;
}
function _takeactions($0) {
 $0 = $0|0;
 var $$0 = 0, $$0$in = 0, $$01 = 0.0, $$02 = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4228|0);
 $2 = ((($0)) + 4536|0);
 $3 = ((($0)) + 4276|0);
 $4 = ((($0)) + 1228|0);
 $5 = ((($0)) + 76|0);
 $6 = ((($0)) + 48|0);
 $7 = ((($0)) + 4928|0);
 $8 = ((($0)) + 4960|0);
 $$0$in = $1;$$02 = 0;
 while(1) {
  $$0 = HEAP32[$$0$in>>2]|0;
  $9 = ($$0|0)==(0|0);
  if ($9) {
   break;
  }
  $10 = ((($$0)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = HEAP32[$11>>2]|0;
  $13 = HEAP32[$2>>2]|0;
  $14 = (($13) + ($12<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = HEAP32[$3>>2]|0;
  $17 = (($16) + ($12<<3)|0);
  $18 = +HEAPF64[$17>>3];
  $19 = ((($11)) + 8|0);
  $20 = +HEAPF64[$19>>3];
  $21 = ((($11)) + 4|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22|0)==(1);
  $24 = ($15|0)<(3);
  $or$cond = $23 & $24;
  do {
   if ($or$cond) {
    _setlinkstatus($0,$12,1,$14,$17);
    label = 13;
   } else {
    $25 = ($22|0)==(2);
    $26 = ($15|0)>(2);
    $or$cond5 = $25 & $26;
    if ($or$cond5) {
     _setlinkstatus($0,$12,0,$14,$17);
     label = 13;
     break;
    }
    $27 = $20 != -1.0E+10;
    if ($27) {
     $28 = HEAP32[$6>>2]|0;
     $29 = (((($28) + ($12<<7)|0)) + 104|0);
     $30 = HEAP32[$29>>2]|0;
     switch ($30|0) {
     case 5: case 4: case 3:  {
      $31 = +HEAPF64[$7>>3];
      $32 = $20 / $31;
      $$01 = $32;
      break;
     }
     case 6:  {
      $33 = +HEAPF64[$8>>3];
      $34 = $20 / $33;
      $$01 = $34;
      break;
     }
     default: {
      $$01 = $20;
     }
     }
     $35 = $$01 - $18;
     $36 = $35 < 0.0;
     $37 = - $35;
     $38 = $36 ? $37 : $35;
     $39 = $38 > 0.001;
     if ($39) {
      _setlinksetting($0,$12,$$01,$14,$17);
      label = 13;
     } else {
      $$1 = $$02;
     }
    } else {
     $$1 = $$02;
    }
   }
  } while(0);
  if ((label|0) == 13) {
   label = 0;
   $40 = (($$02) + 1)|0;
   $41 = HEAP32[$4>>2]|0;
   $42 = ($41|0)==(0);
   if ($42) {
    $$1 = $40;
   } else {
    $43 = HEAP32[$5>>2]|0;
    $44 = HEAP32[$$0>>2]|0;
    $45 = (($43) + (($44*56)|0)|0);
    _writeruleaction($0,$12,$45);
    $$1 = $40;
   }
  }
  $46 = ((($$0)) + 8|0);
  $$0$in = $46;$$02 = $$1;
 }
 return ($$02|0);
}
function _clearactionlist($$0$0$val) {
 $$0$0$val = $$0$0$val|0;
 var $$in = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$in = $$0$0$val;
 while(1) {
  $0 = ($$in|0)==(0|0);
  if ($0) {
   break;
  }
  $1 = ((($$in)) + 8|0);
  $2 = HEAP32[$1>>2]|0;
  _free($$in);
  $$in = $2;
 }
 return;
}
function _onactionlist($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$01 = 0, $$01$in = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 4228|0);
 $$01$in = $4;
 while(1) {
  $$01 = HEAP32[$$01$in>>2]|0;
  $5 = ($$01|0)==(0|0);
  if ($5) {
   $$0 = 0;
   label = 7;
   break;
  }
  $6 = ((($$01)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP32[$7>>2]|0;
  $9 = ($3|0)==($8|0);
  if ($9) {
   break;
  }
  $18 = ((($$01)) + 8|0);
  $$01$in = $18;
 }
 if ((label|0) == 7) {
  return ($$0|0);
 }
 $10 = HEAP32[$$01>>2]|0;
 $11 = ((($0)) + 76|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (((($12) + (($1*56)|0)|0)) + 32|0);
 $14 = +HEAPF64[$13>>3];
 $15 = (((($12) + (($10*56)|0)|0)) + 32|0);
 $16 = +HEAPF64[$15>>3];
 $17 = $14 > $16;
 if (!($17)) {
  $$0 = 1;
  return ($$0|0);
 }
 HEAP32[$6>>2] = $2;
 HEAP32[$$01>>2] = $1;
 $$0 = 1;
 return ($$0|0);
}
function _checkpremise($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$off = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $$off = (($3) + -9)|0;
 $switch = ($$off>>>0)<(2);
 if ($switch) {
  $4 = (_checktime($0,$1)|0);
  $$0 = $4;
  return ($$0|0);
 }
 $5 = ((($1)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)>(0);
 if ($7) {
  $8 = (_checkstatus($0,$1)|0);
  $$0 = $8;
  return ($$0|0);
 } else {
  $9 = (_checkvalue($0,$1)|0);
  $$0 = $9;
  return ($$0|0);
 }
 return (0)|0;
}
function _checktime($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$2$v = 0, $$2$v$v = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond4 = 0, $or$cond5 = 0, $or$cond6 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 switch ($3|0) {
 case 9:  {
  $4 = ((($0)) + 4240|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($0)) + 1172|0);
  $7 = HEAP32[$6>>2]|0;
  $$01 = $7;$$02 = $5;
  break;
 }
 case 10:  {
  $8 = ((($0)) + 1172|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($0)) + 1144|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($9) + ($11))|0;
  $13 = (($12|0) % 86400)&-1;
  $14 = ((($0)) + 4240|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + ($11))|0;
  $17 = (($16|0) % 86400)&-1;
  $$01 = $13;$$02 = $17;
  break;
 }
 default: {
  $$0 = 0;
  return ($$0|0);
 }
 }
 $18 = ((($1)) + 24|0);
 $19 = +HEAPF64[$18>>3];
 $20 = (~~(($19)));
 $21 = ((($1)) + 16|0);
 $22 = HEAP32[$21>>2]|0;
 switch ($22|0) {
 case 4:  {
  $23 = ($$01|0)<($20|0);
  if (!($23)) {
   $$0 = 0;
   return ($$0|0);
  }
  break;
 }
 case 2:  {
  $24 = ($$01|0)>($20|0);
  if ($24) {
   $$0 = 0;
   return ($$0|0);
  }
  break;
 }
 case 5:  {
  $25 = ($$01|0)>($20|0);
  if (!($25)) {
   $$0 = 0;
   return ($$0|0);
  }
  break;
 }
 case 3:  {
  $26 = ($$01|0)<($20|0);
  if ($26) {
   $$0 = 0;
   return ($$0|0);
  }
  break;
 }
 case 1: case 0:  {
  $27 = ($$01|0)<($$02|0);
  $28 = ($$02|0)>($20|0);
  $29 = ($$01|0)<($20|0);
  $or$cond = $28 & $29;
  $or$cond4 = $28 | $29;
  $$2$v$v = $27 ? $or$cond : $or$cond4;
  $30 = ($22|0)==(0);
  $or$cond5 = $30 & $$2$v$v;
  if ($or$cond5) {
   $$0 = 0;
   return ($$0|0);
  }
  $$2$v = $$2$v$v ^ 1;
  $31 = ($22|0)==(1);
  $or$cond6 = $31 & $$2$v;
  if ($or$cond6) {
   $$0 = 0;
   return ($$0|0);
  }
  break;
 }
 default: {
 }
 }
 $$0 = 1;
 return ($$0|0);
}
function _checkstatus($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$1 = 0, $$off = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sext = 0, $sext2$mask = 0;
 var $spec$select = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $$off = (($3) + -1)|0;
 $switch = ($$off>>>0)<(3);
 do {
  if ($switch) {
   $4 = ((($0)) + 4536|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ((($1)) + 8|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (($5) + ($7<<2)|0);
   $9 = HEAP32[$8>>2]|0;
   $sext = $9 << 24;
   $10 = ($sext|0)<(50331648);
   if ($10) {
    $$1 = 2;
   } else {
    $sext2$mask = $9 & 255;
    $11 = ($sext2$mask|0)==(4);
    $spec$select = $11 ? 3 : 1;
    $$1 = $spec$select;
   }
   $12 = ($$1|0)==($3|0);
   $13 = ((($1)) + 16|0);
   $14 = HEAP32[$13>>2]|0;
   if ($12) {
    $15 = ($14|0)==(0);
    if ($15) {
     $$0 = 1;
    } else {
     break;
    }
    return ($$0|0);
   } else {
    $16 = ($14|0)==(1);
    if ($16) {
     $$0 = 1;
    } else {
     break;
    }
    return ($$0|0);
   }
  }
 } while(0);
 $$0 = 0;
 return ($$0|0);
}
function _checkvalue($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$2 = 0.0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0.0, $113 = 0, $114 = 0, $115 = 0.0;
 var $116 = 0.0, $117 = 0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0.0, $128 = 0, $129 = 0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0, $133 = 0;
 var $134 = 0.0, $135 = 0.0, $136 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0.0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0.0;
 var $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0.0;
 var $84 = 0, $85 = 0, $86 = 0.0, $87 = 0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4256|0);
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 4260|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 44|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 48|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($0)) + 52|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($1)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($1)) + 12|0);
 $16 = HEAP32[$15>>2]|0;
 L1: do {
  switch ($16|0) {
  case 0:  {
   $17 = ((($1)) + 4|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($18|0)==(8);
   if ($19) {
    $20 = ((($0)) + 4408|0);
    $21 = +HEAPF64[$20>>3];
    $22 = ((($0)) + 4912|0);
    $23 = +HEAPF64[$22>>3];
    $24 = $21 * $23;
    $$2 = $24;
    break L1;
   } else {
    $25 = (($6) + ($14<<3)|0);
    $26 = +HEAPF64[$25>>3];
    $27 = ((($0)) + 4912|0);
    $28 = +HEAPF64[$27>>3];
    $29 = $26 * $28;
    $$2 = $29;
    break L1;
   }
   break;
  }
  case 2: case 1:  {
   $30 = HEAP32[$2>>2]|0;
   $31 = (($30) + ($14<<3)|0);
   $32 = +HEAPF64[$31>>3];
   $33 = ((($0)) + 4920|0);
   $34 = +HEAPF64[$33>>3];
   $35 = $32 * $34;
   $$2 = $35;
   break;
  }
  case 4:  {
   $36 = HEAP32[$2>>2]|0;
   $37 = (($36) + ($14<<3)|0);
   $38 = +HEAPF64[$37>>3];
   $39 = (((($8) + (($14*96)|0)|0)) + 48|0);
   $40 = +HEAPF64[$39>>3];
   $41 = $38 - $40;
   $42 = ((($0)) + 4928|0);
   $43 = +HEAPF64[$42>>3];
   $44 = $41 * $43;
   $$2 = $44;
   break;
  }
  case 3:  {
   $45 = HEAP32[$2>>2]|0;
   $46 = (($45) + ($14<<3)|0);
   $47 = +HEAPF64[$46>>3];
   $48 = (((($8) + (($14*96)|0)|0)) + 48|0);
   $49 = +HEAPF64[$48>>3];
   $50 = $47 - $49;
   $51 = ((($0)) + 4920|0);
   $52 = +HEAPF64[$51>>3];
   $53 = $50 * $52;
   $$2 = $53;
   break;
  }
  case 5:  {
   $54 = ((($0)) + 4272|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = (($55) + ($14<<3)|0);
   $57 = +HEAPF64[$56>>3];
   $58 = $57 < 0.0;
   $59 = - $57;
   $60 = $58 ? $59 : $57;
   $61 = ((($0)) + 4960|0);
   $62 = +HEAPF64[$61>>3];
   $63 = $60 * $62;
   $$2 = $63;
   break;
  }
  case 7:  {
   $64 = ((($0)) + 4276|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = (($65) + ($14<<3)|0);
   $67 = +HEAPF64[$66>>3];
   $68 = $67 == -1.0E+10;
   if ($68) {
    $$0 = 0;
    return ($$0|0);
   }
   $69 = (((($10) + ($14<<7)|0)) + 104|0);
   $70 = HEAP32[$69>>2]|0;
   switch ($70|0) {
   case 5: case 4: case 3:  {
    $71 = ((($0)) + 4928|0);
    $72 = +HEAPF64[$71>>3];
    $73 = $67 * $72;
    $$2 = $73;
    break L1;
    break;
   }
   case 6:  {
    $74 = ((($0)) + 4960|0);
    $75 = +HEAPF64[$74>>3];
    $76 = $67 * $75;
    $$2 = $76;
    break L1;
    break;
   }
   default: {
    $$2 = $67;
    break L1;
   }
   }
   break;
  }
  case 11:  {
   $77 = ($14|0)>($4|0);
   if (!($77)) {
    $$0 = 0;
    return ($$0|0);
   }
   $78 = (($14) - ($4))|0;
   $79 = (((($12) + (($78*120)|0)|0)) + 8|0);
   $80 = +HEAPF64[$79>>3];
   $81 = $80 == 0.0;
   if ($81) {
    $$0 = 0;
    return ($$0|0);
   }
   $82 = (($6) + ($14<<3)|0);
   $83 = +HEAPF64[$82>>3];
   $84 = !($83 <= 9.9999999999999995E-7);
   if ($84) {
    $85 = (((($12) + (($78*120)|0)|0)) + 48|0);
    $86 = +HEAPF64[$85>>3];
    $87 = (((($12) + (($78*120)|0)|0)) + 72|0);
    $88 = +HEAPF64[$87>>3];
    $89 = $86 - $88;
    $90 = $89 / $83;
    $$2 = $90;
    break L1;
   } else {
    $$0 = 0;
    return ($$0|0);
   }
   break;
  }
  case 12:  {
   $91 = ($14|0)>($4|0);
   if (!($91)) {
    $$0 = 0;
    return ($$0|0);
   }
   $92 = (($14) - ($4))|0;
   $93 = (((($12) + (($92*120)|0)|0)) + 8|0);
   $94 = +HEAPF64[$93>>3];
   $95 = $94 == 0.0;
   if ($95) {
    $$0 = 0;
    return ($$0|0);
   }
   $96 = (($6) + ($14<<3)|0);
   $97 = +HEAPF64[$96>>3];
   $98 = !($97 >= -9.9999999999999995E-7);
   if ($98) {
    $99 = (((($12) + (($92*120)|0)|0)) + 40|0);
    $100 = +HEAPF64[$99>>3];
    $101 = (((($12) + (($92*120)|0)|0)) + 72|0);
    $102 = +HEAPF64[$101>>3];
    $103 = $100 - $102;
    $104 = $103 / $97;
    $$2 = $104;
    break L1;
   } else {
    $$0 = 0;
    return ($$0|0);
   }
   break;
  }
  default: {
   $$0 = 0;
   return ($$0|0);
  }
  }
 } while(0);
 $105 = ((($1)) + 16|0);
 $106 = HEAP32[$105>>2]|0;
 switch ($106|0) {
 case 0:  {
  $107 = ((($1)) + 24|0);
  $108 = +HEAPF64[$107>>3];
  $109 = $$2 - $108;
  $110 = $109 < 0.0;
  $111 = - $109;
  $112 = $110 ? $111 : $109;
  $113 = $112 > 0.001;
  if ($113) {
   $$0 = 0;
   return ($$0|0);
  }
  break;
 }
 case 1:  {
  $114 = ((($1)) + 24|0);
  $115 = +HEAPF64[$114>>3];
  $116 = $$2 - $115;
  $117 = $116 < 0.0;
  $118 = - $116;
  $119 = $117 ? $118 : $116;
  $120 = $119 < 0.001;
  if ($120) {
   $$0 = 0;
   return ($$0|0);
  }
  break;
 }
 case 4:  {
  $121 = ((($1)) + 24|0);
  $122 = +HEAPF64[$121>>3];
  $123 = $122 + 0.001;
  $124 = $$2 > $123;
  if ($124) {
   $$0 = 0;
   return ($$0|0);
  }
  break;
 }
 case 2:  {
  $125 = ((($1)) + 24|0);
  $126 = +HEAPF64[$125>>3];
  $127 = $126 + -0.001;
  $128 = $$2 > $127;
  if ($128) {
   $$0 = 0;
   return ($$0|0);
  }
  break;
 }
 case 5:  {
  $129 = ((($1)) + 24|0);
  $130 = +HEAPF64[$129>>3];
  $131 = $130 + -0.001;
  $132 = $$2 < $131;
  if ($132) {
   $$0 = 0;
   return ($$0|0);
  }
  break;
 }
 case 3:  {
  $133 = ((($1)) + 24|0);
  $134 = +HEAPF64[$133>>3];
  $135 = $134 + 0.001;
  $136 = $$2 < $135;
  if ($136) {
   $$0 = 0;
   return ($$0|0);
  }
  break;
 }
 default: {
 }
 }
 $$0 = 1;
 return ($$0|0);
}
function _createsparse($0) {
 $0 = $0|0;
 var $$0 = 0, $$ph = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4544|0);
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_allocsmatrix($1,$2,$4)|0);
 $6 = ($5|0)==(0);
 if (!($6)) {
  $$0 = $5;
  return ($$0|0);
 }
 $7 = (_localadjlists($0,$1)|0);
 $8 = ($7|0)==(0);
 if (!($8)) {
  $$0 = $7;
  return ($$0|0);
 }
 $9 = (_reordernodes($0)|0);
 $10 = HEAP32[$3>>2]|0;
 $11 = ((($0)) + 4560|0);
 HEAP32[$11>>2] = $10;
 $12 = ($9|0)>(100);
 if ($12) {
  $$ph = $9;
 } else {
  $13 = (_factorize($0)|0);
  $14 = ($13|0)>(100);
  if ($14) {
   $$ph = $13;
  } else {
   $15 = ((($0)) + 8|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (_storesparse($0,$16)|0);
   _freeadjlists($0);
   $18 = ($17|0)>(100);
   if ($18) {
    $$0 = $17;
    return ($$0|0);
   }
   $19 = HEAP32[$15>>2]|0;
   $20 = (_sortsparse($1,$19)|0);
   $21 = ($20|0)>(100);
   if ($21) {
    $$0 = $20;
    return ($$0|0);
   }
   $22 = HEAP32[$0>>2]|0;
   $23 = (_alloclinsolve($1,$22)|0);
   $24 = ($23|0)>(100);
   if ($24) {
    $$0 = $23;
    return ($$0|0);
   }
   $25 = (_buildadjlists($0)|0);
   $$0 = $25;
   return ($$0|0);
  }
 }
 _freeadjlists($0);
 $$0 = $$ph;
 return ($$0|0);
}
function _allocsmatrix($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 48|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($0)) + 52|0);
 HEAP32[$4>>2] = 0;
 $5 = (($1) + 1)|0;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;HEAP32[$0+12>>2]=0|0;
 $6 = (_calloc($5,4)|0);
 $7 = ((($0)) + 20|0);
 HEAP32[$7>>2] = $6;
 $8 = (_calloc($5,4)|0);
 $9 = ((($0)) + 24|0);
 HEAP32[$9>>2] = $8;
 $10 = (($2) + 1)|0;
 $11 = (_calloc($10,4)|0);
 $12 = ((($0)) + 28|0);
 HEAP32[$12>>2] = $11;
 $13 = HEAP32[$7>>2]|0;
 $14 = ($13|0)==(0|0);
 $15 = $14 ? 101 : 0;
 if ($14) {
  $20 = $15;
  return ($20|0);
 }
 $16 = HEAP32[$9>>2]|0;
 $17 = ($16|0)==(0|0);
 if ($17) {
  $20 = 101;
  return ($20|0);
 }
 $18 = ($11|0)==(0|0);
 $19 = $18 ? 101 : 0;
 $20 = $19;
 return ($20|0);
}
function _localadjlists($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$01 = 0, $$idx$val = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, $spec$select3 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _freeadjlists($0);
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + 1)|0;
 $4 = (_calloc($3,4)|0);
 $5 = ((($0)) + 88|0);
 HEAP32[$5>>2] = $4;
 $6 = ($4|0)==(0|0);
 if ($6) {
  $$0 = 101;
  return ($$0|0);
 }
 $7 = ((($0)) + 12|0);
 $8 = ((($0)) + 48|0);
 $$01 = 1;
 while(1) {
  $9 = HEAP32[$7>>2]|0;
  $10 = ($$01|0)>($9|0);
  if ($10) {
   label = 7;
   break;
  }
  $11 = HEAP32[$8>>2]|0;
  $12 = (((($11) + ($$01<<7)|0)) + 32|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (((($11) + ($$01<<7)|0)) + 36|0);
  $15 = HEAP32[$14>>2]|0;
  $$idx$val = HEAP32[$5>>2]|0;
  $16 = (_paralink($$idx$val,$1,$13,$15,$$01)|0);
  $17 = (_malloc(12)|0);
  $18 = ($17|0)==(0|0);
  if ($18) {
   $$0 = 101;
   label = 8;
   break;
  }
  $19 = ($16|0)==(0);
  $spec$select = $19 ? $15 : 0;
  HEAP32[$17>>2] = $spec$select;
  $20 = ((($17)) + 4|0);
  HEAP32[$20>>2] = $$01;
  $21 = HEAP32[$5>>2]|0;
  $22 = (($21) + ($13<<2)|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ((($17)) + 8|0);
  HEAP32[$24>>2] = $23;
  $25 = HEAP32[$5>>2]|0;
  $26 = (($25) + ($13<<2)|0);
  HEAP32[$26>>2] = $17;
  $27 = (_malloc(12)|0);
  $28 = ($27|0)==(0|0);
  if ($28) {
   $$0 = 101;
   label = 8;
   break;
  }
  $spec$select3 = $19 ? $13 : 0;
  HEAP32[$27>>2] = $spec$select3;
  $29 = ((($27)) + 4|0);
  HEAP32[$29>>2] = $$01;
  $30 = HEAP32[$5>>2]|0;
  $31 = (($30) + ($15<<2)|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ((($27)) + 8|0);
  HEAP32[$33>>2] = $32;
  $34 = HEAP32[$5>>2]|0;
  $35 = (($34) + ($15<<2)|0);
  HEAP32[$35>>2] = $27;
  $36 = (($$01) + 1)|0;
  $$01 = $36;
 }
 if ((label|0) == 7) {
  _xparalinks($0);
  $$0 = 0;
  return ($$0|0);
 }
 else if ((label|0) == 8) {
  return ($$0|0);
 }
 return (0)|0;
}
function _reordernodes($0) {
 $0 = $0|0;
 var $$0 = 0, $$01 = 0, $$03 = 0, $$04 = 0, $$04$in = 0, $$1 = 0, $$12 = 0, $$2 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond5 = 0, $or$cond6 = 0;
 var $or$cond7 = 0, $or$cond8 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 12|0;
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $4 = sp;
 HEAP32[$2>>2] = -1;
 HEAP32[$3>>2] = 0;
 HEAP32[$4>>2] = 2147483647;
 $5 = ((($0)) + 4568|0);
 $6 = ((($0)) + 4564|0);
 $$0 = 1;
 while(1) {
  $7 = HEAP32[$0>>2]|0;
  $8 = ($$0|0)>($7|0);
  if ($8) {
   break;
  }
  $9 = HEAP32[$5>>2]|0;
  $10 = (($9) + ($$0<<2)|0);
  HEAP32[$10>>2] = $$0;
  $11 = HEAP32[$6>>2]|0;
  $12 = (($11) + ($$0<<2)|0);
  HEAP32[$12>>2] = $$0;
  $13 = (($$0) + 1)|0;
  $$0 = $13;
 }
 $14 = ((($0)) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 HEAP32[$1>>2] = $15;
 $16 = ((($0)) + 12|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 << 1;
 $19 = $18 | 1;
 $20 = (_calloc($19,4)|0);
 $21 = (($15) + 2)|0;
 $22 = (_calloc($21,4)|0);
 $23 = (($15) + 1)|0;
 $24 = (_calloc($23,4)|0);
 $25 = (_calloc($23,4)|0);
 $26 = (_calloc($23,4)|0);
 $27 = (_calloc($23,4)|0);
 $28 = ($20|0)==(0|0);
 $29 = ($22|0)==(0|0);
 $or$cond = $28 | $29;
 $30 = ($24|0)==(0|0);
 $or$cond5 = $or$cond | $30;
 $31 = ($25|0)==(0|0);
 $or$cond6 = $or$cond5 | $31;
 $32 = ($26|0)==(0|0);
 $or$cond7 = $or$cond6 | $32;
 $33 = ($27|0)==(0|0);
 $or$cond8 = $or$cond7 | $33;
 if ($or$cond8) {
  $$03 = 101;
  _free($20);
  _free($22);
  _free($24);
  _free($25);
  _free($26);
  _free($27);
  STACKTOP = sp;return ($$03|0);
 }
 $34 = ((($22)) + 4|0);
 HEAP32[$34>>2] = 1;
 $35 = ((($0)) + 88|0);
 $$01 = 1;$$1 = 1;
 while(1) {
  $36 = ($$1|0)>($15|0);
  if ($36) {
   break;
  }
  $37 = HEAP32[$35>>2]|0;
  $38 = (($37) + ($$1<<2)|0);
  $$04$in = $38;$$12 = $$01;
  while(1) {
   $$04 = HEAP32[$$04$in>>2]|0;
   $39 = ($$04|0)==(0|0);
   if ($39) {
    break;
   }
   $40 = HEAP32[$$04>>2]|0;
   $41 = ($40|0)<(1);
   $42 = ($40|0)>($15|0);
   $or$cond9 = $41 | $42;
   if ($or$cond9) {
    $$2 = $$12;
   } else {
    $43 = (($20) + ($$12<<2)|0);
    HEAP32[$43>>2] = $40;
    $44 = (($$12) + 1)|0;
    $$2 = $44;
   }
   $45 = ((($$04)) + 8|0);
   $$04$in = $45;$$12 = $$2;
  }
  $46 = (($$1) + 1)|0;
  $47 = (($22) + ($46<<2)|0);
  HEAP32[$47>>2] = $$12;
  $$01 = $$12;$$1 = $46;
 }
 $48 = HEAP32[$5>>2]|0;
 $49 = HEAP32[$6>>2]|0;
 _genmmd($1,$22,$20,$48,$49,$2,$24,$25,$26,$27,$4,$3);
 $$03 = 0;
 _free($20);
 _free($22);
 _free($24);
 _free($25);
 _free($26);
 _free($27);
 STACKTOP = sp;return ($$03|0);
}
function _factorize($0) {
 $0 = $0|0;
 var $$0 = 0, $$01 = 0, $$01$in = 0, $$02 = 0, $$03 = 0, $$1 = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 1)|0;
 $3 = (_calloc($2,4)|0);
 $4 = ((($0)) + 4588|0);
 HEAP32[$4>>2] = $3;
 $5 = ($3|0)==(0|0);
 if ($5) {
  $$0 = 101;
  return ($$0|0);
 }
 $6 = ((($0)) + 8|0);
 $7 = ((($0)) + 88|0);
 $$03 = 1;
 while(1) {
  $8 = HEAP32[$6>>2]|0;
  $9 = ($$03|0)>($8|0);
  if ($9) {
   break;
  }
  $10 = HEAP32[$7>>2]|0;
  $11 = (($10) + ($$03<<2)|0);
  $$01$in = $11;
  while(1) {
   $$01 = HEAP32[$$01$in>>2]|0;
   $12 = ($$01|0)==(0|0);
   if ($12) {
    break;
   }
   $13 = HEAP32[$$01>>2]|0;
   $14 = ($13|0)>(0);
   if ($14) {
    $15 = HEAP32[$4>>2]|0;
    $16 = (($15) + ($$03<<2)|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = (($17) + 1)|0;
    HEAP32[$16>>2] = $18;
   }
   $19 = ((($$01)) + 8|0);
   $$01$in = $19;
  }
  $20 = (($$03) + 1)|0;
  $$03 = $20;
 }
 $21 = ((($0)) + 4564|0);
 $$1 = 1;$23 = $8;
 while(1) {
  $22 = ($$1|0)>($23|0);
  if ($22) {
   $$02 = 0;
   break;
  }
  $24 = HEAP32[$21>>2]|0;
  $25 = (($24) + ($$1<<2)|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (_growlist($0,$26)|0);
  $28 = ($27|0)==(0);
  if ($28) {
   $$02 = 101;
   break;
  }
  $29 = HEAP32[$4>>2]|0;
  $30 = (($29) + ($26<<2)|0);
  HEAP32[$30>>2] = 0;
  $31 = (($$1) + 1)|0;
  $$pre = HEAP32[$6>>2]|0;
  $$1 = $31;$23 = $$pre;
 }
 $32 = HEAP32[$4>>2]|0;
 _free($32);
 $$0 = $$02;
 return ($$0|0);
}
function _storesparse($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$01 = 0, $$01$in = 0, $$02 = 0, $$03 = 0, $$06 = 0, $$14 = 0, $$2 = 0, $$3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $or$cond = 0, $or$cond10 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($1) + 2)|0;
 $3 = (_calloc($2,4)|0);
 $4 = ((($0)) + 4576|0);
 HEAP32[$4>>2] = $3;
 $5 = ((($0)) + 4560|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 2)|0;
 $8 = (_calloc($7,4)|0);
 $9 = ((($0)) + 4580|0);
 HEAP32[$9>>2] = $8;
 $10 = HEAP32[$5>>2]|0;
 $11 = (($10) + 2)|0;
 $12 = (_calloc($11,4)|0);
 $13 = ((($0)) + 4584|0);
 HEAP32[$13>>2] = $12;
 $14 = HEAP32[$4>>2]|0;
 $15 = ($14|0)==(0|0);
 $16 = $15 ? 101 : 0;
 if ($15) {
  $53 = $16;
  return ($53|0);
 }
 $17 = HEAP32[$9>>2]|0;
 $18 = ($17|0)==(0|0);
 $19 = ($12|0)==(0|0);
 $or$cond = $18 | $19;
 if ($or$cond) {
  $53 = 101;
  return ($53|0);
 }
 $20 = ((($14)) + 4|0);
 HEAP32[$20>>2] = 1;
 $21 = ((($0)) + 4564|0);
 $22 = ((($0)) + 88|0);
 $23 = ((($0)) + 4568|0);
 $$03 = 0;$$06 = 1;
 while(1) {
  $24 = ($$06|0)>($1|0);
  if ($24) {
   $53 = 0;
   break;
  }
  $25 = HEAP32[$21>>2]|0;
  $26 = (($25) + ($$06<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = HEAP32[$22>>2]|0;
  $29 = (($28) + ($27<<2)|0);
  $$01$in = $29;$$02 = 0;$$14 = $$03;
  while(1) {
   $$01 = HEAP32[$$01$in>>2]|0;
   $30 = ($$01|0)==(0|0);
   if ($30) {
    break;
   }
   $31 = HEAP32[$$01>>2]|0;
   $32 = ($31|0)==(0);
   if ($32) {
    $$2 = $$02;$$3 = $$14;
   } else {
    $33 = HEAP32[$23>>2]|0;
    $34 = (($33) + ($31<<2)|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = ($35|0)<=($$06|0);
    $37 = ($35|0)>($1|0);
    $or$cond10 = $36 | $37;
    if ($or$cond10) {
     $$2 = $$02;$$3 = $$14;
    } else {
     $38 = ((($$01)) + 4|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = (($$02) + 1)|0;
     $41 = (($$14) + 1)|0;
     $42 = HEAP32[$9>>2]|0;
     $43 = (($42) + ($41<<2)|0);
     HEAP32[$43>>2] = $35;
     $44 = HEAP32[$13>>2]|0;
     $45 = (($44) + ($41<<2)|0);
     HEAP32[$45>>2] = $39;
     $$2 = $40;$$3 = $41;
    }
   }
   $46 = ((($$01)) + 8|0);
   $$01$in = $46;$$02 = $$2;$$14 = $$3;
  }
  $47 = HEAP32[$4>>2]|0;
  $48 = (($47) + ($$06<<2)|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (($49) + ($$02))|0;
  $51 = (($$06) + 1)|0;
  $52 = (($47) + ($51<<2)|0);
  HEAP32[$52>>2] = $50;
  $$03 = $$14;$$06 = $51;
 }
 return ($53|0);
}
function _sortsparse($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 40|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 32|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 36|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($1) + 2)|0;
 $9 = (_calloc($8,4)|0);
 $10 = ((($0)) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + 2)|0;
 $13 = (_calloc($12,4)|0);
 $14 = HEAP32[$10>>2]|0;
 $15 = (($14) + 2)|0;
 $16 = (_calloc($15,4)|0);
 $17 = (_calloc($8,4)|0);
 $18 = ($9|0)==(0|0);
 $19 = $18 ? 101 : 0;
 if ($18) {
  $48 = $19;
  _free($9);
  _free($13);
  _free($16);
  _free($17);
  return ($48|0);
 }
 $20 = ($13|0)==(0|0);
 $21 = ($16|0)==(0|0);
 $or$cond = $20 | $21;
 $22 = ($17|0)==(0|0);
 $or$cond9 = $or$cond | $22;
 if ($or$cond9) {
  $48 = 101;
  _free($9);
  _free($13);
  _free($16);
  _free($17);
  return ($48|0);
 }
 $$01 = 1;
 while(1) {
  $23 = ($$01|0)>($1|0);
  if ($23) {
   break;
  }
  $24 = (($17) + ($$01<<2)|0);
  HEAP32[$24>>2] = 0;
  $25 = (($$01) + 1)|0;
  $$01 = $25;
 }
 $$1 = 1;
 while(1) {
  $26 = ($$1|0)>($1|0);
  if ($26) {
   break;
  }
  $27 = (($5) + ($$1<<2)|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($$1) + 1)|0;
  $30 = (($5) + ($29<<2)|0);
  $$0 = $28;
  while(1) {
   $31 = HEAP32[$30>>2]|0;
   $32 = ($$0|0)<($31|0);
   if (!($32)) {
    break;
   }
   $33 = (($7) + ($$0<<2)|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (($17) + ($34<<2)|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = (($36) + 1)|0;
   HEAP32[$35>>2] = $37;
   $38 = (($$0) + 1)|0;
   $$0 = $38;
  }
  $$1 = $29;
 }
 $39 = ((($9)) + 4|0);
 HEAP32[$39>>2] = 1;
 $$2 = 1;
 while(1) {
  $40 = ($$2|0)>($1|0);
  if ($40) {
   break;
  }
  $41 = (($9) + ($$2<<2)|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = (($17) + ($$2<<2)|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = (($42) + ($44))|0;
  $46 = (($$2) + 1)|0;
  $47 = (($9) + ($46<<2)|0);
  HEAP32[$47>>2] = $45;
  $$2 = $46;
 }
 _transpose($1,$5,$7,$3,$9,$13,$16,$17);
 _transpose($1,$9,$13,$16,$5,$7,$3,$17);
 $48 = 0;
 _free($9);
 _free($13);
 _free($16);
 _free($17);
 return ($48|0);
}
function _alloclinsolve($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($1) + 1)|0;
 $3 = ((($0)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 1)|0;
 $6 = (_calloc($5,8)|0);
 $7 = ((($0)) + 4|0);
 HEAP32[$7>>2] = $6;
 $8 = (_calloc($2,8)|0);
 HEAP32[$0>>2] = $8;
 $9 = (_calloc($2,8)|0);
 $10 = ((($0)) + 8|0);
 HEAP32[$10>>2] = $9;
 $11 = (_calloc($2,8)|0);
 $12 = ((($0)) + 12|0);
 HEAP32[$12>>2] = $11;
 $13 = (_calloc($2,4)|0);
 $14 = ((($0)) + 48|0);
 HEAP32[$14>>2] = $13;
 $15 = (_calloc($2,4)|0);
 $16 = ((($0)) + 52|0);
 HEAP32[$16>>2] = $15;
 $17 = HEAP32[$7>>2]|0;
 $18 = ($17|0)==(0|0);
 $19 = $18 ? 101 : 0;
 if ($18) {
  $30 = $19;
  return ($30|0);
 }
 $20 = HEAP32[$0>>2]|0;
 $21 = ($20|0)==(0|0);
 if ($21) {
  $30 = 101;
  return ($30|0);
 }
 $22 = HEAP32[$10>>2]|0;
 $23 = ($22|0)==(0|0);
 if ($23) {
  $30 = 101;
  return ($30|0);
 }
 $24 = HEAP32[$12>>2]|0;
 $25 = ($24|0)==(0|0);
 if ($25) {
  $30 = 101;
  return ($30|0);
 }
 $26 = HEAP32[$14>>2]|0;
 $27 = ($26|0)==(0|0);
 if ($27) {
  $30 = 101;
  return ($30|0);
 }
 $28 = ($15|0)==(0|0);
 $29 = $28 ? 101 : 0;
 $30 = $29;
 return ($30|0);
}
function _transpose($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$01 = 1;
 while(1) {
  $8 = ($$01|0)>($0|0);
  if ($8) {
   break;
  }
  $9 = (($7) + ($$01<<2)|0);
  HEAP32[$9>>2] = 0;
  $10 = (($$01) + 1)|0;
  $$01 = $10;
 }
 $$1 = 1;
 while(1) {
  $11 = ($$1|0)>($0|0);
  if ($11) {
   break;
  }
  $12 = (($1) + ($$1<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($$1) + 1)|0;
  $15 = (($1) + ($14<<2)|0);
  $$0 = $13;
  while(1) {
   $16 = HEAP32[$15>>2]|0;
   $17 = ($$0|0)<($16|0);
   if (!($17)) {
    break;
   }
   $18 = (($2) + ($$0<<2)|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (($4) + ($19<<2)|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (($7) + ($19<<2)|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = (($21) + ($23))|0;
   $25 = (($5) + ($24<<2)|0);
   HEAP32[$25>>2] = $$1;
   $26 = (($3) + ($$0<<2)|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (($6) + ($24<<2)|0);
   HEAP32[$28>>2] = $27;
   $29 = HEAP32[$22>>2]|0;
   $30 = (($29) + 1)|0;
   HEAP32[$22>>2] = $30;
   $31 = (($$0) + 1)|0;
   $$0 = $31;
  }
  $$1 = $14;
 }
 return;
}
function _growlist($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$01 = 0, $$01$in = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 88|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + ($1<<2)|0);
 $5 = ((($0)) + 4588|0);
 $$01$in = $4;
 while(1) {
  $$01 = HEAP32[$$01$in>>2]|0;
  $6 = ($$01|0)==(0|0);
  if ($6) {
   $$0 = 1;
   label = 7;
   break;
  }
  $7 = HEAP32[$$01>>2]|0;
  $8 = ($7|0)>(0);
  if ($8) {
   $9 = HEAP32[$5>>2]|0;
   $10 = (($9) + ($7<<2)|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)>(0);
   if ($12) {
    $13 = (($11) + -1)|0;
    HEAP32[$10>>2] = $13;
    $14 = (_newlink($0,$$01)|0);
    $15 = ($14|0)==(0);
    if ($15) {
     $$0 = 0;
     label = 7;
     break;
    }
   }
  }
  $16 = ((($$01)) + 8|0);
  $$01$in = $16;
 }
 if ((label|0) == 7) {
  return ($$0|0);
 }
 return (0)|0;
}
function _newlink($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$01 = 0, $$01$in = 0, $$idx = 0, $$idx$val = 0, $$pn = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 4560|0);
 $4 = ((($0)) + 4588|0);
 $$idx = ((($0)) + 88|0);
 $$pn = $1;
 while(1) {
  $$01$in = ((($$pn)) + 8|0);
  $$01 = HEAP32[$$01$in>>2]|0;
  $5 = ($$01|0)==(0|0);
  if ($5) {
   $$0 = 1;
   label = 10;
   break;
  }
  $6 = HEAP32[$$01>>2]|0;
  $7 = ($6|0)>(0);
  if ($7) {
   $8 = HEAP32[$4>>2]|0;
   $9 = (($8) + ($6<<2)|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)>(0);
   if ($11) {
    $$idx$val = HEAP32[$$idx>>2]|0;
    $12 = (_linked($$idx$val,$2,$6)|0);
    $13 = ($12|0)==(0);
    if ($13) {
     $14 = HEAP32[$3>>2]|0;
     $15 = (($14) + 1)|0;
     HEAP32[$3>>2] = $15;
     $16 = (_addlink($0,$2,$6,$15)|0);
     $17 = ($16|0)==(0);
     if ($17) {
      $$0 = 0;
      label = 10;
      break;
     }
     $18 = HEAP32[$3>>2]|0;
     $19 = (_addlink($0,$6,$2,$18)|0);
     $20 = ($19|0)==(0);
     if ($20) {
      $$0 = 0;
      label = 10;
      break;
     }
     $21 = HEAP32[$4>>2]|0;
     $22 = (($21) + ($2<<2)|0);
     $23 = HEAP32[$22>>2]|0;
     $24 = (($23) + 1)|0;
     HEAP32[$22>>2] = $24;
     $25 = HEAP32[$4>>2]|0;
     $26 = (($25) + ($6<<2)|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = (($27) + 1)|0;
     HEAP32[$26>>2] = $28;
    }
   }
  }
  $$pn = $$01;
 }
 if ((label|0) == 10) {
  return ($$0|0);
 }
 return (0)|0;
}
function _linked($$0$22$val,$0,$1) {
 $$0$22$val = $$0$22$val|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$01 = 0, $$01$in = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($$0$22$val) + ($0<<2)|0);
 $$01$in = $2;
 while(1) {
  $$01 = HEAP32[$$01$in>>2]|0;
  $3 = ($$01|0)==(0|0);
  if ($3) {
   $$0 = 0;
   label = 5;
   break;
  }
  $4 = HEAP32[$$01>>2]|0;
  $5 = ($4|0)==($1|0);
  if ($5) {
   $$0 = 1;
   label = 5;
   break;
  }
  $6 = ((($$01)) + 8|0);
  $$01$in = $6;
 }
 if ((label|0) == 5) {
  return ($$0|0);
 }
 return (0)|0;
}
function _addlink($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (_malloc(12)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  $$0 = 0;
  return ($$0|0);
 }
 HEAP32[$4>>2] = $2;
 $6 = ((($4)) + 4|0);
 HEAP32[$6>>2] = $3;
 $7 = ((($0)) + 88|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + ($1<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($4)) + 8|0);
 HEAP32[$11>>2] = $10;
 $12 = HEAP32[$7>>2]|0;
 $13 = (($12) + ($1<<2)|0);
 HEAP32[$13>>2] = $4;
 $$0 = 1;
 return ($$0|0);
}
function _paralink($$0$22$val,$0,$1,$2,$3) {
 $$0$22$val = $$0$22$val|0;
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$01 = 0, $$01$in = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (($$0$22$val) + ($1<<2)|0);
 $$01$in = $4;
 while(1) {
  $$01 = HEAP32[$$01$in>>2]|0;
  $5 = ($$01|0)==(0|0);
  if ($5) {
   label = 6;
   break;
  }
  $6 = HEAP32[$$01>>2]|0;
  $7 = ($6|0)==($2|0);
  if ($7) {
   label = 4;
   break;
  }
  $13 = ((($$01)) + 8|0);
  $$01$in = $13;
 }
 if ((label|0) == 4) {
  $8 = ((($$01)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($0)) + 28|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($11) + ($3<<2)|0);
  HEAP32[$12>>2] = $9;
  $$0 = 1;
  return ($$0|0);
 }
 else if ((label|0) == 6) {
  $14 = ((($0)) + 28|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + ($3<<2)|0);
  HEAP32[$16>>2] = $3;
  $$0 = 0;
  return ($$0|0);
 }
 return (0)|0;
}
function _xparalinks($0) {
 $0 = $0|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$in = 0, $$in6 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 88|0);
 $$01 = 1;
 while(1) {
  $2 = HEAP32[$0>>2]|0;
  $3 = ($$01|0)>($2|0);
  if ($3) {
   break;
  }
  $4 = HEAP32[$1>>2]|0;
  $5 = (($4) + ($$01<<2)|0);
  $6 = HEAP32[$5>>2]|0;
  $$0 = 0;$$in6 = $6;
  while(1) {
   $7 = ($$in6|0)==(0|0);
   if ($7) {
    break;
   }
   $8 = HEAP32[$$in6>>2]|0;
   $9 = ($8|0)==(0);
   do {
    if ($9) {
     $10 = ($$0|0)==(0|0);
     $11 = ((($$in6)) + 8|0);
     $12 = HEAP32[$11>>2]|0;
     if ($10) {
      $13 = HEAP32[$1>>2]|0;
      $14 = (($13) + ($$01<<2)|0);
      HEAP32[$14>>2] = $12;
      _free($$in6);
      $15 = HEAP32[$1>>2]|0;
      $16 = (($15) + ($$01<<2)|0);
      $17 = HEAP32[$16>>2]|0;
      $$1 = 0;$$in = $17;
      break;
     } else {
      $18 = ((($$0)) + 8|0);
      HEAP32[$18>>2] = $12;
      _free($$in6);
      $19 = HEAP32[$18>>2]|0;
      $$1 = $$0;$$in = $19;
      break;
     }
    } else {
     $20 = ((($$in6)) + 8|0);
     $21 = HEAP32[$20>>2]|0;
     $$1 = $$in6;$$in = $21;
    }
   } while(0);
   $$0 = $$1;$$in6 = $$in;
  }
  $22 = (($$01) + 1)|0;
  $$01 = $22;
 }
 return;
}
function _freesparse($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4544|0);
 $2 = ((($0)) + 4564|0);
 $3 = HEAP32[$2>>2]|0;
 _free($3);
 HEAP32[$2>>2] = 0;
 $4 = ((($0)) + 4568|0);
 $5 = HEAP32[$4>>2]|0;
 _free($5);
 HEAP32[$4>>2] = 0;
 $6 = ((($0)) + 4572|0);
 $7 = HEAP32[$6>>2]|0;
 _free($7);
 HEAP32[$6>>2] = 0;
 $8 = ((($0)) + 4576|0);
 $9 = HEAP32[$8>>2]|0;
 _free($9);
 HEAP32[$8>>2] = 0;
 $10 = ((($0)) + 4580|0);
 $11 = HEAP32[$10>>2]|0;
 _free($11);
 HEAP32[$10>>2] = 0;
 $12 = ((($0)) + 4584|0);
 $13 = HEAP32[$12>>2]|0;
 _free($13);
 HEAP32[$12>>2] = 0;
 $14 = ((($0)) + 4548|0);
 $15 = HEAP32[$14>>2]|0;
 _free($15);
 HEAP32[$14>>2] = 0;
 $16 = HEAP32[$1>>2]|0;
 _free($16);
 HEAP32[$1>>2] = 0;
 $17 = ((($0)) + 4552|0);
 $18 = HEAP32[$17>>2]|0;
 _free($18);
 HEAP32[$17>>2] = 0;
 $19 = ((($0)) + 4556|0);
 $20 = HEAP32[$19>>2]|0;
 _free($20);
 HEAP32[$19>>2] = 0;
 $21 = ((($0)) + 4592|0);
 $22 = HEAP32[$21>>2]|0;
 _free($22);
 HEAP32[$21>>2] = 0;
 $23 = ((($0)) + 4596|0);
 $24 = HEAP32[$23>>2]|0;
 _free($24);
 HEAP32[$23>>2] = 0;
 return;
}
function _linsolve($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$01 = 0.0, $$02 = 0.0, $$03 = 0, $$04 = 0, $$06 = 0, $$1 = 0.0, $$15 = 0, $$17 = 0, $$2 = 0, $$28 = 0, $$3 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0;
 var $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0.0, $133 = 0.0, $134 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0;
 var $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 40|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($0)) + 32|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($0)) + 36|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($0)) + 48|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($0)) + 52|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $1 << 3;
 $20 = (($19) + 8)|0;
 _memset(($8|0),0,($20|0))|0;
 $21 = $1 << 2;
 $22 = (($21) + 4)|0;
 _memset(($16|0),0,($22|0))|0;
 _memset(($18|0),0,($22|0))|0;
 $$04 = 1;
 while(1) {
  $23 = ($$04|0)>($1|0);
  if ($23) {
   break;
  }
  $24 = (($16) + ($$04<<2)|0);
  $25 = HEAP32[$24>>2]|0;
  $$01 = 0.0;$$03 = $25;
  while(1) {
   $26 = ($$03|0)==(0);
   if ($26) {
    break;
   }
   $27 = (($16) + ($$03<<2)|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = (($18) + ($$03<<2)|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = (($10) + ($30<<2)|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = (($4) + ($32<<3)|0);
   $34 = +HEAPF64[$33>>3];
   $35 = $34 * $34;
   $36 = $$01 + $35;
   $37 = (($30) + 1)|0;
   $38 = (($$03) + 1)|0;
   $39 = (($12) + ($38<<2)|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = ($40|0)>($37|0);
   L7: do {
    if ($41) {
     HEAP32[$29>>2] = $37;
     $42 = (($14) + ($37<<2)|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = (($16) + ($43<<2)|0);
     $45 = HEAP32[$44>>2]|0;
     HEAP32[$27>>2] = $45;
     HEAP32[$44>>2] = $$03;
     $$06 = $37;
     while(1) {
      $46 = ($$06|0)<($40|0);
      if (!($46)) {
       break L7;
      }
      $47 = (($14) + ($$06<<2)|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = (($10) + ($$06<<2)|0);
      $50 = HEAP32[$49>>2]|0;
      $51 = (($4) + ($50<<3)|0);
      $52 = +HEAPF64[$51>>3];
      $53 = $52 * $34;
      $54 = (($8) + ($48<<3)|0);
      $55 = +HEAPF64[$54>>3];
      $56 = $55 + $53;
      HEAPF64[$54>>3] = $56;
      $57 = (($$06) + 1)|0;
      $$06 = $57;
     }
    }
   } while(0);
   $$01 = $36;$$03 = $28;
  }
  $58 = (($2) + ($$04<<3)|0);
  $59 = +HEAPF64[$58>>3];
  $60 = $59 - $$01;
  $61 = !($60 <= 0.0);
  if (!($61)) {
   $$0 = $$04;
   label = 30;
   break;
  }
  $62 = (+Math_sqrt((+$60)));
  HEAPF64[$58>>3] = $62;
  $63 = (($12) + ($$04<<2)|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = (($$04) + 1)|0;
  $66 = (($12) + ($65<<2)|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = ($67|0)>($64|0);
  L15: do {
   if ($68) {
    $69 = (($18) + ($$04<<2)|0);
    HEAP32[$69>>2] = $64;
    $70 = (($14) + ($64<<2)|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = (($16) + ($71<<2)|0);
    $73 = HEAP32[$72>>2]|0;
    HEAP32[$24>>2] = $73;
    HEAP32[$72>>2] = $$04;
    $$17 = $64;
    while(1) {
     $74 = ($$17|0)<($67|0);
     if (!($74)) {
      break L15;
     }
     $75 = (($14) + ($$17<<2)|0);
     $76 = HEAP32[$75>>2]|0;
     $77 = (($10) + ($$17<<2)|0);
     $78 = HEAP32[$77>>2]|0;
     $79 = (($4) + ($78<<3)|0);
     $80 = +HEAPF64[$79>>3];
     $81 = (($8) + ($76<<3)|0);
     $82 = +HEAPF64[$81>>3];
     $83 = $80 - $82;
     $84 = $83 / $62;
     HEAPF64[$79>>3] = $84;
     HEAPF64[$81>>3] = 0.0;
     $85 = (($$17) + 1)|0;
     $$17 = $85;
    }
   }
  } while(0);
  $$04 = $65;
 }
 if ((label|0) == 30) {
  return ($$0|0);
 }
 $$15 = 1;
 while(1) {
  $86 = ($$15|0)>($1|0);
  if ($86) {
   break;
  }
  $87 = (($6) + ($$15<<3)|0);
  $88 = +HEAPF64[$87>>3];
  $89 = (($2) + ($$15<<3)|0);
  $90 = +HEAPF64[$89>>3];
  $91 = $88 / $90;
  HEAPF64[$87>>3] = $91;
  $92 = (($12) + ($$15<<2)|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = (($$15) + 1)|0;
  $95 = (($12) + ($94<<2)|0);
  $96 = HEAP32[$95>>2]|0;
  $97 = ($96|0)>($93|0);
  L27: do {
   if ($97) {
    $$28 = $93;
    while(1) {
     $98 = ($$28|0)<($96|0);
     if (!($98)) {
      break L27;
     }
     $99 = (($14) + ($$28<<2)|0);
     $100 = HEAP32[$99>>2]|0;
     $101 = (($10) + ($$28<<2)|0);
     $102 = HEAP32[$101>>2]|0;
     $103 = (($4) + ($102<<3)|0);
     $104 = +HEAPF64[$103>>3];
     $105 = $104 * $91;
     $106 = (($6) + ($100<<3)|0);
     $107 = +HEAPF64[$106>>3];
     $108 = $107 - $105;
     HEAPF64[$106>>3] = $108;
     $109 = (($$28) + 1)|0;
     $$28 = $109;
    }
   }
  } while(0);
  $$15 = $94;
 }
 $$2 = $1;
 while(1) {
  $110 = ($$2|0)>(0);
  if (!($110)) {
   $$0 = 0;
   break;
  }
  $111 = (($6) + ($$2<<3)|0);
  $112 = +HEAPF64[$111>>3];
  $113 = (($12) + ($$2<<2)|0);
  $114 = HEAP32[$113>>2]|0;
  $115 = (($$2) + 1)|0;
  $116 = (($12) + ($115<<2)|0);
  $117 = HEAP32[$116>>2]|0;
  $118 = ($117|0)>($114|0);
  L37: do {
   if ($118) {
    $$02 = $112;$$3 = $114;
    while(1) {
     $119 = ($$3|0)<($117|0);
     if (!($119)) {
      $$1 = $$02;
      break L37;
     }
     $120 = (($10) + ($$3<<2)|0);
     $121 = HEAP32[$120>>2]|0;
     $122 = (($4) + ($121<<3)|0);
     $123 = +HEAPF64[$122>>3];
     $124 = (($14) + ($$3<<2)|0);
     $125 = HEAP32[$124>>2]|0;
     $126 = (($6) + ($125<<3)|0);
     $127 = +HEAPF64[$126>>3];
     $128 = $123 * $127;
     $129 = $$02 - $128;
     $130 = (($$3) + 1)|0;
     $$02 = $129;$$3 = $130;
    }
   } else {
    $$1 = $112;
   }
  } while(0);
  $131 = (($2) + ($$2<<3)|0);
  $132 = +HEAPF64[$131>>3];
  $133 = $$1 / $132;
  HEAPF64[$111>>3] = $133;
  $134 = (($$2) + -1)|0;
  $$2 = $134;
 }
 return ($$0|0);
}
function _genmmd($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 var $$01 = 0, $$02 = 0, $$03 = 0, $$1$ph = 0, $$2$ph = 0, $$3 = 0, $$lcssa1016 = 0, $$promoted = 0, $$promoted$pre = 0, $$val = 0, $$val26 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $27$phi = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $12 = sp + 12|0;
 $13 = sp + 8|0;
 $14 = sp + 4|0;
 $15 = sp;
 HEAP32[$12>>2] = 0;
 HEAP32[$13>>2] = 0;
 HEAP32[$14>>2] = 0;
 HEAP32[$15>>2] = 0;
 $16 = HEAP32[$0>>2]|0;
 $17 = ($16|0)<(1);
 if ($17) {
  STACKTOP = sp;return;
 }
 HEAP32[$11>>2] = 0;
 _mmdint_($0,$1,$6,$3,$4,$7,$8,$9);
 $18 = ((($6)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $$01 = 1;$$02 = $19;$27 = 0;
 while(1) {
  $20 = ($$02|0)<(1);
  if ($20) {
   break;
  }
  $21 = (($3) + ($$02<<2)|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = HEAP32[$10>>2]|0;
  $24 = (($9) + ($$02<<2)|0);
  HEAP32[$24>>2] = $23;
  $25 = (0 - ($$01))|0;
  HEAP32[$21>>2] = $25;
  $26 = (($$01) + 1)|0;
  $27$phi = $$02;$$01 = $26;$$02 = $22;$27 = $27$phi;
 }
 HEAP32[$14>>2] = $27;
 $28 = HEAP32[$0>>2]|0;
 $29 = ($$01|0)>($28|0);
 L8: do {
  if (!($29)) {
   HEAP32[$15>>2] = 1;
   HEAP32[$18>>2] = 0;
   HEAP32[$12>>2] = 2;
   $$1$ph = $$01;$$promoted = 2;
   L10: while(1) {
    $31 = $$promoted;
    while(1) {
     $30 = (($6) + ($31<<2)|0);
     $32 = HEAP32[$30>>2]|0;
     $33 = ($32|0)>(0);
     if ($33) {
      break;
     }
     $34 = (($31) + 1)|0;
     $31 = $34;
    }
    HEAP32[$12>>2] = $31;
    $35 = HEAP32[$5>>2]|0;
    $36 = (($31) + ($35))|0;
    HEAP32[$13>>2] = 0;
    $$2$ph = $$1$ph;$$lcssa1016 = $31;$$val26 = $35;$72 = 0;
    L16: while(1) {
     $38 = $$lcssa1016;
     while(1) {
      $37 = (($6) + ($38<<2)|0);
      $39 = HEAP32[$37>>2]|0;
      $40 = ($39|0)>(0);
      if ($40) {
       break;
      }
      $41 = (($38) + 1)|0;
      $42 = ($38|0)<($36|0);
      if (!($42)) {
       label = 26;
       break L16;
      }
      $38 = $41;
     }
     HEAP32[$14>>2] = $39;
     $43 = (($3) + ($39<<2)|0);
     $44 = HEAP32[$43>>2]|0;
     HEAP32[$37>>2] = $44;
     $45 = ($44|0)>(0);
     if ($45) {
      $46 = (0 - ($38))|0;
      $47 = (($4) + ($44<<2)|0);
      HEAP32[$47>>2] = $46;
     }
     $48 = (0 - ($$2$ph))|0;
     HEAP32[$43>>2] = $48;
     $49 = HEAP32[$11>>2]|0;
     $50 = (($49) + ($38))|0;
     $51 = (($7) + ($39<<2)|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = (($50) + ($52))|0;
     $54 = (($53) + -2)|0;
     HEAP32[$11>>2] = $54;
     $55 = HEAP32[$51>>2]|0;
     $56 = (($$2$ph) + ($55))|0;
     $57 = HEAP32[$0>>2]|0;
     $58 = ($56|0)>($57|0);
     if ($58) {
      break L10;
     }
     $59 = HEAP32[$15>>2]|0;
     $60 = (($59) + 1)|0;
     HEAP32[$15>>2] = $60;
     $61 = HEAP32[$10>>2]|0;
     $62 = ($60|0)<($61|0);
     L27: do {
      if (!($62)) {
       HEAP32[$15>>2] = 1;
       $$03 = 1;
       while(1) {
        $63 = ($$03|0)>($57|0);
        if ($63) {
         break L27;
        }
        $64 = (($9) + ($$03<<2)|0);
        $65 = HEAP32[$64>>2]|0;
        $66 = HEAP32[$10>>2]|0;
        $67 = ($65|0)<($66|0);
        if ($67) {
         HEAP32[$64>>2] = 0;
        }
        $68 = (($$03) + 1)|0;
        $$03 = $68;
       }
      }
     } while(0);
     _mmdelm_($14,$1,$2,$6,$3,$4,$7,$8,$9,$10,$15);
     $69 = HEAP32[$51>>2]|0;
     $70 = (($$2$ph) + ($69))|0;
     $71 = (($8) + ($39<<2)|0);
     HEAP32[$71>>2] = $72;
     $73 = HEAP32[$5>>2]|0;
     $74 = ($73|0)>(-1);
     if (!($74)) {
      label = 27;
      break;
     }
     $$2$ph = $70;$$lcssa1016 = $38;$$val26 = $73;$72 = $39;
    }
    if ((label|0) == 26) {
     label = 0;
     HEAP32[$13>>2] = $72;
     HEAP32[$12>>2] = $41;
     HEAP32[$14>>2] = $39;
     $$3 = $$2$ph;$$val = $$val26;
    }
    else if ((label|0) == 27) {
     label = 0;
     HEAP32[$12>>2] = $38;
     HEAP32[$13>>2] = $39;
     $$3 = $70;$$val = $73;
    }
    $75 = HEAP32[$0>>2]|0;
    $76 = ($$3|0)>($75|0);
    if ($76) {
     break L8;
    }
    _mmdupd_($13,$0,$1,$2,$$val,$12,$6,$3,$4,$7,$8,$9,$10,$15);
    $$promoted$pre = HEAP32[$12>>2]|0;
    $$1$ph = $$3;$$promoted = $$promoted$pre;
   }
   HEAP32[$12>>2] = $38;
   HEAP32[$13>>2] = $72;
  }
 } while(0);
 _mmdnum_($0,$4,$3,$7);
 STACKTOP = sp;return;
}
function _mmdint_($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$0 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $8 = HEAP32[$0>>2]|0;
 $$0 = 1;
 while(1) {
  $9 = ($$0|0)>($8|0);
  if ($9) {
   break;
  }
  $10 = (($2) + ($$0<<2)|0);
  HEAP32[$10>>2] = 0;
  $11 = (($5) + ($$0<<2)|0);
  HEAP32[$11>>2] = 1;
  $12 = (($7) + ($$0<<2)|0);
  HEAP32[$12>>2] = 0;
  $13 = (($6) + ($$0<<2)|0);
  HEAP32[$13>>2] = 0;
  $14 = (($$0) + 1)|0;
  $$0 = $14;
 }
 $15 = HEAP32[$0>>2]|0;
 $$1 = 1;
 while(1) {
  $16 = ($$1|0)>($15|0);
  if ($16) {
   break;
  }
  $17 = (($$1) + 1)|0;
  $18 = (($1) + ($17<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($1) + ($$1<<2)|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($19) - ($21))|0;
  $23 = (($22) + 1)|0;
  $24 = (($2) + ($23<<2)|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (($3) + ($$1<<2)|0);
  HEAP32[$26>>2] = $25;
  HEAP32[$24>>2] = $$1;
  $27 = ($25|0)>(0);
  if ($27) {
   $28 = (($4) + ($25<<2)|0);
   HEAP32[$28>>2] = $$1;
  }
  $29 = $22 ^ -1;
  $30 = (($4) + ($$1<<2)|0);
  HEAP32[$30>>2] = $29;
  $$1 = $17;
 }
 return;
}
function _mmdelm_($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 var $$0 = 0, $$01 = 0, $$013 = 0, $$015 = 0, $$03 = 0, $$05 = 0, $$08 = 0, $$1 = 0, $$114 = 0, $$116 = 0, $$12 = 0, $$14 = 0, $$16 = 0, $$19 = 0, $$2 = 0, $$210 = 0, $$27 = 0, $$3 = 0, $$311 = 0, $$4 = 0;
 var $$412 = 0, $$5 = 0, $$6 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $11 = HEAP32[$10>>2]|0;
 $12 = HEAP32[$0>>2]|0;
 $13 = (($8) + ($12<<2)|0);
 HEAP32[$13>>2] = $11;
 $14 = HEAP32[$0>>2]|0;
 $15 = (($1) + ($14<<2)|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($14) + 1)|0;
 $18 = (($1) + ($17<<2)|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($19) + -1)|0;
 $$01 = 0;$$013 = $16;$$05 = $16;
 while(1) {
  $21 = ($$013|0)<($19|0);
  if (!($21)) {
   break;
  }
  $22 = (($2) + ($$013<<2)|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ($23|0)==(0);
  if ($24) {
   break;
  }
  $25 = (($8) + ($23<<2)|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = HEAP32[$10>>2]|0;
  $28 = ($26|0)<($27|0);
  do {
   if ($28) {
    HEAP32[$25>>2] = $27;
    $29 = (($4) + ($23<<2)|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = ($30|0)<(0);
    if ($31) {
     $34 = (($7) + ($23<<2)|0);
     HEAP32[$34>>2] = $$01;
     $$12 = $23;$$16 = $$05;
     break;
    } else {
     $32 = (($2) + ($$05<<2)|0);
     HEAP32[$32>>2] = $23;
     $33 = (($$05) + 1)|0;
     $$12 = $$01;$$16 = $33;
     break;
    }
   } else {
    $$12 = $$01;$$16 = $$05;
   }
  } while(0);
  $35 = (($$013) + 1)|0;
  $$01 = $$12;$$013 = $35;$$05 = $$16;
 }
 $$08 = $20;$$2 = $$01;$$27 = $$05;
 while(1) {
  $36 = ($$2|0)<(1);
  if ($36) {
   break;
  }
  $37 = (0 - ($$2))|0;
  $38 = (($2) + ($$08<<2)|0);
  HEAP32[$38>>2] = $37;
  $$03 = $$2;$$19 = $$08;$$3 = $$27;
  L15: while(1) {
   $39 = (($1) + ($$03<<2)|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = (($$03) + 1)|0;
   $42 = (($1) + ($41<<2)|0);
   $43 = HEAP32[$42>>2]|0;
   $$015 = $40;$$210 = $$19;$$4 = $$3;
   while(1) {
    $44 = ($$015|0)<($43|0);
    if (!($44)) {
     break L15;
    }
    $45 = (($2) + ($$015<<2)|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = ($46|0)<(0);
    if ($47) {
     break;
    }
    $49 = ($46|0)==(0);
    if ($49) {
     break L15;
    }
    $50 = (($8) + ($46<<2)|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = HEAP32[$10>>2]|0;
    $53 = ($51|0)<($52|0);
    if ($53) {
     $54 = (($4) + ($46<<2)|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)<(0);
     if ($56) {
      $$412 = $$210;$$6 = $$4;
     } else {
      HEAP32[$50>>2] = $52;
      $$311 = $$210;$$5 = $$4;
      while(1) {
       $57 = ($$5|0)<($$311|0);
       if ($57) {
        break;
       }
       $58 = (($2) + ($$311<<2)|0);
       $59 = HEAP32[$58>>2]|0;
       $60 = (0 - ($59))|0;
       $61 = (($1) + ($60<<2)|0);
       $62 = HEAP32[$61>>2]|0;
       $63 = (1 - ($59))|0;
       $64 = (($1) + ($63<<2)|0);
       $65 = HEAP32[$64>>2]|0;
       $66 = (($65) + -1)|0;
       $$311 = $66;$$5 = $62;
      }
      $67 = (($2) + ($$5<<2)|0);
      HEAP32[$67>>2] = $46;
      $68 = (($$5) + 1)|0;
      $$412 = $$311;$$6 = $68;
     }
    } else {
     $$412 = $$210;$$6 = $$4;
    }
    $69 = (($$015) + 1)|0;
    $$015 = $69;$$210 = $$412;$$4 = $$6;
   }
   $48 = (0 - ($46))|0;
   $$03 = $48;$$19 = $$210;$$3 = $$4;
  }
  $70 = (($7) + ($$2<<2)|0);
  $71 = HEAP32[$70>>2]|0;
  $$08 = $$210;$$2 = $71;$$27 = $$4;
 }
 $72 = ($$27|0)>($$08|0);
 if (!($72)) {
  $73 = (($2) + ($$27<<2)|0);
  HEAP32[$73>>2] = 0;
 }
 $74 = HEAP32[$0>>2]|0;
 $$14 = $74;
 L36: while(1) {
  $75 = (($1) + ($$14<<2)|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = (($$14) + 1)|0;
  $78 = (($1) + ($77<<2)|0);
  $79 = HEAP32[$78>>2]|0;
  $$114 = $76;
  while(1) {
   $80 = ($$114|0)<($79|0);
   if (!($80)) {
    label = 51;
    break L36;
   }
   $81 = (($2) + ($$114<<2)|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = ($82|0)<(0);
   if ($83) {
    break;
   }
   $85 = ($82|0)==(0);
   if ($85) {
    label = 51;
    break L36;
   }
   $86 = (($5) + ($82<<2)|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = ($87|0)==(0);
   do {
    if (!($88)) {
     $89 = HEAP32[$9>>2]|0;
     $90 = (0 - ($89))|0;
     $91 = ($87|0)==($90|0);
     if (!($91)) {
      $92 = (($4) + ($82<<2)|0);
      $93 = HEAP32[$92>>2]|0;
      $94 = ($93|0)>(0);
      if ($94) {
       $95 = (($5) + ($93<<2)|0);
       HEAP32[$95>>2] = $87;
      }
      $96 = ($87|0)>(0);
      if ($96) {
       $97 = (($4) + ($87<<2)|0);
       HEAP32[$97>>2] = $93;
       break;
      } else {
       $98 = (0 - ($87))|0;
       $99 = (($3) + ($98<<2)|0);
       HEAP32[$99>>2] = $93;
       break;
      }
     }
    }
   } while(0);
   $100 = (($1) + ($82<<2)|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = (($82) + 1)|0;
   $103 = (($1) + ($102<<2)|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = (($104) + -1)|0;
   $$0 = $101;$$116 = $101;
   while(1) {
    $106 = ($$116|0)<($104|0);
    if (!($106)) {
     break;
    }
    $107 = (($2) + ($$116<<2)|0);
    $108 = HEAP32[$107>>2]|0;
    $109 = ($108|0)==(0);
    if ($109) {
     break;
    }
    $110 = (($8) + ($108<<2)|0);
    $111 = HEAP32[$110>>2]|0;
    $112 = HEAP32[$10>>2]|0;
    $113 = ($111|0)<($112|0);
    if ($113) {
     $114 = (($2) + ($$0<<2)|0);
     HEAP32[$114>>2] = $108;
     $115 = (($$0) + 1)|0;
     $$1 = $115;
    } else {
     $$1 = $$0;
    }
    $116 = (($$116) + 1)|0;
    $$0 = $$1;$$116 = $116;
   }
   $117 = (($$0) - ($101))|0;
   $118 = ($117|0)>(0);
   if ($118) {
    $132 = (($117) + 1)|0;
    $133 = (($4) + ($82<<2)|0);
    HEAP32[$133>>2] = $132;
    HEAP32[$86>>2] = 0;
    $134 = HEAP32[$0>>2]|0;
    $135 = (($2) + ($$0<<2)|0);
    HEAP32[$135>>2] = $134;
    $136 = ($$0|0)<($105|0);
    if ($136) {
     $137 = (($$0) + 1)|0;
     $138 = (($2) + ($137<<2)|0);
     HEAP32[$138>>2] = 0;
    }
   } else {
    $119 = (($6) + ($82<<2)|0);
    $120 = HEAP32[$119>>2]|0;
    $121 = HEAP32[$0>>2]|0;
    $122 = (($6) + ($121<<2)|0);
    $123 = HEAP32[$122>>2]|0;
    $124 = (($123) + ($120))|0;
    HEAP32[$122>>2] = $124;
    HEAP32[$119>>2] = 0;
    $125 = HEAP32[$9>>2]|0;
    $126 = (($8) + ($82<<2)|0);
    HEAP32[$126>>2] = $125;
    $127 = HEAP32[$0>>2]|0;
    $128 = (0 - ($127))|0;
    $129 = (($4) + ($82<<2)|0);
    HEAP32[$129>>2] = $128;
    $130 = HEAP32[$9>>2]|0;
    $131 = (0 - ($130))|0;
    HEAP32[$86>>2] = $131;
   }
   $139 = (($$114) + 1)|0;
   $$114 = $139;
  }
  $84 = (0 - ($82))|0;
  $$14 = $84;
 }
 if ((label|0) == 51) {
  return;
 }
}
function _mmdupd_($0,$1,$2,$3,$$val,$4,$5,$6,$7,$8,$9,$10,$11,$12) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $$val = $$val|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 var $$0 = 0, $$01 = 0, $$011 = 0, $$014 = 0, $$014$in = 0, $$015 = 0, $$016 = 0, $$020 = 0, $$021 = 0, $$025 = 0, $$026 = 0, $$08 = 0, $$1 = 0, $$112 = 0, $$117 = 0, $$12 = 0, $$122 = 0, $$127 = 0, $$15 = 0, $$19 = 0;
 var $$2 = 0, $$210 = 0, $$213 = 0, $$218 = 0, $$223 = 0, $$228 = 0, $$23 = 0, $$26 = 0, $$3 = 0, $$324 = 0, $$373 = 0, $$4 = 0, $$5 = 0, $$6 = 0, $$7 = 0, $$8 = 0, $$pre$phiZ2D = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $13 = HEAP32[$4>>2]|0;
 $14 = (($13) + ($$val))|0;
 $$014$in = $0;
 while(1) {
  $$014 = HEAP32[$$014$in>>2]|0;
  $15 = ($$014|0)<(1);
  if ($15) {
   break;
  }
  $16 = HEAP32[$12>>2]|0;
  $17 = (($16) + ($14))|0;
  $18 = HEAP32[$11>>2]|0;
  $19 = ($17|0)<($18|0);
  if ($19) {
   $$025 = $17;
  } else {
   HEAP32[$12>>2] = 1;
   $20 = HEAP32[$1>>2]|0;
   $$021 = 1;
   while(1) {
    $21 = ($$021|0)>($20|0);
    if ($21) {
     break;
    }
    $22 = (($10) + ($$021<<2)|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = HEAP32[$11>>2]|0;
    $25 = ($23|0)<($24|0);
    if ($25) {
     HEAP32[$22>>2] = 0;
    }
    $26 = (($$021) + 1)|0;
    $$021 = $26;
   }
   $27 = HEAP32[$12>>2]|0;
   $28 = (($27) + ($14))|0;
   $$025 = $28;
  }
  $$0 = 0;$$011 = 0;$$026 = $$014;$$08 = 0;
  L14: while(1) {
   $29 = (($2) + ($$026<<2)|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = (($$026) + 1)|0;
   $32 = (($2) + ($31<<2)|0);
   $33 = HEAP32[$32>>2]|0;
   $$1 = $$0;$$112 = $$011;$$122 = $30;$$19 = $$08;
   while(1) {
    $34 = ($$122|0)<($33|0);
    if (!($34)) {
     break L14;
    }
    $35 = (($3) + ($$122<<2)|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ($36|0)<(0);
    if ($37) {
     break;
    }
    $39 = ($36|0)==(0);
    if ($39) {
     break L14;
    }
    $40 = (($8) + ($36<<2)|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = ($41|0)==(0);
    do {
     if ($42) {
      $$2 = $$1;$$210 = $$19;$$213 = $$112;
     } else {
      $43 = (($$1) + ($41))|0;
      $44 = (($10) + ($36<<2)|0);
      HEAP32[$44>>2] = $$025;
      $45 = (($7) + ($36<<2)|0);
      $46 = HEAP32[$45>>2]|0;
      $47 = ($46|0)==(0);
      if ($47) {
       $48 = (($6) + ($36<<2)|0);
       $49 = HEAP32[$48>>2]|0;
       $50 = ($49|0)==(2);
       $51 = (($9) + ($36<<2)|0);
       if ($50) {
        HEAP32[$51>>2] = $$112;
        $$2 = $43;$$210 = $$19;$$213 = $36;
        break;
       } else {
        HEAP32[$51>>2] = $$19;
        $$2 = $43;$$210 = $36;$$213 = $$112;
        break;
       }
      } else {
       $$2 = $43;$$210 = $$19;$$213 = $$112;
      }
     }
    } while(0);
    $52 = (($$122) + 1)|0;
    $$1 = $$2;$$112 = $$213;$$122 = $52;$$19 = $$210;
   }
   $38 = (0 - ($36))|0;
   $$0 = $$1;$$011 = $$112;$$026 = $38;$$08 = $$19;
  }
  $$016 = $$112;
  L30: while(1) {
   $53 = ($$016|0)<(1);
   L32: do {
    if ($53) {
     $$117 = $$19;$$15 = 0;
     label = 47;
    } else {
     $54 = (($7) + ($$016<<2)|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==(0);
     if (!($56)) {
      $57 = (($9) + ($$016<<2)|0);
      $58 = HEAP32[$57>>2]|0;
      $175 = $58;
      label = 71;
      break;
     }
     $59 = HEAP32[$12>>2]|0;
     $60 = (($59) + 1)|0;
     HEAP32[$12>>2] = $60;
     $61 = (($2) + ($$016<<2)|0);
     $62 = HEAP32[$61>>2]|0;
     $63 = (($3) + ($62<<2)|0);
     $64 = HEAP32[$63>>2]|0;
     $65 = ($64|0)==($$014|0);
     if ($65) {
      $66 = (($62) + 1)|0;
      $67 = (($3) + ($66<<2)|0);
      $68 = HEAP32[$67>>2]|0;
      $$015 = $68;
     } else {
      $$015 = $64;
     }
     $69 = (($6) + ($$015<<2)|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($70|0)<(0);
     if (!($71)) {
      $74 = (($8) + ($$015<<2)|0);
      $75 = HEAP32[$74>>2]|0;
      $76 = (($$1) + ($75))|0;
      $$218 = $$016;$$26 = 1;$$8 = $76;$$pre$phiZ2D = $54;
      label = 66;
      break;
     }
     $72 = (($8) + ($$016<<2)|0);
     $73 = (0 - ($$016))|0;
     $$01 = $$1;$$127 = $$015;
     while(1) {
      $77 = (($2) + ($$127<<2)|0);
      $78 = HEAP32[$77>>2]|0;
      $79 = (($$127) + 1)|0;
      $80 = (($2) + ($79<<2)|0);
      $81 = HEAP32[$80>>2]|0;
      $$12 = $$01;$$223 = $78;
      L46: while(1) {
       $82 = ($$223|0)<($81|0);
       if (!($82)) {
        $$218 = $$016;$$26 = 1;$$8 = $$12;$$pre$phiZ2D = $54;
        label = 66;
        break L32;
       }
       $83 = (($3) + ($$223<<2)|0);
       $84 = HEAP32[$83>>2]|0;
       $85 = ($84|0)==($$016|0);
       do {
        if ($85) {
         $$23 = $$12;
        } else {
         $86 = ($84|0)<(0);
         if ($86) {
          break L46;
         }
         $88 = ($84|0)==(0);
         if ($88) {
          $$218 = $$016;$$26 = 1;$$8 = $$12;$$pre$phiZ2D = $54;
          label = 66;
          break L32;
         }
         $89 = (($8) + ($84<<2)|0);
         $90 = HEAP32[$89>>2]|0;
         $91 = ($90|0)==(0);
         if ($91) {
          $$23 = $$12;
         } else {
          $92 = (($10) + ($84<<2)|0);
          $93 = HEAP32[$92>>2]|0;
          $94 = HEAP32[$12>>2]|0;
          $95 = ($93|0)<($94|0);
          if ($95) {
           HEAP32[$92>>2] = $94;
           $96 = HEAP32[$89>>2]|0;
           $97 = (($$12) + ($96))|0;
           $$23 = $97;
           break;
          }
          $98 = (($7) + ($84<<2)|0);
          $99 = HEAP32[$98>>2]|0;
          $100 = ($99|0)==(0);
          if ($100) {
           $101 = (($6) + ($84<<2)|0);
           $102 = HEAP32[$101>>2]|0;
           $103 = ($102|0)==(2);
           if ($103) {
            $104 = HEAP32[$72>>2]|0;
            $105 = (($104) + ($90))|0;
            HEAP32[$72>>2] = $105;
            HEAP32[$89>>2] = 0;
            $106 = HEAP32[$11>>2]|0;
            HEAP32[$92>>2] = $106;
            HEAP32[$101>>2] = $73;
            $107 = HEAP32[$11>>2]|0;
            $108 = (0 - ($107))|0;
            HEAP32[$98>>2] = $108;
            $$23 = $$12;
            break;
           } else {
            $109 = HEAP32[$11>>2]|0;
            $110 = (0 - ($109))|0;
            HEAP32[$98>>2] = $110;
            $$23 = $$12;
            break;
           }
          } else {
           $$23 = $$12;
          }
         }
        }
       } while(0);
       $111 = (($$223) + 1)|0;
       $$12 = $$23;$$223 = $111;
      }
      $87 = (0 - ($84))|0;
      $$01 = $$12;$$127 = $87;
     }
    }
   } while(0);
   L63: while(1) {
    do {
     if ((label|0) == 47) {
      label = 0;
      $112 = ($$117|0)<(1);
      if ($112) {
       break L30;
      }
      $113 = (($7) + ($$117<<2)|0);
      $114 = HEAP32[$113>>2]|0;
      $115 = ($114|0)==(0);
      if (!($115)) {
       $116 = (($9) + ($$117<<2)|0);
       $117 = HEAP32[$116>>2]|0;
       $$373 = $$15;$176 = $117;
       break;
      }
      $118 = HEAP32[$12>>2]|0;
      $119 = (($118) + 1)|0;
      HEAP32[$12>>2] = $119;
      $120 = (($2) + ($$117<<2)|0);
      $121 = HEAP32[$120>>2]|0;
      $122 = (($$117) + 1)|0;
      $123 = (($2) + ($122<<2)|0);
      $124 = HEAP32[$123>>2]|0;
      $$3 = $$1;$$324 = $121;
      while(1) {
       $125 = ($$324|0)<($124|0);
       if (!($125)) {
        $$218 = $$117;$$26 = $$15;$$8 = $$3;$$pre$phiZ2D = $113;
        label = 66;
        continue L63;
       }
       $126 = (($3) + ($$324<<2)|0);
       $127 = HEAP32[$126>>2]|0;
       $128 = ($127|0)==(0);
       if ($128) {
        $$218 = $$117;$$26 = $$15;$$8 = $$3;$$pre$phiZ2D = $113;
        label = 66;
        continue L63;
       }
       $129 = (($10) + ($127<<2)|0);
       $130 = HEAP32[$129>>2]|0;
       $131 = HEAP32[$12>>2]|0;
       $132 = ($130|0)<($131|0);
       L74: do {
        if ($132) {
         HEAP32[$129>>2] = $131;
         $133 = (($6) + ($127<<2)|0);
         $134 = HEAP32[$133>>2]|0;
         $135 = ($134|0)<(0);
         if (!($135)) {
          $136 = (($8) + ($127<<2)|0);
          $137 = HEAP32[$136>>2]|0;
          $138 = (($$3) + ($137))|0;
          $$7 = $138;
          break;
         }
         $$228 = $127;$$4 = $$3;
         while(1) {
          $139 = (($2) + ($$228<<2)|0);
          $140 = HEAP32[$139>>2]|0;
          $141 = (($$228) + 1)|0;
          $142 = (($2) + ($141<<2)|0);
          $143 = HEAP32[$142>>2]|0;
          $$020 = $140;$$5 = $$4;
          while(1) {
           $144 = ($$020|0)<($143|0);
           if (!($144)) {
            $$7 = $$5;
            break L74;
           }
           $145 = (($3) + ($$020<<2)|0);
           $146 = HEAP32[$145>>2]|0;
           $147 = ($146|0)<(0);
           if ($147) {
            break;
           }
           $149 = ($146|0)==(0);
           if ($149) {
            $$7 = $$5;
            break L74;
           }
           $150 = (($10) + ($146<<2)|0);
           $151 = HEAP32[$150>>2]|0;
           $152 = HEAP32[$12>>2]|0;
           $153 = ($151|0)<($152|0);
           if ($153) {
            HEAP32[$150>>2] = $152;
            $154 = (($8) + ($146<<2)|0);
            $155 = HEAP32[$154>>2]|0;
            $156 = (($$5) + ($155))|0;
            $$6 = $156;
           } else {
            $$6 = $$5;
           }
           $157 = (($$020) + 1)|0;
           $$020 = $157;$$5 = $$6;
          }
          $148 = (0 - ($146))|0;
          $$228 = $148;$$4 = $$5;
         }
        } else {
         $$7 = $$3;
        }
       } while(0);
       $158 = (($$324) + 1)|0;
       $$3 = $$7;$$324 = $158;
      }
     }
     else if ((label|0) == 66) {
      label = 0;
      $159 = (($8) + ($$218<<2)|0);
      $160 = HEAP32[$159>>2]|0;
      $161 = (($$8) - ($160))|0;
      $162 = (($161) + 1)|0;
      $163 = (($5) + ($162<<2)|0);
      $164 = HEAP32[$163>>2]|0;
      $165 = (($6) + ($$218<<2)|0);
      HEAP32[$165>>2] = $164;
      $166 = $161 ^ -1;
      HEAP32[$$pre$phiZ2D>>2] = $166;
      $167 = ($164|0)>(0);
      if ($167) {
       $168 = (($7) + ($164<<2)|0);
       HEAP32[$168>>2] = $$218;
      }
      HEAP32[$163>>2] = $$218;
      $169 = HEAP32[$4>>2]|0;
      $170 = ($162|0)<($169|0);
      if ($170) {
       HEAP32[$4>>2] = $162;
      }
      $171 = (($9) + ($$218<<2)|0);
      $172 = HEAP32[$171>>2]|0;
      $173 = ($$26|0)==(1);
      if ($173) {
       $175 = $172;
       label = 71;
       continue L63;
      } else {
       $$373 = $$26;$176 = $172;
      }
     }
     else if ((label|0) == 71) {
      label = 0;
      $$016 = $175;
      continue L30;
     }
    } while(0);
    $$117 = $176;$$15 = $$373;
    label = 47;
   }
  }
  HEAP32[$12>>2] = $$025;
  $174 = (($9) + ($$014<<2)|0);
  $$014$in = $174;
 }
 return;
}
function _mmdnum_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$2 = 0, $$phi$trans$insert = 0, $$pre = 0, $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP32[$0>>2]|0;
 $$01 = 1;
 while(1) {
  $5 = ($$01|0)>($4|0);
  if ($5) {
   break;
  }
  $6 = (($3) + ($$01<<2)|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)<(1);
  $9 = (($2) + ($$01<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (0 - ($10))|0;
  $$sink = $8 ? $10 : $11;
  $12 = (($1) + ($$01<<2)|0);
  HEAP32[$12>>2] = $$sink;
  $13 = (($$01) + 1)|0;
  $$01 = $13;
 }
 $14 = HEAP32[$0>>2]|0;
 $$12 = 1;
 while(1) {
  $15 = ($$12|0)>($14|0);
  if ($15) {
   break;
  }
  $16 = (($1) + ($$12<<2)|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)>(0);
  L8: do {
   if (!($18)) {
    $$0 = $$12;$20 = $17;
    while(1) {
     $19 = ($20|0)>(0);
     if ($19) {
      break;
     }
     $21 = (0 - ($20))|0;
     $$phi$trans$insert = (($1) + ($21<<2)|0);
     $$pre = HEAP32[$$phi$trans$insert>>2]|0;
     $$0 = $21;$20 = $$pre;
    }
    $22 = (($1) + ($$0<<2)|0);
    $23 = (($20) + 1)|0;
    $24 = $20 ^ -1;
    $25 = (($2) + ($$12<<2)|0);
    HEAP32[$25>>2] = $24;
    HEAP32[$22>>2] = $23;
    $26 = (0 - ($$0))|0;
    $$1 = $$12;
    while(1) {
     $27 = (($1) + ($$1<<2)|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = ($28|0)>(-1);
     if ($29) {
      break L8;
     }
     $30 = (0 - ($28))|0;
     HEAP32[$27>>2] = $26;
     $$1 = $30;
    }
   }
  } while(0);
  $31 = (($$12) + 1)|0;
  $$12 = $31;
 }
 $32 = HEAP32[$0>>2]|0;
 $$2 = 1;
 while(1) {
  $33 = ($$2|0)>($32|0);
  if ($33) {
   break;
  }
  $34 = (($2) + ($$2<<2)|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = (0 - ($35))|0;
  HEAP32[$34>>2] = $36;
  $37 = (($1) + ($36<<2)|0);
  HEAP32[$37>>2] = $$2;
  $38 = (($$2) + 1)|0;
  $$2 = $38;
 }
 return;
}
function _mempool_create() {
 var $$cast = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_malloc(8)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  return (0|0);
 } else {
  $2 = (_createMemBlock()|0);
  HEAP32[$0>>2] = $2;
  $$cast = $2;
  $3 = ((($0)) + 4|0);
  HEAP32[$3>>2] = $$cast;
  $4 = ($2|0)==(0|0);
  $spec$select = $4 ? 0 : $0;
  return ($spec$select|0);
 }
 return (0)|0;
}
function _createMemBlock() {
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_malloc(16)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = $0;
  return ($$0|0);
 }
 $2 = (_malloc(64000)|0);
 $3 = ((($0)) + 4|0);
 HEAP32[$3>>2] = $2;
 $4 = ($2|0)==(0|0);
 if ($4) {
  _free($0);
  $$0 = 0;
  return ($$0|0);
 } else {
  $5 = $2;
  $6 = ((($0)) + 8|0);
  HEAP32[$6>>2] = $5;
  HEAP32[$0>>2] = 0;
  $7 = ((($2)) + 64000|0);
  $8 = ((($0)) + 12|0);
  HEAP32[$8>>2] = $7;
  $$0 = $0;
  return ($$0|0);
 }
 return (0)|0;
}
function _mempool_delete($0) {
 $0 = $0|0;
 var $$pre = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + 4|0);
 $$pre = HEAP32[$0>>2]|0;
 $4 = $$pre;$6 = $$pre;
 while(1) {
  $3 = ($4|0)==(0|0);
  if ($3) {
   break;
  }
  $5 = HEAP32[$6>>2]|0;
  HEAP32[$2>>2] = $5;
  _deleteMemBlock($6);
  $7 = HEAP32[$2>>2]|0;
  HEAP32[$0>>2] = $7;
  $8 = $7;
  $9 = $7;
  $4 = $8;$6 = $9;
 }
 _free($0);
 return;
}
function _deleteMemBlock($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 _free($2);
 _free($0);
 return;
}
function _mempool_reset($0) {
 $0 = $0|0;
 var $$cast = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = $1;
 $$cast = $1;
 $3 = ((($$cast)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($$cast)) + 8|0);
 HEAP32[$5>>2] = $4;
 return;
}
function _mempool_alloc($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = 0;
  return ($$0|0);
 }
 $4 = ((($2)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 24|0);
 HEAP32[$4>>2] = $6;
 $7 = HEAP32[$1>>2]|0;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($7)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($9>>>0)<($11>>>0);
 if ($12) {
  $$0 = $5;
  return ($$0|0);
 }
 $13 = HEAP32[$7>>2]|0;
 $14 = ($13|0)==(0|0);
 do {
  if ($14) {
   $21 = (_createMemBlock()|0);
   $22 = HEAP32[$1>>2]|0;
   HEAP32[$22>>2] = $21;
   $23 = HEAP32[$1>>2]|0;
   $24 = HEAP32[$23>>2]|0;
   $25 = ($24|0)==(0|0);
   if ($25) {
    $$0 = 0;
    return ($$0|0);
   } else {
    $26 = $24;
    HEAP32[$1>>2] = $26;
    $28 = $24;
    break;
   }
  } else {
   $15 = ((($13)) + 4|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ((($13)) + 8|0);
   HEAP32[$17>>2] = $16;
   $18 = HEAP32[$1>>2]|0;
   $19 = HEAP32[$18>>2]|0;
   HEAP32[$1>>2] = $19;
   $20 = $19;
   $28 = $20;
  }
 } while(0);
 $27 = ((($28)) + 8|0);
 $29 = HEAP32[$27>>2]|0;
 $30 = ((($29)) + 24|0);
 HEAP32[$27>>2] = $30;
 $$0 = $29;
 return ($$0|0);
}
function _test() {
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(272|0);
 $vararg_buffer = sp + 256|0;
 $0 = sp;
 _printf(14970,$vararg_buffer);
 (_fgets($0,256,2568)|0);
 $1 = (_fopen(14997,15007)|0);
 _fputs($0,$1);
 _fclose($1);
 STACKTOP = sp;return 0;
}
function _netbuilder() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(272|0);
 $0 = sp;
 $1 = sp + 256|0;
 _memset(($0|0),0,256)|0;
 (_EN_geterror(219,$0,255)|0);
 (_puts(($0|0))|0);
 (_EN_getversion($1)|0);
 $2 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function _getversion2($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (_EN_getversion($0)|0);
 return 0;
}
function _runEpanet($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 _EN_createproject($3);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_EN_runproject($4,$0,$1,$2,28)|0);
 _EN_deleteproject($4);
 STACKTOP = sp;return ($5|0);
}
function _writeConsole($0) {
 $0 = $0|0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $0;
 (_fprintf(2712,14966,$vararg_buffer)|0);
 STACKTOP = sp;return;
}
function __GLOBAL__sub_I_epanet_wrapper_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init();
 return;
}
function ___cxx_global_var_init() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN38EmscriptenBindingInitializer_my_moduleC2Ev();
 return;
}
function __ZN38EmscriptenBindingInitializer_my_moduleC2Ev() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten8functionIiJmEJEEEvPKcPFT_DpT0_EDpT1_();
 __ZN10emscripten8functionIiJilEJEEEvPKcPFT_DpT0_EDpT1_();
 __embind_register_class((2512|0),(2496|0),(2552|0),(0|0),(16747|0),(29|0),(16745|0),(0|0),(16745|0),(0|0),(15029|0),(16742|0),(30|0));
 __ZN10emscripten8internal24RegisterClassConstructorIPFP6EpanetvEE6invokeIS2_JEEEvS5_(31);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEES9_S9_EE6invokeIS2_JEEEvPKcSB_(15036,(32),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFivEE6invokeIS2_JEEEvPKcS4_(15041,(33),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEES9_S9_EE6invokeIS2_JEEEvPKcSB_(15047,(34),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEES9_iiEE6invokeIS2_JEEEvPKcSB_(15058,(35),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiimEE6invokeIS2_JEEEvPKcS4_(15063,(36),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFilllEE6invokeIS2_JEEEvPKcS4_(15072,(37),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEES9_S9_EE6invokeIS2_JEEEvPKcSB_(15081,(38),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEE6invokeIS2_JEEEvPKcSB_(15090,(39),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFivEE6invokeIS2_JEEEvPKcS4_(15102,(40),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEE6invokeIS2_JEEEvPKcSB_(15109,(41),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFivEE6invokeIS2_JEEEvPKcS4_(15120,(42),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiiEE6invokeIS2_JEEEvPKcS4_(15126,(43),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFimEE6invokeIS2_JEEEvPKcS4_(15132,(44),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFimEE6invokeIS2_JEEEvPKcS4_(15137,(45),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFivEE6invokeIS2_JEEEvPKcS4_(15143,(46),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEE6invokeIS2_JEEEvPKcSB_(15149,(47),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFivEE6invokeIS2_JEEEvPKcS4_(15161,(48),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFivEE6invokeIS2_JEEEvPKcS4_(15168,(49),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiiEE6invokeIS2_JEEEvPKcS4_(15175,(50),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFimEE6invokeIS2_JEEEvPKcS4_(15181,(51),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFivEE6invokeIS2_JEEEvPKcS4_(15187,(52),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFimEE6invokeIS2_JEEEvPKcS4_(15193,(53),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFivEE6invokeIS2_JEEEvPKcS4_(15198,(54),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFimEE6invokeIS2_JEEEvPKcS4_(15205,(55),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFivEE6invokeIS2_JEEEvPKcS4_(15211,(56),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEE6invokeIS2_JEEEvPKcSB_(15223,(57),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiiilEE6invokeIS2_JEEEvPKcS4_(15234,(58),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiilEE6invokeIS2_JEEEvPKcS4_(15249,(59),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFivEE6invokeIS2_JEEEvPKcS4_(15262,(60),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFivEE6invokeIS2_JEEEvPKcS4_(15269,(61),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEE6invokeIS2_JEEEvPKcSB_(15281,(62),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiiEE6invokeIS2_JEEEvPKcS4_(15291,(63),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEE6invokeIS2_JEEEvPKcSB_(15307,(64),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFimEE6invokeIS2_JEEEvPKcS4_(15317,(65),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiimEE6invokeIS2_JEEEvPKcS4_(15330,(66),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFimmmmEE6invokeIS2_JEEEvPKcS4_(15340,(67),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFimmEE6invokeIS2_JEEEvPKcS4_(15352,(68),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiimEE6invokeIS2_JEEEvPKcS4_(15364,(69),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiiEE6invokeIS2_JEEEvPKcS4_(15377,(70),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiidEE6invokeIS2_JEEEvPKcS4_(15390,(71),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiiNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEES9_S9_EE6invokeIS2_JEEEvPKcSB_(15400,(72),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiilEE6invokeIS2_JEEEvPKcS4_(15412,(73),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEilEE6invokeIS2_JEEEvPKcSB_(15425,(74),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiiiEE6invokeIS2_JEEEvPKcS4_(15433,(75),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiillEE6invokeIS2_JEEEvPKcS4_(15444,(76),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiilEE6invokeIS2_JEEEvPKcS4_(15453,(77),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEElEE6invokeIS2_JEEEvPKcSB_(15463,(78),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiilEE6invokeIS2_JEEEvPKcS4_(15476,(79),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiiilEE6invokeIS2_JEEEvPKcS4_(15488,(80),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiiddEE6invokeIS2_JEEEvPKcS4_(15501,(81),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiiddNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEE6invokeIS2_JEEEvPKcSB_(15510,(82),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiiNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEE6invokeIS2_JEEEvPKcSB_(15522,(83),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiiidEE6invokeIS2_JEEEvPKcS4_(15532,(84),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiiddddddNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEE6invokeIS2_JEEEvPKcSB_(15545,(85),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiidNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEES9_EE6invokeIS2_JEEEvPKcSB_(15557,(86),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiiiEE6invokeIS2_JEEEvPKcS4_(15567,(87),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiiilEE6invokeIS2_JEEEvPKcS4_(15580,(88),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiiNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEElEE6invokeIS2_JEEEvPKcSB_(15594,(89),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFillllEE6invokeIS2_JEEEvPKcS4_(15609,(90),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiiilEE6invokeIS2_JEEEvPKcS4_(15624,(91),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiiilEE6invokeIS2_JEEEvPKcS4_(15638,(92),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiilEE6invokeIS2_JEEEvPKcS4_(15655,(93),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiiidEE6invokeIS2_JEEEvPKcS4_(15669,(94),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiidddEE6invokeIS2_JEEEvPKcS4_(15683,(95),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiiiNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEE6invokeIS2_JEEEvPKcSB_(15698,(96),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiiiiEE6invokeIS2_JEEEvPKcS4_(15712,(97),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEiS9_S9_lEE6invokeIS2_JEEEvPKcSB_(15729,(98),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiiiEE6invokeIS2_JEEEvPKcS4_(15737,(99),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiilEE6invokeIS2_JEEEvPKcS4_(15748,(100),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiilEE6invokeIS2_JEEEvPKcS4_(15766,(101),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEElEE6invokeIS2_JEEEvPKcSB_(15776,(102),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiillEE6invokeIS2_JEEEvPKcS4_(15789,(103),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiilEE6invokeIS2_JEEEvPKcS4_(15802,(104),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiiilEE6invokeIS2_JEEEvPKcS4_(15814,(105),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiilEE6invokeIS2_JEEEvPKcS4_(15827,(106),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiiillEE6invokeIS2_JEEEvPKcS4_(15839,(107),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiilEE6invokeIS2_JEEEvPKcS4_(15849,(108),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiiiEE6invokeIS2_JEEEvPKcS4_(15864,(109),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiiNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEE6invokeIS2_JEEEvPKcSB_(15882,(110),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiiiiEE6invokeIS2_JEEEvPKcS4_(15892,(111),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiliiEE6invokeIS2_JEEEvPKcS4_(15905,(112),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiiidEE6invokeIS2_JEEEvPKcS4_(15917,(113),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiiddddEE6invokeIS2_JEEEvPKcS4_(15930,(114),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiilliEE6invokeIS2_JEEEvPKcS4_(15942,(115),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEE6invokeIS2_JEEEvPKcSB_(15954,(116),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiiEE6invokeIS2_JEEEvPKcS4_(15965,(117),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiilEE6invokeIS2_JEEEvPKcS4_(15979,(118),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiilEE6invokeIS2_JEEEvPKcS4_(16002,(119),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEElEE6invokeIS2_JEEEvPKcSB_(16015,(120),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiilEE6invokeIS2_JEEEvPKcS4_(16031,(121),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiiilEE6invokeIS2_JEEEvPKcS4_(16045,(122),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiiliEE6invokeIS2_JEEEvPKcS4_(16061,(123),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiiNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEE6invokeIS2_JEEEvPKcSB_(16072,(124),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiiidEE6invokeIS2_JEEEvPKcS4_(16085,(125),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEE6invokeIS2_JEEEvPKcSB_(16101,(126),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiiEE6invokeIS2_JEEEvPKcS4_(16110,(127),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiilEE6invokeIS2_JEEEvPKcS4_(16122,(128),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEElEE6invokeIS2_JEEEvPKcSB_(16133,(129),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiilEE6invokeIS2_JEEEvPKcS4_(16147,(130),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiilEE6invokeIS2_JEEEvPKcS4_(16159,(131),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiiillEE6invokeIS2_JEEEvPKcS4_(16172,(132),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiilliEE6invokeIS2_JEEEvPKcS4_(16186,(133),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiiNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEE6invokeIS2_JEEEvPKcSB_(16195,(134),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiiiddEE6invokeIS2_JEEEvPKcS4_(16206,(135),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiiididlEE6invokeIS2_JEEEvPKcS4_(16220,(136),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiiEE6invokeIS2_JEEEvPKcS4_(16231,(137),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiilllllEE6invokeIS2_JEEEvPKcS4_(16245,(138),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiiiididEE6invokeIS2_JEEEvPKcS4_(16256,(139),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEE6invokeIS2_JEEEvPKcSB_(16267,(140),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiiEE6invokeIS2_JEEEvPKcS4_(16275,(141),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiiilllEE6invokeIS2_JEEEvPKcS4_(16286,(142),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiiilllllllEE6invokeIS2_JEEEvPKcS4_(16300,(143),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiillllEE6invokeIS2_JEEEvPKcS4_(16311,(144),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiilEE6invokeIS2_JEEEvPKcS4_(16319,(145),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiiilllEE6invokeIS2_JEEEvPKcS4_(16329,(146),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiiiiidEE6invokeIS2_JEEEvPKcS4_(16343,(147),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiiiiiiiiidEE6invokeIS2_JEEEvPKcS4_(16357,(148),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiiiiEE6invokeIS2_JEEEvPKcS4_(16368,(149),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiiiiEE6invokeIS2_JEEEvPKcS4_(16384,(150),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiiidEE6invokeIS2_JEEEvPKcS4_(16401,(151),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiidEE6invokeIS2_JEEEvPKcS4_(16417,(152),0);
 __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiiiiidEE6invokeIS2_JEEEvPKcS4_(16433,(153),0);
 return;
}
function __Z10getversionm($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0;
 (_EN_getversion($1)|0);
 return 0;
}
function __ZN10emscripten8functionIiJmEJEEEvPKcPFT_DpT0_EDpT1_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_function((15009|0),2,(3548|0),(16738|0),(154|0),(155|0));
 return;
}
function __Z8geterroril($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1;
 $3 = (_EN_geterror($0,$2,255)|0);
 return ($3|0);
}
function __ZN10emscripten8functionIiJilEJEEEvPKcPFT_DpT0_EDpT1_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_function((15020|0),3,(3536|0),(16733|0),(156|0),(157|0));
 return;
}
function __ZN10emscripten8internal13getActualTypeI6EpanetEEPKvPT_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2512|0);
}
function __ZN10emscripten8internal14raw_destructorI6EpanetEEvPT_($0) {
 $0 = $0|0;
 var $$idx$val = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $$idx$val = HEAP32[$0>>2]|0;
 __ZN6EpanetD2Ev($$idx$val);
 __ZdlPv($0);
 return;
}
function __ZN10emscripten8internal12operator_newI6EpanetJEEEPT_DpOT0_() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwm(4)|0);
 __ZN6EpanetC2Ev($0);
 return ($0|0);
}
function __ZN10emscripten8internal24RegisterClassConstructorIPFP6EpanetvEE6invokeIS2_JEEEvS5_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_class_constructor((2512|0),1,(3532|0),(16747|0),(158|0),($0|0));
 return;
}
function __ZN6Epanet4openENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES6_S6_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 11|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)<(0);
 if ($6) {
  $7 = ((($1)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $11 = $8;
 } else {
  $9 = $5&255;
  $11 = $9;
 }
 $10 = (($11) + 1)|0;
 $12 = (__Znam($10)|0);
 $13 = ((($2)) + 11|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = ($14<<24>>24)<(0);
 if ($15) {
  $16 = ((($2)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $20 = $17;
 } else {
  $18 = $14&255;
  $20 = $18;
 }
 $19 = (($20) + 1)|0;
 $21 = (__Znam($19)|0);
 $22 = ((($3)) + 11|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = ($23<<24>>24)<(0);
 if ($24) {
  $25 = ((($3)) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  $29 = $26;
 } else {
  $27 = $23&255;
  $29 = $27;
 }
 $28 = (($29) + 1)|0;
 $30 = (__Znam($28)|0);
 $31 = HEAP8[$4>>0]|0;
 $32 = ($31<<24>>24)<(0);
 if ($32) {
  $33 = HEAP32[$1>>2]|0;
  $34 = $33;
 } else {
  $34 = $1;
 }
 (_strcpy($12,$34)|0);
 $35 = HEAP8[$13>>0]|0;
 $36 = ($35<<24>>24)<(0);
 if ($36) {
  $37 = HEAP32[$2>>2]|0;
  $38 = $37;
 } else {
  $38 = $2;
 }
 (_strcpy($21,$38)|0);
 $39 = HEAP8[$22>>0]|0;
 $40 = ($39<<24>>24)<(0);
 if ($40) {
  $41 = HEAP32[$3>>2]|0;
  $42 = $41;
 } else {
  $42 = $3;
 }
 (_strcpy($30,$42)|0);
 $43 = HEAP32[$0>>2]|0;
 $44 = (_EN_open($43,$12,$21,$30)|0);
 $45 = ($12|0)==(0|0);
 if (!($45)) {
  __ZdaPv($12);
 }
 $46 = ($21|0)==(0|0);
 if (!($46)) {
  __ZdaPv($21);
 }
 $47 = ($30|0)==(0|0);
 if ($47) {
  return ($44|0);
 }
 __ZdaPv($30);
 return ($44|0);
}
function __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEES9_S9_EE6invokeIS2_JEEEvPKcSB_($0,$$01,$$12) {
 $0 = $0|0;
 $$01 = $$01|0;
 $$12 = $$12|0;
 var $$repack4 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $$01;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$12;
 $2 = (__ZN10emscripten8internal10getContextIM6EpanetFiNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEES9_S9_EEEPT_RKSC_($1)|0);
 __embind_register_class_function((2512|0),($0|0),5,(1952|0),(16546|0),(159|0),($2|0),0);
 STACKTOP = sp;return;
}
function __ZN6Epanet5closeEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 _EN_close($1);
 return 0;
}
function __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFivEE6invokeIS2_JEEEvPKcS4_($0,$$01,$$12) {
 $0 = $0|0;
 $$01 = $$01|0;
 $$12 = $$12|0;
 var $$repack4 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $$01;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$12;
 $2 = (__ZN10emscripten8internal10getContextIM6EpanetFivEEEPT_RKS5_($1)|0);
 __embind_register_class_function((2512|0),($0|0),2,(3524|0),(16738|0),(160|0),($2|0),0);
 STACKTOP = sp;return;
}
function __ZN6Epanet10runprojectENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES6_S6_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 11|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)<(0);
 if ($6) {
  $7 = ((($1)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $11 = $8;
 } else {
  $9 = $5&255;
  $11 = $9;
 }
 $10 = (($11) + 1)|0;
 $12 = (__Znam($10)|0);
 $13 = ((($2)) + 11|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = ($14<<24>>24)<(0);
 if ($15) {
  $16 = ((($2)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $20 = $17;
 } else {
  $18 = $14&255;
  $20 = $18;
 }
 $19 = (($20) + 1)|0;
 $21 = (__Znam($19)|0);
 $22 = ((($3)) + 11|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = ($23<<24>>24)<(0);
 if ($24) {
  $25 = ((($3)) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  $29 = $26;
 } else {
  $27 = $23&255;
  $29 = $27;
 }
 $28 = (($29) + 1)|0;
 $30 = (__Znam($28)|0);
 $31 = HEAP8[$4>>0]|0;
 $32 = ($31<<24>>24)<(0);
 if ($32) {
  $33 = HEAP32[$1>>2]|0;
  $34 = $33;
 } else {
  $34 = $1;
 }
 (_strcpy($12,$34)|0);
 $35 = HEAP8[$13>>0]|0;
 $36 = ($35<<24>>24)<(0);
 if ($36) {
  $37 = HEAP32[$2>>2]|0;
  $38 = $37;
 } else {
  $38 = $2;
 }
 (_strcpy($21,$38)|0);
 $39 = HEAP8[$22>>0]|0;
 $40 = ($39<<24>>24)<(0);
 if ($40) {
  $41 = HEAP32[$3>>2]|0;
  $42 = $41;
 } else {
  $42 = $3;
 }
 (_strcpy($30,$42)|0);
 $43 = HEAP32[$0>>2]|0;
 $44 = (_EN_runproject($43,$12,$21,$30,0)|0);
 $45 = ($12|0)==(0|0);
 if (!($45)) {
  __ZdaPv($12);
 }
 $46 = ($21|0)==(0|0);
 if (!($46)) {
  __ZdaPv($21);
 }
 $47 = ($30|0)==(0|0);
 if ($47) {
  return ($44|0);
 }
 __ZdaPv($30);
 return ($44|0);
}
function __ZN6Epanet4initENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES6_ii($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($1)) + 11|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)<(0);
 if ($7) {
  $8 = ((($1)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $12 = $9;
 } else {
  $10 = $6&255;
  $12 = $10;
 }
 $11 = (($12) + 1)|0;
 $13 = (__Znam($11)|0);
 $14 = ((($2)) + 11|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = ($15<<24>>24)<(0);
 if ($16) {
  $17 = ((($2)) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  $21 = $18;
 } else {
  $19 = $15&255;
  $21 = $19;
 }
 $20 = (($21) + 1)|0;
 $22 = (__Znam($20)|0);
 $23 = HEAP8[$5>>0]|0;
 $24 = ($23<<24>>24)<(0);
 if ($24) {
  $25 = HEAP32[$1>>2]|0;
  $26 = $25;
 } else {
  $26 = $1;
 }
 (_strcpy($13,$26)|0);
 $27 = HEAP8[$14>>0]|0;
 $28 = ($27<<24>>24)<(0);
 if ($28) {
  $29 = HEAP32[$2>>2]|0;
  $30 = $29;
 } else {
  $30 = $2;
 }
 (_strcpy($22,$30)|0);
 $31 = HEAP32[$0>>2]|0;
 $32 = (_EN_init($31,$13,$22,$3,$4)|0);
 $33 = ($13|0)==(0|0);
 if (!($33)) {
  __ZdaPv($13);
 }
 $34 = ($22|0)==(0|0);
 if ($34) {
  return ($32|0);
 }
 __ZdaPv($22);
 return ($32|0);
}
function __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEES9_iiEE6invokeIS2_JEEEvPKcSB_($0,$$01,$$12) {
 $0 = $0|0;
 $$01 = $$01|0;
 $$12 = $$12|0;
 var $$repack4 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $$01;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$12;
 $2 = (__ZN10emscripten8internal10getContextIM6EpanetFiNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEES9_iiEEEPT_RKSC_($1)|0);
 __embind_register_class_function((2512|0),($0|0),6,(1920|0),(16553|0),(161|0),($2|0),0);
 STACKTOP = sp;return;
}
function __ZN6Epanet8getcountEim($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $2;
 $4 = HEAP32[$0>>2]|0;
 $5 = (_EN_getcount($4,$1,$3)|0);
 return ($5|0);
}
function __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiimEE6invokeIS2_JEEEvPKcS4_($0,$$01,$$12) {
 $0 = $0|0;
 $$01 = $$01|0;
 $$12 = $$12|0;
 var $$repack4 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $$01;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$12;
 $2 = (__ZN10emscripten8internal10getContextIM6EpanetFiimEEEPT_RKS5_($1)|0);
 __embind_register_class_function((2512|0),($0|0),4,(1904|0),(16706|0),(162|0),($2|0),0);
 STACKTOP = sp;return;
}
function __ZN6Epanet8gettitleElll($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = HEAP32[$0>>2]|0;
 $8 = (_EN_gettitle($7,$4,$5,$6)|0);
 return ($8|0);
}
function __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFilllEE6invokeIS2_JEEEvPKcS4_($0,$$01,$$12) {
 $0 = $0|0;
 $$01 = $$01|0;
 $$12 = $$12|0;
 var $$repack4 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $$01;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$12;
 $2 = (__ZN10emscripten8internal10getContextIM6EpanetFilllEEEPT_RKS5_($1)|0);
 __embind_register_class_function((2512|0),($0|0),5,(1872|0),(16546|0),(163|0),($2|0),0);
 STACKTOP = sp;return;
}
function __ZN6Epanet8settitleENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES6_S6_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 11|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)<(0);
 if ($6) {
  $7 = ((($1)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $11 = $8;
 } else {
  $9 = $5&255;
  $11 = $9;
 }
 $10 = (($11) + 1)|0;
 $12 = (__Znam($10)|0);
 $13 = ((($2)) + 11|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = ($14<<24>>24)<(0);
 if ($15) {
  $16 = ((($2)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $20 = $17;
 } else {
  $18 = $14&255;
  $20 = $18;
 }
 $19 = (($20) + 1)|0;
 $21 = (__Znam($19)|0);
 $22 = ((($3)) + 11|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = ($23<<24>>24)<(0);
 if ($24) {
  $25 = ((($3)) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  $29 = $26;
 } else {
  $27 = $23&255;
  $29 = $27;
 }
 $28 = (($29) + 1)|0;
 $30 = (__Znam($28)|0);
 $31 = HEAP8[$4>>0]|0;
 $32 = ($31<<24>>24)<(0);
 if ($32) {
  $33 = HEAP32[$1>>2]|0;
  $34 = $33;
 } else {
  $34 = $1;
 }
 (_strcpy($12,$34)|0);
 $35 = HEAP8[$13>>0]|0;
 $36 = ($35<<24>>24)<(0);
 if ($36) {
  $37 = HEAP32[$2>>2]|0;
  $38 = $37;
 } else {
  $38 = $2;
 }
 (_strcpy($21,$38)|0);
 $39 = HEAP8[$22>>0]|0;
 $40 = ($39<<24>>24)<(0);
 if ($40) {
  $41 = HEAP32[$3>>2]|0;
  $42 = $41;
 } else {
  $42 = $3;
 }
 (_strcpy($30,$42)|0);
 $43 = HEAP32[$0>>2]|0;
 $44 = (_EN_settitle($43,$12,$21,$30)|0);
 $45 = ($12|0)==(0|0);
 if (!($45)) {
  __ZdaPv($12);
 }
 $46 = ($21|0)==(0|0);
 if (!($46)) {
  __ZdaPv($21);
 }
 $47 = ($30|0)==(0|0);
 if ($47) {
  return ($44|0);
 }
 __ZdaPv($30);
 return ($44|0);
}
function __ZN6Epanet11saveinpfileENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 11|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)<(0);
 if ($4) {
  $5 = ((($1)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $9 = $6;
 } else {
  $7 = $3&255;
  $9 = $7;
 }
 $8 = (($9) + 1)|0;
 $10 = (__Znam($8)|0);
 $11 = HEAP8[$2>>0]|0;
 $12 = ($11<<24>>24)<(0);
 if ($12) {
  $13 = HEAP32[$1>>2]|0;
  $14 = $13;
 } else {
  $14 = $1;
 }
 (_strcpy($10,$14)|0);
 $15 = HEAP32[$0>>2]|0;
 $16 = (_EN_saveinpfile($15,$10)|0);
 $17 = ($10|0)==(0|0);
 if ($17) {
  return ($16|0);
 }
 __ZdaPv($10);
 return ($16|0);
}
function __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEE6invokeIS2_JEEEvPKcSB_($0,$$01,$$12) {
 $0 = $0|0;
 $$01 = $$01|0;
 $$12 = $$12|0;
 var $$repack4 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $$01;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$12;
 $2 = (__ZN10emscripten8internal10getContextIM6EpanetFiNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEPT_RKSC_($1)|0);
 __embind_register_class_function((2512|0),($0|0),3,(3512|0),(16733|0),(164|0),($2|0),0);
 STACKTOP = sp;return;
}
function __ZN6Epanet6solveHEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = (_EN_solveH($1)|0);
 return ($2|0);
}
function __ZN6Epanet10usehydfileENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 11|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)<(0);
 if ($4) {
  $5 = ((($1)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $9 = $6;
 } else {
  $7 = $3&255;
  $9 = $7;
 }
 $8 = (($9) + 1)|0;
 $10 = (__Znam($8)|0);
 $11 = HEAP8[$2>>0]|0;
 $12 = ($11<<24>>24)<(0);
 if ($12) {
  $13 = HEAP32[$1>>2]|0;
  $14 = $13;
 } else {
  $14 = $1;
 }
 (_strcpy($10,$14)|0);
 $15 = HEAP32[$0>>2]|0;
 $16 = (_EN_usehydfile($15,$10)|0);
 $17 = ($10|0)==(0|0);
 if ($17) {
  return ($16|0);
 }
 __ZdaPv($10);
 return ($16|0);
}
function __ZN6Epanet5openHEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = (_EN_openH($1)|0);
 return ($2|0);
}
function __ZN6Epanet5initHEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = (_EN_initH($2,$1)|0);
 return ($3|0);
}
function __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiiEE6invokeIS2_JEEEvPKcS4_($0,$$01,$$12) {
 $0 = $0|0;
 $$01 = $$01|0;
 $$12 = $$12|0;
 var $$repack4 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $$01;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$12;
 $2 = (__ZN10emscripten8internal10getContextIM6EpanetFiiEEEPT_RKS5_($1)|0);
 __embind_register_class_function((2512|0),($0|0),3,(3500|0),(16733|0),(165|0),($2|0),0);
 STACKTOP = sp;return;
}
function __ZN6Epanet4runHEm($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1;
 $3 = HEAP32[$0>>2]|0;
 $4 = (_EN_runH($3,$2)|0);
 return ($4|0);
}
function __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFimEE6invokeIS2_JEEEvPKcS4_($0,$$01,$$12) {
 $0 = $0|0;
 $$01 = $$01|0;
 $$12 = $$12|0;
 var $$repack4 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $$01;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$12;
 $2 = (__ZN10emscripten8internal10getContextIM6EpanetFimEEEPT_RKS5_($1)|0);
 __embind_register_class_function((2512|0),($0|0),3,(3488|0),(16733|0),(166|0),($2|0),0);
 STACKTOP = sp;return;
}
function __ZN6Epanet5nextHEm($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1;
 $3 = HEAP32[$0>>2]|0;
 $4 = (_EN_nextH($3,$2)|0);
 return ($4|0);
}
function __ZN6Epanet5saveHEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = (_EN_saveH($1)|0);
 return ($2|0);
}
function __ZN6Epanet11savehydfileENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 11|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)<(0);
 if ($4) {
  $5 = ((($1)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $9 = $6;
 } else {
  $7 = $3&255;
  $9 = $7;
 }
 $8 = (($9) + 1)|0;
 $10 = (__Znam($8)|0);
 $11 = HEAP8[$2>>0]|0;
 $12 = ($11<<24>>24)<(0);
 if ($12) {
  $13 = HEAP32[$1>>2]|0;
  $14 = $13;
 } else {
  $14 = $1;
 }
 (_strcpy($10,$14)|0);
 $15 = HEAP32[$0>>2]|0;
 $16 = (_EN_savehydfile($15,$10)|0);
 $17 = ($10|0)==(0|0);
 if ($17) {
  return ($16|0);
 }
 __ZdaPv($10);
 return ($16|0);
}
function __ZN6Epanet6closeHEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = (_EN_closeH($1)|0);
 return ($2|0);
}
function __ZN6Epanet6closeQEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = (_EN_closeQ($1)|0);
 return ($2|0);
}
function __ZN6Epanet5initQEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = (_EN_initQ($2,$1)|0);
 return ($3|0);
}
function __ZN6Epanet5nextQEm($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1;
 $3 = HEAP32[$0>>2]|0;
 $4 = (_EN_nextQ($3,$2)|0);
 return ($4|0);
}
function __ZN6Epanet5openQEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = (_EN_openQ($1)|0);
 return ($2|0);
}
function __ZN6Epanet4runQEm($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1;
 $3 = HEAP32[$0>>2]|0;
 $4 = (_EN_runQ($3,$2)|0);
 return ($4|0);
}
function __ZN6Epanet6solveQEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = (_EN_solveQ($1)|0);
 return ($2|0);
}
function __ZN6Epanet5stepQEm($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1;
 $3 = HEAP32[$0>>2]|0;
 $4 = (_EN_stepQ($3,$2)|0);
 return ($4|0);
}
function __ZN6Epanet11clearreportEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = (_EN_clearreport($1)|0);
 return ($2|0);
}
function __ZN6Epanet10copyreportENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 11|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)<(0);
 if ($4) {
  $5 = ((($1)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $9 = $6;
 } else {
  $7 = $3&255;
  $9 = $7;
 }
 $8 = (($9) + 1)|0;
 $10 = (__Znam($8)|0);
 $11 = HEAP8[$2>>0]|0;
 $12 = ($11<<24>>24)<(0);
 if ($12) {
  $13 = HEAP32[$1>>2]|0;
  $14 = $13;
 } else {
  $14 = $1;
 }
 (_strcpy($10,$14)|0);
 $15 = HEAP32[$0>>2]|0;
 $16 = (_EN_copyreport($15,$10)|0);
 $17 = ($10|0)==(0|0);
 if ($17) {
  return ($16|0);
 }
 __ZdaPv($10);
 return ($16|0);
}
function __ZN6Epanet14getresultindexEiil($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $3;
 $5 = HEAP32[$0>>2]|0;
 $6 = (_EN_getresultindex($5,$1,$2,$4)|0);
 return ($6|0);
}
function __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiiilEE6invokeIS2_JEEEvPKcS4_($0,$$01,$$12) {
 $0 = $0|0;
 $$01 = $$01|0;
 $$12 = $$12|0;
 var $$repack4 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $$01;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$12;
 $2 = (__ZN10emscripten8internal10getContextIM6EpanetFiiilEEEPT_RKS5_($1)|0);
 __embind_register_class_function((2512|0),($0|0),5,(1840|0),(16546|0),(167|0),($2|0),0);
 STACKTOP = sp;return;
}
function __ZN6Epanet12getstatisticEil($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $2;
 $4 = HEAP32[$0>>2]|0;
 $5 = (_EN_getstatistic($4,$1,$3)|0);
 return ($5|0);
}
function __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiilEE6invokeIS2_JEEEvPKcS4_($0,$$01,$$12) {
 $0 = $0|0;
 $$01 = $$01|0;
 $$12 = $$12|0;
 var $$repack4 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $$01;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$12;
 $2 = (__ZN10emscripten8internal10getContextIM6EpanetFiilEEEPT_RKS5_($1)|0);
 __embind_register_class_function((2512|0),($0|0),4,(1824|0),(16706|0),(168|0),($2|0),0);
 STACKTOP = sp;return;
}
function __ZN6Epanet6reportEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = (_EN_report($1)|0);
 return ($2|0);
}
function __ZN6Epanet11resetreportEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = (_EN_resetreport($1)|0);
 return ($2|0);
}
function __ZN6Epanet9setreportENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 11|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)<(0);
 if ($4) {
  $5 = ((($1)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $9 = $6;
 } else {
  $7 = $3&255;
  $9 = $7;
 }
 $8 = (($9) + 1)|0;
 $10 = (__Znam($8)|0);
 $11 = HEAP8[$2>>0]|0;
 $12 = ($11<<24>>24)<(0);
 if ($12) {
  $13 = HEAP32[$1>>2]|0;
  $14 = $13;
 } else {
  $14 = $1;
 }
 (_strcpy($10,$14)|0);
 $15 = HEAP32[$0>>2]|0;
 $16 = (_EN_copyreport($15,$10)|0);
 $17 = ($10|0)==(0|0);
 if ($17) {
  return ($16|0);
 }
 __ZdaPv($10);
 return ($16|0);
}
function __ZN6Epanet15setstatusreportEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = (_EN_setstatusreport($2,$1)|0);
 return ($3|0);
}
function __ZN6Epanet9writelineENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 11|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)<(0);
 if ($4) {
  $5 = ((($1)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $9 = $6;
 } else {
  $7 = $3&255;
  $9 = $7;
 }
 $8 = (($9) + 1)|0;
 $10 = (__Znam($8)|0);
 $11 = HEAP8[$2>>0]|0;
 $12 = ($11<<24>>24)<(0);
 if ($12) {
  $13 = HEAP32[$1>>2]|0;
  $14 = $13;
 } else {
  $14 = $1;
 }
 (_strcpy($10,$14)|0);
 $15 = HEAP32[$0>>2]|0;
 $16 = (_EN_writeline($15,$10)|0);
 $17 = ($10|0)==(0|0);
 if ($17) {
  return ($16|0);
 }
 __ZdaPv($10);
 return ($16|0);
}
function __ZN6Epanet12getflowunitsEm($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1;
 $3 = HEAP32[$0>>2]|0;
 $4 = (_EN_getflowunits($3,$2)|0);
 return ($4|0);
}
function __ZN6Epanet9getoptionEim($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $2;
 $4 = HEAP32[$0>>2]|0;
 $5 = (_EN_getoption($4,$1,$3)|0);
 return ($5|0);
}
function __ZN6Epanet11getqualinfoEmmmm($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 $9 = HEAP32[$0>>2]|0;
 _EN_getqualinfo($9,$5,$6,$7,$8);
 return 0;
}
function __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFimmmmEE6invokeIS2_JEEEvPKcS4_($0,$$01,$$12) {
 $0 = $0|0;
 $$01 = $$01|0;
 $$12 = $$12|0;
 var $$repack4 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $$01;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$12;
 $2 = (__ZN10emscripten8internal10getContextIM6EpanetFimmmmEEEPT_RKS5_($1)|0);
 __embind_register_class_function((2512|0),($0|0),6,(1792|0),(16553|0),(169|0),($2|0),0);
 STACKTOP = sp;return;
}
function __ZN6Epanet11getqualtypeEmm($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1;
 $4 = $2;
 $5 = HEAP32[$0>>2]|0;
 $6 = (_EN_getqualtype($5,$3,$4)|0);
 return ($6|0);
}
function __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFimmEE6invokeIS2_JEEEvPKcS4_($0,$$01,$$12) {
 $0 = $0|0;
 $$01 = $$01|0;
 $$12 = $$12|0;
 var $$repack4 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $$01;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$12;
 $2 = (__ZN10emscripten8internal10getContextIM6EpanetFimmEEEPT_RKS5_($1)|0);
 __embind_register_class_function((2512|0),($0|0),4,(1776|0),(16706|0),(170|0),($2|0),0);
 STACKTOP = sp;return;
}
function __ZN6Epanet12gettimeparamEim($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $2;
 $4 = HEAP32[$0>>2]|0;
 $5 = (_EN_gettimeparam($4,$1,$3)|0);
 return ($5|0);
}
function __ZN6Epanet12setflowunitsEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = (_EN_setflowunits($2,$1)|0);
 return ($3|0);
}
function __ZN6Epanet9setoptionEid($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = (_EN_setoption($3,$1,$2)|0);
 return ($4|0);
}
function __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiidEE6invokeIS2_JEEEvPKcS4_($0,$$01,$$12) {
 $0 = $0|0;
 $$01 = $$01|0;
 $$12 = $$12|0;
 var $$repack4 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $$01;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$12;
 $2 = (__ZN10emscripten8internal10getContextIM6EpanetFiidEEEPT_RKS5_($1)|0);
 __embind_register_class_function((2512|0),($0|0),4,(1760|0),(16727|0),(171|0),($2|0),0);
 STACKTOP = sp;return;
}
function __ZN6Epanet11setqualtypeEiNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES6_S6_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($2)) + 11|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)<(0);
 if ($7) {
  $8 = ((($2)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $12 = $9;
 } else {
  $10 = $6&255;
  $12 = $10;
 }
 $11 = (($12) + 1)|0;
 $13 = (__Znam($11)|0);
 $14 = ((($3)) + 11|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = ($15<<24>>24)<(0);
 if ($16) {
  $17 = ((($3)) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  $21 = $18;
 } else {
  $19 = $15&255;
  $21 = $19;
 }
 $20 = (($21) + 1)|0;
 $22 = (__Znam($20)|0);
 $23 = ((($4)) + 11|0);
 $24 = HEAP8[$23>>0]|0;
 $25 = ($24<<24>>24)<(0);
 if ($25) {
  $26 = ((($4)) + 4|0);
  $27 = HEAP32[$26>>2]|0;
  $30 = $27;
 } else {
  $28 = $24&255;
  $30 = $28;
 }
 $29 = (($30) + 1)|0;
 $31 = (__Znam($29)|0);
 $32 = HEAP8[$5>>0]|0;
 $33 = ($32<<24>>24)<(0);
 if ($33) {
  $34 = HEAP32[$2>>2]|0;
  $35 = $34;
 } else {
  $35 = $2;
 }
 (_strcpy($13,$35)|0);
 $36 = HEAP8[$14>>0]|0;
 $37 = ($36<<24>>24)<(0);
 if ($37) {
  $38 = HEAP32[$3>>2]|0;
  $39 = $38;
 } else {
  $39 = $3;
 }
 (_strcpy($22,$39)|0);
 $40 = HEAP8[$23>>0]|0;
 $41 = ($40<<24>>24)<(0);
 if ($41) {
  $42 = HEAP32[$4>>2]|0;
  $43 = $42;
 } else {
  $43 = $4;
 }
 (_strcpy($31,$43)|0);
 $44 = HEAP32[$0>>2]|0;
 $45 = (_EN_setqualtype($44,$1,$13,$22,$31)|0);
 $46 = ($13|0)==(0|0);
 if (!($46)) {
  __ZdaPv($13);
 }
 $47 = ($22|0)==(0|0);
 if (!($47)) {
  __ZdaPv($22);
 }
 $48 = ($31|0)==(0|0);
 if ($48) {
  return ($45|0);
 }
 __ZdaPv($31);
 return ($45|0);
}
function __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiiNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEES9_S9_EE6invokeIS2_JEEEvPKcSB_($0,$$01,$$12) {
 $0 = $0|0;
 $$01 = $$01|0;
 $$12 = $$12|0;
 var $$repack4 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $$01;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$12;
 $2 = (__ZN10emscripten8internal10getContextIM6EpanetFiiNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEES9_S9_EEEPT_RKSC_($1)|0);
 __embind_register_class_function((2512|0),($0|0),6,(1728|0),(16553|0),(172|0),($2|0),0);
 STACKTOP = sp;return;
}
function __ZN6Epanet12settimeparamEil($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = (_EN_settimeparam($3,$1,$2)|0);
 return ($4|0);
}
function __ZN6Epanet7addnodeENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEil($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $3;
 $5 = ((($1)) + 11|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)<(0);
 if ($7) {
  $8 = ((($1)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $12 = $9;
 } else {
  $10 = $6&255;
  $12 = $10;
 }
 $11 = (($12) + 1)|0;
 $13 = (__Znam($11)|0);
 $14 = HEAP8[$5>>0]|0;
 $15 = ($14<<24>>24)<(0);
 if ($15) {
  $16 = HEAP32[$1>>2]|0;
  $17 = $16;
 } else {
  $17 = $1;
 }
 (_strcpy($13,$17)|0);
 $18 = HEAP32[$0>>2]|0;
 $19 = (_EN_addnode($18,$13,$2,$4)|0);
 $20 = ($13|0)==(0|0);
 if ($20) {
  return ($19|0);
 }
 __ZdaPv($13);
 return ($19|0);
}
function __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEilEE6invokeIS2_JEEEvPKcSB_($0,$$01,$$12) {
 $0 = $0|0;
 $$01 = $$01|0;
 $$12 = $$12|0;
 var $$repack4 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $$01;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$12;
 $2 = (__ZN10emscripten8internal10getContextIM6EpanetFiNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEilEEEPT_RKSC_($1)|0);
 __embind_register_class_function((2512|0),($0|0),5,(1696|0),(16546|0),(173|0),($2|0),0);
 STACKTOP = sp;return;
}
function __ZN6Epanet10deletenodeEii($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = (_EN_deletenode($3,$1,$2)|0);
 return ($4|0);
}
function __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiiiEE6invokeIS2_JEEEvPKcS4_($0,$$01,$$12) {
 $0 = $0|0;
 $$01 = $$01|0;
 $$12 = $$12|0;
 var $$repack4 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $$01;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$12;
 $2 = (__ZN10emscripten8internal10getContextIM6EpanetFiiiEEEPT_RKS5_($1)|0);
 __embind_register_class_function((2512|0),($0|0),4,(1680|0),(16706|0),(174|0),($2|0),0);
 STACKTOP = sp;return;
}
function __ZN6Epanet8getcoordEill($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $2;
 $5 = $3;
 $6 = HEAP32[$0>>2]|0;
 $7 = (_EN_getcoord($6,$1,$4,$5)|0);
 return ($7|0);
}
function __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiillEE6invokeIS2_JEEEvPKcS4_($0,$$01,$$12) {
 $0 = $0|0;
 $$01 = $$01|0;
 $$12 = $$12|0;
 var $$repack4 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $$01;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$12;
 $2 = (__ZN10emscripten8internal10getContextIM6EpanetFiillEEEPT_RKS5_($1)|0);
 __embind_register_class_function((2512|0),($0|0),5,(1648|0),(16546|0),(175|0),($2|0),0);
 STACKTOP = sp;return;
}
function __ZN6Epanet9getnodeidEil($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $2;
 $4 = HEAP32[$0>>2]|0;
 $5 = (_EN_getnodeid($4,$1,$3)|0);
 return ($5|0);
}
function __ZN6Epanet12getnodeindexENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEl($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $2;
 $4 = ((($1)) + 11|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)<(0);
 if ($6) {
  $7 = ((($1)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $11 = $8;
 } else {
  $9 = $5&255;
  $11 = $9;
 }
 $10 = (($11) + 1)|0;
 $12 = (__Znam($10)|0);
 $13 = HEAP8[$4>>0]|0;
 $14 = ($13<<24>>24)<(0);
 if ($14) {
  $15 = HEAP32[$1>>2]|0;
  $16 = $15;
 } else {
  $16 = $1;
 }
 (_strcpy($12,$16)|0);
 $17 = HEAP32[$0>>2]|0;
 $18 = (_EN_getnodeindex($17,$12,$3)|0);
 $19 = ($12|0)==(0|0);
 if ($19) {
  return ($18|0);
 }
 __ZdaPv($12);
 return ($18|0);
}
function __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEElEE6invokeIS2_JEEEvPKcSB_($0,$$01,$$12) {
 $0 = $0|0;
 $$01 = $$01|0;
 $$12 = $$12|0;
 var $$repack4 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $$01;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$12;
 $2 = (__ZN10emscripten8internal10getContextIM6EpanetFiNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEElEEEPT_RKSC_($1)|0);
 __embind_register_class_function((2512|0),($0|0),4,(1632|0),(16706|0),(176|0),($2|0),0);
 STACKTOP = sp;return;
}
function __ZN6Epanet11getnodetypeEil($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $2;
 $4 = HEAP32[$0>>2]|0;
 $5 = (_EN_getnodetype($4,$1,$3)|0);
 return ($5|0);
}
function __ZN6Epanet12getnodevalueEiil($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $3;
 $5 = HEAP32[$0>>2]|0;
 $6 = (_EN_getnodevalue($5,$1,$2,$4)|0);
 return ($6|0);
}
function __ZN6Epanet8setcoordEidd($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = +$3;
 var $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP32[$0>>2]|0;
 $5 = (_EN_setcoord($4,$1,$2,$3)|0);
 return ($5|0);
}
function __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiiddEE6invokeIS2_JEEEvPKcS4_($0,$$01,$$12) {
 $0 = $0|0;
 $$01 = $$01|0;
 $$12 = $$12|0;
 var $$repack4 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $$01;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$12;
 $2 = (__ZN10emscripten8internal10getContextIM6EpanetFiiddEEEPT_RKS5_($1)|0);
 __embind_register_class_function((2512|0),($0|0),5,(1600|0),(16720|0),(177|0),($2|0),0);
 STACKTOP = sp;return;
}
function __ZN6Epanet11setjuncdataEiddNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = +$3;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($4)) + 11|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)<(0);
 if ($7) {
  $8 = ((($4)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $12 = $9;
 } else {
  $10 = $6&255;
  $12 = $10;
 }
 $11 = (($12) + 1)|0;
 $13 = (__Znam($11)|0);
 $14 = HEAP8[$5>>0]|0;
 $15 = ($14<<24>>24)<(0);
 if ($15) {
  $16 = HEAP32[$4>>2]|0;
  $17 = $16;
 } else {
  $17 = $4;
 }
 (_strcpy($13,$17)|0);
 $18 = HEAP32[$0>>2]|0;
 $19 = (_EN_setjuncdata($18,$1,$2,$3,$13)|0);
 $20 = ($13|0)==(0|0);
 if ($20) {
  return ($19|0);
 }
 __ZdaPv($13);
 return ($19|0);
}
function __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiiddNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEE6invokeIS2_JEEEvPKcSB_($0,$$01,$$12) {
 $0 = $0|0;
 $$01 = $$01|0;
 $$12 = $$12|0;
 var $$repack4 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $$01;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$12;
 $2 = (__ZN10emscripten8internal10getContextIM6EpanetFiiddNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEPT_RKSC_($1)|0);
 __embind_register_class_function((2512|0),($0|0),6,(1568|0),(16712|0),(178|0),($2|0),0);
 STACKTOP = sp;return;
}
function __ZN6Epanet9setnodeidEiNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 11|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)<(0);
 if ($5) {
  $6 = ((($2)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $10 = $7;
 } else {
  $8 = $4&255;
  $10 = $8;
 }
 $9 = (($10) + 1)|0;
 $11 = (__Znam($9)|0);
 $12 = HEAP8[$3>>0]|0;
 $13 = ($12<<24>>24)<(0);
 if ($13) {
  $14 = HEAP32[$2>>2]|0;
  $15 = $14;
 } else {
  $15 = $2;
 }
 (_strcpy($11,$15)|0);
 $16 = HEAP32[$0>>2]|0;
 $17 = (_EN_setnodeid($16,$1,$11)|0);
 $18 = ($11|0)==(0|0);
 if ($18) {
  return ($17|0);
 }
 __ZdaPv($11);
 return ($17|0);
}
function __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiiNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEE6invokeIS2_JEEEvPKcSB_($0,$$01,$$12) {
 $0 = $0|0;
 $$01 = $$01|0;
 $$12 = $$12|0;
 var $$repack4 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $$01;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$12;
 $2 = (__ZN10emscripten8internal10getContextIM6EpanetFiiNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEPT_RKSC_($1)|0);
 __embind_register_class_function((2512|0),($0|0),4,(1552|0),(16706|0),(179|0),($2|0),0);
 STACKTOP = sp;return;
}
function __ZN6Epanet12setnodevalueEiid($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 var $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP32[$0>>2]|0;
 $5 = (_EN_setnodevalue($4,$1,$2,$3)|0);
 return ($5|0);
}
function __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiiidEE6invokeIS2_JEEEvPKcS4_($0,$$01,$$12) {
 $0 = $0|0;
 $$01 = $$01|0;
 $$12 = $$12|0;
 var $$repack4 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $$01;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$12;
 $2 = (__ZN10emscripten8internal10getContextIM6EpanetFiiidEEEPT_RKS5_($1)|0);
 __embind_register_class_function((2512|0),($0|0),5,(1520|0),(16699|0),(180|0),($2|0),0);
 STACKTOP = sp;return;
}
function __ZN6Epanet11settankdataEiddddddNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 $6 = +$6;
 $7 = +$7;
 $8 = $8|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $9 = ((($8)) + 11|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = ($10<<24>>24)<(0);
 if ($11) {
  $12 = ((($8)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $16 = $13;
 } else {
  $14 = $10&255;
  $16 = $14;
 }
 $15 = (($16) + 1)|0;
 $17 = (__Znam($15)|0);
 $18 = HEAP8[$9>>0]|0;
 $19 = ($18<<24>>24)<(0);
 if ($19) {
  $20 = HEAP32[$8>>2]|0;
  $21 = $20;
 } else {
  $21 = $8;
 }
 (_strcpy($17,$21)|0);
 $22 = HEAP32[$0>>2]|0;
 $23 = (_EN_settankdata($22,$1,$2,$3,$4,$5,$6,$7,$17)|0);
 $24 = ($17|0)==(0|0);
 if ($24) {
  return ($23|0);
 }
 __ZdaPv($17);
 return ($23|0);
}
function __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiiddddddNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEE6invokeIS2_JEEEvPKcSB_($0,$$01,$$12) {
 $0 = $0|0;
 $$01 = $$01|0;
 $$12 = $$12|0;
 var $$repack4 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $$01;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$12;
 $2 = (__ZN10emscripten8internal10getContextIM6EpanetFiiddddddNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEPT_RKSC_($1)|0);
 __embind_register_class_function((2512|0),($0|0),10,(1472|0),(16687|0),(181|0),($2|0),0);
 STACKTOP = sp;return;
}
function __ZN6Epanet9adddemandEidNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES6_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($3)) + 11|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)<(0);
 if ($7) {
  $8 = ((($3)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $12 = $9;
 } else {
  $10 = $6&255;
  $12 = $10;
 }
 $11 = (($12) + 1)|0;
 $13 = (__Znam($11)|0);
 $14 = ((($4)) + 11|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = ($15<<24>>24)<(0);
 if ($16) {
  $17 = ((($4)) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  $21 = $18;
 } else {
  $19 = $15&255;
  $21 = $19;
 }
 $20 = (($21) + 1)|0;
 $22 = (__Znam($20)|0);
 $23 = HEAP8[$5>>0]|0;
 $24 = ($23<<24>>24)<(0);
 if ($24) {
  $25 = HEAP32[$3>>2]|0;
  $26 = $25;
 } else {
  $26 = $3;
 }
 (_strcpy($13,$26)|0);
 $27 = HEAP8[$14>>0]|0;
 $28 = ($27<<24>>24)<(0);
 if ($28) {
  $29 = HEAP32[$4>>2]|0;
  $30 = $29;
 } else {
  $30 = $4;
 }
 (_strcpy($22,$30)|0);
 $31 = HEAP32[$0>>2]|0;
 $32 = (_EN_adddemand($31,$1,$2,$13,$22)|0);
 $33 = ($13|0)==(0|0);
 if (!($33)) {
  __ZdaPv($13);
 }
 $34 = ($22|0)==(0|0);
 if ($34) {
  return ($32|0);
 }
 __ZdaPv($22);
 return ($32|0);
}
function __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiidNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEES9_EE6invokeIS2_JEEEvPKcSB_($0,$$01,$$12) {
 $0 = $0|0;
 $$01 = $$01|0;
 $$12 = $$12|0;
 var $$repack4 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $$01;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$12;
 $2 = (__ZN10emscripten8internal10getContextIM6EpanetFiidNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEES9_EEEPT_RKSC_($1)|0);
 __embind_register_class_function((2512|0),($0|0),6,(1440|0),(16679|0),(182|0),($2|0),0);
 STACKTOP = sp;return;
}
function __ZN6Epanet12deletedemandEii($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = (_EN_deletedemand($3,$1,$2)|0);
 return ($4|0);
}
function __ZN6Epanet13getbasedemandEiil($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $3;
 $5 = HEAP32[$0>>2]|0;
 $6 = (_EN_getbasedemand($5,$1,$2,$4)|0);
 return ($6|0);
}
function __ZN6Epanet14getdemandindexEiNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEl($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $3;
 $5 = ((($2)) + 11|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)<(0);
 if ($7) {
  $8 = ((($2)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $12 = $9;
 } else {
  $10 = $6&255;
  $12 = $10;
 }
 $11 = (($12) + 1)|0;
 $13 = (__Znam($11)|0);
 $14 = HEAP8[$5>>0]|0;
 $15 = ($14<<24>>24)<(0);
 if ($15) {
  $16 = HEAP32[$2>>2]|0;
  $17 = $16;
 } else {
  $17 = $2;
 }
 (_strcpy($13,$17)|0);
 $18 = HEAP32[$0>>2]|0;
 $19 = (_EN_getdemandindex($18,$1,$13,$4)|0);
 $20 = ($13|0)==(0|0);
 if ($20) {
  return ($19|0);
 }
 __ZdaPv($13);
 return ($19|0);
}
function __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiiNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEElEE6invokeIS2_JEEEvPKcSB_($0,$$01,$$12) {
 $0 = $0|0;
 $$01 = $$01|0;
 $$12 = $$12|0;
 var $$repack4 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $$01;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$12;
 $2 = (__ZN10emscripten8internal10getContextIM6EpanetFiiNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEElEEEPT_RKSC_($1)|0);
 __embind_register_class_function((2512|0),($0|0),5,(1408|0),(16546|0),(183|0),($2|0),0);
 STACKTOP = sp;return;
}
function __ZN6Epanet14getdemandmodelEllll($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 $9 = HEAP32[$0>>2]|0;
 _EN_getdemandmodel($9,$5,$6,$7,$8);
 return 0;
}
function __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFillllEE6invokeIS2_JEEEvPKcS4_($0,$$01,$$12) {
 $0 = $0|0;
 $$01 = $$01|0;
 $$12 = $$12|0;
 var $$repack4 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $$01;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$12;
 $2 = (__ZN10emscripten8internal10getContextIM6EpanetFillllEEEPT_RKS5_($1)|0);
 __embind_register_class_function((2512|0),($0|0),6,(1376|0),(16553|0),(184|0),($2|0),0);
 STACKTOP = sp;return;
}
function __ZN6Epanet13getdemandnameEiil($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $3;
 $5 = HEAP32[$0>>2]|0;
 $6 = (_EN_getdemandname($5,$1,$2,$4)|0);
 return ($6|0);
}
function __ZN6Epanet16getdemandpatternEiil($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $3;
 $5 = HEAP32[$0>>2]|0;
 $6 = (_EN_getdemandpattern($5,$1,$2,$4)|0);
 return ($6|0);
}
function __ZN6Epanet13getnumdemandsEil($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $2;
 $4 = HEAP32[$0>>2]|0;
 $5 = (_EN_getnumdemands($4,$1,$3)|0);
 return ($5|0);
}
function __ZN6Epanet13setbasedemandEiid($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 var $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP32[$0>>2]|0;
 $5 = (_EN_setbasedemand($4,$1,$2,$3)|0);
 return ($5|0);
}
function __ZN6Epanet14setdemandmodelEiddd($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 var $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = HEAP32[$0>>2]|0;
 $6 = (_EN_setdemandmodel($5,$1,$2,$3,$4)|0);
 return ($6|0);
}
function __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiidddEE6invokeIS2_JEEEvPKcS4_($0,$$01,$$12) {
 $0 = $0|0;
 $$01 = $$01|0;
 $$12 = $$12|0;
 var $$repack4 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $$01;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$12;
 $2 = (__ZN10emscripten8internal10getContextIM6EpanetFiidddEEEPT_RKS5_($1)|0);
 __embind_register_class_function((2512|0),($0|0),6,(1344|0),(16671|0),(185|0),($2|0),0);
 STACKTOP = sp;return;
}
function __ZN6Epanet13setdemandnameEiiNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($3)) + 11|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)<(0);
 if ($6) {
  $7 = ((($3)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $11 = $8;
 } else {
  $9 = $5&255;
  $11 = $9;
 }
 $10 = (($11) + 1)|0;
 $12 = (__Znam($10)|0);
 $13 = HEAP8[$4>>0]|0;
 $14 = ($13<<24>>24)<(0);
 if ($14) {
  $15 = HEAP32[$3>>2]|0;
  $16 = $15;
 } else {
  $16 = $3;
 }
 (_strcpy($12,$16)|0);
 $17 = HEAP32[$0>>2]|0;
 $18 = (_EN_setdemandname($17,$1,$2,$12)|0);
 $19 = ($12|0)==(0|0);
 if ($19) {
  return ($18|0);
 }
 __ZdaPv($12);
 return ($18|0);
}
function __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiiiNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEE6invokeIS2_JEEEvPKcSB_($0,$$01,$$12) {
 $0 = $0|0;
 $$01 = $$01|0;
 $$12 = $$12|0;
 var $$repack4 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $$01;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$12;
 $2 = (__ZN10emscripten8internal10getContextIM6EpanetFiiiNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEPT_RKSC_($1)|0);
 __embind_register_class_function((2512|0),($0|0),5,(1312|0),(16546|0),(186|0),($2|0),0);
 STACKTOP = sp;return;
}
function __ZN6Epanet16setdemandpatternEiii($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP32[$0>>2]|0;
 $5 = (_EN_setdemandpattern($4,$1,$2,$3)|0);
 return ($5|0);
}
function __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiiiiEE6invokeIS2_JEEEvPKcS4_($0,$$01,$$12) {
 $0 = $0|0;
 $$01 = $$01|0;
 $$12 = $$12|0;
 var $$repack4 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $$01;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$12;
 $2 = (__ZN10emscripten8internal10getContextIM6EpanetFiiiiEEEPT_RKS5_($1)|0);
 __embind_register_class_function((2512|0),($0|0),5,(1280|0),(16546|0),(187|0),($2|0),0);
 STACKTOP = sp;return;
}
function __ZN6Epanet7addlinkENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEiS6_S6_l($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = $5;
 $7 = ((($1)) + 11|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = ($8<<24>>24)<(0);
 if ($9) {
  $10 = ((($1)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $14 = $11;
 } else {
  $12 = $8&255;
  $14 = $12;
 }
 $13 = (($14) + 1)|0;
 $15 = (__Znam($13)|0);
 $16 = ((($3)) + 11|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = ($17<<24>>24)<(0);
 if ($18) {
  $19 = ((($3)) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $23 = $20;
 } else {
  $21 = $17&255;
  $23 = $21;
 }
 $22 = (($23) + 1)|0;
 $24 = (__Znam($22)|0);
 $25 = ((($4)) + 11|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = ($26<<24>>24)<(0);
 if ($27) {
  $28 = ((($4)) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  $32 = $29;
 } else {
  $30 = $26&255;
  $32 = $30;
 }
 $31 = (($32) + 1)|0;
 $33 = (__Znam($31)|0);
 $34 = HEAP8[$7>>0]|0;
 $35 = ($34<<24>>24)<(0);
 if ($35) {
  $36 = HEAP32[$1>>2]|0;
  $37 = $36;
 } else {
  $37 = $1;
 }
 (_strcpy($15,$37)|0);
 $38 = HEAP8[$16>>0]|0;
 $39 = ($38<<24>>24)<(0);
 if ($39) {
  $40 = HEAP32[$3>>2]|0;
  $41 = $40;
 } else {
  $41 = $3;
 }
 (_strcpy($24,$41)|0);
 $42 = HEAP8[$25>>0]|0;
 $43 = ($42<<24>>24)<(0);
 if ($43) {
  $44 = HEAP32[$4>>2]|0;
  $45 = $44;
 } else {
  $45 = $4;
 }
 (_strcpy($33,$45)|0);
 $46 = HEAP32[$0>>2]|0;
 $47 = (_EN_addlink($46,$15,$2,$24,$33,$6)|0);
 $48 = ($15|0)==(0|0);
 if (!($48)) {
  __ZdaPv($15);
 }
 $49 = ($24|0)==(0|0);
 if (!($49)) {
  __ZdaPv($24);
 }
 $50 = ($33|0)==(0|0);
 if ($50) {
  return ($47|0);
 }
 __ZdaPv($33);
 return ($47|0);
}
function __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEiS9_S9_lEE6invokeIS2_JEEEvPKcSB_($0,$$01,$$12) {
 $0 = $0|0;
 $$01 = $$01|0;
 $$12 = $$12|0;
 var $$repack4 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $$01;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$12;
 $2 = (__ZN10emscripten8internal10getContextIM6EpanetFiNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEiS9_S9_lEEEPT_RKSC_($1)|0);
 __embind_register_class_function((2512|0),($0|0),7,(1248|0),(16486|0),(188|0),($2|0),0);
 STACKTOP = sp;return;
}
function __ZN6Epanet10deletelinkEii($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = (_EN_deletelink($3,$1,$2)|0);
 return ($4|0);
}
function __ZN6Epanet17getheadcurveindexEil($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $2;
 $4 = HEAP32[$0>>2]|0;
 $5 = (_EN_getheadcurveindex($4,$1,$3)|0);
 return ($5|0);
}
function __ZN6Epanet9getlinkidEil($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $2;
 $4 = HEAP32[$0>>2]|0;
 $5 = (_EN_getlinkid($4,$1,$3)|0);
 return ($5|0);
}
function __ZN6Epanet12getlinkindexENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEl($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $2;
 $4 = ((($1)) + 11|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)<(0);
 if ($6) {
  $7 = ((($1)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $11 = $8;
 } else {
  $9 = $5&255;
  $11 = $9;
 }
 $10 = (($11) + 1)|0;
 $12 = (__Znam($10)|0);
 $13 = HEAP8[$4>>0]|0;
 $14 = ($13<<24>>24)<(0);
 if ($14) {
  $15 = HEAP32[$1>>2]|0;
  $16 = $15;
 } else {
  $16 = $1;
 }
 (_strcpy($12,$16)|0);
 $17 = HEAP32[$0>>2]|0;
 $18 = (_EN_getlinkindex($17,$12,$3)|0);
 $19 = ($12|0)==(0|0);
 if ($19) {
  return ($18|0);
 }
 __ZdaPv($12);
 return ($18|0);
}
function __ZN6Epanet12getlinknodesEill($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $2;
 $5 = $3;
 $6 = HEAP32[$0>>2]|0;
 $7 = (_EN_getlinknodes($6,$1,$4,$5)|0);
 return ($7|0);
}
function __ZN6Epanet11getlinktypeEil($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $2;
 $4 = HEAP32[$0>>2]|0;
 $5 = (_EN_getlinktype($4,$1,$3)|0);
 return ($5|0);
}
function __ZN6Epanet12getlinkvalueEiil($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $3;
 $5 = HEAP32[$0>>2]|0;
 $6 = (_EN_getlinkvalue($5,$1,$2,$4)|0);
 return ($6|0);
}
function __ZN6Epanet11getpumptypeEil($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $2;
 $4 = HEAP32[$0>>2]|0;
 $5 = (_EN_getpumptype($4,$1,$3)|0);
 return ($5|0);
}
function __ZN6Epanet9getvertexEiill($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = $3;
 $6 = $4;
 $7 = HEAP32[$0>>2]|0;
 $8 = (_EN_getvertex($7,$1,$2,$5,$6)|0);
 return ($8|0);
}
function __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiiillEE6invokeIS2_JEEEvPKcS4_($0,$$01,$$12) {
 $0 = $0|0;
 $$01 = $$01|0;
 $$12 = $$12|0;
 var $$repack4 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $$01;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$12;
 $2 = (__ZN10emscripten8internal10getContextIM6EpanetFiiillEEEPT_RKS5_($1)|0);
 __embind_register_class_function((2512|0),($0|0),6,(1216|0),(16553|0),(189|0),($2|0),0);
 STACKTOP = sp;return;
}
function __ZN6Epanet14getvertexcountEil($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $2;
 $4 = HEAP32[$0>>2]|0;
 $5 = (_EN_getvertexcount($4,$1,$3)|0);
 return ($5|0);
}
function __ZN6Epanet17setheadcurveindexEii($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = (_EN_setheadcurveindex($3,$1,$2)|0);
 return ($4|0);
}
function __ZN6Epanet9setlinkidEiNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 11|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)<(0);
 if ($5) {
  $6 = ((($2)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $10 = $7;
 } else {
  $8 = $4&255;
  $10 = $8;
 }
 $9 = (($10) + 1)|0;
 $11 = (__Znam($9)|0);
 $12 = HEAP8[$3>>0]|0;
 $13 = ($12<<24>>24)<(0);
 if ($13) {
  $14 = HEAP32[$2>>2]|0;
  $15 = $14;
 } else {
  $15 = $2;
 }
 (_strcpy($11,$15)|0);
 $16 = HEAP32[$0>>2]|0;
 $17 = (_EN_setlinkid($16,$1,$11)|0);
 $18 = ($11|0)==(0|0);
 if ($18) {
  return ($17|0);
 }
 __ZdaPv($11);
 return ($17|0);
}
function __ZN6Epanet12setlinknodesEiii($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP32[$0>>2]|0;
 $5 = (_EN_setlinknodes($4,$1,$2,$3)|0);
 return ($5|0);
}
function __ZN6Epanet11setlinktypeElii($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $1;
 $5 = HEAP32[$0>>2]|0;
 $6 = (_EN_setlinktype($5,$4,$2,$3)|0);
 return ($6|0);
}
function __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiliiEE6invokeIS2_JEEEvPKcS4_($0,$$01,$$12) {
 $0 = $0|0;
 $$01 = $$01|0;
 $$12 = $$12|0;
 var $$repack4 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $$01;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$12;
 $2 = (__ZN10emscripten8internal10getContextIM6EpanetFiliiEEEPT_RKS5_($1)|0);
 __embind_register_class_function((2512|0),($0|0),5,(1184|0),(16546|0),(190|0),($2|0),0);
 STACKTOP = sp;return;
}
function __ZN6Epanet12setlinkvalueEiid($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 var $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP32[$0>>2]|0;
 $5 = (_EN_setlinkvalue($4,$1,$2,$3)|0);
 return ($5|0);
}
function __ZN6Epanet11setpipedataEidddd($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 var $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = HEAP32[$0>>2]|0;
 $7 = (_EN_setpipedata($6,$1,$2,$3,$4,$5)|0);
 return ($7|0);
}
function __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiiddddEE6invokeIS2_JEEEvPKcS4_($0,$$01,$$12) {
 $0 = $0|0;
 $$01 = $$01|0;
 $$12 = $$12|0;
 var $$repack4 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $$01;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$12;
 $2 = (__ZN10emscripten8internal10getContextIM6EpanetFiiddddEEEPT_RKS5_($1)|0);
 __embind_register_class_function((2512|0),($0|0),7,(1152|0),(16561|0),(191|0),($2|0),0);
 STACKTOP = sp;return;
}
function __ZN6Epanet11setverticesEilli($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = $2;
 $6 = $3;
 $7 = HEAP32[$0>>2]|0;
 $8 = (_EN_setvertices($7,$1,$5,$6,$4)|0);
 return ($8|0);
}
function __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiilliEE6invokeIS2_JEEEvPKcS4_($0,$$01,$$12) {
 $0 = $0|0;
 $$01 = $$01|0;
 $$12 = $$12|0;
 var $$repack4 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $$01;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$12;
 $2 = (__ZN10emscripten8internal10getContextIM6EpanetFiilliEEEPT_RKS5_($1)|0);
 __embind_register_class_function((2512|0),($0|0),6,(1120|0),(16553|0),(192|0),($2|0),0);
 STACKTOP = sp;return;
}
function __ZN6Epanet10addpatternENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 11|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)<(0);
 if ($4) {
  $5 = ((($1)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $9 = $6;
 } else {
  $7 = $3&255;
  $9 = $7;
 }
 $8 = (($9) + 1)|0;
 $10 = (__Znam($8)|0);
 $11 = HEAP8[$2>>0]|0;
 $12 = ($11<<24>>24)<(0);
 if ($12) {
  $13 = HEAP32[$1>>2]|0;
  $14 = $13;
 } else {
  $14 = $1;
 }
 (_strcpy($10,$14)|0);
 $15 = HEAP32[$0>>2]|0;
 $16 = (_EN_addpattern($15,$10)|0);
 $17 = ($10|0)==(0|0);
 if ($17) {
  return ($16|0);
 }
 __ZdaPv($10);
 return ($16|0);
}
function __ZN6Epanet13deletepatternEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = (_EN_deletepattern($2,$1)|0);
 return ($3|0);
}
function __ZN6Epanet22getaveragepatternvalueEil($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $2;
 $4 = HEAP32[$0>>2]|0;
 $5 = (_EN_getaveragepatternvalue($4,$1,$3)|0);
 return ($5|0);
}
function __ZN6Epanet12getpatternidEil($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $2;
 $4 = HEAP32[$0>>2]|0;
 $5 = (_EN_getpatternid($4,$1,$3)|0);
 return ($5|0);
}
function __ZN6Epanet15getpatternindexENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEl($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $2;
 $4 = ((($1)) + 11|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)<(0);
 if ($6) {
  $7 = ((($1)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $11 = $8;
 } else {
  $9 = $5&255;
  $11 = $9;
 }
 $10 = (($11) + 1)|0;
 $12 = (__Znam($10)|0);
 $13 = HEAP8[$4>>0]|0;
 $14 = ($13<<24>>24)<(0);
 if ($14) {
  $15 = HEAP32[$1>>2]|0;
  $16 = $15;
 } else {
  $16 = $1;
 }
 (_strcpy($12,$16)|0);
 $17 = HEAP32[$0>>2]|0;
 $18 = (_EN_getpatternindex($17,$12,$3)|0);
 $19 = ($12|0)==(0|0);
 if ($19) {
  return ($18|0);
 }
 __ZdaPv($12);
 return ($18|0);
}
function __ZN6Epanet13getpatternlenEil($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $2;
 $4 = HEAP32[$0>>2]|0;
 $5 = (_EN_getpatternlen($4,$1,$3)|0);
 return ($5|0);
}
function __ZN6Epanet15getpatternvalueEiil($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $3;
 $5 = HEAP32[$0>>2]|0;
 $6 = (_EN_getpatternvalue($5,$1,$2,$4)|0);
 return ($6|0);
}
function __ZN6Epanet10setpatternEili($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $2;
 $5 = HEAP32[$0>>2]|0;
 $6 = (_EN_setpattern($5,$1,$4,$3)|0);
 return ($6|0);
}
function __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiiliEE6invokeIS2_JEEEvPKcS4_($0,$$01,$$12) {
 $0 = $0|0;
 $$01 = $$01|0;
 $$12 = $$12|0;
 var $$repack4 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $$01;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$12;
 $2 = (__ZN10emscripten8internal10getContextIM6EpanetFiiliEEEPT_RKS5_($1)|0);
 __embind_register_class_function((2512|0),($0|0),5,(1088|0),(16546|0),(193|0),($2|0),0);
 STACKTOP = sp;return;
}
function __ZN6Epanet12setpatternidEiNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 11|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)<(0);
 if ($5) {
  $6 = ((($2)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $10 = $7;
 } else {
  $8 = $4&255;
  $10 = $8;
 }
 $9 = (($10) + 1)|0;
 $11 = (__Znam($9)|0);
 $12 = HEAP8[$3>>0]|0;
 $13 = ($12<<24>>24)<(0);
 if ($13) {
  $14 = HEAP32[$2>>2]|0;
  $15 = $14;
 } else {
  $15 = $2;
 }
 (_strcpy($11,$15)|0);
 $16 = HEAP32[$0>>2]|0;
 $17 = (_EN_setpatternid($16,$1,$11)|0);
 $18 = ($11|0)==(0|0);
 if ($18) {
  return ($17|0);
 }
 __ZdaPv($11);
 return ($17|0);
}
function __ZN6Epanet15setpatternvalueEiid($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 var $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP32[$0>>2]|0;
 $5 = (_EN_setpatternvalue($4,$1,$2,$3)|0);
 return ($5|0);
}
function __ZN6Epanet8addcurveENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 11|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)<(0);
 if ($4) {
  $5 = ((($1)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $9 = $6;
 } else {
  $7 = $3&255;
  $9 = $7;
 }
 $8 = (($9) + 1)|0;
 $10 = (__Znam($8)|0);
 $11 = HEAP8[$2>>0]|0;
 $12 = ($11<<24>>24)<(0);
 if ($12) {
  $13 = HEAP32[$1>>2]|0;
  $14 = $13;
 } else {
  $14 = $1;
 }
 (_strcpy($10,$14)|0);
 $15 = HEAP32[$0>>2]|0;
 $16 = (_EN_addcurve($15,$10)|0);
 $17 = ($10|0)==(0|0);
 if ($17) {
  return ($16|0);
 }
 __ZdaPv($10);
 return ($16|0);
}
function __ZN6Epanet11deletecurveEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = (_EN_deletecurve($2,$1)|0);
 return ($3|0);
}
function __ZN6Epanet10getcurveidEil($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $2;
 $4 = HEAP32[$0>>2]|0;
 $5 = (_EN_getcurveid($4,$1,$3)|0);
 return ($5|0);
}
function __ZN6Epanet13getcurveindexENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEl($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $2;
 $4 = ((($1)) + 11|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)<(0);
 if ($6) {
  $7 = ((($1)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $11 = $8;
 } else {
  $9 = $5&255;
  $11 = $9;
 }
 $10 = (($11) + 1)|0;
 $12 = (__Znam($10)|0);
 $13 = HEAP8[$4>>0]|0;
 $14 = ($13<<24>>24)<(0);
 if ($14) {
  $15 = HEAP32[$1>>2]|0;
  $16 = $15;
 } else {
  $16 = $1;
 }
 (_strcpy($12,$16)|0);
 $17 = HEAP32[$0>>2]|0;
 $18 = (_EN_getcurveindex($17,$12,$3)|0);
 $19 = ($12|0)==(0|0);
 if ($19) {
  return ($18|0);
 }
 __ZdaPv($12);
 return ($18|0);
}
function __ZN6Epanet11getcurvelenEil($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $2;
 $4 = HEAP32[$0>>2]|0;
 $5 = (_EN_getcurvelen($4,$1,$3)|0);
 return ($5|0);
}
function __ZN6Epanet12getcurvetypeEil($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $2;
 $4 = HEAP32[$0>>2]|0;
 $5 = (_EN_getcurvetype($4,$1,$3)|0);
 return ($5|0);
}
function __ZN6Epanet13getcurvevalueEiill($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = $3;
 $6 = $4;
 $7 = HEAP32[$0>>2]|0;
 $8 = (_EN_getcurvevalue($7,$1,$2,$5,$6)|0);
 return ($8|0);
}
function __ZN6Epanet8setcurveEilli($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = $2;
 $6 = $3;
 $7 = HEAP32[$0>>2]|0;
 $8 = (_EN_setcurve($7,$1,$5,$6,$4)|0);
 return ($8|0);
}
function __ZN6Epanet10setcurveidEiNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 11|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)<(0);
 if ($5) {
  $6 = ((($2)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $10 = $7;
 } else {
  $8 = $4&255;
  $10 = $8;
 }
 $9 = (($10) + 1)|0;
 $11 = (__Znam($9)|0);
 $12 = HEAP8[$3>>0]|0;
 $13 = ($12<<24>>24)<(0);
 if ($13) {
  $14 = HEAP32[$2>>2]|0;
  $15 = $14;
 } else {
  $15 = $2;
 }
 (_strcpy($11,$15)|0);
 $16 = HEAP32[$0>>2]|0;
 $17 = (_EN_setcurveid($16,$1,$11)|0);
 $18 = ($11|0)==(0|0);
 if ($18) {
  return ($17|0);
 }
 __ZdaPv($11);
 return ($17|0);
}
function __ZN6Epanet13setcurvevalueEiidd($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 $4 = +$4;
 var $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = HEAP32[$0>>2]|0;
 $6 = (_EN_setcurvevalue($5,$1,$2,$3,$4)|0);
 return ($6|0);
}
function __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiiiddEE6invokeIS2_JEEEvPKcS4_($0,$$01,$$12) {
 $0 = $0|0;
 $$01 = $$01|0;
 $$12 = $$12|0;
 var $$repack4 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $$01;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$12;
 $2 = (__ZN10emscripten8internal10getContextIM6EpanetFiiiddEEEPT_RKS5_($1)|0);
 __embind_register_class_function((2512|0),($0|0),6,(1056|0),(16538|0),(194|0),($2|0),0);
 STACKTOP = sp;return;
}
function __ZN6Epanet10addcontrolEiididl($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 $4 = $4|0;
 $5 = +$5;
 $6 = $6|0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $7 = $6;
 $8 = HEAP32[$0>>2]|0;
 $9 = (_EN_addcontrol($8,$1,$2,$3,$4,$5,$7)|0);
 return ($9|0);
}
function __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiiididlEE6invokeIS2_JEEEvPKcS4_($0,$$01,$$12) {
 $0 = $0|0;
 $$01 = $$01|0;
 $$12 = $$12|0;
 var $$repack4 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $$01;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$12;
 $2 = (__ZN10emscripten8internal10getContextIM6EpanetFiiididlEEEPT_RKS5_($1)|0);
 __embind_register_class_function((2512|0),($0|0),8,(1024|0),(16528|0),(195|0),($2|0),0);
 STACKTOP = sp;return;
}
function __ZN6Epanet13deletecontrolEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = (_EN_deletecontrol($2,$1)|0);
 return ($3|0);
}
function __ZN6Epanet10getcontrolEilllll($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = $5;
 $11 = $6;
 $12 = HEAP32[$0>>2]|0;
 $13 = (_EN_getcontrol($12,$1,$7,$8,$9,$10,$11)|0);
 return ($13|0);
}
function __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiilllllEE6invokeIS2_JEEEvPKcS4_($0,$$01,$$12) {
 $0 = $0|0;
 $$01 = $$01|0;
 $$12 = $$12|0;
 var $$repack4 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $$01;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$12;
 $2 = (__ZN10emscripten8internal10getContextIM6EpanetFiilllllEEEPT_RKS5_($1)|0);
 __embind_register_class_function((2512|0),($0|0),8,(992|0),(16518|0),(196|0),($2|0),0);
 STACKTOP = sp;return;
}
function __ZN6Epanet10setcontrolEiiidid($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = +$4;
 $5 = $5|0;
 $6 = +$6;
 var $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $7 = HEAP32[$0>>2]|0;
 $8 = (_EN_setcontrol($7,$1,$2,$3,$4,$5,$6)|0);
 return ($8|0);
}
function __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiiiididEE6invokeIS2_JEEEvPKcS4_($0,$$01,$$12) {
 $0 = $0|0;
 $$01 = $$01|0;
 $$12 = $$12|0;
 var $$repack4 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $$01;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$12;
 $2 = (__ZN10emscripten8internal10getContextIM6EpanetFiiiididEEEPT_RKS5_($1)|0);
 __embind_register_class_function((2512|0),($0|0),8,(960|0),(16508|0),(197|0),($2|0),0);
 STACKTOP = sp;return;
}
function __ZN6Epanet7addruleENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 11|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)<(0);
 if ($4) {
  $5 = ((($1)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $9 = $6;
 } else {
  $7 = $3&255;
  $9 = $7;
 }
 $8 = (($9) + 1)|0;
 $10 = (__Znam($8)|0);
 $11 = HEAP8[$2>>0]|0;
 $12 = ($11<<24>>24)<(0);
 if ($12) {
  $13 = HEAP32[$1>>2]|0;
  $14 = $13;
 } else {
  $14 = $1;
 }
 (_strcpy($10,$14)|0);
 $15 = HEAP32[$0>>2]|0;
 $16 = (_EN_addrule($15,$10)|0);
 $17 = ($10|0)==(0|0);
 if ($17) {
  return ($16|0);
 }
 __ZdaPv($10);
 return ($16|0);
}
function __ZN6Epanet10deleteruleEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = (_EN_deleterule($2,$1)|0);
 return ($3|0);
}
function __ZN6Epanet13getelseactionEiilll($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = $3;
 $7 = $4;
 $8 = $5;
 $9 = HEAP32[$0>>2]|0;
 $10 = (_EN_getelseaction($9,$1,$2,$6,$7,$8)|0);
 return ($10|0);
}
function __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiiilllEE6invokeIS2_JEEEvPKcS4_($0,$$01,$$12) {
 $0 = $0|0;
 $$01 = $$01|0;
 $$12 = $$12|0;
 var $$repack4 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $$01;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$12;
 $2 = (__ZN10emscripten8internal10getContextIM6EpanetFiiilllEEEPT_RKS5_($1)|0);
 __embind_register_class_function((2512|0),($0|0),7,(928|0),(16486|0),(198|0),($2|0),0);
 STACKTOP = sp;return;
}
function __ZN6Epanet10getpremiseEiilllllll($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $14 = $7;
 $15 = $8;
 $16 = $9;
 $17 = HEAP32[$0>>2]|0;
 $18 = (_EN_getpremise($17,$1,$2,$10,$11,$12,$13,$14,$15,$16)|0);
 return ($18|0);
}
function __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiiilllllllEE6invokeIS2_JEEEvPKcS4_($0,$$01,$$12) {
 $0 = $0|0;
 $$01 = $$01|0;
 $$12 = $$12|0;
 var $$repack4 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $$01;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$12;
 $2 = (__ZN10emscripten8internal10getContextIM6EpanetFiiilllllllEEEPT_RKS5_($1)|0);
 __embind_register_class_function((2512|0),($0|0),11,(880|0),(16495|0),(199|0),($2|0),0);
 STACKTOP = sp;return;
}
function __ZN6Epanet7getruleEillll($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 $9 = $5;
 $10 = HEAP32[$0>>2]|0;
 $11 = (_EN_getrule($10,$1,$6,$7,$8,$9)|0);
 return ($11|0);
}
function __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiillllEE6invokeIS2_JEEEvPKcS4_($0,$$01,$$12) {
 $0 = $0|0;
 $$01 = $$01|0;
 $$12 = $$12|0;
 var $$repack4 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $$01;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$12;
 $2 = (__ZN10emscripten8internal10getContextIM6EpanetFiillllEEEPT_RKS5_($1)|0);
 __embind_register_class_function((2512|0),($0|0),7,(848|0),(16486|0),(200|0),($2|0),0);
 STACKTOP = sp;return;
}
function __ZN6Epanet9getruleIDEil($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $2;
 $4 = HEAP32[$0>>2]|0;
 $5 = (_EN_getruleID($4,$1,$3)|0);
 return ($5|0);
}
function __ZN6Epanet13getthenactionEiilll($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = $3;
 $7 = $4;
 $8 = $5;
 $9 = HEAP32[$0>>2]|0;
 $10 = (_EN_getthenaction($9,$1,$2,$6,$7,$8)|0);
 return ($10|0);
}
function __ZN6Epanet13setelseactionEiiiid($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = +$5;
 var $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = HEAP32[$0>>2]|0;
 $7 = (_EN_setelseaction($6,$1,$2,$3,$4,$5)|0);
 return ($7|0);
}
function __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiiiiidEE6invokeIS2_JEEEvPKcS4_($0,$$01,$$12) {
 $0 = $0|0;
 $$01 = $$01|0;
 $$12 = $$12|0;
 var $$repack4 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $$01;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$12;
 $2 = (__ZN10emscripten8internal10getContextIM6EpanetFiiiiidEEEPT_RKS5_($1)|0);
 __embind_register_class_function((2512|0),($0|0),7,(816|0),(16477|0),(201|0),($2|0),0);
 STACKTOP = sp;return;
}
function __ZN6Epanet10setpremiseEiiiiiiiid($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = +$9;
 var $10 = 0, $11 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $10 = HEAP32[$0>>2]|0;
 $11 = (_EN_setpremise($10,$1,$2,$3,$4,$5,$6,$7,$8,$9)|0);
 return ($11|0);
}
function __ZN10emscripten8internal19RegisterClassMethodIM6EpanetFiiiiiiiiidEE6invokeIS2_JEEEvPKcS4_($0,$$01,$$12) {
 $0 = $0|0;
 $$01 = $$01|0;
 $$12 = $$12|0;
 var $$repack4 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $$01;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$12;
 $2 = (__ZN10emscripten8internal10getContextIM6EpanetFiiiiiiiiidEEEPT_RKS5_($1)|0);
 __embind_register_class_function((2512|0),($0|0),11,(768|0),(16447|0),(202|0),($2|0),0);
 STACKTOP = sp;return;
}
function __ZN6Epanet15setpremiseindexEiii($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP32[$0>>2]|0;
 $5 = (_EN_setpremiseindex($4,$1,$2,$3)|0);
 return ($5|0);
}
function __ZN6Epanet16setpremisestatusEiii($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP32[$0>>2]|0;
 $5 = (_EN_setpremisestatus($4,$1,$2,$3)|0);
 return ($5|0);
}
function __ZN6Epanet15setpremisevalueEiid($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 var $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP32[$0>>2]|0;
 $5 = (_EN_setpremisevalue($4,$1,$2,$3)|0);
 return ($5|0);
}
function __ZN6Epanet15setrulepriorityEid($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = (_EN_setrulepriority($3,$1,$2)|0);
 return ($4|0);
}
function __ZN6Epanet13setthenactionEiiiid($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = +$5;
 var $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = HEAP32[$0>>2]|0;
 $7 = (_EN_setthenaction($6,$1,$2,$3,$4,$5)|0);
 return ($7|0);
}
function __ZN10emscripten8internal13MethodInvokerIM6EpanetFiiiiiiiiidEiPS2_JiiiiiiiidEE6invokeERKS4_S5_iiiiiiiid($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = +$10;
 var $$elt1 = 0, $$unpack = 0, $$unpack2 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0.0, $29 = 0, $30 = 0, $31 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $11 = (__ZN10emscripten8internal11BindingTypeIP6EpanetvE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 $12 = $$unpack2 >> 1;
 $13 = (($1) + ($12)|0);
 $14 = $$unpack2 & 1;
 $15 = ($14|0)==(0);
 if ($15) {
  $19 = $$unpack;
  $29 = $19;
 } else {
  $16 = HEAP32[$13>>2]|0;
  $17 = (($16) + ($$unpack)|0);
  $18 = HEAP32[$17>>2]|0;
  $29 = $18;
 }
 $20 = (__ZN10emscripten8internal11BindingTypeIivE12fromWireTypeEi($2)|0);
 $21 = (__ZN10emscripten8internal11BindingTypeIivE12fromWireTypeEi($3)|0);
 $22 = (__ZN10emscripten8internal11BindingTypeIivE12fromWireTypeEi($4)|0);
 $23 = (__ZN10emscripten8internal11BindingTypeIivE12fromWireTypeEi($5)|0);
 $24 = (__ZN10emscripten8internal11BindingTypeIivE12fromWireTypeEi($6)|0);
 $25 = (__ZN10emscripten8internal11BindingTypeIivE12fromWireTypeEi($7)|0);
 $26 = (__ZN10emscripten8internal11BindingTypeIivE12fromWireTypeEi($8)|0);
 $27 = (__ZN10emscripten8internal11BindingTypeIivE12fromWireTypeEi($9)|0);
 $28 = (+__ZN10emscripten8internal11BindingTypeIdvE12fromWireTypeEd($10));
 $30 = (FUNCTION_TABLE_iiiiiiiiiid[$29 & 255]($13,$20,$21,$22,$23,$24,$25,$26,$27,$28)|0);
 $31 = (__ZN10emscripten8internal11BindingTypeIivE10toWireTypeERKi($30)|0);
 return ($31|0);
}
function __ZN10emscripten8internal10getContextIM6EpanetFiiiiiiiiidEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal11BindingTypeIP6EpanetvE12fromWireTypeES3_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal11BindingTypeIivE12fromWireTypeEi($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal11BindingTypeIdvE12fromWireTypeEd($0) {
 $0 = +$0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (+$0);
}
function __ZN10emscripten8internal11BindingTypeIivE10toWireTypeERKi($$val) {
 $$val = $$val|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($$val|0);
}
function __ZN10emscripten8internal13MethodInvokerIM6EpanetFiiiiidEiPS2_JiiiidEE6invokeERKS4_S5_iiiid($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = +$6;
 var $$elt1 = 0, $$unpack = 0, $$unpack2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $7 = (__ZN10emscripten8internal11BindingTypeIP6EpanetvE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 $8 = $$unpack2 >> 1;
 $9 = (($1) + ($8)|0);
 $10 = $$unpack2 & 1;
 $11 = ($10|0)==(0);
 if ($11) {
  $15 = $$unpack;
  $21 = $15;
 } else {
  $12 = HEAP32[$9>>2]|0;
  $13 = (($12) + ($$unpack)|0);
  $14 = HEAP32[$13>>2]|0;
  $21 = $14;
 }
 $16 = (__ZN10emscripten8internal11BindingTypeIivE12fromWireTypeEi($2)|0);
 $17 = (__ZN10emscripten8internal11BindingTypeIivE12fromWireTypeEi($3)|0);
 $18 = (__ZN10emscripten8internal11BindingTypeIivE12fromWireTypeEi($4)|0);
 $19 = (__ZN10emscripten8internal11BindingTypeIivE12fromWireTypeEi($5)|0);
 $20 = (+__ZN10emscripten8internal11BindingTypeIdvE12fromWireTypeEd($6));
 $22 = (FUNCTION_TABLE_iiiiiid[$21 & 255]($9,$16,$17,$18,$19,$20)|0);
 $23 = (__ZN10emscripten8internal11BindingTypeIivE10toWireTypeERKi($22)|0);
 return ($23|0);
}
function __ZN10emscripten8internal10getContextIM6EpanetFiiiiidEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIM6EpanetFiillllEiPS2_JillllEE6invokeERKS4_S5_illll($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$elt1 = 0, $$unpack = 0, $$unpack2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $7 = (__ZN10emscripten8internal11BindingTypeIP6EpanetvE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 $8 = $$unpack2 >> 1;
 $9 = (($1) + ($8)|0);
 $10 = $$unpack2 & 1;
 $11 = ($10|0)==(0);
 if ($11) {
  $15 = $$unpack;
  $21 = $15;
 } else {
  $12 = HEAP32[$9>>2]|0;
  $13 = (($12) + ($$unpack)|0);
  $14 = HEAP32[$13>>2]|0;
  $21 = $14;
 }
 $16 = (__ZN10emscripten8internal11BindingTypeIivE12fromWireTypeEi($2)|0);
 $17 = (__ZN10emscripten8internal11BindingTypeIlvE12fromWireTypeEl($3)|0);
 $18 = (__ZN10emscripten8internal11BindingTypeIlvE12fromWireTypeEl($4)|0);
 $19 = (__ZN10emscripten8internal11BindingTypeIlvE12fromWireTypeEl($5)|0);
 $20 = (__ZN10emscripten8internal11BindingTypeIlvE12fromWireTypeEl($6)|0);
 $22 = (FUNCTION_TABLE_iiiiiii[$21 & 255]($9,$16,$17,$18,$19,$20)|0);
 $23 = (__ZN10emscripten8internal11BindingTypeIivE10toWireTypeERKi($22)|0);
 return ($23|0);
}
function __ZN10emscripten8internal10getContextIM6EpanetFiillllEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal11BindingTypeIlvE12fromWireTypeEl($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal13MethodInvokerIM6EpanetFiiilllllllEiPS2_JiilllllllEE6invokeERKS4_S5_iilllllll($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 var $$elt1 = 0, $$unpack = 0, $$unpack2 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $11 = (__ZN10emscripten8internal11BindingTypeIP6EpanetvE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 $12 = $$unpack2 >> 1;
 $13 = (($1) + ($12)|0);
 $14 = $$unpack2 & 1;
 $15 = ($14|0)==(0);
 if ($15) {
  $19 = $$unpack;
  $29 = $19;
 } else {
  $16 = HEAP32[$13>>2]|0;
  $17 = (($16) + ($$unpack)|0);
  $18 = HEAP32[$17>>2]|0;
  $29 = $18;
 }
 $20 = (__ZN10emscripten8internal11BindingTypeIivE12fromWireTypeEi($2)|0);
 $21 = (__ZN10emscripten8internal11BindingTypeIivE12fromWireTypeEi($3)|0);
 $22 = (__ZN10emscripten8internal11BindingTypeIlvE12fromWireTypeEl($4)|0);
 $23 = (__ZN10emscripten8internal11BindingTypeIlvE12fromWireTypeEl($5)|0);
 $24 = (__ZN10emscripten8internal11BindingTypeIlvE12fromWireTypeEl($6)|0);
 $25 = (__ZN10emscripten8internal11BindingTypeIlvE12fromWireTypeEl($7)|0);
 $26 = (__ZN10emscripten8internal11BindingTypeIlvE12fromWireTypeEl($8)|0);
 $27 = (__ZN10emscripten8internal11BindingTypeIlvE12fromWireTypeEl($9)|0);
 $28 = (__ZN10emscripten8internal11BindingTypeIlvE12fromWireTypeEl($10)|0);
 $30 = (FUNCTION_TABLE_iiiiiiiiiii[$29 & 255]($13,$20,$21,$22,$23,$24,$25,$26,$27,$28)|0);
 $31 = (__ZN10emscripten8internal11BindingTypeIivE10toWireTypeERKi($30)|0);
 return ($31|0);
}
function __ZN10emscripten8internal10getContextIM6EpanetFiiilllllllEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIM6EpanetFiiilllEiPS2_JiilllEE6invokeERKS4_S5_iilll($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$elt1 = 0, $$unpack = 0, $$unpack2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $7 = (__ZN10emscripten8internal11BindingTypeIP6EpanetvE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 $8 = $$unpack2 >> 1;
 $9 = (($1) + ($8)|0);
 $10 = $$unpack2 & 1;
 $11 = ($10|0)==(0);
 if ($11) {
  $15 = $$unpack;
  $21 = $15;
 } else {
  $12 = HEAP32[$9>>2]|0;
  $13 = (($12) + ($$unpack)|0);
  $14 = HEAP32[$13>>2]|0;
  $21 = $14;
 }
 $16 = (__ZN10emscripten8internal11BindingTypeIivE12fromWireTypeEi($2)|0);
 $17 = (__ZN10emscripten8internal11BindingTypeIivE12fromWireTypeEi($3)|0);
 $18 = (__ZN10emscripten8internal11BindingTypeIlvE12fromWireTypeEl($4)|0);
 $19 = (__ZN10emscripten8internal11BindingTypeIlvE12fromWireTypeEl($5)|0);
 $20 = (__ZN10emscripten8internal11BindingTypeIlvE12fromWireTypeEl($6)|0);
 $22 = (FUNCTION_TABLE_iiiiiii[$21 & 255]($9,$16,$17,$18,$19,$20)|0);
 $23 = (__ZN10emscripten8internal11BindingTypeIivE10toWireTypeERKi($22)|0);
 return ($23|0);
}
function __ZN10emscripten8internal10getContextIM6EpanetFiiilllEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIM6EpanetFiiiididEiPS2_JiiididEE6invokeERKS4_S5_iiidid($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = +$5;
 $6 = $6|0;
 $7 = +$7;
 var $$elt1 = 0, $$unpack = 0, $$unpack2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $8 = (__ZN10emscripten8internal11BindingTypeIP6EpanetvE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 $9 = $$unpack2 >> 1;
 $10 = (($1) + ($9)|0);
 $11 = $$unpack2 & 1;
 $12 = ($11|0)==(0);
 if ($12) {
  $16 = $$unpack;
  $23 = $16;
 } else {
  $13 = HEAP32[$10>>2]|0;
  $14 = (($13) + ($$unpack)|0);
  $15 = HEAP32[$14>>2]|0;
  $23 = $15;
 }
 $17 = (__ZN10emscripten8internal11BindingTypeIivE12fromWireTypeEi($2)|0);
 $18 = (__ZN10emscripten8internal11BindingTypeIivE12fromWireTypeEi($3)|0);
 $19 = (__ZN10emscripten8internal11BindingTypeIivE12fromWireTypeEi($4)|0);
 $20 = (+__ZN10emscripten8internal11BindingTypeIdvE12fromWireTypeEd($5));
 $21 = (__ZN10emscripten8internal11BindingTypeIivE12fromWireTypeEi($6)|0);
 $22 = (+__ZN10emscripten8internal11BindingTypeIdvE12fromWireTypeEd($7));
 $24 = (FUNCTION_TABLE_iiiiidid[$23 & 255]($10,$17,$18,$19,$20,$21,$22)|0);
 $25 = (__ZN10emscripten8internal11BindingTypeIivE10toWireTypeERKi($24)|0);
 return ($25|0);
}
function __ZN10emscripten8internal10getContextIM6EpanetFiiiididEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIM6EpanetFiilllllEiPS2_JilllllEE6invokeERKS4_S5_illlll($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$elt1 = 0, $$unpack = 0, $$unpack2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $8 = (__ZN10emscripten8internal11BindingTypeIP6EpanetvE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 $9 = $$unpack2 >> 1;
 $10 = (($1) + ($9)|0);
 $11 = $$unpack2 & 1;
 $12 = ($11|0)==(0);
 if ($12) {
  $16 = $$unpack;
  $23 = $16;
 } else {
  $13 = HEAP32[$10>>2]|0;
  $14 = (($13) + ($$unpack)|0);
  $15 = HEAP32[$14>>2]|0;
  $23 = $15;
 }
 $17 = (__ZN10emscripten8internal11BindingTypeIivE12fromWireTypeEi($2)|0);
 $18 = (__ZN10emscripten8internal11BindingTypeIlvE12fromWireTypeEl($3)|0);
 $19 = (__ZN10emscripten8internal11BindingTypeIlvE12fromWireTypeEl($4)|0);
 $20 = (__ZN10emscripten8internal11BindingTypeIlvE12fromWireTypeEl($5)|0);
 $21 = (__ZN10emscripten8internal11BindingTypeIlvE12fromWireTypeEl($6)|0);
 $22 = (__ZN10emscripten8internal11BindingTypeIlvE12fromWireTypeEl($7)|0);
 $24 = (FUNCTION_TABLE_iiiiiiii[$23 & 255]($10,$17,$18,$19,$20,$21,$22)|0);
 $25 = (__ZN10emscripten8internal11BindingTypeIivE10toWireTypeERKi($24)|0);
 return ($25|0);
}
function __ZN10emscripten8internal10getContextIM6EpanetFiilllllEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIM6EpanetFiiididlEiPS2_JiididlEE6invokeERKS4_S5_iididl($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = +$4;
 $5 = $5|0;
 $6 = +$6;
 $7 = $7|0;
 var $$elt1 = 0, $$unpack = 0, $$unpack2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $8 = (__ZN10emscripten8internal11BindingTypeIP6EpanetvE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 $9 = $$unpack2 >> 1;
 $10 = (($1) + ($9)|0);
 $11 = $$unpack2 & 1;
 $12 = ($11|0)==(0);
 if ($12) {
  $16 = $$unpack;
  $23 = $16;
 } else {
  $13 = HEAP32[$10>>2]|0;
  $14 = (($13) + ($$unpack)|0);
  $15 = HEAP32[$14>>2]|0;
  $23 = $15;
 }
 $17 = (__ZN10emscripten8internal11BindingTypeIivE12fromWireTypeEi($2)|0);
 $18 = (__ZN10emscripten8internal11BindingTypeIivE12fromWireTypeEi($3)|0);
 $19 = (+__ZN10emscripten8internal11BindingTypeIdvE12fromWireTypeEd($4));
 $20 = (__ZN10emscripten8internal11BindingTypeIivE12fromWireTypeEi($5)|0);
 $21 = (+__ZN10emscripten8internal11BindingTypeIdvE12fromWireTypeEd($6));
 $22 = (__ZN10emscripten8internal11BindingTypeIlvE12fromWireTypeEl($7)|0);
 $24 = (FUNCTION_TABLE_iiiididi[$23 & 255]($10,$17,$18,$19,$20,$21,$22)|0);
 $25 = (__ZN10emscripten8internal11BindingTypeIivE10toWireTypeERKi($24)|0);
 return ($25|0);
}
function __ZN10emscripten8internal10getContextIM6EpanetFiiididlEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIM6EpanetFiiiddEiPS2_JiiddEE6invokeERKS4_S5_iidd($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = +$4;
 $5 = +$5;
 var $$elt1 = 0, $$unpack = 0, $$unpack2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $6 = (__ZN10emscripten8internal11BindingTypeIP6EpanetvE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 $7 = $$unpack2 >> 1;
 $8 = (($1) + ($7)|0);
 $9 = $$unpack2 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  $14 = $$unpack;
  $19 = $14;
 } else {
  $11 = HEAP32[$8>>2]|0;
  $12 = (($11) + ($$unpack)|0);
  $13 = HEAP32[$12>>2]|0;
  $19 = $13;
 }
 $15 = (__ZN10emscripten8internal11BindingTypeIivE12fromWireTypeEi($2)|0);
 $16 = (__ZN10emscripten8internal11BindingTypeIivE12fromWireTypeEi($3)|0);
 $17 = (+__ZN10emscripten8internal11BindingTypeIdvE12fromWireTypeEd($4));
 $18 = (+__ZN10emscripten8internal11BindingTypeIdvE12fromWireTypeEd($5));
 $20 = (FUNCTION_TABLE_iiiidd[$19 & 255]($8,$15,$16,$17,$18)|0);
 $21 = (__ZN10emscripten8internal11BindingTypeIivE10toWireTypeERKi($20)|0);
 return ($21|0);
}
function __ZN10emscripten8internal10getContextIM6EpanetFiiiddEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIM6EpanetFiiliEiPS2_JiliEE6invokeERKS4_S5_ili($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$elt1 = 0, $$unpack = 0, $$unpack2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = (__ZN10emscripten8internal11BindingTypeIP6EpanetvE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 $6 = $$unpack2 >> 1;
 $7 = (($1) + ($6)|0);
 $8 = $$unpack2 & 1;
 $9 = ($8|0)==(0);
 if ($9) {
  $13 = $$unpack;
  $17 = $13;
 } else {
  $10 = HEAP32[$7>>2]|0;
  $11 = (($10) + ($$unpack)|0);
  $12 = HEAP32[$11>>2]|0;
  $17 = $12;
 }
 $14 = (__ZN10emscripten8internal11BindingTypeIivE12fromWireTypeEi($2)|0);
 $15 = (__ZN10emscripten8internal11BindingTypeIlvE12fromWireTypeEl($3)|0);
 $16 = (__ZN10emscripten8internal11BindingTypeIivE12fromWireTypeEi($4)|0);
 $18 = (FUNCTION_TABLE_iiiii[$17 & 255]($7,$14,$15,$16)|0);
 $19 = (__ZN10emscripten8internal11BindingTypeIivE10toWireTypeERKi($18)|0);
 return ($19|0);
}
function __ZN10emscripten8internal10getContextIM6EpanetFiiliEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIM6EpanetFiilliEiPS2_JilliEE6invokeERKS4_S5_illi($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$elt1 = 0, $$unpack = 0, $$unpack2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $6 = (__ZN10emscripten8internal11BindingTypeIP6EpanetvE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 $7 = $$unpack2 >> 1;
 $8 = (($1) + ($7)|0);
 $9 = $$unpack2 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  $14 = $$unpack;
  $19 = $14;
 } else {
  $11 = HEAP32[$8>>2]|0;
  $12 = (($11) + ($$unpack)|0);
  $13 = HEAP32[$12>>2]|0;
  $19 = $13;
 }
 $15 = (__ZN10emscripten8internal11BindingTypeIivE12fromWireTypeEi($2)|0);
 $16 = (__ZN10emscripten8internal11BindingTypeIlvE12fromWireTypeEl($3)|0);
 $17 = (__ZN10emscripten8internal11BindingTypeIlvE12fromWireTypeEl($4)|0);
 $18 = (__ZN10emscripten8internal11BindingTypeIivE12fromWireTypeEi($5)|0);
 $20 = (FUNCTION_TABLE_iiiiii[$19 & 255]($8,$15,$16,$17,$18)|0);
 $21 = (__ZN10emscripten8internal11BindingTypeIivE10toWireTypeERKi($20)|0);
 return ($21|0);
}
function __ZN10emscripten8internal10getContextIM6EpanetFiilliEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIM6EpanetFiiddddEiPS2_JiddddEE6invokeERKS4_S5_idddd($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 $6 = +$6;
 var $$elt1 = 0, $$unpack = 0, $$unpack2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $7 = (__ZN10emscripten8internal11BindingTypeIP6EpanetvE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 $8 = $$unpack2 >> 1;
 $9 = (($1) + ($8)|0);
 $10 = $$unpack2 & 1;
 $11 = ($10|0)==(0);
 if ($11) {
  $15 = $$unpack;
  $21 = $15;
 } else {
  $12 = HEAP32[$9>>2]|0;
  $13 = (($12) + ($$unpack)|0);
  $14 = HEAP32[$13>>2]|0;
  $21 = $14;
 }
 $16 = (__ZN10emscripten8internal11BindingTypeIivE12fromWireTypeEi($2)|0);
 $17 = (+__ZN10emscripten8internal11BindingTypeIdvE12fromWireTypeEd($3));
 $18 = (+__ZN10emscripten8internal11BindingTypeIdvE12fromWireTypeEd($4));
 $19 = (+__ZN10emscripten8internal11BindingTypeIdvE12fromWireTypeEd($5));
 $20 = (+__ZN10emscripten8internal11BindingTypeIdvE12fromWireTypeEd($6));
 $22 = (FUNCTION_TABLE_iiidddd[$21 & 127]($9,$16,$17,$18,$19,$20)|0);
 $23 = (__ZN10emscripten8internal11BindingTypeIivE10toWireTypeERKi($22)|0);
 return ($23|0);
}
function __ZN10emscripten8internal10getContextIM6EpanetFiiddddEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIM6EpanetFiliiEiPS2_JliiEE6invokeERKS4_S5_lii($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$elt1 = 0, $$unpack = 0, $$unpack2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = (__ZN10emscripten8internal11BindingTypeIP6EpanetvE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 $6 = $$unpack2 >> 1;
 $7 = (($1) + ($6)|0);
 $8 = $$unpack2 & 1;
 $9 = ($8|0)==(0);
 if ($9) {
  $13 = $$unpack;
  $17 = $13;
 } else {
  $10 = HEAP32[$7>>2]|0;
  $11 = (($10) + ($$unpack)|0);
  $12 = HEAP32[$11>>2]|0;
  $17 = $12;
 }
 $14 = (__ZN10emscripten8internal11BindingTypeIlvE12fromWireTypeEl($2)|0);
 $15 = (__ZN10emscripten8internal11BindingTypeIivE12fromWireTypeEi($3)|0);
 $16 = (__ZN10emscripten8internal11BindingTypeIivE12fromWireTypeEi($4)|0);
 $18 = (FUNCTION_TABLE_iiiii[$17 & 255]($7,$14,$15,$16)|0);
 $19 = (__ZN10emscripten8internal11BindingTypeIivE10toWireTypeERKi($18)|0);
 return ($19|0);
}
function __ZN10emscripten8internal10getContextIM6EpanetFiliiEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIM6EpanetFiiillEiPS2_JiillEE6invokeERKS4_S5_iill($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$elt1 = 0, $$unpack = 0, $$unpack2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $6 = (__ZN10emscripten8internal11BindingTypeIP6EpanetvE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 $7 = $$unpack2 >> 1;
 $8 = (($1) + ($7)|0);
 $9 = $$unpack2 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  $14 = $$unpack;
  $19 = $14;
 } else {
  $11 = HEAP32[$8>>2]|0;
  $12 = (($11) + ($$unpack)|0);
  $13 = HEAP32[$12>>2]|0;
  $19 = $13;
 }
 $15 = (__ZN10emscripten8internal11BindingTypeIivE12fromWireTypeEi($2)|0);
 $16 = (__ZN10emscripten8internal11BindingTypeIivE12fromWireTypeEi($3)|0);
 $17 = (__ZN10emscripten8internal11BindingTypeIlvE12fromWireTypeEl($4)|0);
 $18 = (__ZN10emscripten8internal11BindingTypeIlvE12fromWireTypeEl($5)|0);
 $20 = (FUNCTION_TABLE_iiiiii[$19 & 255]($8,$15,$16,$17,$18)|0);
 $21 = (__ZN10emscripten8internal11BindingTypeIivE10toWireTypeERKi($20)|0);
 return ($21|0);
}
function __ZN10emscripten8internal10getContextIM6EpanetFiiillEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIM6EpanetFiNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEiS9_S9_lEiPS2_JS9_iS9_S9_lEE6invokeERKSB_SC_PNS0_11BindingTypeIS9_vEUt_EiSJ_SJ_l($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$elt3 = 0, $$unpack = 0, $$unpack4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $7 = sp + 24|0;
 $8 = sp + 12|0;
 $9 = sp;
 $10 = (__ZN10emscripten8internal11BindingTypeIP6EpanetvE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt3 = ((($0)) + 4|0);
 $$unpack4 = HEAP32[$$elt3>>2]|0;
 $11 = $$unpack4 >> 1;
 $12 = (($1) + ($11)|0);
 $13 = $$unpack4 & 1;
 $14 = ($13|0)==(0);
 if ($14) {
  $18 = $$unpack;
  $21 = $18;
 } else {
  $15 = HEAP32[$12>>2]|0;
  $16 = (($15) + ($$unpack)|0);
  $17 = HEAP32[$16>>2]|0;
  $21 = $17;
 }
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE12fromWireTypeEPNS9_Ut_E($7,$2);
 $19 = (__ZN10emscripten8internal11BindingTypeIivE12fromWireTypeEi($3)|0);
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE12fromWireTypeEPNS9_Ut_E($8,$4);
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE12fromWireTypeEPNS9_Ut_E($9,$5);
 $20 = (__ZN10emscripten8internal11BindingTypeIlvE12fromWireTypeEl($6)|0);
 $22 = (FUNCTION_TABLE_iiiiiii[$21 & 255]($12,$7,$19,$8,$9,$20)|0);
 $23 = (__ZN10emscripten8internal11BindingTypeIivE10toWireTypeERKi($22)|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
 STACKTOP = sp;return ($23|0);
}
function __ZN10emscripten8internal10getContextIM6EpanetFiNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEiS9_S9_lEEEPT_RKSC_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE12fromWireTypeEPNS9_Ut_E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$1>>2]|0;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($0,$2,$3);
 return;
}
function __ZN10emscripten8internal13MethodInvokerIM6EpanetFiiiiEiPS2_JiiiEE6invokeERKS4_S5_iii($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$elt1 = 0, $$unpack = 0, $$unpack2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = (__ZN10emscripten8internal11BindingTypeIP6EpanetvE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 $6 = $$unpack2 >> 1;
 $7 = (($1) + ($6)|0);
 $8 = $$unpack2 & 1;
 $9 = ($8|0)==(0);
 if ($9) {
  $13 = $$unpack;
  $17 = $13;
 } else {
  $10 = HEAP32[$7>>2]|0;
  $11 = (($10) + ($$unpack)|0);
  $12 = HEAP32[$11>>2]|0;
  $17 = $12;
 }
 $14 = (__ZN10emscripten8internal11BindingTypeIivE12fromWireTypeEi($2)|0);
 $15 = (__ZN10emscripten8internal11BindingTypeIivE12fromWireTypeEi($3)|0);
 $16 = (__ZN10emscripten8internal11BindingTypeIivE12fromWireTypeEi($4)|0);
 $18 = (FUNCTION_TABLE_iiiii[$17 & 255]($7,$14,$15,$16)|0);
 $19 = (__ZN10emscripten8internal11BindingTypeIivE10toWireTypeERKi($18)|0);
 return ($19|0);
}
function __ZN10emscripten8internal10getContextIM6EpanetFiiiiEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIM6EpanetFiiiNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEiPS2_JiiS9_EE6invokeERKSB_SC_iiPNS0_11BindingTypeIS9_vEUt_E($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$elt1 = 0, $$unpack = 0, $$unpack2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $5 = sp;
 $6 = (__ZN10emscripten8internal11BindingTypeIP6EpanetvE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 $7 = $$unpack2 >> 1;
 $8 = (($1) + ($7)|0);
 $9 = $$unpack2 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  $14 = $$unpack;
  $17 = $14;
 } else {
  $11 = HEAP32[$8>>2]|0;
  $12 = (($11) + ($$unpack)|0);
  $13 = HEAP32[$12>>2]|0;
  $17 = $13;
 }
 $15 = (__ZN10emscripten8internal11BindingTypeIivE12fromWireTypeEi($2)|0);
 $16 = (__ZN10emscripten8internal11BindingTypeIivE12fromWireTypeEi($3)|0);
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE12fromWireTypeEPNS9_Ut_E($5,$4);
 $18 = (FUNCTION_TABLE_iiiii[$17 & 255]($8,$15,$16,$5)|0);
 $19 = (__ZN10emscripten8internal11BindingTypeIivE10toWireTypeERKi($18)|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($5);
 STACKTOP = sp;return ($19|0);
}
function __ZN10emscripten8internal10getContextIM6EpanetFiiiNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEPT_RKSC_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIM6EpanetFiidddEiPS2_JidddEE6invokeERKS4_S5_iddd($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 var $$elt1 = 0, $$unpack = 0, $$unpack2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $6 = (__ZN10emscripten8internal11BindingTypeIP6EpanetvE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 $7 = $$unpack2 >> 1;
 $8 = (($1) + ($7)|0);
 $9 = $$unpack2 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  $14 = $$unpack;
  $19 = $14;
 } else {
  $11 = HEAP32[$8>>2]|0;
  $12 = (($11) + ($$unpack)|0);
  $13 = HEAP32[$12>>2]|0;
  $19 = $13;
 }
 $15 = (__ZN10emscripten8internal11BindingTypeIivE12fromWireTypeEi($2)|0);
 $16 = (+__ZN10emscripten8internal11BindingTypeIdvE12fromWireTypeEd($3));
 $17 = (+__ZN10emscripten8internal11BindingTypeIdvE12fromWireTypeEd($4));
 $18 = (+__ZN10emscripten8internal11BindingTypeIdvE12fromWireTypeEd($5));
 $20 = (FUNCTION_TABLE_iiiddd[$19 & 127]($8,$15,$16,$17,$18)|0);
 $21 = (__ZN10emscripten8internal11BindingTypeIivE10toWireTypeERKi($20)|0);
 return ($21|0);
}
function __ZN10emscripten8internal10getContextIM6EpanetFiidddEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIM6EpanetFillllEiPS2_JllllEE6invokeERKS4_S5_llll($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$elt1 = 0, $$unpack = 0, $$unpack2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $6 = (__ZN10emscripten8internal11BindingTypeIP6EpanetvE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 $7 = $$unpack2 >> 1;
 $8 = (($1) + ($7)|0);
 $9 = $$unpack2 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  $14 = $$unpack;
  $19 = $14;
 } else {
  $11 = HEAP32[$8>>2]|0;
  $12 = (($11) + ($$unpack)|0);
  $13 = HEAP32[$12>>2]|0;
  $19 = $13;
 }
 $15 = (__ZN10emscripten8internal11BindingTypeIlvE12fromWireTypeEl($2)|0);
 $16 = (__ZN10emscripten8internal11BindingTypeIlvE12fromWireTypeEl($3)|0);
 $17 = (__ZN10emscripten8internal11BindingTypeIlvE12fromWireTypeEl($4)|0);
 $18 = (__ZN10emscripten8internal11BindingTypeIlvE12fromWireTypeEl($5)|0);
 $20 = (FUNCTION_TABLE_iiiiii[$19 & 255]($8,$15,$16,$17,$18)|0);
 $21 = (__ZN10emscripten8internal11BindingTypeIivE10toWireTypeERKi($20)|0);
 return ($21|0);
}
function __ZN10emscripten8internal10getContextIM6EpanetFillllEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIM6EpanetFiiNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEElEiPS2_JiS9_lEE6invokeERKSB_SC_iPNS0_11BindingTypeIS9_vEUt_El($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$elt1 = 0, $$unpack = 0, $$unpack2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $5 = sp;
 $6 = (__ZN10emscripten8internal11BindingTypeIP6EpanetvE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 $7 = $$unpack2 >> 1;
 $8 = (($1) + ($7)|0);
 $9 = $$unpack2 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  $14 = $$unpack;
  $17 = $14;
 } else {
  $11 = HEAP32[$8>>2]|0;
  $12 = (($11) + ($$unpack)|0);
  $13 = HEAP32[$12>>2]|0;
  $17 = $13;
 }
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE12fromWireTypeEPNS9_Ut_E($5,$3);
 $15 = (__ZN10emscripten8internal11BindingTypeIlvE12fromWireTypeEl($4)|0);
 $16 = (__ZN10emscripten8internal11BindingTypeIivE12fromWireTypeEi($2)|0);
 $18 = (FUNCTION_TABLE_iiiii[$17 & 255]($8,$16,$5,$15)|0);
 $19 = (__ZN10emscripten8internal11BindingTypeIivE10toWireTypeERKi($18)|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($5);
 STACKTOP = sp;return ($19|0);
}
function __ZN10emscripten8internal10getContextIM6EpanetFiiNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEElEEEPT_RKSC_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIM6EpanetFiidNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEES9_EiPS2_JidS9_S9_EE6invokeERKSB_SC_idPNS0_11BindingTypeIS9_vEUt_ESJ_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 $4 = $4|0;
 $5 = $5|0;
 var $$elt2 = 0, $$unpack = 0, $$unpack3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = sp + 12|0;
 $7 = sp;
 $8 = (__ZN10emscripten8internal11BindingTypeIP6EpanetvE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt2 = ((($0)) + 4|0);
 $$unpack3 = HEAP32[$$elt2>>2]|0;
 $9 = $$unpack3 >> 1;
 $10 = (($1) + ($9)|0);
 $11 = $$unpack3 & 1;
 $12 = ($11|0)==(0);
 if ($12) {
  $16 = $$unpack;
  $19 = $16;
 } else {
  $13 = HEAP32[$10>>2]|0;
  $14 = (($13) + ($$unpack)|0);
  $15 = HEAP32[$14>>2]|0;
  $19 = $15;
 }
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE12fromWireTypeEPNS9_Ut_E($6,$4);
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE12fromWireTypeEPNS9_Ut_E($7,$5);
 $17 = (+__ZN10emscripten8internal11BindingTypeIdvE12fromWireTypeEd($3));
 $18 = (__ZN10emscripten8internal11BindingTypeIivE12fromWireTypeEi($2)|0);
 $20 = (FUNCTION_TABLE_iiidii[$19 & 127]($10,$18,$17,$6,$7)|0);
 $21 = (__ZN10emscripten8internal11BindingTypeIivE10toWireTypeERKi($20)|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($6);
 STACKTOP = sp;return ($21|0);
}
function __ZN10emscripten8internal10getContextIM6EpanetFiidNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEES9_EEEPT_RKSC_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIM6EpanetFiiddddddNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEiPS2_JiddddddS9_EE6invokeERKSB_SC_iddddddPNS0_11BindingTypeIS9_vEUt_E($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 $6 = +$6;
 $7 = +$7;
 $8 = +$8;
 $9 = $9|0;
 var $$elt1 = 0, $$unpack = 0, $$unpack2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0, $28 = 0, $29 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $10 = sp;
 $11 = (__ZN10emscripten8internal11BindingTypeIP6EpanetvE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 $12 = $$unpack2 >> 1;
 $13 = (($1) + ($12)|0);
 $14 = $$unpack2 & 1;
 $15 = ($14|0)==(0);
 if ($15) {
  $19 = $$unpack;
  $27 = $19;
 } else {
  $16 = HEAP32[$13>>2]|0;
  $17 = (($16) + ($$unpack)|0);
  $18 = HEAP32[$17>>2]|0;
  $27 = $18;
 }
 $20 = (__ZN10emscripten8internal11BindingTypeIivE12fromWireTypeEi($2)|0);
 $21 = (+__ZN10emscripten8internal11BindingTypeIdvE12fromWireTypeEd($3));
 $22 = (+__ZN10emscripten8internal11BindingTypeIdvE12fromWireTypeEd($4));
 $23 = (+__ZN10emscripten8internal11BindingTypeIdvE12fromWireTypeEd($5));
 $24 = (+__ZN10emscripten8internal11BindingTypeIdvE12fromWireTypeEd($6));
 $25 = (+__ZN10emscripten8internal11BindingTypeIdvE12fromWireTypeEd($7));
 $26 = (+__ZN10emscripten8internal11BindingTypeIdvE12fromWireTypeEd($8));
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE12fromWireTypeEPNS9_Ut_E($10,$9);
 $28 = (FUNCTION_TABLE_iiiddddddi[$27 & 127]($13,$20,$21,$22,$23,$24,$25,$26,$10)|0);
 $29 = (__ZN10emscripten8internal11BindingTypeIivE10toWireTypeERKi($28)|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
 STACKTOP = sp;return ($29|0);
}
function __ZN10emscripten8internal10getContextIM6EpanetFiiddddddNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEPT_RKSC_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIM6EpanetFiiidEiPS2_JiidEE6invokeERKS4_S5_iid($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = +$4;
 var $$elt1 = 0, $$unpack = 0, $$unpack2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = (__ZN10emscripten8internal11BindingTypeIP6EpanetvE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 $6 = $$unpack2 >> 1;
 $7 = (($1) + ($6)|0);
 $8 = $$unpack2 & 1;
 $9 = ($8|0)==(0);
 if ($9) {
  $13 = $$unpack;
  $17 = $13;
 } else {
  $10 = HEAP32[$7>>2]|0;
  $11 = (($10) + ($$unpack)|0);
  $12 = HEAP32[$11>>2]|0;
  $17 = $12;
 }
 $14 = (__ZN10emscripten8internal11BindingTypeIivE12fromWireTypeEi($2)|0);
 $15 = (__ZN10emscripten8internal11BindingTypeIivE12fromWireTypeEi($3)|0);
 $16 = (+__ZN10emscripten8internal11BindingTypeIdvE12fromWireTypeEd($4));
 $18 = (FUNCTION_TABLE_iiiid[$17 & 255]($7,$14,$15,$16)|0);
 $19 = (__ZN10emscripten8internal11BindingTypeIivE10toWireTypeERKi($18)|0);
 return ($19|0);
}
function __ZN10emscripten8internal10getContextIM6EpanetFiiidEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIM6EpanetFiiNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEiPS2_JiS9_EE6invokeERKSB_SC_iPNS0_11BindingTypeIS9_vEUt_E($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$elt1 = 0, $$unpack = 0, $$unpack2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = (__ZN10emscripten8internal11BindingTypeIP6EpanetvE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 $6 = $$unpack2 >> 1;
 $7 = (($1) + ($6)|0);
 $8 = $$unpack2 & 1;
 $9 = ($8|0)==(0);
 if ($9) {
  $13 = $$unpack;
  $15 = $13;
 } else {
  $10 = HEAP32[$7>>2]|0;
  $11 = (($10) + ($$unpack)|0);
  $12 = HEAP32[$11>>2]|0;
  $15 = $12;
 }
 $14 = (__ZN10emscripten8internal11BindingTypeIivE12fromWireTypeEi($2)|0);
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE12fromWireTypeEPNS9_Ut_E($4,$3);
 $16 = (FUNCTION_TABLE_iiii[$15 & 255]($7,$14,$4)|0);
 $17 = (__ZN10emscripten8internal11BindingTypeIivE10toWireTypeERKi($16)|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4);
 STACKTOP = sp;return ($17|0);
}
function __ZN10emscripten8internal10getContextIM6EpanetFiiNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEPT_RKSC_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIM6EpanetFiiddNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEiPS2_JiddS9_EE6invokeERKSB_SC_iddPNS0_11BindingTypeIS9_vEUt_E($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 $4 = +$4;
 $5 = $5|0;
 var $$elt1 = 0, $$unpack = 0, $$unpack2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $6 = sp;
 $7 = (__ZN10emscripten8internal11BindingTypeIP6EpanetvE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 $8 = $$unpack2 >> 1;
 $9 = (($1) + ($8)|0);
 $10 = $$unpack2 & 1;
 $11 = ($10|0)==(0);
 if ($11) {
  $15 = $$unpack;
  $19 = $15;
 } else {
  $12 = HEAP32[$9>>2]|0;
  $13 = (($12) + ($$unpack)|0);
  $14 = HEAP32[$13>>2]|0;
  $19 = $14;
 }
 $16 = (__ZN10emscripten8internal11BindingTypeIivE12fromWireTypeEi($2)|0);
 $17 = (+__ZN10emscripten8internal11BindingTypeIdvE12fromWireTypeEd($3));
 $18 = (+__ZN10emscripten8internal11BindingTypeIdvE12fromWireTypeEd($4));
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE12fromWireTypeEPNS9_Ut_E($6,$5);
 $20 = (FUNCTION_TABLE_iiiddi[$19 & 127]($9,$16,$17,$18,$6)|0);
 $21 = (__ZN10emscripten8internal11BindingTypeIivE10toWireTypeERKi($20)|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($6);
 STACKTOP = sp;return ($21|0);
}
function __ZN10emscripten8internal10getContextIM6EpanetFiiddNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEPT_RKSC_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIM6EpanetFiiddEiPS2_JiddEE6invokeERKS4_S5_idd($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 $4 = +$4;
 var $$elt1 = 0, $$unpack = 0, $$unpack2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = (__ZN10emscripten8internal11BindingTypeIP6EpanetvE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 $6 = $$unpack2 >> 1;
 $7 = (($1) + ($6)|0);
 $8 = $$unpack2 & 1;
 $9 = ($8|0)==(0);
 if ($9) {
  $13 = $$unpack;
  $17 = $13;
 } else {
  $10 = HEAP32[$7>>2]|0;
  $11 = (($10) + ($$unpack)|0);
  $12 = HEAP32[$11>>2]|0;
  $17 = $12;
 }
 $14 = (__ZN10emscripten8internal11BindingTypeIivE12fromWireTypeEi($2)|0);
 $15 = (+__ZN10emscripten8internal11BindingTypeIdvE12fromWireTypeEd($3));
 $16 = (+__ZN10emscripten8internal11BindingTypeIdvE12fromWireTypeEd($4));
 $18 = (FUNCTION_TABLE_iiidd[$17 & 127]($7,$14,$15,$16)|0);
 $19 = (__ZN10emscripten8internal11BindingTypeIivE10toWireTypeERKi($18)|0);
 return ($19|0);
}
function __ZN10emscripten8internal10getContextIM6EpanetFiiddEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIM6EpanetFiNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEElEiPS2_JS9_lEE6invokeERKSB_SC_PNS0_11BindingTypeIS9_vEUt_El($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$elt1 = 0, $$unpack = 0, $$unpack2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = (__ZN10emscripten8internal11BindingTypeIP6EpanetvE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 $6 = $$unpack2 >> 1;
 $7 = (($1) + ($6)|0);
 $8 = $$unpack2 & 1;
 $9 = ($8|0)==(0);
 if ($9) {
  $13 = $$unpack;
  $15 = $13;
 } else {
  $10 = HEAP32[$7>>2]|0;
  $11 = (($10) + ($$unpack)|0);
  $12 = HEAP32[$11>>2]|0;
  $15 = $12;
 }
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE12fromWireTypeEPNS9_Ut_E($4,$2);
 $14 = (__ZN10emscripten8internal11BindingTypeIlvE12fromWireTypeEl($3)|0);
 $16 = (FUNCTION_TABLE_iiii[$15 & 255]($7,$4,$14)|0);
 $17 = (__ZN10emscripten8internal11BindingTypeIivE10toWireTypeERKi($16)|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4);
 STACKTOP = sp;return ($17|0);
}
function __ZN10emscripten8internal10getContextIM6EpanetFiNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEElEEEPT_RKSC_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIM6EpanetFiillEiPS2_JillEE6invokeERKS4_S5_ill($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$elt1 = 0, $$unpack = 0, $$unpack2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = (__ZN10emscripten8internal11BindingTypeIP6EpanetvE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 $6 = $$unpack2 >> 1;
 $7 = (($1) + ($6)|0);
 $8 = $$unpack2 & 1;
 $9 = ($8|0)==(0);
 if ($9) {
  $13 = $$unpack;
  $17 = $13;
 } else {
  $10 = HEAP32[$7>>2]|0;
  $11 = (($10) + ($$unpack)|0);
  $12 = HEAP32[$11>>2]|0;
  $17 = $12;
 }
 $14 = (__ZN10emscripten8internal11BindingTypeIivE12fromWireTypeEi($2)|0);
 $15 = (__ZN10emscripten8internal11BindingTypeIlvE12fromWireTypeEl($3)|0);
 $16 = (__ZN10emscripten8internal11BindingTypeIlvE12fromWireTypeEl($4)|0);
 $18 = (FUNCTION_TABLE_iiiii[$17 & 255]($7,$14,$15,$16)|0);
 $19 = (__ZN10emscripten8internal11BindingTypeIivE10toWireTypeERKi($18)|0);
 return ($19|0);
}
function __ZN10emscripten8internal10getContextIM6EpanetFiillEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIM6EpanetFiiiEiPS2_JiiEE6invokeERKS4_S5_ii($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$elt1 = 0, $$unpack = 0, $$unpack2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (__ZN10emscripten8internal11BindingTypeIP6EpanetvE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 $5 = $$unpack2 >> 1;
 $6 = (($1) + ($5)|0);
 $7 = $$unpack2 & 1;
 $8 = ($7|0)==(0);
 if ($8) {
  $12 = $$unpack;
  $15 = $12;
 } else {
  $9 = HEAP32[$6>>2]|0;
  $10 = (($9) + ($$unpack)|0);
  $11 = HEAP32[$10>>2]|0;
  $15 = $11;
 }
 $13 = (__ZN10emscripten8internal11BindingTypeIivE12fromWireTypeEi($2)|0);
 $14 = (__ZN10emscripten8internal11BindingTypeIivE12fromWireTypeEi($3)|0);
 $16 = (FUNCTION_TABLE_iiii[$15 & 255]($6,$13,$14)|0);
 $17 = (__ZN10emscripten8internal11BindingTypeIivE10toWireTypeERKi($16)|0);
 return ($17|0);
}
function __ZN10emscripten8internal10getContextIM6EpanetFiiiEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIM6EpanetFiNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEilEiPS2_JS9_ilEE6invokeERKSB_SC_PNS0_11BindingTypeIS9_vEUt_Eil($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$elt1 = 0, $$unpack = 0, $$unpack2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $5 = sp;
 $6 = (__ZN10emscripten8internal11BindingTypeIP6EpanetvE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 $7 = $$unpack2 >> 1;
 $8 = (($1) + ($7)|0);
 $9 = $$unpack2 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  $14 = $$unpack;
  $17 = $14;
 } else {
  $11 = HEAP32[$8>>2]|0;
  $12 = (($11) + ($$unpack)|0);
  $13 = HEAP32[$12>>2]|0;
  $17 = $13;
 }
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE12fromWireTypeEPNS9_Ut_E($5,$2);
 $15 = (__ZN10emscripten8internal11BindingTypeIivE12fromWireTypeEi($3)|0);
 $16 = (__ZN10emscripten8internal11BindingTypeIlvE12fromWireTypeEl($4)|0);
 $18 = (FUNCTION_TABLE_iiiii[$17 & 255]($8,$5,$15,$16)|0);
 $19 = (__ZN10emscripten8internal11BindingTypeIivE10toWireTypeERKi($18)|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($5);
 STACKTOP = sp;return ($19|0);
}
function __ZN10emscripten8internal10getContextIM6EpanetFiNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEilEEEPT_RKSC_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIM6EpanetFiiNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEES9_S9_EiPS2_JiS9_S9_S9_EE6invokeERKSB_SC_iPNS0_11BindingTypeIS9_vEUt_ESJ_SJ_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$elt3 = 0, $$unpack = 0, $$unpack4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = sp + 24|0;
 $7 = sp + 12|0;
 $8 = sp;
 $9 = (__ZN10emscripten8internal11BindingTypeIP6EpanetvE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt3 = ((($0)) + 4|0);
 $$unpack4 = HEAP32[$$elt3>>2]|0;
 $10 = $$unpack4 >> 1;
 $11 = (($1) + ($10)|0);
 $12 = $$unpack4 & 1;
 $13 = ($12|0)==(0);
 if ($13) {
  $17 = $$unpack;
  $19 = $17;
 } else {
  $14 = HEAP32[$11>>2]|0;
  $15 = (($14) + ($$unpack)|0);
  $16 = HEAP32[$15>>2]|0;
  $19 = $16;
 }
 $18 = (__ZN10emscripten8internal11BindingTypeIivE12fromWireTypeEi($2)|0);
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE12fromWireTypeEPNS9_Ut_E($6,$3);
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE12fromWireTypeEPNS9_Ut_E($7,$4);
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE12fromWireTypeEPNS9_Ut_E($8,$5);
 $20 = (FUNCTION_TABLE_iiiiii[$19 & 255]($11,$18,$6,$7,$8)|0);
 $21 = (__ZN10emscripten8internal11BindingTypeIivE10toWireTypeERKi($20)|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($6);
 STACKTOP = sp;return ($21|0);
}
function __ZN10emscripten8internal10getContextIM6EpanetFiiNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEES9_S9_EEEPT_RKSC_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIM6EpanetFiidEiPS2_JidEE6invokeERKS4_S5_id($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 var $$elt1 = 0, $$unpack = 0, $$unpack2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (__ZN10emscripten8internal11BindingTypeIP6EpanetvE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 $5 = $$unpack2 >> 1;
 $6 = (($1) + ($5)|0);
 $7 = $$unpack2 & 1;
 $8 = ($7|0)==(0);
 if ($8) {
  $12 = $$unpack;
  $15 = $12;
 } else {
  $9 = HEAP32[$6>>2]|0;
  $10 = (($9) + ($$unpack)|0);
  $11 = HEAP32[$10>>2]|0;
  $15 = $11;
 }
 $13 = (__ZN10emscripten8internal11BindingTypeIivE12fromWireTypeEi($2)|0);
 $14 = (+__ZN10emscripten8internal11BindingTypeIdvE12fromWireTypeEd($3));
 $16 = (FUNCTION_TABLE_iiid[$15 & 255]($6,$13,$14)|0);
 $17 = (__ZN10emscripten8internal11BindingTypeIivE10toWireTypeERKi($16)|0);
 return ($17|0);
}
function __ZN10emscripten8internal10getContextIM6EpanetFiidEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIM6EpanetFimmEiPS2_JmmEE6invokeERKS4_S5_mm($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$elt1 = 0, $$unpack = 0, $$unpack2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (__ZN10emscripten8internal11BindingTypeIP6EpanetvE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 $5 = $$unpack2 >> 1;
 $6 = (($1) + ($5)|0);
 $7 = $$unpack2 & 1;
 $8 = ($7|0)==(0);
 if ($8) {
  $12 = $$unpack;
  $15 = $12;
 } else {
  $9 = HEAP32[$6>>2]|0;
  $10 = (($9) + ($$unpack)|0);
  $11 = HEAP32[$10>>2]|0;
  $15 = $11;
 }
 $13 = (__ZN10emscripten8internal11BindingTypeImvE12fromWireTypeEm($2)|0);
 $14 = (__ZN10emscripten8internal11BindingTypeImvE12fromWireTypeEm($3)|0);
 $16 = (FUNCTION_TABLE_iiii[$15 & 255]($6,$13,$14)|0);
 $17 = (__ZN10emscripten8internal11BindingTypeIivE10toWireTypeERKi($16)|0);
 return ($17|0);
}
function __ZN10emscripten8internal10getContextIM6EpanetFimmEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal11BindingTypeImvE12fromWireTypeEm($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal13MethodInvokerIM6EpanetFimmmmEiPS2_JmmmmEE6invokeERKS4_S5_mmmm($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$elt1 = 0, $$unpack = 0, $$unpack2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $6 = (__ZN10emscripten8internal11BindingTypeIP6EpanetvE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 $7 = $$unpack2 >> 1;
 $8 = (($1) + ($7)|0);
 $9 = $$unpack2 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  $14 = $$unpack;
  $19 = $14;
 } else {
  $11 = HEAP32[$8>>2]|0;
  $12 = (($11) + ($$unpack)|0);
  $13 = HEAP32[$12>>2]|0;
  $19 = $13;
 }
 $15 = (__ZN10emscripten8internal11BindingTypeImvE12fromWireTypeEm($2)|0);
 $16 = (__ZN10emscripten8internal11BindingTypeImvE12fromWireTypeEm($3)|0);
 $17 = (__ZN10emscripten8internal11BindingTypeImvE12fromWireTypeEm($4)|0);
 $18 = (__ZN10emscripten8internal11BindingTypeImvE12fromWireTypeEm($5)|0);
 $20 = (FUNCTION_TABLE_iiiiii[$19 & 255]($8,$15,$16,$17,$18)|0);
 $21 = (__ZN10emscripten8internal11BindingTypeIivE10toWireTypeERKi($20)|0);
 return ($21|0);
}
function __ZN10emscripten8internal10getContextIM6EpanetFimmmmEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIM6EpanetFiilEiPS2_JilEE6invokeERKS4_S5_il($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$elt1 = 0, $$unpack = 0, $$unpack2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (__ZN10emscripten8internal11BindingTypeIP6EpanetvE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 $5 = $$unpack2 >> 1;
 $6 = (($1) + ($5)|0);
 $7 = $$unpack2 & 1;
 $8 = ($7|0)==(0);
 if ($8) {
  $12 = $$unpack;
  $15 = $12;
 } else {
  $9 = HEAP32[$6>>2]|0;
  $10 = (($9) + ($$unpack)|0);
  $11 = HEAP32[$10>>2]|0;
  $15 = $11;
 }
 $13 = (__ZN10emscripten8internal11BindingTypeIivE12fromWireTypeEi($2)|0);
 $14 = (__ZN10emscripten8internal11BindingTypeIlvE12fromWireTypeEl($3)|0);
 $16 = (FUNCTION_TABLE_iiii[$15 & 255]($6,$13,$14)|0);
 $17 = (__ZN10emscripten8internal11BindingTypeIivE10toWireTypeERKi($16)|0);
 return ($17|0);
}
function __ZN10emscripten8internal10getContextIM6EpanetFiilEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIM6EpanetFiiilEiPS2_JiilEE6invokeERKS4_S5_iil($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$elt1 = 0, $$unpack = 0, $$unpack2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = (__ZN10emscripten8internal11BindingTypeIP6EpanetvE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 $6 = $$unpack2 >> 1;
 $7 = (($1) + ($6)|0);
 $8 = $$unpack2 & 1;
 $9 = ($8|0)==(0);
 if ($9) {
  $13 = $$unpack;
  $17 = $13;
 } else {
  $10 = HEAP32[$7>>2]|0;
  $11 = (($10) + ($$unpack)|0);
  $12 = HEAP32[$11>>2]|0;
  $17 = $12;
 }
 $14 = (__ZN10emscripten8internal11BindingTypeIivE12fromWireTypeEi($2)|0);
 $15 = (__ZN10emscripten8internal11BindingTypeIivE12fromWireTypeEi($3)|0);
 $16 = (__ZN10emscripten8internal11BindingTypeIlvE12fromWireTypeEl($4)|0);
 $18 = (FUNCTION_TABLE_iiiii[$17 & 255]($7,$14,$15,$16)|0);
 $19 = (__ZN10emscripten8internal11BindingTypeIivE10toWireTypeERKi($18)|0);
 return ($19|0);
}
function __ZN10emscripten8internal10getContextIM6EpanetFiiilEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIM6EpanetFimEiPS2_JmEE6invokeERKS4_S5_m($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$elt1 = 0, $$unpack = 0, $$unpack2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (__ZN10emscripten8internal11BindingTypeIP6EpanetvE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 $4 = $$unpack2 >> 1;
 $5 = (($1) + ($4)|0);
 $6 = $$unpack2 & 1;
 $7 = ($6|0)==(0);
 if ($7) {
  $11 = $$unpack;
  $13 = $11;
 } else {
  $8 = HEAP32[$5>>2]|0;
  $9 = (($8) + ($$unpack)|0);
  $10 = HEAP32[$9>>2]|0;
  $13 = $10;
 }
 $12 = (__ZN10emscripten8internal11BindingTypeImvE12fromWireTypeEm($2)|0);
 $14 = (FUNCTION_TABLE_iii[$13 & 255]($5,$12)|0);
 $15 = (__ZN10emscripten8internal11BindingTypeIivE10toWireTypeERKi($14)|0);
 return ($15|0);
}
function __ZN10emscripten8internal10getContextIM6EpanetFimEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIM6EpanetFiiEiPS2_JiEE6invokeERKS4_S5_i($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$elt1 = 0, $$unpack = 0, $$unpack2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (__ZN10emscripten8internal11BindingTypeIP6EpanetvE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 $4 = $$unpack2 >> 1;
 $5 = (($1) + ($4)|0);
 $6 = $$unpack2 & 1;
 $7 = ($6|0)==(0);
 if ($7) {
  $11 = $$unpack;
  $13 = $11;
 } else {
  $8 = HEAP32[$5>>2]|0;
  $9 = (($8) + ($$unpack)|0);
  $10 = HEAP32[$9>>2]|0;
  $13 = $10;
 }
 $12 = (__ZN10emscripten8internal11BindingTypeIivE12fromWireTypeEi($2)|0);
 $14 = (FUNCTION_TABLE_iii[$13 & 255]($5,$12)|0);
 $15 = (__ZN10emscripten8internal11BindingTypeIivE10toWireTypeERKi($14)|0);
 return ($15|0);
}
function __ZN10emscripten8internal10getContextIM6EpanetFiiEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIM6EpanetFiNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEiPS2_JS9_EE6invokeERKSB_SC_PNS0_11BindingTypeIS9_vEUt_E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$elt1 = 0, $$unpack = 0, $$unpack2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = (__ZN10emscripten8internal11BindingTypeIP6EpanetvE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 $5 = $$unpack2 >> 1;
 $6 = (($1) + ($5)|0);
 $7 = $$unpack2 & 1;
 $8 = ($7|0)==(0);
 if ($8) {
  $12 = $$unpack;
  $13 = $12;
 } else {
  $9 = HEAP32[$6>>2]|0;
  $10 = (($9) + ($$unpack)|0);
  $11 = HEAP32[$10>>2]|0;
  $13 = $11;
 }
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE12fromWireTypeEPNS9_Ut_E($3,$2);
 $14 = (FUNCTION_TABLE_iii[$13 & 255]($6,$3)|0);
 $15 = (__ZN10emscripten8internal11BindingTypeIivE10toWireTypeERKi($14)|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
 STACKTOP = sp;return ($15|0);
}
function __ZN10emscripten8internal10getContextIM6EpanetFiNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEPT_RKSC_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIM6EpanetFilllEiPS2_JlllEE6invokeERKS4_S5_lll($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$elt1 = 0, $$unpack = 0, $$unpack2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = (__ZN10emscripten8internal11BindingTypeIP6EpanetvE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 $6 = $$unpack2 >> 1;
 $7 = (($1) + ($6)|0);
 $8 = $$unpack2 & 1;
 $9 = ($8|0)==(0);
 if ($9) {
  $13 = $$unpack;
  $17 = $13;
 } else {
  $10 = HEAP32[$7>>2]|0;
  $11 = (($10) + ($$unpack)|0);
  $12 = HEAP32[$11>>2]|0;
  $17 = $12;
 }
 $14 = (__ZN10emscripten8internal11BindingTypeIlvE12fromWireTypeEl($2)|0);
 $15 = (__ZN10emscripten8internal11BindingTypeIlvE12fromWireTypeEl($3)|0);
 $16 = (__ZN10emscripten8internal11BindingTypeIlvE12fromWireTypeEl($4)|0);
 $18 = (FUNCTION_TABLE_iiiii[$17 & 255]($7,$14,$15,$16)|0);
 $19 = (__ZN10emscripten8internal11BindingTypeIivE10toWireTypeERKi($18)|0);
 return ($19|0);
}
function __ZN10emscripten8internal10getContextIM6EpanetFilllEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIM6EpanetFiimEiPS2_JimEE6invokeERKS4_S5_im($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$elt1 = 0, $$unpack = 0, $$unpack2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (__ZN10emscripten8internal11BindingTypeIP6EpanetvE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 $5 = $$unpack2 >> 1;
 $6 = (($1) + ($5)|0);
 $7 = $$unpack2 & 1;
 $8 = ($7|0)==(0);
 if ($8) {
  $12 = $$unpack;
  $15 = $12;
 } else {
  $9 = HEAP32[$6>>2]|0;
  $10 = (($9) + ($$unpack)|0);
  $11 = HEAP32[$10>>2]|0;
  $15 = $11;
 }
 $13 = (__ZN10emscripten8internal11BindingTypeIivE12fromWireTypeEi($2)|0);
 $14 = (__ZN10emscripten8internal11BindingTypeImvE12fromWireTypeEm($3)|0);
 $16 = (FUNCTION_TABLE_iiii[$15 & 255]($6,$13,$14)|0);
 $17 = (__ZN10emscripten8internal11BindingTypeIivE10toWireTypeERKi($16)|0);
 return ($17|0);
}
function __ZN10emscripten8internal10getContextIM6EpanetFiimEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIM6EpanetFiNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEES9_iiEiPS2_JS9_S9_iiEE6invokeERKSB_SC_PNS0_11BindingTypeIS9_vEUt_ESJ_ii($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$elt2 = 0, $$unpack = 0, $$unpack3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = sp + 12|0;
 $7 = sp;
 $8 = (__ZN10emscripten8internal11BindingTypeIP6EpanetvE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt2 = ((($0)) + 4|0);
 $$unpack3 = HEAP32[$$elt2>>2]|0;
 $9 = $$unpack3 >> 1;
 $10 = (($1) + ($9)|0);
 $11 = $$unpack3 & 1;
 $12 = ($11|0)==(0);
 if ($12) {
  $16 = $$unpack;
  $19 = $16;
 } else {
  $13 = HEAP32[$10>>2]|0;
  $14 = (($13) + ($$unpack)|0);
  $15 = HEAP32[$14>>2]|0;
  $19 = $15;
 }
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE12fromWireTypeEPNS9_Ut_E($6,$2);
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE12fromWireTypeEPNS9_Ut_E($7,$3);
 $17 = (__ZN10emscripten8internal11BindingTypeIivE12fromWireTypeEi($4)|0);
 $18 = (__ZN10emscripten8internal11BindingTypeIivE12fromWireTypeEi($5)|0);
 $20 = (FUNCTION_TABLE_iiiiii[$19 & 255]($10,$6,$7,$17,$18)|0);
 $21 = (__ZN10emscripten8internal11BindingTypeIivE10toWireTypeERKi($20)|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($6);
 STACKTOP = sp;return ($21|0);
}
function __ZN10emscripten8internal10getContextIM6EpanetFiNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEES9_iiEEEPT_RKSC_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIM6EpanetFivEiPS2_JEE6invokeERKS4_S5_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$elt1 = 0, $$unpack = 0, $$unpack2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZN10emscripten8internal11BindingTypeIP6EpanetvE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 $3 = $$unpack2 >> 1;
 $4 = (($1) + ($3)|0);
 $5 = $$unpack2 & 1;
 $6 = ($5|0)==(0);
 if ($6) {
  $10 = $$unpack;
  $11 = $10;
 } else {
  $7 = HEAP32[$4>>2]|0;
  $8 = (($7) + ($$unpack)|0);
  $9 = HEAP32[$8>>2]|0;
  $11 = $9;
 }
 $12 = (FUNCTION_TABLE_ii[$11 & 255]($4)|0);
 $13 = (__ZN10emscripten8internal11BindingTypeIivE10toWireTypeERKi($12)|0);
 return ($13|0);
}
function __ZN10emscripten8internal10getContextIM6EpanetFivEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIM6EpanetFiNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEES9_S9_EiPS2_JS9_S9_S9_EE6invokeERKSB_SC_PNS0_11BindingTypeIS9_vEUt_ESJ_SJ_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$elt3 = 0, $$unpack = 0, $$unpack4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = sp + 24|0;
 $6 = sp + 12|0;
 $7 = sp;
 $8 = (__ZN10emscripten8internal11BindingTypeIP6EpanetvE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt3 = ((($0)) + 4|0);
 $$unpack4 = HEAP32[$$elt3>>2]|0;
 $9 = $$unpack4 >> 1;
 $10 = (($1) + ($9)|0);
 $11 = $$unpack4 & 1;
 $12 = ($11|0)==(0);
 if ($12) {
  $16 = $$unpack;
  $17 = $16;
 } else {
  $13 = HEAP32[$10>>2]|0;
  $14 = (($13) + ($$unpack)|0);
  $15 = HEAP32[$14>>2]|0;
  $17 = $15;
 }
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE12fromWireTypeEPNS9_Ut_E($5,$2);
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE12fromWireTypeEPNS9_Ut_E($6,$3);
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEvE12fromWireTypeEPNS9_Ut_E($7,$4);
 $18 = (FUNCTION_TABLE_iiiii[$17 & 255]($10,$5,$6,$7)|0);
 $19 = (__ZN10emscripten8internal11BindingTypeIivE10toWireTypeERKi($18)|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($6);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($5);
 STACKTOP = sp;return ($19|0);
}
function __ZN10emscripten8internal10getContextIM6EpanetFiNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEES9_S9_EEEPT_RKSC_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal7InvokerIP6EpanetJEE6invokeEPFS3_vE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (FUNCTION_TABLE_i[$0 & 31]()|0);
 $2 = (__ZN10emscripten8internal11BindingTypeIP6EpanetvE10toWireTypeES3_($1)|0);
 return ($2|0);
}
function __ZN10emscripten8internal11BindingTypeIP6EpanetvE10toWireTypeES3_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN6EpanetC2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _EN_createproject($0);
 return;
}
function __ZN6EpanetD2Ev($$0$0$val) {
 $$0$0$val = $$0$0$val|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _EN_deleteproject($$0$0$val);
 return;
}
function __ZN10emscripten8internal7InvokerIiJilEE6invokeEPFiilEil($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (__ZN10emscripten8internal11BindingTypeIivE12fromWireTypeEi($1)|0);
 $4 = (__ZN10emscripten8internal11BindingTypeIlvE12fromWireTypeEl($2)|0);
 $5 = (FUNCTION_TABLE_iii[$0 & 255]($3,$4)|0);
 $6 = (__ZN10emscripten8internal11BindingTypeIivE10toWireTypeERKi($5)|0);
 return ($6|0);
}
function __ZN10emscripten8internal7InvokerIiJmEE6invokeEPFimEm($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZN10emscripten8internal11BindingTypeImvE12fromWireTypeEm($1)|0);
 $3 = (FUNCTION_TABLE_ii[$0 & 255]($2)|0);
 $4 = (__ZN10emscripten8internal11BindingTypeIivE10toWireTypeERKi($3)|0);
 return ($4|0);
}
function ___stdio_close($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 60|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_dummy_560($2)|0);
 $4 = (___wasi_fd_close(($3|0))|0);
 $5 = $4&65535;
 return ($5|0);
}
function ___stdio_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$048 = 0, $$049 = 0, $$050 = 0, $$052 = 0, $$1 = 0, $$153 = 0, $$156$ph = 0, $$pr = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp;
 $4 = sp + 16|0;
 $5 = ((($0)) + 28|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$3>>2] = $6;
 $7 = ((($3)) + 4|0);
 $8 = ((($0)) + 20|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) - ($6))|0;
 HEAP32[$7>>2] = $10;
 $11 = ((($3)) + 8|0);
 HEAP32[$11>>2] = $1;
 $12 = ((($3)) + 12|0);
 HEAP32[$12>>2] = $2;
 $13 = (($10) + ($2))|0;
 $14 = ((($0)) + 60|0);
 $$049 = 2;$$050 = $13;$$052 = $3;
 while(1) {
  $15 = HEAP32[$14>>2]|0;
  $16 = (___wasi_fd_write(($15|0),($$052|0),($$049|0),($4|0))|0);
  $17 = (___wasi_syscall_ret($16)|0);
  $18 = ($17|0)==(0);
  if ($18) {
   $$pr = HEAP32[$4>>2]|0;
   $20 = $$pr;
  } else {
   HEAP32[$4>>2] = -1;
   $20 = -1;
  }
  $19 = ($$050|0)==($20|0);
  if ($19) {
   label = 6;
   break;
  }
  $28 = ($20|0)<(0);
  if ($28) {
   label = 8;
   break;
  }
  $36 = (($$050) - ($20))|0;
  $37 = ((($$052)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($20>>>0)>($38>>>0);
  $40 = ((($$052)) + 8|0);
  $$153 = $39 ? $40 : $$052;
  $41 = $39 << 31 >> 31;
  $$1 = (($$049) + ($41))|0;
  $42 = $39 ? $38 : 0;
  $$048 = (($20) - ($42))|0;
  $43 = HEAP32[$$153>>2]|0;
  $44 = (($43) + ($$048)|0);
  HEAP32[$$153>>2] = $44;
  $45 = ((($$153)) + 4|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = (($46) - ($$048))|0;
  HEAP32[$45>>2] = $47;
  $$049 = $$1;$$050 = $36;$$052 = $$153;
 }
 if ((label|0) == 6) {
  $21 = ((($0)) + 44|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ((($0)) + 48|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($22) + ($24)|0);
  $26 = ((($0)) + 16|0);
  HEAP32[$26>>2] = $25;
  $27 = $22;
  HEAP32[$5>>2] = $27;
  HEAP32[$8>>2] = $27;
  $$156$ph = $2;
 }
 else if ((label|0) == 8) {
  $29 = ((($0)) + 16|0);
  HEAP32[$29>>2] = 0;
  HEAP32[$5>>2] = 0;
  HEAP32[$8>>2] = 0;
  $30 = HEAP32[$0>>2]|0;
  $31 = $30 | 32;
  HEAP32[$0>>2] = $31;
  $32 = ($$049|0)==(2);
  if ($32) {
   $$156$ph = 0;
  } else {
   $33 = ((($$052)) + 4|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (($2) - ($34))|0;
   $$156$ph = $35;
  }
 }
 STACKTOP = sp;return ($$156$ph|0);
}
function ___stdio_seek($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = ((($0)) + 60|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $3&255;
 $8 = (___wasi_fd_seek(($6|0),($1|0),($2|0),($7|0),($4|0))|0);
 $9 = (___wasi_syscall_ret($8)|0);
 $10 = ($9|0)==(0);
 if ($10) {
  $11 = $4;
  $12 = $11;
  $13 = HEAP32[$12>>2]|0;
  $14 = (($11) + 4)|0;
  $15 = $14;
  $16 = HEAP32[$15>>2]|0;
  $21 = $16;$22 = $13;
 } else {
  $17 = $4;
  $18 = $17;
  HEAP32[$18>>2] = -1;
  $19 = (($17) + 4)|0;
  $20 = $19;
  HEAP32[$20>>2] = -1;
  $21 = -1;$22 = -1;
 }
 setTempRet0(($21) | 0);
 STACKTOP = sp;return ($22|0);
}
function ___wasi_syscall_ret($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0<<16>>16)==(0);
 if ($1) {
  $$0 = 0;
 } else {
  $2 = $0&65535;
  HEAP32[5168] = $2;
  $$0 = -1;
 }
 return ($$0|0);
}
function ___errno_location() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (20672|0);
}
function _dummy_560($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function ___stdio_read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$cast = 0, $$pr = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp;
 $4 = sp + 16|0;
 HEAP32[$3>>2] = $1;
 $5 = ((($3)) + 4|0);
 $6 = ((($0)) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0);
 $9 = $8&1;
 $10 = (($2) - ($9))|0;
 HEAP32[$5>>2] = $10;
 $11 = ((($3)) + 8|0);
 $12 = ((($0)) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 HEAP32[$11>>2] = $13;
 $14 = ((($3)) + 12|0);
 HEAP32[$14>>2] = $7;
 $15 = ((($0)) + 60|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (___wasi_fd_read(($16|0),($3|0),2,($4|0))|0);
 $18 = (___wasi_syscall_ret($17)|0);
 $19 = ($18|0)==(0);
 if ($19) {
  $$pr = HEAP32[$4>>2]|0;
  $20 = ($$pr|0)<(1);
  if ($20) {
   $22 = $$pr;
   label = 4;
  } else {
   $26 = HEAP32[$5>>2]|0;
   $27 = ($$pr>>>0)>($26>>>0);
   if ($27) {
    $28 = (($$pr) - ($26))|0;
    $29 = HEAP32[$12>>2]|0;
    $30 = ((($0)) + 4|0);
    HEAP32[$30>>2] = $29;
    $$cast = $29;
    $31 = (($$cast) + ($28)|0);
    $32 = ((($0)) + 8|0);
    HEAP32[$32>>2] = $31;
    $33 = HEAP32[$6>>2]|0;
    $34 = ($33|0)==(0);
    if ($34) {
     $$0 = $2;
    } else {
     $35 = ((($$cast)) + 1|0);
     HEAP32[$30>>2] = $35;
     $36 = HEAP8[$$cast>>0]|0;
     $37 = (($2) + -1)|0;
     $38 = (($1) + ($37)|0);
     HEAP8[$38>>0] = $36;
     $$0 = $2;
    }
   } else {
    $$0 = $$pr;
   }
  }
 } else {
  HEAP32[$4>>2] = -1;
  $22 = -1;
  label = 4;
 }
 if ((label|0) == 4) {
  $21 = $22 & 48;
  $23 = $21 ^ 16;
  $24 = HEAP32[$0>>2]|0;
  $25 = $23 | $24;
  HEAP32[$0>>2] = $25;
  $$0 = $22;
 }
 STACKTOP = sp;return ($$0|0);
}
function ___emscripten_stdout_close($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function ___emscripten_stdout_seek($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 setTempRet0((0) | 0);
 return 0;
}
function ___shlim($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 112|0);
 $2 = $1;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = ((($0)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($0)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($7) - ($9))|0;
 $11 = ($10|0)<(0);
 $12 = $11 << 31 >> 31;
 $13 = ((($0)) + 120|0);
 $14 = $13;
 $15 = $14;
 HEAP32[$15>>2] = $10;
 $16 = (($14) + 4)|0;
 $17 = $16;
 HEAP32[$17>>2] = $12;
 $18 = ((($0)) + 104|0);
 HEAP32[$18>>2] = $7;
 return;
}
function ___shgetc($0) {
 $0 = $0|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert28$pre$phiZZZZ2D = 0, $$pre = 0, $$pre1$pre$phiZZ2D = 0, $$pre2 = 0, $$pre29 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 112|0);
 $2 = $1;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 4)|0;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = ($4|0)==(0);
 $9 = ($7|0)==(0);
 $10 = $8 & $9;
 if ($10) {
  label = 3;
 } else {
  $11 = ((($0)) + 120|0);
  $12 = $11;
  $13 = $12;
  $14 = HEAP32[$13>>2]|0;
  $15 = (($12) + 4)|0;
  $16 = $15;
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)<($7|0);
  $19 = ($14>>>0)<($4>>>0);
  $20 = ($17|0)==($7|0);
  $21 = $20 & $19;
  $22 = $18 | $21;
  if ($22) {
   label = 3;
  } else {
   label = 4;
  }
 }
 if ((label|0) == 3) {
  $23 = (___uflow($0)|0);
  $24 = ($23|0)<(0);
  if ($24) {
   label = 4;
  } else {
   $26 = $1;
   $27 = $26;
   $28 = HEAP32[$27>>2]|0;
   $29 = (($26) + 4)|0;
   $30 = $29;
   $31 = HEAP32[$30>>2]|0;
   $32 = ($28|0)==(0);
   $33 = ($31|0)==(0);
   $34 = $32 & $33;
   $$phi$trans$insert = ((($0)) + 8|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   if ($34) {
    $35 = $$pre;
    $$pre2 = ((($0)) + 4|0);
    $$pre1$pre$phiZZ2D = $$pre2;$89 = $35;
    label = 9;
   } else {
    $36 = ((($0)) + 4|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = $37;
    $39 = (($$pre) - ($38))|0;
    $40 = ($39|0)<(0);
    $41 = $40 << 31 >> 31;
    $42 = ((($0)) + 120|0);
    $43 = $42;
    $44 = $43;
    $45 = HEAP32[$44>>2]|0;
    $46 = (($43) + 4)|0;
    $47 = $46;
    $48 = HEAP32[$47>>2]|0;
    $49 = (_i64Subtract(($28|0),($31|0),($45|0),($48|0))|0);
    $50 = (getTempRet0() | 0);
    $51 = ($50|0)>($41|0);
    $52 = ($49>>>0)>($39>>>0);
    $53 = ($50|0)==($41|0);
    $54 = $53 & $52;
    $55 = $51 | $54;
    $56 = $$pre;
    if ($55) {
     $$pre1$pre$phiZZ2D = $36;$89 = $56;
     label = 9;
    } else {
     $57 = (($49) + -1)|0;
     $58 = (($37) + ($57)|0);
     $59 = ((($0)) + 104|0);
     HEAP32[$59>>2] = $58;
     $$phi$trans$insert28$pre$phiZZZZ2D = $36;$62 = $56;
    }
   }
   if ((label|0) == 9) {
    $60 = ((($0)) + 104|0);
    HEAP32[$60>>2] = $$pre;
    $$phi$trans$insert28$pre$phiZZZZ2D = $$pre1$pre$phiZZ2D;$62 = $89;
   }
   $61 = ($62|0)==(0|0);
   if ($61) {
    $$pre29 = HEAP32[$$phi$trans$insert28$pre$phiZZZZ2D>>2]|0;
    $84 = $$pre29;
   } else {
    $63 = HEAP32[$$phi$trans$insert28$pre$phiZZZZ2D>>2]|0;
    $64 = $62;
    $65 = (($64) + 1)|0;
    $66 = (($65) - ($63))|0;
    $67 = ($66|0)<(0);
    $68 = $67 << 31 >> 31;
    $69 = ((($0)) + 120|0);
    $70 = $69;
    $71 = $70;
    $72 = HEAP32[$71>>2]|0;
    $73 = (($70) + 4)|0;
    $74 = $73;
    $75 = HEAP32[$74>>2]|0;
    $76 = (_i64Add(($72|0),($75|0),($66|0),($68|0))|0);
    $77 = (getTempRet0() | 0);
    $78 = $69;
    $79 = $78;
    HEAP32[$79>>2] = $76;
    $80 = (($78) + 4)|0;
    $81 = $80;
    HEAP32[$81>>2] = $77;
    $82 = $63;
    $84 = $82;
   }
   $83 = ((($84)) + -1|0);
   $85 = HEAP8[$83>>0]|0;
   $86 = $85&255;
   $87 = ($23|0)==($86|0);
   if ($87) {
    $$0 = $23;
   } else {
    $88 = $23&255;
    HEAP8[$83>>0] = $88;
    $$0 = $23;
   }
  }
 }
 if ((label|0) == 4) {
  $25 = ((($0)) + 104|0);
  HEAP32[$25>>2] = 0;
  $$0 = -1;
 }
 return ($$0|0);
}
function _isspace($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $narrow = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(32);
 $2 = (($0) + -9)|0;
 $3 = ($2>>>0)<(5);
 $narrow = $1 | $3;
 $4 = $narrow&1;
 return ($4|0);
}
function ___uflow($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = (___toread($0)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = ((($0)) + 32|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (FUNCTION_TABLE_iiii[$5 & 255]($0,$1,1)|0);
  $7 = ($6|0)==(1);
  if ($7) {
   $8 = HEAP8[$1>>0]|0;
   $9 = $8&255;
   $$0 = $9;
  } else {
   $$0 = -1;
  }
 } else {
  $$0 = -1;
 }
 STACKTOP = sp;return ($$0|0);
}
function ___toread($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8>>>0)>($10>>>0);
 if ($11) {
  $12 = ((($0)) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  (FUNCTION_TABLE_iiii[$13 & 255]($0,0,0)|0);
 }
 $14 = ((($0)) + 16|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$9>>2] = 0;
 HEAP32[$7>>2] = 0;
 $15 = HEAP32[$0>>2]|0;
 $16 = $15 & 4;
 $17 = ($16|0)==(0);
 if ($17) {
  $19 = ((($0)) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($0)) + 8|0);
  HEAP32[$24>>2] = $23;
  $25 = ((($0)) + 4|0);
  HEAP32[$25>>2] = $23;
  $26 = $15 << 27;
  $sext = $26 >> 31;
  $$0 = $sext;
 } else {
  $18 = $15 | 32;
  HEAP32[$0>>2] = $18;
  $$0 = -1;
 }
 return ($$0|0);
}
function _copysign($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $1;$4 = HEAP32[tempDoublePtr>>2]|0;
 $5 = HEAP32[tempDoublePtr+4>>2]|0;
 $6 = $3 & 2147483647;
 $7 = $5 & -2147483648;
 $8 = $7 | $6;
 HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $8;$9 = +HEAPF64[tempDoublePtr>>3];
 return (+$9);
}
function _strcmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$0>>0]|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = ($2<<24>>24)!=($3<<24>>24);
 $5 = ($2<<24>>24)==(0);
 $or$cond9 = $5 | $4;
 if ($or$cond9) {
  $$lcssa = $3;$$lcssa8 = $2;
 } else {
  $$011 = $1;$$0710 = $0;
  while(1) {
   $6 = ((($$0710)) + 1|0);
   $7 = ((($$011)) + 1|0);
   $8 = HEAP8[$6>>0]|0;
   $9 = HEAP8[$7>>0]|0;
   $10 = ($8<<24>>24)!=($9<<24>>24);
   $11 = ($8<<24>>24)==(0);
   $or$cond = $11 | $10;
   if ($or$cond) {
    $$lcssa = $9;$$lcssa8 = $8;
    break;
   } else {
    $$011 = $7;$$0710 = $6;
   }
  }
 }
 $12 = $$lcssa8&255;
 $13 = $$lcssa&255;
 $14 = (($12) - ($13))|0;
 return ($14|0);
}
function _memcmp($0) {
 $0 = $0|0;
 var $$01318 = 0, $$01417 = 0, $$019 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$01318 = $0;$$01417 = 6;$$019 = 16827;
 while(1) {
  $1 = HEAP8[$$01318>>0]|0;
  $2 = HEAP8[$$019>>0]|0;
  $3 = ($1<<24>>24)==($2<<24>>24);
  if (!($3)) {
   label = 4;
   break;
  }
  $4 = (($$01417) + -1)|0;
  $5 = ((($$01318)) + 1|0);
  $6 = ((($$019)) + 1|0);
  $7 = ($4|0)==(0);
  if ($7) {
   $11 = 0;
   break;
  } else {
   $$01318 = $5;$$01417 = $4;$$019 = $6;
  }
 }
 if ((label|0) == 4) {
  $8 = $1&255;
  $9 = $2&255;
  $10 = (($8) - ($9))|0;
  $11 = $10;
 }
 return ($11|0);
}
function _isdigit($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -48)|0;
 $2 = ($1>>>0)<(10);
 $3 = $2&1;
 return ($3|0);
}
function _sprintf($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $varargs;
 _vsprintf($0,$1,$2);
 STACKTOP = sp;return;
}
function _vsprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _vsnprintf($0,2147483647,$1,$2);
 return;
}
function _vsnprintf($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$014 = 0, $$015 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $4 = sp + 144|0;
 $5 = sp;
 _memcpy(($5|0),(2856|0),144)|0;
 $6 = (($1) + -1)|0;
 $7 = ($6>>>0)>(2147483646);
 if ($7) {
  $8 = ($1|0)==(0);
  if ($8) {
   $$014 = $4;$$015 = 1;
   label = 4;
  } else {
   HEAP32[5168] = 61;
  }
 } else {
  $$014 = $0;$$015 = $1;
  label = 4;
 }
 if ((label|0) == 4) {
  $9 = $$014;
  $10 = (-2 - ($9))|0;
  $11 = ($$015>>>0)>($10>>>0);
  $spec$select = $11 ? $10 : $$015;
  $12 = ((($5)) + 48|0);
  HEAP32[$12>>2] = $spec$select;
  $13 = ((($5)) + 20|0);
  HEAP32[$13>>2] = $$014;
  $14 = ((($5)) + 44|0);
  HEAP32[$14>>2] = $$014;
  $15 = (($$014) + ($spec$select)|0);
  $16 = ((($5)) + 16|0);
  HEAP32[$16>>2] = $15;
  $17 = ((($5)) + 28|0);
  HEAP32[$17>>2] = $15;
  (_vfprintf($5,$2,$3)|0);
  $18 = ($spec$select|0)==(0);
  if (!($18)) {
   $19 = HEAP32[$13>>2]|0;
   $20 = HEAP32[$16>>2]|0;
   $21 = ($19|0)==($20|0);
   $22 = $21 << 31 >> 31;
   $23 = (($19) + ($22)|0);
   HEAP8[$23>>0] = 0;
  }
 }
 STACKTOP = sp;return;
}
function _vfprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (___vfprintf_internal($0,$1,$2)|0);
 return ($3|0);
}
function _fmt_fp($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$ = 0, $$0 = 0, $$0463$lcssa = 0, $$0463588 = 0, $$0464599 = 0, $$0471 = 0.0, $$0479 = 0, $$0487657 = 0, $$0488 = 0, $$0488669 = 0, $$0488671 = 0, $$0497670 = 0, $$0498 = 0, $$0511586 = 0.0, $$0512 = 0, $$0513 = 0, $$0516652 = 0, $$0522 = 0, $$0523 = 0, $$0525 = 0;
 var $$0527 = 0, $$0529 = 0, $$0529$in646 = 0, $$0532651 = 0, $$1465 = 0, $$1467 = 0.0, $$1469 = 0.0, $$1472 = 0.0, $$1480 = 0, $$1482$lcssa = 0, $$1482683 = 0, $$1489656 = 0, $$1499 = 0, $$1510587 = 0, $$1514$lcssa = 0, $$1514614 = 0, $$1517 = 0, $$1526 = 0, $$1528 = 0, $$1530621 = 0;
 var $$1533$lcssa = 0, $$1533645 = 0, $$1604 = 0, $$2 = 0, $$2473 = 0.0, $$2476 = 0, $$2483 = 0, $$2490$lcssa = 0, $$2490638 = 0, $$2500$lcssa = 0, $$2500682 = 0, $$2515 = 0, $$2518634 = 0, $$2531 = 0, $$2534633 = 0, $$3 = 0.0, $$3477 = 0, $$3484$lcssa = 0, $$3484663 = 0, $$3501$lcssa = 0;
 var $$3501676 = 0, $$3535620 = 0, $$4 = 0.0, $$4478$lcssa = 0, $$4478594 = 0, $$4492 = 0, $$4502$lcssa = 0, $$4502662 = 0, $$4520 = 0, $$5$lcssa = 0, $$5486$lcssa = 0, $$5486639 = 0, $$5493603 = 0, $$5503 = 0, $$5521 = 0, $$560 = 0, $$5609 = 0, $$6 = 0, $$6494593 = 0, $$7495608 = 0;
 var $$8 = 0, $$8506 = 0, $$9 = 0, $$9507$lcssa = 0, $$9507625 = 0, $$lcssa583 = 0, $$lobit = 0, $$neg = 0, $$neg571 = 0, $$not = 0, $$pn = 0, $$pr = 0, $$pr564 = 0, $$pre = 0, $$pre$phi717Z2D = 0, $$pre$phi718Z2D = 0, $$pre720 = 0, $$sink757 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0.0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0.0;
 var $247 = 0.0, $248 = 0.0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0;
 var $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0;
 var $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0;
 var $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0.0, $370 = 0, $371 = 0, $372 = 0, $373 = 0;
 var $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0.0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0;
 var $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0;
 var $410 = 0, $411 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0.0;
 var $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $not$ = 0, $or$cond = 0, $or$cond3$not = 0, $or$cond543 = 0, $or$cond546 = 0, $or$cond556 = 0, $or$cond559 = 0, $or$cond6 = 0, $scevgep711 = 0, $scevgep711712 = 0, $spec$select = 0, $spec$select539 = 0, $spec$select540 = 0, $spec$select540722 = 0, $spec$select540723 = 0, $spec$select541 = 0;
 var $spec$select544 = 0.0, $spec$select547 = 0, $spec$select548 = 0, $spec$select549 = 0, $spec$select551 = 0, $spec$select554 = 0, $spec$select557 = 0, $spec$select561 = 0.0, $spec$select562 = 0, $spec$select563 = 0, $spec$select565 = 0, $spec$select566 = 0, $spec$select567 = 0.0, $spec$select568 = 0.0, $spec$select569 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(560|0);
 $6 = sp + 32|0;
 $7 = sp + 536|0;
 $8 = sp;
 $9 = $8;
 $10 = sp + 540|0;
 HEAP32[$7>>2] = 0;
 $11 = ((($10)) + 12|0);
 $12 = (___DOUBLE_BITS_670($1)|0);
 $13 = (getTempRet0() | 0);
 $14 = ($13|0)<(0);
 if ($14) {
  $15 = - $1;
  $16 = (___DOUBLE_BITS_670($15)|0);
  $17 = (getTempRet0() | 0);
  $$0471 = $15;$$0522 = 1;$$0523 = 16777;$25 = $17;$411 = $16;
 } else {
  $18 = $4 & 2048;
  $19 = ($18|0)==(0);
  $20 = $4 & 1;
  $21 = ($20|0)==(0);
  $$ = $21 ? (16778) : (16783);
  $spec$select565 = $19 ? $$ : (16780);
  $22 = $4 & 2049;
  $23 = ($22|0)!=(0);
  $spec$select566 = $23&1;
  $$0471 = $1;$$0522 = $spec$select566;$$0523 = $spec$select565;$25 = $13;$411 = $12;
 }
 $24 = $25 & 2146435072;
 $26 = (0)==(0);
 $27 = ($24|0)==(2146435072);
 $28 = $26 & $27;
 do {
  if ($28) {
   $29 = $5 & 32;
   $30 = ($29|0)!=(0);
   $31 = $30 ? 16796 : 16800;
   $32 = ($$0471 != $$0471) | (0.0 != 0.0);
   $33 = $30 ? 16819 : 16804;
   $$0512 = $32 ? $33 : $31;
   $34 = (($$0522) + 3)|0;
   $35 = $4 & -65537;
   _pad_667($0,32,$2,$34,$35);
   _out($0,$$0523,$$0522);
   _out($0,$$0512,3);
   $36 = $4 ^ 8192;
   _pad_667($0,32,$2,$34,$36);
   $$sink757 = $34;
  } else {
   $37 = (+_frexp($$0471,$7));
   $38 = $37 * 2.0;
   $39 = $38 != 0.0;
   if ($39) {
    $40 = HEAP32[$7>>2]|0;
    $41 = (($40) + -1)|0;
    HEAP32[$7>>2] = $41;
   }
   $42 = $5 | 32;
   $43 = ($42|0)==(97);
   if ($43) {
    $44 = $5 & 32;
    $45 = ($44|0)==(0);
    $46 = ((($$0523)) + 9|0);
    $spec$select = $45 ? $$0523 : $46;
    $47 = $$0522 | 2;
    $48 = ($3>>>0)>(11);
    $49 = (12 - ($3))|0;
    $50 = ($49|0)==(0);
    $51 = $48 | $50;
    do {
     if ($51) {
      $$1472 = $38;
     } else {
      $$0511586 = 8.0;$$1510587 = $49;
      while(1) {
       $52 = (($$1510587) + -1)|0;
       $53 = $$0511586 * 16.0;
       $54 = ($52|0)==(0);
       if ($54) {
        break;
       } else {
        $$0511586 = $53;$$1510587 = $52;
       }
      }
      $55 = HEAP8[$spec$select>>0]|0;
      $56 = ($55<<24>>24)==(45);
      if ($56) {
       $57 = - $38;
       $58 = $57 - $53;
       $59 = $53 + $58;
       $60 = - $59;
       $$1472 = $60;
       break;
      } else {
       $61 = $38 + $53;
       $62 = $61 - $53;
       $$1472 = $62;
       break;
      }
     }
    } while(0);
    $63 = HEAP32[$7>>2]|0;
    $64 = ($63|0)<(0);
    $65 = (0 - ($63))|0;
    $66 = $64 ? $65 : $63;
    $67 = ($66|0)<(0);
    $68 = $67 << 31 >> 31;
    $69 = (_fmt_u($66,$68,$11)|0);
    $70 = ($69|0)==($11|0);
    if ($70) {
     $71 = ((($10)) + 11|0);
     HEAP8[$71>>0] = 48;
     $$0513 = $71;
    } else {
     $$0513 = $69;
    }
    $72 = $63 >> 31;
    $73 = $72 & 2;
    $74 = (($73) + 43)|0;
    $75 = $74&255;
    $76 = ((($$0513)) + -1|0);
    HEAP8[$76>>0] = $75;
    $77 = (($5) + 15)|0;
    $78 = $77&255;
    $79 = ((($$0513)) + -2|0);
    HEAP8[$79>>0] = $78;
    $80 = ($3|0)<(1);
    $81 = $4 & 8;
    $82 = ($81|0)==(0);
    $$0525 = $8;$$2473 = $$1472;
    while(1) {
     $83 = (~~(($$2473)));
     $84 = (2448 + ($83)|0);
     $85 = HEAP8[$84>>0]|0;
     $86 = $85&255;
     $87 = $44 | $86;
     $88 = $87&255;
     $89 = ((($$0525)) + 1|0);
     HEAP8[$$0525>>0] = $88;
     $90 = (+($83|0));
     $91 = $$2473 - $90;
     $92 = $91 * 16.0;
     $93 = $89;
     $94 = (($93) - ($9))|0;
     $95 = ($94|0)==(1);
     if ($95) {
      $96 = $92 == 0.0;
      $or$cond3$not = $80 & $96;
      $or$cond = $82 & $or$cond3$not;
      if ($or$cond) {
       $$1526 = $89;
      } else {
       $97 = ((($$0525)) + 2|0);
       HEAP8[$89>>0] = 46;
       $$1526 = $97;
      }
     } else {
      $$1526 = $89;
     }
     $98 = $92 != 0.0;
     if ($98) {
      $$0525 = $$1526;$$2473 = $92;
     } else {
      break;
     }
    }
    $99 = ($3|0)==(0);
    $$pre720 = $$1526;
    if ($99) {
     label = 25;
    } else {
     $100 = (-2 - ($9))|0;
     $101 = (($100) + ($$pre720))|0;
     $102 = ($101|0)<($3|0);
     if ($102) {
      $103 = $11;
      $104 = $79;
      $105 = (($3) + 2)|0;
      $106 = (($105) + ($103))|0;
      $107 = (($106) - ($104))|0;
      $$0527 = $107;$$pre$phi717Z2D = $103;$$pre$phi718Z2D = $104;
     } else {
      label = 25;
     }
    }
    if ((label|0) == 25) {
     $108 = $11;
     $109 = $79;
     $110 = (($108) - ($9))|0;
     $111 = (($110) - ($109))|0;
     $112 = (($111) + ($$pre720))|0;
     $$0527 = $112;$$pre$phi717Z2D = $108;$$pre$phi718Z2D = $109;
    }
    $113 = (($$0527) + ($47))|0;
    _pad_667($0,32,$2,$113,$4);
    _out($0,$spec$select,$47);
    $114 = $4 ^ 65536;
    _pad_667($0,48,$2,$113,$114);
    $115 = (($$pre720) - ($9))|0;
    _out($0,$8,$115);
    $116 = (($$pre$phi717Z2D) - ($$pre$phi718Z2D))|0;
    $117 = (($115) + ($116))|0;
    $118 = (($$0527) - ($117))|0;
    _pad_667($0,48,$118,0,0);
    _out($0,$79,$116);
    $119 = $4 ^ 8192;
    _pad_667($0,32,$2,$113,$119);
    $$sink757 = $113;
    break;
   }
   $120 = ($3|0)<(0);
   $spec$select539 = $120 ? 6 : $3;
   if ($39) {
    $121 = $38 * 268435456.0;
    $122 = HEAP32[$7>>2]|0;
    $123 = (($122) + -28)|0;
    HEAP32[$7>>2] = $123;
    $$3 = $121;$$pr = $123;
   } else {
    $$pre = HEAP32[$7>>2]|0;
    $$3 = $38;$$pr = $$pre;
   }
   $124 = ($$pr|0)<(0);
   $125 = ((($6)) + 288|0);
   $$0498 = $124 ? $6 : $125;
   $$1499 = $$0498;$$4 = $$3;
   while(1) {
    $126 = (~~(($$4))>>>0);
    HEAP32[$$1499>>2] = $126;
    $127 = ((($$1499)) + 4|0);
    $128 = (+($126>>>0));
    $129 = $$4 - $128;
    $130 = $129 * 1.0E+9;
    $131 = $130 != 0.0;
    if ($131) {
     $$1499 = $127;$$4 = $130;
    } else {
     break;
    }
   }
   $132 = $$0498;
   $133 = ($$pr|0)>(0);
   if ($133) {
    $$1482683 = $$0498;$$2500682 = $127;$135 = $$pr;
    while(1) {
     $134 = ($135|0)<(29);
     $136 = $134 ? $135 : 29;
     $$0488669 = ((($$2500682)) + -4|0);
     $137 = ($$0488669>>>0)<($$1482683>>>0);
     if ($137) {
      $$2483 = $$1482683;
     } else {
      $$0488671 = $$0488669;$$0497670 = 0;
      while(1) {
       $138 = HEAP32[$$0488671>>2]|0;
       $139 = (_bitshift64Shl(($138|0),0,($136|0))|0);
       $140 = (getTempRet0() | 0);
       $141 = (_i64Add(($139|0),($140|0),($$0497670|0),0)|0);
       $142 = (getTempRet0() | 0);
       $143 = (___udivdi3(($141|0),($142|0),1000000000,0)|0);
       $144 = (getTempRet0() | 0);
       $145 = (___muldi3(($143|0),($144|0),-1000000000,-1)|0);
       $146 = (getTempRet0() | 0);
       $147 = (_i64Add(($141|0),($142|0),($145|0),($146|0))|0);
       $148 = (getTempRet0() | 0);
       HEAP32[$$0488671>>2] = $147;
       $$0488 = ((($$0488671)) + -4|0);
       $149 = ($$0488>>>0)<($$1482683>>>0);
       if ($149) {
        break;
       } else {
        $$0488671 = $$0488;$$0497670 = $143;
       }
      }
      $150 = ($143|0)==(0);
      if ($150) {
       $$2483 = $$1482683;
      } else {
       $151 = ((($$1482683)) + -4|0);
       HEAP32[$151>>2] = $143;
       $$2483 = $151;
      }
     }
     $152 = ($$2500682>>>0)>($$2483>>>0);
     L57: do {
      if ($152) {
       $$3501676 = $$2500682;
       while(1) {
        $154 = ((($$3501676)) + -4|0);
        $155 = HEAP32[$154>>2]|0;
        $156 = ($155|0)==(0);
        if (!($156)) {
         $$3501$lcssa = $$3501676;
         break L57;
        }
        $153 = ($154>>>0)>($$2483>>>0);
        if ($153) {
         $$3501676 = $154;
        } else {
         $$3501$lcssa = $154;
         break;
        }
       }
      } else {
       $$3501$lcssa = $$2500682;
      }
     } while(0);
     $157 = HEAP32[$7>>2]|0;
     $158 = (($157) - ($136))|0;
     HEAP32[$7>>2] = $158;
     $159 = ($158|0)>(0);
     if ($159) {
      $$1482683 = $$2483;$$2500682 = $$3501$lcssa;$135 = $158;
     } else {
      $$1482$lcssa = $$2483;$$2500$lcssa = $$3501$lcssa;$$pr564 = $158;
      break;
     }
    }
   } else {
    $$1482$lcssa = $$0498;$$2500$lcssa = $127;$$pr564 = $$pr;
   }
   $160 = ($$pr564|0)<(0);
   if ($160) {
    $161 = (($spec$select539) + 25)|0;
    $162 = (($161|0) / 9)&-1;
    $163 = (($162) + 1)|0;
    $164 = ($42|0)==(102);
    $$3484663 = $$1482$lcssa;$$4502662 = $$2500$lcssa;$166 = $$pr564;
    while(1) {
     $165 = (0 - ($166))|0;
     $167 = ($165|0)<(9);
     $168 = $167 ? $165 : 9;
     $169 = ($$3484663>>>0)<($$4502662>>>0);
     if ($169) {
      $173 = 1 << $168;
      $174 = (($173) + -1)|0;
      $175 = 1000000000 >>> $168;
      $$0487657 = 0;$$1489656 = $$3484663;
      while(1) {
       $176 = HEAP32[$$1489656>>2]|0;
       $177 = $176 & $174;
       $178 = $176 >>> $168;
       $179 = (($178) + ($$0487657))|0;
       HEAP32[$$1489656>>2] = $179;
       $180 = Math_imul($177, $175)|0;
       $181 = ((($$1489656)) + 4|0);
       $182 = ($181>>>0)<($$4502662>>>0);
       if ($182) {
        $$0487657 = $180;$$1489656 = $181;
       } else {
        break;
       }
      }
      $183 = HEAP32[$$3484663>>2]|0;
      $184 = ($183|0)==(0);
      $185 = ((($$3484663)) + 4|0);
      $spec$select540 = $184 ? $185 : $$3484663;
      $186 = ($180|0)==(0);
      if ($186) {
       $$5503 = $$4502662;$spec$select540723 = $spec$select540;
      } else {
       $187 = ((($$4502662)) + 4|0);
       HEAP32[$$4502662>>2] = $180;
       $$5503 = $187;$spec$select540723 = $spec$select540;
      }
     } else {
      $170 = HEAP32[$$3484663>>2]|0;
      $171 = ($170|0)==(0);
      $172 = ((($$3484663)) + 4|0);
      $spec$select540722 = $171 ? $172 : $$3484663;
      $$5503 = $$4502662;$spec$select540723 = $spec$select540722;
     }
     $188 = $164 ? $$0498 : $spec$select540723;
     $189 = $$5503;
     $190 = $188;
     $191 = (($189) - ($190))|0;
     $192 = $191 >> 2;
     $193 = ($192|0)>($163|0);
     $194 = (($188) + ($163<<2)|0);
     $spec$select541 = $193 ? $194 : $$5503;
     $195 = HEAP32[$7>>2]|0;
     $196 = (($195) + ($168))|0;
     HEAP32[$7>>2] = $196;
     $197 = ($196|0)<(0);
     if ($197) {
      $$3484663 = $spec$select540723;$$4502662 = $spec$select541;$166 = $196;
     } else {
      $$3484$lcssa = $spec$select540723;$$4502$lcssa = $spec$select541;
      break;
     }
    }
   } else {
    $$3484$lcssa = $$1482$lcssa;$$4502$lcssa = $$2500$lcssa;
   }
   $198 = ($$3484$lcssa>>>0)<($$4502$lcssa>>>0);
   if ($198) {
    $199 = $$3484$lcssa;
    $200 = (($132) - ($199))|0;
    $201 = $200 >> 2;
    $202 = ($201*9)|0;
    $203 = HEAP32[$$3484$lcssa>>2]|0;
    $204 = ($203>>>0)<(10);
    if ($204) {
     $$1517 = $202;
    } else {
     $$0516652 = $202;$$0532651 = 10;
     while(1) {
      $205 = ($$0532651*10)|0;
      $206 = (($$0516652) + 1)|0;
      $207 = ($203>>>0)<($205>>>0);
      if ($207) {
       $$1517 = $206;
       break;
      } else {
       $$0516652 = $206;$$0532651 = $205;
      }
     }
    }
   } else {
    $$1517 = 0;
   }
   $208 = ($42|0)==(102);
   $209 = $208 ? 0 : $$1517;
   $210 = (($spec$select539) - ($209))|0;
   $211 = ($42|0)==(103);
   $212 = ($spec$select539|0)!=(0);
   $213 = $212 & $211;
   $$neg = $213 << 31 >> 31;
   $214 = (($210) + ($$neg))|0;
   $215 = $$4502$lcssa;
   $216 = (($215) - ($132))|0;
   $217 = $216 >> 2;
   $218 = ($217*9)|0;
   $219 = (($218) + -9)|0;
   $220 = ($214|0)<($219|0);
   if ($220) {
    $221 = ((($$0498)) + 4|0);
    $222 = (($214) + 9216)|0;
    $223 = (($222|0) / 9)&-1;
    $224 = (($223) + -1024)|0;
    $225 = (($221) + ($224<<2)|0);
    $226 = Math_imul($223, -9)|0;
    $227 = (($222) + ($226))|0;
    $228 = ($227|0)<(8);
    if ($228) {
     $$0529$in646 = $227;$$1533645 = 10;
     while(1) {
      $$0529 = (($$0529$in646) + 1)|0;
      $229 = ($$1533645*10)|0;
      $230 = ($$0529$in646|0)<(7);
      if ($230) {
       $$0529$in646 = $$0529;$$1533645 = $229;
      } else {
       $$1533$lcssa = $229;
       break;
      }
     }
    } else {
     $$1533$lcssa = 10;
    }
    $231 = HEAP32[$225>>2]|0;
    $232 = (($231>>>0) / ($$1533$lcssa>>>0))&-1;
    $233 = Math_imul($232, $$1533$lcssa)|0;
    $234 = (($231) - ($233))|0;
    $235 = ($234|0)==(0);
    $236 = ((($225)) + 4|0);
    $237 = ($236|0)==($$4502$lcssa|0);
    $or$cond543 = $237 & $235;
    if ($or$cond543) {
     $$4492 = $225;$$4520 = $$1517;$$8 = $$3484$lcssa;
    } else {
     $238 = $232 & 1;
     $239 = ($238|0)==(0);
     $spec$select544 = $239 ? 9007199254740992.0 : 9007199254740994.0;
     $240 = $$1533$lcssa >>> 1;
     $241 = ($234>>>0)<($240>>>0);
     $242 = ($234|0)==($240|0);
     $or$cond546 = $237 & $242;
     $spec$select561 = $or$cond546 ? 1.0 : 1.5;
     $spec$select567 = $241 ? 0.5 : $spec$select561;
     $243 = ($$0522|0)==(0);
     if ($243) {
      $$1467 = $spec$select567;$$1469 = $spec$select544;
     } else {
      $244 = HEAP8[$$0523>>0]|0;
      $245 = ($244<<24>>24)==(45);
      $246 = - $spec$select544;
      $247 = - $spec$select567;
      $spec$select568 = $245 ? $246 : $spec$select544;
      $spec$select569 = $245 ? $247 : $spec$select567;
      $$1467 = $spec$select569;$$1469 = $spec$select568;
     }
     HEAP32[$225>>2] = $233;
     $248 = $$1469 + $$1467;
     $249 = $248 != $$1469;
     if ($249) {
      $250 = (($233) + ($$1533$lcssa))|0;
      HEAP32[$225>>2] = $250;
      $251 = ($250>>>0)>(999999999);
      if ($251) {
       $$2490638 = $225;$$5486639 = $$3484$lcssa;
       while(1) {
        $252 = ((($$2490638)) + -4|0);
        HEAP32[$$2490638>>2] = 0;
        $253 = ($252>>>0)<($$5486639>>>0);
        if ($253) {
         $254 = ((($$5486639)) + -4|0);
         HEAP32[$254>>2] = 0;
         $$6 = $254;
        } else {
         $$6 = $$5486639;
        }
        $255 = HEAP32[$252>>2]|0;
        $256 = (($255) + 1)|0;
        HEAP32[$252>>2] = $256;
        $257 = ($256>>>0)>(999999999);
        if ($257) {
         $$2490638 = $252;$$5486639 = $$6;
        } else {
         $$2490$lcssa = $252;$$5486$lcssa = $$6;
         break;
        }
       }
      } else {
       $$2490$lcssa = $225;$$5486$lcssa = $$3484$lcssa;
      }
      $258 = $$5486$lcssa;
      $259 = (($132) - ($258))|0;
      $260 = $259 >> 2;
      $261 = ($260*9)|0;
      $262 = HEAP32[$$5486$lcssa>>2]|0;
      $263 = ($262>>>0)<(10);
      if ($263) {
       $$4492 = $$2490$lcssa;$$4520 = $261;$$8 = $$5486$lcssa;
      } else {
       $$2518634 = $261;$$2534633 = 10;
       while(1) {
        $264 = ($$2534633*10)|0;
        $265 = (($$2518634) + 1)|0;
        $266 = ($262>>>0)<($264>>>0);
        if ($266) {
         $$4492 = $$2490$lcssa;$$4520 = $265;$$8 = $$5486$lcssa;
         break;
        } else {
         $$2518634 = $265;$$2534633 = $264;
        }
       }
      }
     } else {
      $$4492 = $225;$$4520 = $$1517;$$8 = $$3484$lcssa;
     }
    }
    $267 = ((($$4492)) + 4|0);
    $268 = ($$4502$lcssa>>>0)>($267>>>0);
    $spec$select547 = $268 ? $267 : $$4502$lcssa;
    $$5521 = $$4520;$$8506 = $spec$select547;$$9 = $$8;
   } else {
    $$5521 = $$1517;$$8506 = $$4502$lcssa;$$9 = $$3484$lcssa;
   }
   $269 = (0 - ($$5521))|0;
   $270 = ($$8506>>>0)>($$9>>>0);
   L109: do {
    if ($270) {
     $$9507625 = $$8506;
     while(1) {
      $272 = ((($$9507625)) + -4|0);
      $273 = HEAP32[$272>>2]|0;
      $274 = ($273|0)==(0);
      if (!($274)) {
       $$9507$lcssa = $$9507625;$$lcssa583 = 1;
       break L109;
      }
      $271 = ($272>>>0)>($$9>>>0);
      if ($271) {
       $$9507625 = $272;
      } else {
       $$9507$lcssa = $272;$$lcssa583 = 0;
       break;
      }
     }
    } else {
     $$9507$lcssa = $$8506;$$lcssa583 = 0;
    }
   } while(0);
   do {
    if ($211) {
     $not$ = $212 ^ 1;
     $275 = $not$&1;
     $spec$select548 = (($spec$select539) + ($275))|0;
     $276 = ($spec$select548|0)>($$5521|0);
     $277 = ($$5521|0)>(-5);
     $or$cond6 = $276 & $277;
     if ($or$cond6) {
      $278 = (($5) + -1)|0;
      $$neg571 = (($spec$select548) + -1)|0;
      $279 = (($$neg571) - ($$5521))|0;
      $$0479 = $278;$$2476 = $279;
     } else {
      $280 = (($5) + -2)|0;
      $281 = (($spec$select548) + -1)|0;
      $$0479 = $280;$$2476 = $281;
     }
     $282 = $4 & 8;
     $283 = ($282|0)==(0);
     if ($283) {
      if ($$lcssa583) {
       $284 = ((($$9507$lcssa)) + -4|0);
       $285 = HEAP32[$284>>2]|0;
       $286 = ($285|0)==(0);
       if ($286) {
        $$2531 = 9;
       } else {
        $287 = (($285>>>0) % 10)&-1;
        $288 = ($287|0)==(0);
        if ($288) {
         $$1530621 = 0;$$3535620 = 10;
         while(1) {
          $289 = ($$3535620*10)|0;
          $290 = (($$1530621) + 1)|0;
          $291 = (($285>>>0) % ($289>>>0))&-1;
          $292 = ($291|0)==(0);
          if ($292) {
           $$1530621 = $290;$$3535620 = $289;
          } else {
           $$2531 = $290;
           break;
          }
         }
        } else {
         $$2531 = 0;
        }
       }
      } else {
       $$2531 = 9;
      }
      $293 = $$0479 | 32;
      $294 = ($293|0)==(102);
      $295 = $$9507$lcssa;
      $296 = (($295) - ($132))|0;
      $297 = $296 >> 2;
      $298 = ($297*9)|0;
      $299 = (($298) + -9)|0;
      if ($294) {
       $300 = (($299) - ($$2531))|0;
       $301 = ($300|0)>(0);
       $spec$select549 = $301 ? $300 : 0;
       $302 = ($$2476|0)<($spec$select549|0);
       $spec$select562 = $302 ? $$2476 : $spec$select549;
       $$1480 = $$0479;$$3477 = $spec$select562;
       break;
      } else {
       $303 = (($299) + ($$5521))|0;
       $304 = (($303) - ($$2531))|0;
       $305 = ($304|0)>(0);
       $spec$select551 = $305 ? $304 : 0;
       $306 = ($$2476|0)<($spec$select551|0);
       $spec$select563 = $306 ? $$2476 : $spec$select551;
       $$1480 = $$0479;$$3477 = $spec$select563;
       break;
      }
     } else {
      $$1480 = $$0479;$$3477 = $$2476;
     }
    } else {
     $$1480 = $5;$$3477 = $spec$select539;
    }
   } while(0);
   $307 = ($$3477|0)!=(0);
   $308 = $4 >>> 3;
   $$lobit = $308 & 1;
   $309 = $307 ? 1 : $$lobit;
   $310 = $$1480 | 32;
   $311 = ($310|0)==(102);
   if ($311) {
    $312 = ($$5521|0)>(0);
    $313 = $312 ? $$5521 : 0;
    $$2515 = 0;$$pn = $313;
   } else {
    $314 = ($$5521|0)<(0);
    $315 = $314 ? $269 : $$5521;
    $316 = ($315|0)<(0);
    $317 = $316 << 31 >> 31;
    $318 = (_fmt_u($315,$317,$11)|0);
    $319 = $11;
    $320 = $318;
    $321 = (($319) - ($320))|0;
    $322 = ($321|0)<(2);
    if ($322) {
     $$1514614 = $318;
     while(1) {
      $323 = ((($$1514614)) + -1|0);
      HEAP8[$323>>0] = 48;
      $324 = $323;
      $325 = (($319) - ($324))|0;
      $326 = ($325|0)<(2);
      if ($326) {
       $$1514614 = $323;
      } else {
       $$1514$lcssa = $323;
       break;
      }
     }
    } else {
     $$1514$lcssa = $318;
    }
    $327 = $$5521 >> 31;
    $328 = $327 & 2;
    $329 = (($328) + 43)|0;
    $330 = $329&255;
    $331 = ((($$1514$lcssa)) + -1|0);
    HEAP8[$331>>0] = $330;
    $332 = $$1480&255;
    $333 = ((($$1514$lcssa)) + -2|0);
    HEAP8[$333>>0] = $332;
    $334 = $333;
    $335 = (($319) - ($334))|0;
    $$2515 = $333;$$pn = $335;
   }
   $336 = (($$0522) + 1)|0;
   $337 = (($336) + ($$3477))|0;
   $$1528 = (($337) + ($309))|0;
   $338 = (($$1528) + ($$pn))|0;
   _pad_667($0,32,$2,$338,$4);
   _out($0,$$0523,$$0522);
   $339 = $4 ^ 65536;
   _pad_667($0,48,$2,$338,$339);
   if ($311) {
    $340 = ($$9>>>0)>($$0498>>>0);
    $spec$select554 = $340 ? $$0498 : $$9;
    $341 = ((($8)) + 9|0);
    $342 = $341;
    $343 = ((($8)) + 8|0);
    $$5493603 = $spec$select554;
    while(1) {
     $344 = HEAP32[$$5493603>>2]|0;
     $345 = (_fmt_u($344,0,$341)|0);
     $346 = ($$5493603|0)==($spec$select554|0);
     if ($346) {
      $352 = ($345|0)==($341|0);
      if ($352) {
       HEAP8[$343>>0] = 48;
       $$1465 = $343;
      } else {
       $$1465 = $345;
      }
     } else {
      $347 = ($345>>>0)>($8>>>0);
      if ($347) {
       $348 = $345;
       $349 = (($348) - ($9))|0;
       _memset(($8|0),48,($349|0))|0;
       $$0464599 = $345;
       while(1) {
        $350 = ((($$0464599)) + -1|0);
        $351 = ($350>>>0)>($8>>>0);
        if ($351) {
         $$0464599 = $350;
        } else {
         $$1465 = $350;
         break;
        }
       }
      } else {
       $$1465 = $345;
      }
     }
     $353 = $$1465;
     $354 = (($342) - ($353))|0;
     _out($0,$$1465,$354);
     $355 = ((($$5493603)) + 4|0);
     $356 = ($355>>>0)>($$0498>>>0);
     if ($356) {
      break;
     } else {
      $$5493603 = $355;
     }
    }
    $$not = $307 ^ 1;
    $357 = $4 & 8;
    $358 = ($357|0)==(0);
    $or$cond556 = $358 & $$not;
    if (!($or$cond556)) {
     _out($0,16808,1);
    }
    $359 = ($355>>>0)<($$9507$lcssa>>>0);
    $360 = ($$3477|0)>(0);
    $361 = $359 & $360;
    if ($361) {
     $$4478594 = $$3477;$$6494593 = $355;
     while(1) {
      $362 = HEAP32[$$6494593>>2]|0;
      $363 = (_fmt_u($362,0,$341)|0);
      $364 = ($363>>>0)>($8>>>0);
      if ($364) {
       $365 = $363;
       $366 = (($365) - ($9))|0;
       _memset(($8|0),48,($366|0))|0;
       $$0463588 = $363;
       while(1) {
        $367 = ((($$0463588)) + -1|0);
        $368 = ($367>>>0)>($8>>>0);
        if ($368) {
         $$0463588 = $367;
        } else {
         $$0463$lcssa = $367;
         break;
        }
       }
      } else {
       $$0463$lcssa = $363;
      }
      $369 = ($$4478594|0)<(9);
      $370 = $369 ? $$4478594 : 9;
      _out($0,$$0463$lcssa,$370);
      $371 = ((($$6494593)) + 4|0);
      $372 = (($$4478594) + -9)|0;
      $373 = ($371>>>0)<($$9507$lcssa>>>0);
      $374 = ($$4478594|0)>(9);
      $375 = $373 & $374;
      if ($375) {
       $$4478594 = $372;$$6494593 = $371;
      } else {
       $$4478$lcssa = $372;
       break;
      }
     }
    } else {
     $$4478$lcssa = $$3477;
    }
    $376 = (($$4478$lcssa) + 9)|0;
    _pad_667($0,48,$376,9,0);
   } else {
    $377 = ((($$9)) + 4|0);
    $spec$select557 = $$lcssa583 ? $$9507$lcssa : $377;
    $378 = ($$9>>>0)<($spec$select557>>>0);
    $379 = ($$3477|0)>(-1);
    $380 = $378 & $379;
    if ($380) {
     $381 = ((($8)) + 9|0);
     $382 = $4 & 8;
     $383 = ($382|0)==(0);
     $384 = $381;
     $385 = (0 - ($9))|0;
     $386 = ((($8)) + 8|0);
     $$5609 = $$3477;$$7495608 = $$9;
     while(1) {
      $387 = HEAP32[$$7495608>>2]|0;
      $388 = (_fmt_u($387,0,$381)|0);
      $389 = ($388|0)==($381|0);
      if ($389) {
       HEAP8[$386>>0] = 48;
       $$0 = $386;
      } else {
       $$0 = $388;
      }
      $390 = ($$7495608|0)==($$9|0);
      do {
       if ($390) {
        $394 = ((($$0)) + 1|0);
        _out($0,$$0,1);
        $395 = ($$5609|0)<(1);
        $or$cond559 = $383 & $395;
        if ($or$cond559) {
         $$2 = $394;
         break;
        }
        _out($0,16808,1);
        $$2 = $394;
       } else {
        $391 = ($$0>>>0)>($8>>>0);
        if (!($391)) {
         $$2 = $$0;
         break;
        }
        $scevgep711 = (($$0) + ($385)|0);
        $scevgep711712 = $scevgep711;
        _memset(($8|0),48,($scevgep711712|0))|0;
        $$1604 = $$0;
        while(1) {
         $392 = ((($$1604)) + -1|0);
         $393 = ($392>>>0)>($8>>>0);
         if ($393) {
          $$1604 = $392;
         } else {
          $$2 = $392;
          break;
         }
        }
       }
      } while(0);
      $396 = $$2;
      $397 = (($384) - ($396))|0;
      $398 = ($$5609|0)>($397|0);
      $399 = $398 ? $397 : $$5609;
      _out($0,$$2,$399);
      $400 = (($$5609) - ($397))|0;
      $401 = ((($$7495608)) + 4|0);
      $402 = ($401>>>0)<($spec$select557>>>0);
      $403 = ($400|0)>(-1);
      $404 = $402 & $403;
      if ($404) {
       $$5609 = $400;$$7495608 = $401;
      } else {
       $$5$lcssa = $400;
       break;
      }
     }
    } else {
     $$5$lcssa = $$3477;
    }
    $405 = (($$5$lcssa) + 18)|0;
    _pad_667($0,48,$405,18,0);
    $406 = $11;
    $407 = $$2515;
    $408 = (($406) - ($407))|0;
    _out($0,$$2515,$408);
   }
   $409 = $4 ^ 8192;
   _pad_667($0,32,$2,$338,$409);
   $$sink757 = $338;
  }
 } while(0);
 $410 = ($$sink757|0)<($2|0);
 $$560 = $410 ? $2 : $$sink757;
 STACKTOP = sp;return ($$560|0);
}
function _pop_arg_long_double($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $arglist_current = 0, $arglist_next = 0, $expanded = 0, $expanded1 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $arglist_current = HEAP32[$1>>2]|0;
 $2 = $arglist_current;
 $3 = ((0) + 8|0);
 $expanded1 = $3;
 $expanded = (($expanded1) - 1)|0;
 $4 = (($2) + ($expanded))|0;
 $5 = ((0) + 8|0);
 $expanded5 = $5;
 $expanded4 = (($expanded5) - 1)|0;
 $expanded3 = $expanded4 ^ -1;
 $6 = $4 & $expanded3;
 $7 = $6;
 $8 = +HEAPF64[$7>>3];
 $arglist_next = ((($7)) + 8|0);
 HEAP32[$1>>2] = $arglist_next;
 HEAPF64[$0>>3] = $8;
 return;
}
function ___vfprintf_internal($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, $spec$select45 = 0, $vacopy_currentptr = 0, dest = 0;
 var label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $3 = sp + 208|0;
 $4 = sp + 160|0;
 $5 = sp + 80|0;
 $6 = sp;
 dest=$4; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $vacopy_currentptr;
 $7 = (_printf_core(0,$1,$3,$5,$4)|0);
 $8 = ($7|0)<(0);
 if ($8) {
  $$0 = -1;
 } else {
  $9 = ((($0)) + 76|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[$0>>2]|0;
  $12 = $11 & 32;
  $13 = ((($0)) + 74|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = ($14<<24>>24)<(1);
  if ($15) {
   $16 = $11 & -33;
   HEAP32[$0>>2] = $16;
  }
  $17 = ((($0)) + 48|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)==(0);
  if ($19) {
   $21 = ((($0)) + 44|0);
   $22 = HEAP32[$21>>2]|0;
   HEAP32[$21>>2] = $6;
   $23 = ((($0)) + 28|0);
   HEAP32[$23>>2] = $6;
   $24 = ((($0)) + 20|0);
   HEAP32[$24>>2] = $6;
   HEAP32[$17>>2] = 80;
   $25 = ((($6)) + 80|0);
   $26 = ((($0)) + 16|0);
   HEAP32[$26>>2] = $25;
   $27 = (_printf_core($0,$1,$3,$5,$4)|0);
   $28 = ($22|0)==(0|0);
   if ($28) {
    $$1 = $27;
   } else {
    $29 = ((($0)) + 36|0);
    $30 = HEAP32[$29>>2]|0;
    (FUNCTION_TABLE_iiii[$30 & 255]($0,0,0)|0);
    $31 = HEAP32[$24>>2]|0;
    $32 = ($31|0)==(0|0);
    $spec$select = $32 ? -1 : $27;
    HEAP32[$21>>2] = $22;
    HEAP32[$17>>2] = 0;
    HEAP32[$26>>2] = 0;
    HEAP32[$23>>2] = 0;
    HEAP32[$24>>2] = 0;
    $$1 = $spec$select;
   }
  } else {
   $20 = (_printf_core($0,$1,$3,$5,$4)|0);
   $$1 = $20;
  }
  $33 = HEAP32[$0>>2]|0;
  $34 = $33 & 32;
  $35 = ($34|0)==(0);
  $spec$select45 = $35 ? $$1 : -1;
  $36 = $33 | $12;
  HEAP32[$0>>2] = $36;
  $$0 = $spec$select45;
 }
 STACKTOP = sp;return ($$0|0);
}
function _printf_core($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$0 = 0, $$0231 = 0, $$0232336 = 0, $$0234 = 0, $$0237 = 0, $$0239 = 0, $$0242315 = 0, $$0242315373 = 0, $$0242335 = 0, $$0245 = 0, $$0245$ph = 0, $$0245$ph$be = 0, $$0249 = 0, $$0249$ph = 0, $$0251$lcssa = 0, $$0251323 = 0, $$0254 = 0, $$0255 = 0, $$0256 = 0;
 var $$0261 = 0, $$0264$lcssa = 0, $$0264330 = 0, $$0271$ph = 0, $$1 = 0, $$1233342 = 0, $$1235 = 0, $$1238 = 0, $$1240 = 0, $$1243341 = 0, $$1250 = 0, $$1252 = 0, $$1257 = 0, $$1262 = 0, $$1265 = 0, $$1272 = 0, $$2236 = 0, $$2241 = 0, $$2244322 = 0, $$2258 = 0;
 var $$2258$ = 0, $$2263 = 0, $$2273 = 0, $$3259 = 0, $$3267 = 0, $$3274 = 0, $$3319 = 0, $$4260372 = 0, $$4268 = 0, $$5 = 0, $$6270 = 0, $$lcssa310 = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre22 = 0, $$pre23 = 0, $$pre364 = 0, $$pre365 = 0, $$pre365$pre = 0;
 var $$pre370 = 0, $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0.0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $brmerge = 0, $brmerge328 = 0;
 var $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $or$cond = 0, $or$cond278 = 0, $or$cond280 = 0, $or$cond285 = 0, $spec$select = 0, $spec$select283 = 0, $spec$select286 = 0, $spec$select293 = 0, $spec$select294 = 0, $spec$select295 = 0;
 var $spec$select296 = 0, $spec$select297 = 0, $spec$select298 = 0, $spec$select299 = 0, $spec$select300 = 0, $spec$select301 = 0, $spec$select40 = 0, $spec$select41 = 0, $spec$select42 = 0, $storemerge275329 = 0, $storemerge276 = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $5 = sp + 56|0;
 $6 = sp + 40|0;
 $7 = sp;
 $8 = sp + 48|0;
 $9 = sp + 60|0;
 HEAP32[$5>>2] = $1;
 $10 = ($0|0)!=(0|0);
 $11 = ((($7)) + 40|0);
 $12 = $11;
 $13 = ((($7)) + 39|0);
 $14 = ((($8)) + 4|0);
 $$0245$ph = 0;$$0249$ph = 0;$$0271$ph = 0;
 L1: while(1) {
  $$0245 = $$0245$ph;$$0249 = $$0249$ph;
  while(1) {
   $15 = ($$0249|0)>(-1);
   do {
    if ($15) {
     $16 = (2147483647 - ($$0249))|0;
     $17 = ($$0245|0)>($16|0);
     if ($17) {
      HEAP32[5168] = 61;
      $$1250 = -1;
      break;
     } else {
      $18 = (($$0245) + ($$0249))|0;
      $$1250 = $18;
      break;
     }
    } else {
     $$1250 = $$0249;
    }
   } while(0);
   $19 = HEAP32[$5>>2]|0;
   $20 = HEAP8[$19>>0]|0;
   $21 = ($20<<24>>24)==(0);
   if ($21) {
    label = 91;
    break L1;
   }
   $22 = $20;$24 = $19;
   L12: while(1) {
    switch ($22<<24>>24) {
    case 37:  {
     label = 10;
     break L12;
     break;
    }
    case 0:  {
     $$0251$lcssa = $24;
     break L12;
     break;
    }
    default: {
    }
    }
    $23 = ((($24)) + 1|0);
    HEAP32[$5>>2] = $23;
    $$pre = HEAP8[$23>>0]|0;
    $22 = $$pre;$24 = $23;
   }
   L15: do {
    if ((label|0) == 10) {
     label = 0;
     $$0251323 = $24;$26 = $24;
     while(1) {
      $25 = ((($26)) + 1|0);
      $27 = HEAP8[$25>>0]|0;
      $28 = ($27<<24>>24)==(37);
      if (!($28)) {
       $$0251$lcssa = $$0251323;
       break L15;
      }
      $29 = ((($$0251323)) + 1|0);
      $30 = ((($26)) + 2|0);
      HEAP32[$5>>2] = $30;
      $31 = HEAP8[$30>>0]|0;
      $32 = ($31<<24>>24)==(37);
      if ($32) {
       $$0251323 = $29;$26 = $30;
      } else {
       $$0251$lcssa = $29;
       break;
      }
     }
    }
   } while(0);
   $33 = $$0251$lcssa;
   $34 = $19;
   $35 = (($33) - ($34))|0;
   if ($10) {
    _out($0,$19,$35);
   }
   $36 = ($35|0)==(0);
   if ($36) {
    break;
   } else {
    $$0245 = $35;$$0249 = $$1250;
   }
  }
  $37 = HEAP32[$5>>2]|0;
  $38 = ((($37)) + 1|0);
  $39 = HEAP8[$38>>0]|0;
  $40 = $39 << 24 >> 24;
  $41 = (_isdigit($40)|0);
  $42 = ($41|0)==(0);
  if ($42) {
   $$0255 = -1;$$1272 = $$0271$ph;$$sink = 1;
  } else {
   $43 = ((($37)) + 2|0);
   $44 = HEAP8[$43>>0]|0;
   $45 = ($44<<24>>24)==(36);
   $46 = (($40) + -48)|0;
   $spec$select40 = $45 ? 3 : 1;
   $spec$select41 = $45 ? 1 : $$0271$ph;
   $spec$select42 = $45 ? $46 : -1;
   $$0255 = $spec$select42;$$1272 = $spec$select41;$$sink = $spec$select40;
  }
  $47 = (($37) + ($$sink)|0);
  HEAP32[$5>>2] = $47;
  $48 = HEAP8[$47>>0]|0;
  $49 = $48 << 24 >> 24;
  $50 = (($49) + -32)|0;
  $51 = ($50>>>0)>(31);
  $52 = 1 << $50;
  $53 = $52 & 75913;
  $54 = ($53|0)==(0);
  $brmerge328 = $51 | $54;
  if ($brmerge328) {
   $$0264$lcssa = 0;$$lcssa310 = $48;$68 = $47;
  } else {
   $$0264330 = 0;$56 = $50;$storemerge275329 = $47;
   while(1) {
    $55 = 1 << $56;
    $57 = $55 | $$0264330;
    $58 = ((($storemerge275329)) + 1|0);
    HEAP32[$5>>2] = $58;
    $59 = HEAP8[$58>>0]|0;
    $60 = $59 << 24 >> 24;
    $61 = (($60) + -32)|0;
    $62 = ($61>>>0)>(31);
    $63 = 1 << $61;
    $64 = $63 & 75913;
    $65 = ($64|0)==(0);
    $brmerge = $62 | $65;
    if ($brmerge) {
     $$0264$lcssa = $57;$$lcssa310 = $59;$68 = $58;
     break;
    } else {
     $$0264330 = $57;$56 = $61;$storemerge275329 = $58;
    }
   }
  }
  $66 = ($$lcssa310<<24>>24)==(42);
  if ($66) {
   $67 = ((($68)) + 1|0);
   $69 = HEAP8[$67>>0]|0;
   $70 = $69 << 24 >> 24;
   $71 = (_isdigit($70)|0);
   $72 = ($71|0)==(0);
   if ($72) {
    label = 26;
   } else {
    $73 = ((($68)) + 2|0);
    $74 = HEAP8[$73>>0]|0;
    $75 = ($74<<24>>24)==(36);
    if ($75) {
     $76 = (($70) + -48)|0;
     $77 = (($4) + ($76<<2)|0);
     HEAP32[$77>>2] = 10;
     $78 = HEAP8[$67>>0]|0;
     $79 = $78 << 24 >> 24;
     $80 = (($79) + -48)|0;
     $81 = (($3) + ($80<<3)|0);
     $82 = $81;
     $83 = $82;
     $84 = HEAP32[$83>>2]|0;
     $85 = (($82) + 4)|0;
     $86 = $85;
     $87 = HEAP32[$86>>2]|0;
     $88 = ((($68)) + 3|0);
     $$0261 = $84;$$2273 = 1;$storemerge276 = $88;
    } else {
     label = 26;
    }
   }
   if ((label|0) == 26) {
    label = 0;
    $89 = ($$1272|0)==(0);
    if (!($89)) {
     $$0 = -1;
     break;
    }
    if ($10) {
     $arglist_current = HEAP32[$2>>2]|0;
     $90 = $arglist_current;
     $91 = ((0) + 4|0);
     $expanded4 = $91;
     $expanded = (($expanded4) - 1)|0;
     $92 = (($90) + ($expanded))|0;
     $93 = ((0) + 4|0);
     $expanded8 = $93;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $94 = $92 & $expanded6;
     $95 = $94;
     $96 = HEAP32[$95>>2]|0;
     $arglist_next = ((($95)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     $$0261 = $96;$$2273 = 0;$storemerge276 = $67;
    } else {
     $$0261 = 0;$$2273 = 0;$storemerge276 = $67;
    }
   }
   HEAP32[$5>>2] = $storemerge276;
   $97 = ($$0261|0)<(0);
   $98 = $$0264$lcssa | 8192;
   $99 = (0 - ($$0261))|0;
   $spec$select293 = $97 ? $98 : $$0264$lcssa;
   $spec$select294 = $97 ? $99 : $$0261;
   $$1262 = $spec$select294;$$1265 = $spec$select293;$$3274 = $$2273;$103 = $storemerge276;
  } else {
   $100 = (_getint($5)|0);
   $101 = ($100|0)<(0);
   if ($101) {
    $$0 = -1;
    break;
   }
   $$pre364 = HEAP32[$5>>2]|0;
   $$1262 = $100;$$1265 = $$0264$lcssa;$$3274 = $$1272;$103 = $$pre364;
  }
  $102 = HEAP8[$103>>0]|0;
  $104 = ($102<<24>>24)==(46);
  do {
   if ($104) {
    $105 = ((($103)) + 1|0);
    $106 = HEAP8[$105>>0]|0;
    $107 = ($106<<24>>24)==(42);
    if (!($107)) {
     HEAP32[$5>>2] = $105;
     $137 = (_getint($5)|0);
     $$pre365$pre = HEAP32[$5>>2]|0;
     $$0256 = $137;$$pre365 = $$pre365$pre;
     break;
    }
    $108 = ((($103)) + 2|0);
    $109 = HEAP8[$108>>0]|0;
    $110 = $109 << 24 >> 24;
    $111 = (_isdigit($110)|0);
    $112 = ($111|0)==(0);
    if (!($112)) {
     $113 = ((($103)) + 3|0);
     $114 = HEAP8[$113>>0]|0;
     $115 = ($114<<24>>24)==(36);
     if ($115) {
      $116 = (($110) + -48)|0;
      $117 = (($4) + ($116<<2)|0);
      HEAP32[$117>>2] = 10;
      $118 = HEAP8[$108>>0]|0;
      $119 = $118 << 24 >> 24;
      $120 = (($119) + -48)|0;
      $121 = (($3) + ($120<<3)|0);
      $122 = $121;
      $123 = $122;
      $124 = HEAP32[$123>>2]|0;
      $125 = (($122) + 4)|0;
      $126 = $125;
      $127 = HEAP32[$126>>2]|0;
      $128 = ((($103)) + 4|0);
      HEAP32[$5>>2] = $128;
      $$0256 = $124;$$pre365 = $128;
      break;
     }
    }
    $129 = ($$3274|0)==(0);
    if (!($129)) {
     $$0 = -1;
     break L1;
    }
    if ($10) {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $130 = $arglist_current2;
     $131 = ((0) + 4|0);
     $expanded11 = $131;
     $expanded10 = (($expanded11) - 1)|0;
     $132 = (($130) + ($expanded10))|0;
     $133 = ((0) + 4|0);
     $expanded15 = $133;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $134 = $132 & $expanded13;
     $135 = $134;
     $136 = HEAP32[$135>>2]|0;
     $arglist_next3 = ((($135)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $335 = $136;
    } else {
     $335 = 0;
    }
    HEAP32[$5>>2] = $108;
    $$0256 = $335;$$pre365 = $108;
   } else {
    $$0256 = -1;$$pre365 = $103;
   }
  } while(0);
  $$0254 = 0;$139 = $$pre365;
  while(1) {
   $138 = HEAP8[$139>>0]|0;
   $140 = $138 << 24 >> 24;
   $141 = (($140) + -65)|0;
   $142 = ($141>>>0)>(57);
   if ($142) {
    $$0 = -1;
    break L1;
   }
   $143 = ((($139)) + 1|0);
   HEAP32[$5>>2] = $143;
   $144 = HEAP8[$139>>0]|0;
   $145 = $144 << 24 >> 24;
   $146 = (($145) + -65)|0;
   $147 = ((1984 + (($$0254*58)|0)|0) + ($146)|0);
   $148 = HEAP8[$147>>0]|0;
   $149 = $148&255;
   $150 = (($149) + -1)|0;
   $151 = ($150>>>0)<(8);
   if ($151) {
    $$0254 = $149;$139 = $143;
   } else {
    break;
   }
  }
  $152 = ($148<<24>>24)==(0);
  if ($152) {
   $$0 = -1;
   break;
  }
  $153 = ($148<<24>>24)==(19);
  $154 = ($$0255|0)>(-1);
  do {
   if ($153) {
    if ($154) {
     $$0 = -1;
     break L1;
    } else {
     label = 52;
    }
   } else {
    if ($154) {
     $155 = (($4) + ($$0255<<2)|0);
     HEAP32[$155>>2] = $149;
     $156 = (($3) + ($$0255<<3)|0);
     $157 = $156;
     $158 = $157;
     $159 = HEAP32[$158>>2]|0;
     $160 = (($157) + 4)|0;
     $161 = $160;
     $162 = HEAP32[$161>>2]|0;
     $163 = $6;
     $164 = $163;
     HEAP32[$164>>2] = $159;
     $165 = (($163) + 4)|0;
     $166 = $165;
     HEAP32[$166>>2] = $162;
     label = 52;
     break;
    }
    if (!($10)) {
     $$0 = 0;
     break L1;
    }
    _pop_arg($6,$149,$2);
    label = 53;
   }
  } while(0);
  if ((label|0) == 52) {
   label = 0;
   if ($10) {
    label = 53;
   } else {
    $$0245$ph$be = 0;
   }
  }
  L74: do {
   if ((label|0) == 53) {
    label = 0;
    $167 = HEAP8[$139>>0]|0;
    $168 = $167 << 24 >> 24;
    $169 = ($$0254|0)!=(0);
    $170 = $168 & 15;
    $171 = ($170|0)==(3);
    $or$cond278 = $169 & $171;
    $172 = $168 & -33;
    $$0237 = $or$cond278 ? $172 : $168;
    $173 = $$1265 & 8192;
    $174 = ($173|0)==(0);
    $175 = $$1265 & -65537;
    $spec$select = $174 ? $$1265 : $175;
    L76: do {
     switch ($$0237|0) {
     case 110:  {
      $trunc = $$0254&255;
      switch ($trunc<<24>>24) {
      case 0:  {
       $182 = HEAP32[$6>>2]|0;
       HEAP32[$182>>2] = $$1250;
       $$0245$ph$be = 0;
       break L74;
       break;
      }
      case 1:  {
       $183 = HEAP32[$6>>2]|0;
       HEAP32[$183>>2] = $$1250;
       $$0245$ph$be = 0;
       break L74;
       break;
      }
      case 2:  {
       $184 = ($$1250|0)<(0);
       $185 = $184 << 31 >> 31;
       $186 = HEAP32[$6>>2]|0;
       $187 = $186;
       $188 = $187;
       HEAP32[$188>>2] = $$1250;
       $189 = (($187) + 4)|0;
       $190 = $189;
       HEAP32[$190>>2] = $185;
       $$0245$ph$be = 0;
       break L74;
       break;
      }
      case 3:  {
       $191 = $$1250&65535;
       $192 = HEAP32[$6>>2]|0;
       HEAP16[$192>>1] = $191;
       $$0245$ph$be = 0;
       break L74;
       break;
      }
      case 4:  {
       $193 = $$1250&255;
       $194 = HEAP32[$6>>2]|0;
       HEAP8[$194>>0] = $193;
       $$0245$ph$be = 0;
       break L74;
       break;
      }
      case 6:  {
       $195 = HEAP32[$6>>2]|0;
       HEAP32[$195>>2] = $$1250;
       $$0245$ph$be = 0;
       break L74;
       break;
      }
      case 7:  {
       $196 = ($$1250|0)<(0);
       $197 = $196 << 31 >> 31;
       $198 = HEAP32[$6>>2]|0;
       $199 = $198;
       $200 = $199;
       HEAP32[$200>>2] = $$1250;
       $201 = (($199) + 4)|0;
       $202 = $201;
       HEAP32[$202>>2] = $197;
       $$0245$ph$be = 0;
       break L74;
       break;
      }
      default: {
       $$0245$ph$be = 0;
       break L74;
      }
      }
      break;
     }
     case 112:  {
      $203 = ($$0256>>>0)>(8);
      $204 = $203 ? $$0256 : 8;
      $205 = $spec$select | 8;
      $$1238 = 120;$$1257 = $204;$$3267 = $205;
      label = 65;
      break;
     }
     case 88: case 120:  {
      $$1238 = $$0237;$$1257 = $$0256;$$3267 = $spec$select;
      label = 65;
      break;
     }
     case 111:  {
      $221 = $6;
      $222 = $221;
      $223 = HEAP32[$222>>2]|0;
      $224 = (($221) + 4)|0;
      $225 = $224;
      $226 = HEAP32[$225>>2]|0;
      $227 = (_fmt_o($223,$226,$11)|0);
      $228 = $spec$select & 8;
      $229 = ($228|0)==(0);
      $230 = $227;
      $231 = (($12) - ($230))|0;
      $232 = ($$0256|0)>($231|0);
      $233 = (($231) + 1)|0;
      $234 = $229 | $232;
      $spec$select297 = $234 ? $$0256 : $233;
      $$0231 = $227;$$1235 = 0;$$1240 = 16760;$$2258 = $spec$select297;$$4268 = $spec$select;$260 = $223;$262 = $226;
      label = 71;
      break;
     }
     case 105: case 100:  {
      $235 = $6;
      $236 = $235;
      $237 = HEAP32[$236>>2]|0;
      $238 = (($235) + 4)|0;
      $239 = $238;
      $240 = HEAP32[$239>>2]|0;
      $241 = ($240|0)<(0);
      if ($241) {
       $242 = (_i64Subtract(0,0,($237|0),($240|0))|0);
       $243 = (getTempRet0() | 0);
       $244 = $6;
       $245 = $244;
       HEAP32[$245>>2] = $242;
       $246 = (($244) + 4)|0;
       $247 = $246;
       HEAP32[$247>>2] = $243;
       $$0234 = 1;$$0239 = 16760;$254 = $242;$255 = $243;
       label = 70;
       break L76;
      } else {
       $248 = $spec$select & 2048;
       $249 = ($248|0)==(0);
       $250 = $spec$select & 1;
       $251 = ($250|0)==(0);
       $$ = $251 ? 16760 : (16762);
       $spec$select298 = $249 ? $$ : (16761);
       $252 = $spec$select & 2049;
       $253 = ($252|0)!=(0);
       $spec$select299 = $253&1;
       $$0234 = $spec$select299;$$0239 = $spec$select298;$254 = $237;$255 = $240;
       label = 70;
       break L76;
      }
      break;
     }
     case 117:  {
      $176 = $6;
      $177 = $176;
      $178 = HEAP32[$177>>2]|0;
      $179 = (($176) + 4)|0;
      $180 = $179;
      $181 = HEAP32[$180>>2]|0;
      $$0234 = 0;$$0239 = 16760;$254 = $178;$255 = $181;
      label = 70;
      break;
     }
     case 99:  {
      $271 = $6;
      $272 = $271;
      $273 = HEAP32[$272>>2]|0;
      $274 = (($271) + 4)|0;
      $275 = $274;
      $276 = HEAP32[$275>>2]|0;
      $277 = $273&255;
      HEAP8[$13>>0] = $277;
      $$1 = $13;$$2236 = 0;$$2241 = 16760;$$5 = 1;$$6270 = $175;$$pre$phiZ2D = $12;
      break;
     }
     case 115:  {
      $278 = HEAP32[$6>>2]|0;
      $279 = ($278|0)==(0|0);
      $280 = $279 ? 16770 : $278;
      $281 = (_memchr($280,0,$$0256)|0);
      $282 = ($281|0)==(0|0);
      $283 = $281;
      $284 = $280;
      $285 = (($283) - ($284))|0;
      $286 = (($280) + ($$0256)|0);
      $$3259 = $282 ? $$0256 : $285;
      $$1252 = $282 ? $286 : $281;
      $$pre370 = $$1252;
      $$1 = $280;$$2236 = 0;$$2241 = 16760;$$5 = $$3259;$$6270 = $175;$$pre$phiZ2D = $$pre370;
      break;
     }
     case 67:  {
      $287 = $6;
      $288 = $287;
      $289 = HEAP32[$288>>2]|0;
      $290 = (($287) + 4)|0;
      $291 = $290;
      $292 = HEAP32[$291>>2]|0;
      HEAP32[$8>>2] = $289;
      HEAP32[$14>>2] = 0;
      HEAP32[$6>>2] = $8;
      $$4260372 = -1;$336 = $8;
      label = 78;
      break;
     }
     case 83:  {
      $293 = ($$0256|0)==(0);
      if ($293) {
       _pad_667($0,32,$$1262,0,$spec$select);
       $$0242315373 = 0;
       label = 88;
       break L76;
      } else {
       $$pre22 = HEAP32[$6>>2]|0;
       $$4260372 = $$0256;$336 = $$pre22;
       label = 78;
       break L76;
      }
      break;
     }
     case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
      $314 = +HEAPF64[$6>>3];
      $315 = (_fmt_fp($0,$314,$$1262,$$0256,$spec$select,$$0237)|0);
      $$0245$ph$be = $315;
      break L74;
      break;
     }
     default: {
      $$1 = $19;$$2236 = 0;$$2241 = 16760;$$5 = $$0256;$$6270 = $spec$select;$$pre$phiZ2D = $12;
     }
     }
    } while(0);
    L101: do {
     if ((label|0) == 65) {
      label = 0;
      $206 = $6;
      $207 = $206;
      $208 = HEAP32[$207>>2]|0;
      $209 = (($206) + 4)|0;
      $210 = $209;
      $211 = HEAP32[$210>>2]|0;
      $212 = $$1238 & 32;
      $213 = (_fmt_x($208,$211,$11,$212)|0);
      $214 = ($208|0)==(0);
      $215 = ($211|0)==(0);
      $216 = $214 & $215;
      $217 = $$3267 & 8;
      $218 = ($217|0)==(0);
      $or$cond280 = $218 | $216;
      $219 = $$1238 >>> 4;
      $220 = (16760 + ($219)|0);
      $spec$select295 = $or$cond280 ? 16760 : $220;
      $spec$select296 = $or$cond280 ? 0 : 2;
      $$0231 = $213;$$1235 = $spec$select296;$$1240 = $spec$select295;$$2258 = $$1257;$$4268 = $$3267;$260 = $208;$262 = $211;
      label = 71;
     }
     else if ((label|0) == 70) {
      label = 0;
      $256 = (_fmt_u($254,$255,$11)|0);
      $$0231 = $256;$$1235 = $$0234;$$1240 = $$0239;$$2258 = $$0256;$$4268 = $spec$select;$260 = $254;$262 = $255;
      label = 71;
     }
     else if ((label|0) == 78) {
      label = 0;
      $$0232336 = $336;$$0242335 = 0;
      while(1) {
       $294 = HEAP32[$$0232336>>2]|0;
       $295 = ($294|0)==(0);
       if ($295) {
        $$0242315 = $$0242335;
        break;
       }
       $296 = (_wctomb($9,$294)|0);
       $297 = ($296|0)<(0);
       $298 = (($$4260372) - ($$0242335))|0;
       $299 = ($296>>>0)>($298>>>0);
       $or$cond285 = $297 | $299;
       if ($or$cond285) {
        label = 82;
        break;
       }
       $300 = ((($$0232336)) + 4|0);
       $301 = (($296) + ($$0242335))|0;
       $302 = ($$4260372>>>0)>($301>>>0);
       if ($302) {
        $$0232336 = $300;$$0242335 = $301;
       } else {
        $$0242315 = $301;
        break;
       }
      }
      if ((label|0) == 82) {
       label = 0;
       if ($297) {
        $$0 = -1;
        break L1;
       } else {
        $$0242315 = $$0242335;
       }
      }
      _pad_667($0,32,$$1262,$$0242315,$spec$select);
      $303 = ($$0242315|0)==(0);
      if ($303) {
       $$0242315373 = 0;
       label = 88;
      } else {
       $$1233342 = $336;$$1243341 = 0;
       while(1) {
        $304 = HEAP32[$$1233342>>2]|0;
        $305 = ($304|0)==(0);
        if ($305) {
         $$0242315373 = $$0242315;
         label = 88;
         break L101;
        }
        $306 = (_wctomb($9,$304)|0);
        $307 = (($306) + ($$1243341))|0;
        $308 = ($307|0)>($$0242315|0);
        if ($308) {
         $$0242315373 = $$0242315;
         label = 88;
         break L101;
        }
        $309 = ((($$1233342)) + 4|0);
        _out($0,$9,$306);
        $310 = ($307>>>0)<($$0242315>>>0);
        if ($310) {
         $$1233342 = $309;$$1243341 = $307;
        } else {
         $$0242315373 = $$0242315;
         label = 88;
         break;
        }
       }
      }
     }
    } while(0);
    if ((label|0) == 71) {
     label = 0;
     $257 = ($$2258|0)>(-1);
     $258 = $$4268 & -65537;
     $spec$select283 = $257 ? $258 : $$4268;
     $259 = ($260|0)!=(0);
     $261 = ($262|0)!=(0);
     $263 = $259 | $261;
     $264 = ($$2258|0)!=(0);
     $or$cond = $264 | $263;
     $265 = $$0231;
     $266 = (($12) - ($265))|0;
     $267 = $263 ^ 1;
     $268 = $267&1;
     $269 = (($266) + ($268))|0;
     $270 = ($$2258|0)>($269|0);
     $$2258$ = $270 ? $$2258 : $269;
     $spec$select300 = $or$cond ? $$2258$ : 0;
     $spec$select301 = $or$cond ? $$0231 : $11;
     $$1 = $spec$select301;$$2236 = $$1235;$$2241 = $$1240;$$5 = $spec$select300;$$6270 = $spec$select283;$$pre$phiZ2D = $12;
    }
    else if ((label|0) == 88) {
     label = 0;
     $311 = $spec$select ^ 8192;
     _pad_667($0,32,$$1262,$$0242315373,$311);
     $312 = ($$1262|0)>($$0242315373|0);
     $313 = $312 ? $$1262 : $$0242315373;
     $$0245$ph$be = $313;
     break;
    }
    $316 = $$1;
    $317 = (($$pre$phiZ2D) - ($316))|0;
    $318 = ($$5|0)<($317|0);
    $spec$select286 = $318 ? $317 : $$5;
    $319 = (($spec$select286) + ($$2236))|0;
    $320 = ($$1262|0)<($319|0);
    $$2263 = $320 ? $319 : $$1262;
    _pad_667($0,32,$$2263,$319,$$6270);
    _out($0,$$2241,$$2236);
    $321 = $$6270 ^ 65536;
    _pad_667($0,48,$$2263,$319,$321);
    _pad_667($0,48,$spec$select286,$317,0);
    _out($0,$$1,$317);
    $322 = $$6270 ^ 8192;
    _pad_667($0,32,$$2263,$319,$322);
    $$0245$ph$be = $$2263;
   }
  } while(0);
  $$0245$ph = $$0245$ph$be;$$0249$ph = $$1250;$$0271$ph = $$3274;
 }
 L122: do {
  if ((label|0) == 91) {
   $323 = ($0|0)==(0|0);
   if ($323) {
    $324 = ($$0271$ph|0)==(0);
    if ($324) {
     $$0 = 0;
    } else {
     $$2244322 = 1;
     while(1) {
      $325 = (($4) + ($$2244322<<2)|0);
      $326 = HEAP32[$325>>2]|0;
      $327 = ($326|0)==(0);
      if ($327) {
       break;
      }
      $328 = (($3) + ($$2244322<<3)|0);
      _pop_arg($328,$326,$2);
      $329 = (($$2244322) + 1)|0;
      $330 = ($329>>>0)<(10);
      if ($330) {
       $$2244322 = $329;
      } else {
       $$0 = 1;
       break L122;
      }
     }
     $$3319 = $$2244322;$334 = 0;
     while(1) {
      $333 = ($334|0)==(0);
      $332 = (($$3319) + 1)|0;
      if (!($333)) {
       $$0 = -1;
       break L122;
      }
      $331 = ($332>>>0)<(10);
      if (!($331)) {
       $$0 = 1;
       break L122;
      }
      $$phi$trans$insert = (($4) + ($332<<2)|0);
      $$pre23 = HEAP32[$$phi$trans$insert>>2]|0;
      $$3319 = $332;$334 = $$pre23;
     }
    }
   } else {
    $$0 = $$1250;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___lockfile() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function _out($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = $3 & 32;
 $5 = ($4|0)==(0);
 if ($5) {
  (___fwritex($1,$2,$0)|0);
 }
 return;
}
function _getint($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$04 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (_isdigit($3)|0);
 $5 = ($4|0)==(0);
 if ($5) {
  $$0$lcssa = 0;
 } else {
  $$04 = 0;$12 = $1;$8 = $2;
  while(1) {
   $6 = ($$04*10)|0;
   $7 = $8 << 24 >> 24;
   $9 = (($6) + -48)|0;
   $10 = (($9) + ($7))|0;
   $11 = ((($12)) + 1|0);
   HEAP32[$0>>2] = $11;
   $13 = HEAP8[$11>>0]|0;
   $14 = $13 << 24 >> 24;
   $15 = (_isdigit($14)|0);
   $16 = ($15|0)==(0);
   if ($16) {
    $$0$lcssa = $10;
    break;
   } else {
    $$04 = $10;$12 = $11;$8 = $13;
   }
  }
 }
 return ($$0$lcssa|0);
}
function _pop_arg($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$mask = 0, $$mask31 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0, $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0;
 var $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded25 = 0, $expanded27 = 0, $expanded28 = 0, $expanded29 = 0, $expanded31 = 0, $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded36 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0;
 var $expanded42 = 0, $expanded43 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded50 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded57 = 0, $expanded59 = 0, $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded64 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0;
 var $expanded70 = 0, $expanded71 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded78 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded85 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(20);
 L1: do {
  if (!($3)) {
   do {
    switch ($1|0) {
    case 9:  {
     $arglist_current = HEAP32[$2>>2]|0;
     $4 = $arglist_current;
     $5 = ((0) + 4|0);
     $expanded25 = $5;
     $expanded = (($expanded25) - 1)|0;
     $6 = (($4) + ($expanded))|0;
     $7 = ((0) + 4|0);
     $expanded29 = $7;
     $expanded28 = (($expanded29) - 1)|0;
     $expanded27 = $expanded28 ^ -1;
     $8 = $6 & $expanded27;
     $9 = $8;
     $10 = HEAP32[$9>>2]|0;
     $arglist_next = ((($9)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     HEAP32[$0>>2] = $10;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $11 = $arglist_current2;
     $12 = ((0) + 4|0);
     $expanded32 = $12;
     $expanded31 = (($expanded32) - 1)|0;
     $13 = (($11) + ($expanded31))|0;
     $14 = ((0) + 4|0);
     $expanded36 = $14;
     $expanded35 = (($expanded36) - 1)|0;
     $expanded34 = $expanded35 ^ -1;
     $15 = $13 & $expanded34;
     $16 = $15;
     $17 = HEAP32[$16>>2]|0;
     $arglist_next3 = ((($16)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $18 = ($17|0)<(0);
     $19 = $18 << 31 >> 31;
     $20 = $0;
     $21 = $20;
     HEAP32[$21>>2] = $17;
     $22 = (($20) + 4)|0;
     $23 = $22;
     HEAP32[$23>>2] = $19;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$2>>2]|0;
     $24 = $arglist_current5;
     $25 = ((0) + 4|0);
     $expanded39 = $25;
     $expanded38 = (($expanded39) - 1)|0;
     $26 = (($24) + ($expanded38))|0;
     $27 = ((0) + 4|0);
     $expanded43 = $27;
     $expanded42 = (($expanded43) - 1)|0;
     $expanded41 = $expanded42 ^ -1;
     $28 = $26 & $expanded41;
     $29 = $28;
     $30 = HEAP32[$29>>2]|0;
     $arglist_next6 = ((($29)) + 4|0);
     HEAP32[$2>>2] = $arglist_next6;
     $31 = $0;
     $32 = $31;
     HEAP32[$32>>2] = $30;
     $33 = (($31) + 4)|0;
     $34 = $33;
     HEAP32[$34>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$2>>2]|0;
     $35 = $arglist_current8;
     $36 = ((0) + 8|0);
     $expanded46 = $36;
     $expanded45 = (($expanded46) - 1)|0;
     $37 = (($35) + ($expanded45))|0;
     $38 = ((0) + 8|0);
     $expanded50 = $38;
     $expanded49 = (($expanded50) - 1)|0;
     $expanded48 = $expanded49 ^ -1;
     $39 = $37 & $expanded48;
     $40 = $39;
     $41 = $40;
     $42 = $41;
     $43 = HEAP32[$42>>2]|0;
     $44 = (($41) + 4)|0;
     $45 = $44;
     $46 = HEAP32[$45>>2]|0;
     $arglist_next9 = ((($40)) + 8|0);
     HEAP32[$2>>2] = $arglist_next9;
     $47 = $0;
     $48 = $47;
     HEAP32[$48>>2] = $43;
     $49 = (($47) + 4)|0;
     $50 = $49;
     HEAP32[$50>>2] = $46;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$2>>2]|0;
     $51 = $arglist_current11;
     $52 = ((0) + 4|0);
     $expanded53 = $52;
     $expanded52 = (($expanded53) - 1)|0;
     $53 = (($51) + ($expanded52))|0;
     $54 = ((0) + 4|0);
     $expanded57 = $54;
     $expanded56 = (($expanded57) - 1)|0;
     $expanded55 = $expanded56 ^ -1;
     $55 = $53 & $expanded55;
     $56 = $55;
     $57 = HEAP32[$56>>2]|0;
     $arglist_next12 = ((($56)) + 4|0);
     HEAP32[$2>>2] = $arglist_next12;
     $58 = $57&65535;
     $59 = $58 << 16 >> 16;
     $60 = ($59|0)<(0);
     $61 = $60 << 31 >> 31;
     $62 = $0;
     $63 = $62;
     HEAP32[$63>>2] = $59;
     $64 = (($62) + 4)|0;
     $65 = $64;
     HEAP32[$65>>2] = $61;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$2>>2]|0;
     $66 = $arglist_current14;
     $67 = ((0) + 4|0);
     $expanded60 = $67;
     $expanded59 = (($expanded60) - 1)|0;
     $68 = (($66) + ($expanded59))|0;
     $69 = ((0) + 4|0);
     $expanded64 = $69;
     $expanded63 = (($expanded64) - 1)|0;
     $expanded62 = $expanded63 ^ -1;
     $70 = $68 & $expanded62;
     $71 = $70;
     $72 = HEAP32[$71>>2]|0;
     $arglist_next15 = ((($71)) + 4|0);
     HEAP32[$2>>2] = $arglist_next15;
     $$mask31 = $72 & 65535;
     $73 = $0;
     $74 = $73;
     HEAP32[$74>>2] = $$mask31;
     $75 = (($73) + 4)|0;
     $76 = $75;
     HEAP32[$76>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$2>>2]|0;
     $77 = $arglist_current17;
     $78 = ((0) + 4|0);
     $expanded67 = $78;
     $expanded66 = (($expanded67) - 1)|0;
     $79 = (($77) + ($expanded66))|0;
     $80 = ((0) + 4|0);
     $expanded71 = $80;
     $expanded70 = (($expanded71) - 1)|0;
     $expanded69 = $expanded70 ^ -1;
     $81 = $79 & $expanded69;
     $82 = $81;
     $83 = HEAP32[$82>>2]|0;
     $arglist_next18 = ((($82)) + 4|0);
     HEAP32[$2>>2] = $arglist_next18;
     $84 = $83&255;
     $85 = $84 << 24 >> 24;
     $86 = ($85|0)<(0);
     $87 = $86 << 31 >> 31;
     $88 = $0;
     $89 = $88;
     HEAP32[$89>>2] = $85;
     $90 = (($88) + 4)|0;
     $91 = $90;
     HEAP32[$91>>2] = $87;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$2>>2]|0;
     $92 = $arglist_current20;
     $93 = ((0) + 4|0);
     $expanded74 = $93;
     $expanded73 = (($expanded74) - 1)|0;
     $94 = (($92) + ($expanded73))|0;
     $95 = ((0) + 4|0);
     $expanded78 = $95;
     $expanded77 = (($expanded78) - 1)|0;
     $expanded76 = $expanded77 ^ -1;
     $96 = $94 & $expanded76;
     $97 = $96;
     $98 = HEAP32[$97>>2]|0;
     $arglist_next21 = ((($97)) + 4|0);
     HEAP32[$2>>2] = $arglist_next21;
     $$mask = $98 & 255;
     $99 = $0;
     $100 = $99;
     HEAP32[$100>>2] = $$mask;
     $101 = (($99) + 4)|0;
     $102 = $101;
     HEAP32[$102>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$2>>2]|0;
     $103 = $arglist_current23;
     $104 = ((0) + 8|0);
     $expanded81 = $104;
     $expanded80 = (($expanded81) - 1)|0;
     $105 = (($103) + ($expanded80))|0;
     $106 = ((0) + 8|0);
     $expanded85 = $106;
     $expanded84 = (($expanded85) - 1)|0;
     $expanded83 = $expanded84 ^ -1;
     $107 = $105 & $expanded83;
     $108 = $107;
     $109 = +HEAPF64[$108>>3];
     $arglist_next24 = ((($108)) + 8|0);
     HEAP32[$2>>2] = $arglist_next24;
     HEAPF64[$0>>3] = $109;
     break L1;
     break;
    }
    case 18:  {
     _pop_arg_long_double($0,$2);
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_x($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$05$lcssa = 0, $$056 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $4 = ($0|0)==(0);
 $5 = ($1|0)==(0);
 $6 = $4 & $5;
 if ($6) {
  $$05$lcssa = $2;
 } else {
  $$056 = $2;$15 = $1;$8 = $0;
  while(1) {
   $7 = $8 & 15;
   $9 = (2448 + ($7)|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10&255;
   $12 = $11 | $3;
   $13 = $12&255;
   $14 = ((($$056)) + -1|0);
   HEAP8[$14>>0] = $13;
   $16 = (_bitshift64Lshr(($8|0),($15|0),4)|0);
   $17 = (getTempRet0() | 0);
   $18 = ($16|0)==(0);
   $19 = ($17|0)==(0);
   $20 = $18 & $19;
   if ($20) {
    $$05$lcssa = $14;
    break;
   } else {
    $$056 = $14;$15 = $17;$8 = $16;
   }
  }
 }
 return ($$05$lcssa|0);
}
function _fmt_o($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$06 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0);
 $4 = ($1|0)==(0);
 $5 = $3 & $4;
 if ($5) {
  $$0$lcssa = $2;
 } else {
  $$06 = $2;$11 = $1;$7 = $0;
  while(1) {
   $6 = $7&255;
   $8 = $6 & 7;
   $9 = $8 | 48;
   $10 = ((($$06)) + -1|0);
   HEAP8[$10>>0] = $9;
   $12 = (_bitshift64Lshr(($7|0),($11|0),3)|0);
   $13 = (getTempRet0() | 0);
   $14 = ($12|0)==(0);
   $15 = ($13|0)==(0);
   $16 = $14 & $15;
   if ($16) {
    $$0$lcssa = $10;
    break;
   } else {
    $$06 = $10;$11 = $13;$7 = $12;
   }
  }
 }
 return ($$0$lcssa|0);
}
function _fmt_u($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$010$lcssa$off0 = 0, $$012 = 0, $$09$lcssa = 0, $$0914 = 0, $$1$lcssa = 0, $$111 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(0);
 $4 = ($0>>>0)>(4294967295);
 $5 = ($1|0)==(0);
 $6 = $5 & $4;
 $7 = $3 | $6;
 if ($7) {
  $$0914 = $2;$8 = $0;$9 = $1;
  while(1) {
   $10 = (___udivdi3(($8|0),($9|0),10,0)|0);
   $11 = (getTempRet0() | 0);
   $12 = (___muldi3(($10|0),($11|0),-10,-1)|0);
   $13 = (getTempRet0() | 0);
   $14 = (_i64Add(($8|0),($9|0),($12|0),($13|0))|0);
   $15 = (getTempRet0() | 0);
   $16 = $14&255;
   $17 = $16 | 48;
   $18 = ((($$0914)) + -1|0);
   HEAP8[$18>>0] = $17;
   $19 = ($9>>>0)>(9);
   $20 = ($8>>>0)>(4294967295);
   $21 = ($9|0)==(9);
   $22 = $21 & $20;
   $23 = $19 | $22;
   if ($23) {
    $$0914 = $18;$8 = $10;$9 = $11;
   } else {
    break;
   }
  }
  $$010$lcssa$off0 = $10;$$09$lcssa = $18;
 } else {
  $$010$lcssa$off0 = $0;$$09$lcssa = $2;
 }
 $24 = ($$010$lcssa$off0|0)==(0);
 if ($24) {
  $$1$lcssa = $$09$lcssa;
 } else {
  $$012 = $$010$lcssa$off0;$$111 = $$09$lcssa;
  while(1) {
   $25 = (($$012>>>0) / 10)&-1;
   $26 = Math_imul($25, -10)|0;
   $27 = (($$012) + ($26))|0;
   $28 = $27 | 48;
   $29 = $28&255;
   $30 = ((($$111)) + -1|0);
   HEAP8[$30>>0] = $29;
   $31 = ($$012>>>0)<(10);
   if ($31) {
    $$1$lcssa = $30;
    break;
   } else {
    $$012 = $25;$$111 = $30;
   }
  }
 }
 return ($$1$lcssa|0);
}
function _memchr($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa6522 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa6423 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$137$lcssa66 = 0, $$13745 = 0, $$140 = 0, $$23839 = 0, $$in = 0, $$lcssa = 0, $$pre = 0, $$pre11 = 0, $10 = 0, $11 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond53 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1 & 255;
 $4 = $0;
 $5 = $4 & 3;
 $6 = ($5|0)!=(0);
 $7 = ($2|0)!=(0);
 $or$cond53 = $7 & $6;
 L1: do {
  if ($or$cond53) {
   $8 = $1&255;
   $$03555 = $0;$$03654 = $2;
   while(1) {
    $9 = HEAP8[$$03555>>0]|0;
    $10 = ($9<<24>>24)==($8<<24>>24);
    if ($10) {
     $37 = $$03555;
     break L1;
    }
    $11 = ((($$03555)) + 1|0);
    $12 = (($$03654) + -1)|0;
    $13 = $11;
    $14 = $13 & 3;
    $15 = ($14|0)!=(0);
    $16 = ($12|0)!=(0);
    $or$cond = $16 & $15;
    if ($or$cond) {
     $$03555 = $11;$$03654 = $12;
    } else {
     $$035$lcssa = $11;$$036$lcssa = $12;$$lcssa = $16;
     label = 5;
     break;
    }
   }
  } else {
   $$035$lcssa = $0;$$036$lcssa = $2;$$lcssa = $7;
   label = 5;
  }
 } while(0);
 L6: do {
  if ((label|0) == 5) {
   do {
    if ($$lcssa) {
     $$pre = HEAP8[$$035$lcssa>>0]|0;
     $$pre11 = $1&255;
     $17 = ($$pre<<24>>24)==($$pre11<<24>>24);
     if ($17) {
      $$035$lcssa6522 = $$035$lcssa;$$036$lcssa6423 = $$036$lcssa;
      $36 = ($$036$lcssa6423|0)==(0);
      if ($36) {
       break;
      } else {
       $37 = $$035$lcssa6522;
       break L6;
      }
     }
     $18 = Math_imul($3, 16843009)|0;
     $19 = ($$036$lcssa>>>0)>(3);
     L13: do {
      if ($19) {
       $$046 = $$035$lcssa;$$13745 = $$036$lcssa;
       while(1) {
        $20 = HEAP32[$$046>>2]|0;
        $21 = $20 ^ $18;
        $22 = (($21) + -16843009)|0;
        $23 = $21 & -2139062144;
        $24 = $23 ^ -2139062144;
        $25 = $24 & $22;
        $26 = ($25|0)==(0);
        if (!($26)) {
         $$137$lcssa66 = $$13745;$$in = $$046;
         break L13;
        }
        $27 = ((($$046)) + 4|0);
        $28 = (($$13745) + -4)|0;
        $29 = ($28>>>0)>(3);
        if ($29) {
         $$046 = $27;$$13745 = $28;
        } else {
         $$0$lcssa = $27;$$137$lcssa = $28;
         label = 11;
         break;
        }
       }
      } else {
       $$0$lcssa = $$035$lcssa;$$137$lcssa = $$036$lcssa;
       label = 11;
      }
     } while(0);
     if ((label|0) == 11) {
      $30 = ($$137$lcssa|0)==(0);
      if ($30) {
       break;
      } else {
       $$137$lcssa66 = $$137$lcssa;$$in = $$0$lcssa;
      }
     }
     $$140 = $$in;$$23839 = $$137$lcssa66;
     while(1) {
      $31 = HEAP8[$$140>>0]|0;
      $32 = ($31<<24>>24)==($$pre11<<24>>24);
      if ($32) {
       $37 = $$140;
       break L6;
      }
      $33 = ((($$140)) + 1|0);
      $34 = (($$23839) + -1)|0;
      $35 = ($34|0)==(0);
      if ($35) {
       break;
      } else {
       $$140 = $33;$$23839 = $34;
      }
     }
    }
   } while(0);
   $37 = 0;
  }
 } while(0);
 return ($37|0);
}
function _pad_667($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$lcssa = 0, $$011 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $5 = sp;
 $6 = $4 & 73728;
 $7 = ($6|0)==(0);
 $8 = ($2|0)>($3|0);
 $or$cond = $8 & $7;
 if ($or$cond) {
  $9 = (($2) - ($3))|0;
  $10 = $1 << 24 >> 24;
  $11 = ($9>>>0)<(256);
  $12 = $11 ? $9 : 256;
  (_memset(($5|0),($10|0),($12|0))|0);
  $13 = ($9>>>0)>(255);
  if ($13) {
   $$011 = $9;
   while(1) {
    _out($0,$5,256);
    $14 = (($$011) + -256)|0;
    $15 = ($14>>>0)>(255);
    if ($15) {
     $$011 = $14;
    } else {
     break;
    }
   }
   $16 = $9 & 255;
   $$0$lcssa = $16;
  } else {
   $$0$lcssa = $9;
  }
  _out($0,$5,$$0$lcssa);
 }
 STACKTOP = sp;return;
}
function _wctomb($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = (_wcrtomb($0,$1)|0);
  $$0 = $3;
 }
 return ($$0|0);
}
function _wcrtomb($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 do {
  if ($2) {
   $$0 = 1;
  } else {
   $3 = ($1>>>0)<(128);
   if ($3) {
    $4 = $1&255;
    HEAP8[$0>>0] = $4;
    $$0 = 1;
    break;
   }
   $5 = HEAP32[(3748)>>2]|0;
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)==(0|0);
   if ($7) {
    $8 = $1 & -128;
    $9 = ($8|0)==(57216);
    if ($9) {
     $10 = $1&255;
     HEAP8[$0>>0] = $10;
     $$0 = 1;
     break;
    } else {
     HEAP32[5168] = 25;
     $$0 = -1;
     break;
    }
   }
   $11 = ($1>>>0)<(2048);
   if ($11) {
    $12 = $1 >>> 6;
    $13 = $12 | 192;
    $14 = $13&255;
    $15 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $14;
    $16 = $1 & 63;
    $17 = $16 | 128;
    $18 = $17&255;
    HEAP8[$15>>0] = $18;
    $$0 = 2;
    break;
   }
   $19 = ($1>>>0)<(55296);
   $20 = $1 & -8192;
   $21 = ($20|0)==(57344);
   $or$cond = $19 | $21;
   if ($or$cond) {
    $22 = $1 >>> 12;
    $23 = $22 | 224;
    $24 = $23&255;
    $25 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $24;
    $26 = $1 >>> 6;
    $27 = $26 & 63;
    $28 = $27 | 128;
    $29 = $28&255;
    $30 = ((($0)) + 2|0);
    HEAP8[$25>>0] = $29;
    $31 = $1 & 63;
    $32 = $31 | 128;
    $33 = $32&255;
    HEAP8[$30>>0] = $33;
    $$0 = 3;
    break;
   }
   $34 = (($1) + -65536)|0;
   $35 = ($34>>>0)<(1048576);
   if ($35) {
    $36 = $1 >>> 18;
    $37 = $36 | 240;
    $38 = $37&255;
    $39 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $38;
    $40 = $1 >>> 12;
    $41 = $40 & 63;
    $42 = $41 | 128;
    $43 = $42&255;
    $44 = ((($0)) + 2|0);
    HEAP8[$39>>0] = $43;
    $45 = $1 >>> 6;
    $46 = $45 & 63;
    $47 = $46 | 128;
    $48 = $47&255;
    $49 = ((($0)) + 3|0);
    HEAP8[$44>>0] = $48;
    $50 = $1 & 63;
    $51 = $50 | 128;
    $52 = $51&255;
    HEAP8[$49>>0] = $52;
    $$0 = 4;
    break;
   } else {
    HEAP32[5168] = 25;
    $$0 = -1;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___fwritex($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$03846 = 0, $$042 = 0, $$1 = 0, $$139 = 0, $$141 = 0, $$143 = 0, $$pre = 0, $$pre48 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $7 = (___towrite($2)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$pre = HEAP32[$3>>2]|0;
   $12 = $$pre;
   label = 5;
  } else {
   $$1 = 0;
  }
 } else {
  $6 = $4;
  $12 = $6;
  label = 5;
 }
 L5: do {
  if ((label|0) == 5) {
   $9 = ((($2)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($12) - ($10))|0;
   $13 = ($11>>>0)<($1>>>0);
   $14 = $10;
   if ($13) {
    $15 = ((($2)) + 36|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (FUNCTION_TABLE_iiii[$16 & 255]($2,$0,$1)|0);
    $$1 = $17;
    break;
   }
   $18 = ((($2)) + 75|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = ($19<<24>>24)<(0);
   $21 = ($1|0)==(0);
   $or$cond = $20 | $21;
   L10: do {
    if ($or$cond) {
     $$139 = 0;$$141 = $0;$$143 = $1;$32 = $14;
    } else {
     $$03846 = $1;
     while(1) {
      $23 = (($$03846) + -1)|0;
      $24 = (($0) + ($23)|0);
      $25 = HEAP8[$24>>0]|0;
      $26 = ($25<<24>>24)==(10);
      if ($26) {
       break;
      }
      $22 = ($23|0)==(0);
      if ($22) {
       $$139 = 0;$$141 = $0;$$143 = $1;$32 = $14;
       break L10;
      } else {
       $$03846 = $23;
      }
     }
     $27 = ((($2)) + 36|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = (FUNCTION_TABLE_iiii[$28 & 255]($2,$0,$$03846)|0);
     $30 = ($29>>>0)<($$03846>>>0);
     if ($30) {
      $$1 = $29;
      break L5;
     }
     $31 = (($0) + ($$03846)|0);
     $$042 = (($1) - ($$03846))|0;
     $$pre48 = HEAP32[$9>>2]|0;
     $$139 = $$03846;$$141 = $31;$$143 = $$042;$32 = $$pre48;
    }
   } while(0);
   (_memcpy(($32|0),($$141|0),($$143|0))|0);
   $33 = HEAP32[$9>>2]|0;
   $34 = (($33) + ($$143)|0);
   HEAP32[$9>>2] = $34;
   $35 = (($$139) + ($$143))|0;
   $$1 = $35;
  }
 } while(0);
 return ($$1|0);
}
function ___towrite($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = HEAP32[$0>>2]|0;
 $8 = $7 & 8;
 $9 = ($8|0)==(0);
 if ($9) {
  $11 = ((($0)) + 8|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($0)) + 4|0);
  HEAP32[$12>>2] = 0;
  $13 = ((($0)) + 44|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($0)) + 28|0);
  HEAP32[$15>>2] = $14;
  $16 = ((($0)) + 20|0);
  HEAP32[$16>>2] = $14;
  $17 = $14;
  $18 = ((($0)) + 48|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($17) + ($19)|0);
  $21 = ((($0)) + 16|0);
  HEAP32[$21>>2] = $20;
  $$0 = 0;
 } else {
  $10 = $7 | 32;
  HEAP32[$0>>2] = $10;
  $$0 = -1;
 }
 return ($$0|0);
}
function ___DOUBLE_BITS_670($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 setTempRet0(($2) | 0);
 return ($1|0);
}
function _frexp($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$0 = 0.0, $$016 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $storemerge = 0, $trunc$clear = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $5 = (getTempRet0() | 0);
 $6 = $4&65535;
 $trunc$clear = $6 & 2047;
 switch ($trunc$clear<<16>>16) {
 case 0:  {
  $7 = $0 != 0.0;
  if ($7) {
   $8 = $0 * 1.8446744073709552E+19;
   $9 = (+_frexp($8,$1));
   $10 = HEAP32[$1>>2]|0;
   $11 = (($10) + -64)|0;
   $$016 = $9;$storemerge = $11;
  } else {
   $$016 = $0;$storemerge = 0;
  }
  HEAP32[$1>>2] = $storemerge;
  $$0 = $$016;
  break;
 }
 case 2047:  {
  $$0 = $0;
  break;
 }
 default: {
  $12 = $4 & 2047;
  $13 = (($12) + -1022)|0;
  HEAP32[$1>>2] = $13;
  $14 = $3 & -2146435073;
  $15 = $14 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $15;$16 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $16;
 }
 }
 return (+$$0);
}
function _sn_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$cast = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) - ($6))|0;
 $8 = ($7>>>0)>($2>>>0);
 $spec$select = $8 ? $2 : $7;
 $$cast = $6;
 (_memcpy(($$cast|0),($1|0),($spec$select|0))|0);
 $9 = HEAP32[$5>>2]|0;
 $10 = (($9) + ($spec$select)|0);
 HEAP32[$5>>2] = $10;
 return ($2|0);
}
function ___syscall_ret($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0>>>0)>(4294963200);
 if ($1) {
  $2 = (0 - ($0))|0;
  HEAP32[5168] = $2;
  $$0 = -1;
 } else {
  $$0 = $0;
 }
 return ($$0|0);
}
function _open($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arglist_current = 0, $arglist_next = 0, $expanded = 0, $expanded2 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp + 16|0;
 $2 = sp;
 HEAP32[$2>>2] = $varargs;
 $arglist_current = HEAP32[$2>>2]|0;
 $3 = $arglist_current;
 $4 = ((0) + 4|0);
 $expanded2 = $4;
 $expanded = (($expanded2) - 1)|0;
 $5 = (($3) + ($expanded))|0;
 $6 = ((0) + 4|0);
 $expanded6 = $6;
 $expanded5 = (($expanded6) - 1)|0;
 $expanded4 = $expanded5 ^ -1;
 $7 = $5 & $expanded4;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $arglist_next = ((($8)) + 4|0);
 HEAP32[$2>>2] = $arglist_next;
 $10 = $0;
 HEAP32[$vararg_buffer>>2] = $10;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 32962;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $9;
 $11 = (___syscall5(5,($vararg_buffer|0))|0);
 $12 = (___syscall_ret($11)|0);
 STACKTOP = sp;return ($12|0);
}
function ___floatscan($0) {
 $0 = $0|0;
 var $$0 = 0, $$0104122 = 0, $$0110 = 0, $$0111 = 0.0, $$1$lcssa = 0, $$1105118 = 0, $$1123 = 0, $$2 = 0, $$2106120 = 0, $$3107 = 0, $$3121 = 0, $$4 = 0, $$4108 = 0, $$5 = 0, $$6 = 0, $$in = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond7 = 0, $trunc = 0, $trunc$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = ((($0)) + 104|0);
 while(1) {
  $3 = HEAP32[$1>>2]|0;
  $4 = HEAP32[$2>>2]|0;
  $5 = ($3>>>0)<($4>>>0);
  if ($5) {
   $6 = ((($3)) + 1|0);
   HEAP32[$1>>2] = $6;
   $7 = HEAP8[$3>>0]|0;
   $8 = $7&255;
   $10 = $8;
  } else {
   $9 = (___shgetc($0)|0);
   $10 = $9;
  }
  $11 = (_isspace($10)|0);
  $12 = ($11|0)==(0);
  if ($12) {
   break;
  }
 }
 L8: do {
  switch ($10|0) {
  case 43: case 45:  {
   $13 = ($10|0)==(45);
   $14 = $13&1;
   $15 = $14 << 1;
   $16 = (1 - ($15))|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = HEAP32[$2>>2]|0;
   $19 = ($17>>>0)<($18>>>0);
   if ($19) {
    $20 = ((($17)) + 1|0);
    HEAP32[$1>>2] = $20;
    $21 = HEAP8[$17>>0]|0;
    $22 = $21&255;
    $$0 = $22;$$0110 = $16;
    break L8;
   } else {
    $23 = (___shgetc($0)|0);
    $$0 = $23;$$0110 = $16;
    break L8;
   }
   break;
  }
  default: {
   $$0 = $10;$$0110 = 1;
  }
  }
 } while(0);
 $$0104122 = 0;$$1123 = $$0;
 while(1) {
  $24 = $$1123 | 32;
  $25 = (16810 + ($$0104122)|0);
  $26 = HEAP8[$25>>0]|0;
  $27 = $26 << 24 >> 24;
  $28 = ($24|0)==($27|0);
  if (!($28)) {
   $$1$lcssa = $$1123;$trunc = $$0104122;
   break;
  }
  $29 = ($$0104122>>>0)<(7);
  do {
   if ($29) {
    $30 = HEAP32[$1>>2]|0;
    $31 = HEAP32[$2>>2]|0;
    $32 = ($30>>>0)<($31>>>0);
    if ($32) {
     $33 = ((($30)) + 1|0);
     HEAP32[$1>>2] = $33;
     $34 = HEAP8[$30>>0]|0;
     $35 = $34&255;
     $$2 = $35;
     break;
    } else {
     $36 = (___shgetc($0)|0);
     $$2 = $36;
     break;
    }
   } else {
    $$2 = $$1123;
   }
  } while(0);
  $37 = (($$0104122) + 1)|0;
  $38 = ($37>>>0)<(8);
  if ($38) {
   $$0104122 = $37;$$1123 = $$2;
  } else {
   $$1$lcssa = $$2;$trunc = 8;
   break;
  }
 }
 $trunc$clear = $trunc & 2147483647;
 L24: do {
  switch ($trunc$clear|0) {
  case 8:  {
   label = 27;
   break;
  }
  case 3:  {
   label = 20;
   break;
  }
  default: {
   $39 = ($trunc>>>0)>(3);
   if ($39) {
    $40 = ($trunc|0)==(8);
    if ($40) {
     label = 27;
     break L24;
    } else {
     label = 20;
     break L24;
    }
   }
   $53 = ($trunc|0)==(0);
   L29: do {
    if ($53) {
     $$2106120 = 0;$$3121 = $$1$lcssa;
     while(1) {
      $54 = $$3121 | 32;
      $55 = (16819 + ($$2106120)|0);
      $56 = HEAP8[$55>>0]|0;
      $57 = $56 << 24 >> 24;
      $58 = ($54|0)==($57|0);
      if (!($58)) {
       $$3107 = $$2106120;$$5 = $$3121;
       label = 36;
       break L29;
      }
      $59 = ($$2106120>>>0)<(2);
      do {
       if ($59) {
        $60 = HEAP32[$1>>2]|0;
        $61 = HEAP32[$2>>2]|0;
        $62 = ($60>>>0)<($61>>>0);
        if ($62) {
         $63 = ((($60)) + 1|0);
         HEAP32[$1>>2] = $63;
         $64 = HEAP8[$60>>0]|0;
         $65 = $64&255;
         $$4 = $65;
         break;
        } else {
         $66 = (___shgetc($0)|0);
         $$4 = $66;
         break;
        }
       } else {
        $$4 = $$3121;
       }
      } while(0);
      $67 = (($$2106120) + 1)|0;
      $68 = ($67>>>0)<(3);
      if ($68) {
       $$2106120 = $67;$$3121 = $$4;
      } else {
       break;
      }
     }
    } else {
     $$3107 = $trunc;$$5 = $$1$lcssa;
     label = 36;
    }
   } while(0);
   L40: do {
    if ((label|0) == 36) {
     switch ($$3107|0) {
     case 3:  {
      break L40;
      break;
     }
     case 0:  {
      break;
     }
     default: {
      $108 = HEAP32[$2>>2]|0;
      $109 = ($108|0)==(0|0);
      if (!($109)) {
       $110 = HEAP32[$1>>2]|0;
       $111 = ((($110)) + -1|0);
       HEAP32[$1>>2] = $111;
      }
      HEAP32[5168] = 28;
      ___shlim($0);
      $$0111 = 0.0;
      break L24;
     }
     }
     $112 = ($$5|0)==(48);
     if ($112) {
      $113 = HEAP32[$1>>2]|0;
      $114 = HEAP32[$2>>2]|0;
      $115 = ($113>>>0)<($114>>>0);
      if ($115) {
       $116 = ((($113)) + 1|0);
       HEAP32[$1>>2] = $116;
       $117 = HEAP8[$113>>0]|0;
       $118 = $117&255;
       $121 = $118;
      } else {
       $119 = (___shgetc($0)|0);
       $121 = $119;
      }
      $120 = $121 | 32;
      $122 = ($120|0)==(120);
      if ($122) {
       $123 = (+_hexfloat($0,$$0110));
       $$0111 = $123;
       break L24;
      }
      $124 = HEAP32[$2>>2]|0;
      $125 = ($124|0)==(0|0);
      if ($125) {
       $$6 = 48;
      } else {
       $126 = HEAP32[$1>>2]|0;
       $127 = ((($126)) + -1|0);
       HEAP32[$1>>2] = $127;
       $$6 = 48;
      }
     } else {
      $$6 = $$5;
     }
     $128 = (+_decfloat($0,$$6,$$0110));
     $$0111 = $128;
     break L24;
    }
   } while(0);
   $69 = HEAP32[$1>>2]|0;
   $70 = HEAP32[$2>>2]|0;
   $71 = ($69>>>0)<($70>>>0);
   if ($71) {
    $72 = ((($69)) + 1|0);
    HEAP32[$1>>2] = $72;
    $73 = HEAP8[$69>>0]|0;
    $74 = $73&255;
    $77 = $74;
   } else {
    $75 = (___shgetc($0)|0);
    $77 = $75;
   }
   $76 = ($77|0)==(40);
   if (!($76)) {
    $78 = HEAP32[$2>>2]|0;
    $79 = ($78|0)==(0|0);
    if ($79) {
     $$0111 = nan;
     break L24;
    }
    $80 = HEAP32[$1>>2]|0;
    $81 = ((($80)) + -1|0);
    HEAP32[$1>>2] = $81;
    $$0111 = nan;
    break L24;
   }
   $$4108 = 1;
   while(1) {
    $82 = HEAP32[$1>>2]|0;
    $83 = HEAP32[$2>>2]|0;
    $84 = ($82>>>0)<($83>>>0);
    if ($84) {
     $85 = ((($82)) + 1|0);
     HEAP32[$1>>2] = $85;
     $86 = HEAP8[$82>>0]|0;
     $87 = $86&255;
     $90 = $87;
    } else {
     $88 = (___shgetc($0)|0);
     $90 = $88;
    }
    $89 = (($90) + -48)|0;
    $91 = ($89>>>0)<(10);
    $92 = (($90) + -65)|0;
    $93 = ($92>>>0)<(26);
    $or$cond = $91 | $93;
    if (!($or$cond)) {
     $94 = (($90) + -97)|0;
     $95 = ($94>>>0)<(26);
     $96 = ($90|0)==(95);
     $or$cond7 = $96 | $95;
     if (!($or$cond7)) {
      break;
     }
    }
    $107 = (($$4108) + 1)|0;
    $$4108 = $107;
   }
   $97 = ($90|0)==(41);
   if ($97) {
    $$0111 = nan;
   } else {
    $98 = HEAP32[$2>>2]|0;
    $99 = ($98|0)==(0|0);
    if (!($99)) {
     $100 = HEAP32[$1>>2]|0;
     $101 = ((($100)) + -1|0);
     HEAP32[$1>>2] = $101;
    }
    $102 = ($$4108|0)==(0);
    if ($102) {
     $$0111 = nan;
    } else {
     $$in = $$4108;
     while(1) {
      $103 = (($$in) + -1)|0;
      if (!($99)) {
       $104 = HEAP32[$1>>2]|0;
       $105 = ((($104)) + -1|0);
       HEAP32[$1>>2] = $105;
      }
      $106 = ($103|0)==(0);
      if ($106) {
       $$0111 = nan;
       break;
      } else {
       $$in = $103;
      }
     }
    }
   }
  }
  }
 } while(0);
 if ((label|0) == 20) {
  $41 = HEAP32[$2>>2]|0;
  $42 = ($41|0)==(0|0);
  if (!($42)) {
   $43 = HEAP32[$1>>2]|0;
   $44 = ((($43)) + -1|0);
   HEAP32[$1>>2] = $44;
  }
  $45 = ($trunc>>>0)>(3);
  if ($45) {
   $$1105118 = $trunc;
   while(1) {
    if (!($42)) {
     $46 = HEAP32[$1>>2]|0;
     $47 = ((($46)) + -1|0);
     HEAP32[$1>>2] = $47;
    }
    $48 = (($$1105118) + -1)|0;
    $49 = ($48>>>0)>(3);
    if ($49) {
     $$1105118 = $48;
    } else {
     label = 27;
     break;
    }
   }
  } else {
   label = 27;
  }
 }
 if ((label|0) == 27) {
  $50 = (+($$0110|0));
  $51 = $50 * inf;
  $52 = $51;
  $$0111 = $52;
 }
 return (+$$0111);
}
function _hexfloat($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$0$be = 0, $$0$ph = 0, $$0133 = 0, $$0143 = 0, $$0151 = 0, $$0154 = 0.0, $$0155 = 0.0, $$0158 = 0.0, $$0163 = 0, $$0169 = 0.0, $$0170173 = 0, $$0170174 = 0, $$01702 = 0, $$1149 = 0, $$1149$ph = 0, $$1152 = 0, $$1156 = 0.0, $$1159 = 0.0, $$1164 = 0;
 var $$2150 = 0, $$2153 = 0, $$2157 = 0.0, $$2160 = 0.0, $$2165 = 0, $$3 = 0, $$3$be = 0, $$3$lcssa = 0, $$3$ph = 0, $$3146 = 0, $$3146$ph = 0, $$3161$lcssa = 0.0, $$3161181 = 0.0, $$3166$lcssa = 0, $$3166185 = 0, $$4147 = 0, $$4162 = 0.0, $$4167$lcssa = 0, $$4167180 = 0, $$5 = 0.0;
 var $$5168 = 0, $$6 = 0, $$pn = 0.0, $$pre = 0, $$pre$phi204Z2D = 0.0, $$pre203 = 0.0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0.0, $133 = 0.0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0.0, $148 = 0.0;
 var $149 = 0.0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0.0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0.0, $173 = 0, $174 = 0.0, $175 = 0.0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0;
 var $185 = 0.0, $186 = 0.0, $187 = 0, $188 = 0.0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0.0;
 var $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $not$ = 0;
 var $or$cond = 0, $or$cond172 = 0, $or$cond4 = 0, $or$cond6 = 0, $spec$select175 = 0.0, $spec$select176 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 104|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3>>>0)<($5>>>0);
 if ($6) {
  $7 = ((($3)) + 1|0);
  HEAP32[$2>>2] = $7;
  $8 = HEAP8[$3>>0]|0;
  $9 = $8&255;
  $$0$ph = $9;
 } else {
  $10 = (___shgetc($0)|0);
  $$0$ph = $10;
 }
 $$0 = $$0$ph;$$0143 = 0;
 L5: while(1) {
  switch ($$0|0) {
  case 46:  {
   label = 10;
   break L5;
   break;
  }
  case 48:  {
   break;
  }
  default: {
   $$1149$ph = 0;$$3$ph = $$0;$$3146$ph = $$0143;$189 = 0;$190 = 0;
   break L5;
  }
  }
  $11 = HEAP32[$2>>2]|0;
  $12 = HEAP32[$4>>2]|0;
  $13 = ($11>>>0)<($12>>>0);
  if ($13) {
   $14 = ((($11)) + 1|0);
   HEAP32[$2>>2] = $14;
   $15 = HEAP8[$11>>0]|0;
   $16 = $15&255;
   $$0$be = $16;
  } else {
   $17 = (___shgetc($0)|0);
   $$0$be = $17;
  }
  $$0 = $$0$be;$$0143 = 1;
 }
 if ((label|0) == 10) {
  $18 = HEAP32[$2>>2]|0;
  $19 = HEAP32[$4>>2]|0;
  $20 = ($18>>>0)<($19>>>0);
  if ($20) {
   $21 = ((($18)) + 1|0);
   HEAP32[$2>>2] = $21;
   $22 = HEAP8[$18>>0]|0;
   $23 = $22&255;
   $26 = $23;
  } else {
   $24 = (___shgetc($0)|0);
   $26 = $24;
  }
  $25 = ($26|0)==(48);
  if ($25) {
   $34 = 0;$35 = 0;
   while(1) {
    $27 = HEAP32[$2>>2]|0;
    $28 = HEAP32[$4>>2]|0;
    $29 = ($27>>>0)<($28>>>0);
    if ($29) {
     $30 = ((($27)) + 1|0);
     HEAP32[$2>>2] = $30;
     $31 = HEAP8[$27>>0]|0;
     $32 = $31&255;
     $39 = $32;
    } else {
     $33 = (___shgetc($0)|0);
     $39 = $33;
    }
    $36 = (_i64Add(($34|0),($35|0),-1,-1)|0);
    $37 = (getTempRet0() | 0);
    $38 = ($39|0)==(48);
    if ($38) {
     $34 = $36;$35 = $37;
    } else {
     $$1149$ph = 1;$$3$ph = $39;$$3146$ph = 1;$189 = $36;$190 = $37;
     break;
    }
   }
  } else {
   $$1149$ph = 1;$$3$ph = $26;$$3146$ph = $$0143;$189 = 0;$190 = 0;
  }
 }
 $$0151 = 0;$$0155 = 1.0;$$0158 = 0.0;$$0163 = 0;$$1149 = $$1149$ph;$$3 = $$3$ph;$$3146 = $$3146$ph;$49 = 0;$51 = 0;$90 = $189;$92 = $190;
 while(1) {
  $40 = (($$3) + -48)|0;
  $41 = ($40>>>0)<(10);
  $$pre = $$3 | 32;
  if ($41) {
   label = 24;
  } else {
   $42 = (($$pre) + -97)|0;
   $43 = ($42>>>0)<(6);
   $44 = ($$3|0)==(46);
   $or$cond6 = $44 | $43;
   if (!($or$cond6)) {
    $$3$lcssa = $$3;
    break;
   }
   if ($44) {
    $45 = ($$1149|0)==(0);
    if ($45) {
     $$2150 = 1;$$2153 = $$0151;$$2157 = $$0155;$$2160 = $$0158;$$2165 = $$0163;$$4147 = $$3146;$191 = $51;$192 = $49;$193 = $51;$194 = $49;
    } else {
     $$3$lcssa = 46;
     break;
    }
   } else {
    label = 24;
   }
  }
  if ((label|0) == 24) {
   label = 0;
   $46 = ($$3|0)>(57);
   $47 = (($$pre) + -87)|0;
   $$0133 = $46 ? $47 : $40;
   $48 = ($49|0)<(0);
   $50 = ($51>>>0)<(8);
   $52 = ($49|0)==(0);
   $53 = $52 & $50;
   $54 = $48 | $53;
   do {
    if ($54) {
     $55 = $$0163 << 4;
     $56 = (($$0133) + ($55))|0;
     $$1152 = $$0151;$$1156 = $$0155;$$1159 = $$0158;$$1164 = $56;
    } else {
     $57 = ($49|0)<(0);
     $58 = ($51>>>0)<(14);
     $59 = ($49|0)==(0);
     $60 = $59 & $58;
     $61 = $57 | $60;
     if ($61) {
      $62 = (+($$0133|0));
      $63 = $$0155 * 0.0625;
      $64 = $63 * $62;
      $65 = $$0158 + $64;
      $$1152 = $$0151;$$1156 = $63;$$1159 = $65;$$1164 = $$0163;
      break;
     } else {
      $66 = ($$0133|0)==(0);
      $67 = ($$0151|0)!=(0);
      $or$cond = $67 | $66;
      $68 = $$0155 * 0.5;
      $69 = $$0158 + $68;
      $spec$select175 = $or$cond ? $$0158 : $69;
      $spec$select176 = $or$cond ? $$0151 : 1;
      $$1152 = $spec$select176;$$1156 = $$0155;$$1159 = $spec$select175;$$1164 = $$0163;
      break;
     }
    }
   } while(0);
   $70 = (_i64Add(($51|0),($49|0),1,0)|0);
   $71 = (getTempRet0() | 0);
   $$2150 = $$1149;$$2153 = $$1152;$$2157 = $$1156;$$2160 = $$1159;$$2165 = $$1164;$$4147 = 1;$191 = $90;$192 = $92;$193 = $70;$194 = $71;
  }
  $72 = HEAP32[$2>>2]|0;
  $73 = HEAP32[$4>>2]|0;
  $74 = ($72>>>0)<($73>>>0);
  if ($74) {
   $75 = ((($72)) + 1|0);
   HEAP32[$2>>2] = $75;
   $76 = HEAP8[$72>>0]|0;
   $77 = $76&255;
   $$3$be = $77;
  } else {
   $78 = (___shgetc($0)|0);
   $$3$be = $78;
  }
  $$0151 = $$2153;$$0155 = $$2157;$$0158 = $$2160;$$0163 = $$2165;$$1149 = $$2150;$$3 = $$3$be;$$3146 = $$4147;$49 = $194;$51 = $193;$90 = $191;$92 = $192;
 }
 $79 = ($$3146|0)==(0);
 do {
  if ($79) {
   $80 = HEAP32[$4>>2]|0;
   $81 = ($80|0)==(0|0);
   if (!($81)) {
    $82 = HEAP32[$2>>2]|0;
    $83 = ((($82)) + -2|0);
    HEAP32[$2>>2] = $83;
    $84 = ($$1149|0)==(0);
    if (!($84)) {
     $85 = ((($82)) + -3|0);
     HEAP32[$2>>2] = $85;
    }
   }
   $86 = (+($1|0));
   $87 = $86 * 0.0;
   $$0169 = $87;
  } else {
   $88 = ($$1149|0)==(0);
   $89 = $88 ? $51 : $90;
   $91 = $88 ? $49 : $92;
   $93 = ($49|0)<(0);
   $94 = ($51>>>0)<(8);
   $95 = ($49|0)==(0);
   $96 = $95 & $94;
   $97 = $93 | $96;
   if ($97) {
    $$3166185 = $$0163;$100 = $49;$99 = $51;
    while(1) {
     $98 = $$3166185 << 4;
     $101 = (_i64Add(($99|0),($100|0),1,0)|0);
     $102 = (getTempRet0() | 0);
     $103 = ($100|0)<(0);
     $104 = ($99>>>0)<(7);
     $105 = ($100|0)==(0);
     $106 = $105 & $104;
     $107 = $103 | $106;
     if ($107) {
      $$3166185 = $98;$100 = $102;$99 = $101;
     } else {
      $$3166$lcssa = $98;
      break;
     }
    }
   } else {
    $$3166$lcssa = $$0163;
   }
   $108 = $$3$lcssa | 32;
   $109 = ($108|0)==(112);
   if ($109) {
    $110 = (_scanexp($0)|0);
    $111 = (getTempRet0() | 0);
    $112 = ($110|0)==(0);
    $113 = ($111|0)==(-2147483648);
    $114 = $112 & $113;
    if ($114) {
     $115 = HEAP32[$4>>2]|0;
     $116 = ($115|0)==(0|0);
     if ($116) {
      $127 = 0;$128 = 0;
     } else {
      $117 = HEAP32[$2>>2]|0;
      $118 = ((($117)) + -1|0);
      HEAP32[$2>>2] = $118;
      $127 = 0;$128 = 0;
     }
    } else {
     $127 = $110;$128 = $111;
    }
   } else {
    $119 = HEAP32[$4>>2]|0;
    $120 = ($119|0)==(0|0);
    if ($120) {
     $127 = 0;$128 = 0;
    } else {
     $121 = HEAP32[$2>>2]|0;
     $122 = ((($121)) + -1|0);
     HEAP32[$2>>2] = $122;
     $127 = 0;$128 = 0;
    }
   }
   $123 = (_bitshift64Shl(($89|0),($91|0),2)|0);
   $124 = (getTempRet0() | 0);
   $125 = (_i64Add(($123|0),($124|0),-32,-1)|0);
   $126 = (getTempRet0() | 0);
   $129 = (_i64Add(($125|0),($126|0),($127|0),($128|0))|0);
   $130 = (getTempRet0() | 0);
   $131 = ($$3166$lcssa|0)==(0);
   if ($131) {
    $132 = (+($1|0));
    $133 = $132 * 0.0;
    $$0169 = $133;
    break;
   }
   $134 = ($130|0)>(0);
   $135 = ($129>>>0)>(1074);
   $136 = ($130|0)==(0);
   $137 = $136 & $135;
   $138 = $134 | $137;
   if ($138) {
    HEAP32[5168] = 68;
    $139 = (+($1|0));
    $140 = $139 * 1.7976931348623157E+308;
    $141 = $140 * 1.7976931348623157E+308;
    $$0169 = $141;
    break;
   }
   $142 = ($130|0)<(-1);
   $143 = ($129>>>0)<(4294966116);
   $144 = ($130|0)==(-1);
   $145 = $144 & $143;
   $146 = $142 | $145;
   if ($146) {
    HEAP32[5168] = 68;
    $147 = (+($1|0));
    $148 = $147 * 2.2250738585072014E-308;
    $149 = $148 * 2.2250738585072014E-308;
    $$0169 = $149;
    break;
   }
   $150 = ($$3166$lcssa|0)>(-1);
   if ($150) {
    $$3161181 = $$0158;$$4167180 = $$3166$lcssa;$155 = $129;$156 = $130;
    while(1) {
     $151 = !($$3161181 >= 0.5);
     $152 = $$4167180 << 1;
     $153 = $$3161181 + -1.0;
     $not$ = $151 ^ 1;
     $154 = $not$&1;
     $$5168 = $152 | $154;
     $$pn = $151 ? $$3161181 : $153;
     $$4162 = $$3161181 + $$pn;
     $157 = (_i64Add(($155|0),($156|0),-1,-1)|0);
     $158 = (getTempRet0() | 0);
     $159 = ($$5168|0)>(-1);
     if ($159) {
      $$3161181 = $$4162;$$4167180 = $$5168;$155 = $157;$156 = $158;
     } else {
      $$3161$lcssa = $$4162;$$4167$lcssa = $$5168;$160 = $157;$161 = $158;
      break;
     }
    }
   } else {
    $$3161$lcssa = $$0158;$$4167$lcssa = $$3166$lcssa;$160 = $129;$161 = $130;
   }
   $162 = (_i64Add(($160|0),($161|0),1106,0)|0);
   $163 = (getTempRet0() | 0);
   $164 = ($163|0)<(0);
   $165 = ($162>>>0)<(53);
   $166 = ($163|0)==(0);
   $167 = $166 & $165;
   $168 = $164 | $167;
   do {
    if ($168) {
     $169 = ($162|0)>(0);
     if ($169) {
      $170 = ($162|0)<(53);
      $171 = (84 - ($162))|0;
      if ($170) {
       $$0170174 = $162;$173 = $171;
      } else {
       $$01702 = $162;
       label = 60;
       break;
      }
     } else {
      $$0170174 = 0;$173 = 84;
     }
     $172 = (+($1|0));
     $174 = (+_scalbn(1.0,$173));
     $175 = (+_copysignl($174,$172));
     $$0154 = $175;$$0170173 = $$0170174;$$pre$phi204Z2D = $172;
    } else {
     $$01702 = 53;
     label = 60;
    }
   } while(0);
   if ((label|0) == 60) {
    $$pre203 = (+($1|0));
    $$0154 = 0.0;$$0170173 = $$01702;$$pre$phi204Z2D = $$pre203;
   }
   $176 = ($$0170173|0)<(32);
   $177 = $$3161$lcssa != 0.0;
   $or$cond4 = $177 & $176;
   $178 = $$4167$lcssa & 1;
   $179 = ($178|0)==(0);
   $or$cond172 = $179 & $or$cond4;
   $180 = $or$cond172&1;
   $$6 = (($$4167$lcssa) + ($180))|0;
   $$5 = $or$cond172 ? 0.0 : $$3161$lcssa;
   $181 = (+($$6>>>0));
   $182 = $$pre$phi204Z2D * $181;
   $183 = $$0154 + $182;
   $184 = $$5 * $$pre$phi204Z2D;
   $185 = $184 + $183;
   $186 = $185 - $$0154;
   $187 = $186 != 0.0;
   if (!($187)) {
    HEAP32[5168] = 68;
   }
   $188 = (+_scalbnl($186,$160));
   $$0169 = $188;
  }
 } while(0);
 return (+$$0169);
}
function _decfloat($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0324 = 0, $$0324$be = 0, $$0327480 = 0, $$0328 = 0, $$0329 = 0, $$0331476 = 0, $$0335486 = 0, $$0336$lcssa = 0, $$0336453 = 0, $$0336454 = 0, $$0336455 = 0, $$0336503 = 0, $$0340$lcssa = 0, $$0340457 = 0, $$0340458 = 0, $$0340459 = 0, $$0340502 = 0, $$0345$lcssa540 = 0, $$0345484 = 0, $$0355 = 0.0;
 var $$0356 = 0.0, $$0360474 = 0.0, $$0367 = 0, $$0376 = 0, $$0376$ph = 0, $$0381$lcssa539 = 0, $$0381483 = 0, $$0390 = 0, $$0393 = 0, $$0398$lcssa = 0, $$0398463 = 0, $$0398464 = 0, $$0398465 = 0, $$0398499 = 0, $$1 = 0.0, $$10473 = 0, $$11 = 0, $$1330 = 0, $$1357 = 0.0, $$1361 = 0.0;
 var $$1377 = 0, $$1377$ph = 0, $$1377$ph$ph = 0, $$1391$lcssa = 0, $$1391501 = 0, $$2 = 0, $$2338 = 0, $$2342 = 0, $$2362 = 0.0, $$2366$v = 0, $$2369 = 0, $$2369$ph = 0, $$2369$ph579 = 0, $$2392 = 0, $$2395 = 0, $$2400 = 0, $$3$lcssa = 0, $$3339493 = 0, $$3343 = 0, $$3348$ph = 0;
 var $$3348$ph580 = 0, $$3359 = 0.0, $$3363 = 0.0, $$3370 = 0, $$3379 = 0, $$3384$ph = 0, $$3384$ph578 = 0, $$3396$lcssa = 0, $$3396500 = 0, $$3504 = 0, $$4344485 = 0, $$4380 = 0, $$4397 = 0, $$4475 = 0, $$5 = 0, $$5$in = 0, $$5350 = 0, $$5350$ph = 0, $$5350$ph$ph = 0, $$5372 = 0;
 var $$5386$ph = 0, $$5386$ph576 = 0, $$5386$ph576$ph = 0, $$6351478 = 0, $$6387477 = 0, $$6479 = 0, $$7374$ph$ph = 0, $$neg447 = 0, $$pre = 0, $$promoted = 0, $$sink$off0 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0.0, $146 = 0, $147 = 0.0, $148 = 0.0, $149 = 0, $15 = 0, $150 = 0.0, $151 = 0, $152 = 0.0, $153 = 0.0, $154 = 0, $155 = 0, $156 = 0, $157 = 0.0, $158 = 0.0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0, $167 = 0, $168 = 0, $169 = 0.0, $17 = 0, $170 = 0.0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0;
 var $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0;
 var $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0;
 var $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0;
 var $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0;
 var $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0.0, $295 = 0, $296 = 0, $297 = 0.0, $298 = 0.0, $299 = 0, $3 = 0, $30 = 0, $300 = 0.0, $301 = 0.0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0;
 var $307 = 0, $308 = 0.0, $309 = 0.0, $31 = 0, $310 = 0, $311 = 0.0, $312 = 0.0, $313 = 0.0, $314 = 0.0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0;
 var $325 = 0.0, $326 = 0.0, $327 = 0, $328 = 0.0, $329 = 0.0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0.0, $334 = 0.0, $335 = 0.0, $336 = 0.0, $337 = 0, $338 = 0, $339 = 0.0, $34 = 0, $340 = 0, $341 = 0.0, $342 = 0.0;
 var $343 = 0.0, $344 = 0, $345 = 0, $346 = 0.0, $347 = 0, $348 = 0.0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0.0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0;
 var $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $cond = 0, $exitcond = 0, $narrow = 0, $not$ = 0, $or$cond = 0, $or$cond3 = 0, $or$cond414 = 0, $or$cond417 = 0, $or$cond418 = 0, $or$cond421 = 0, $or$cond559 = 0, $or$cond9 = 0, $spec$select = 0, $spec$select410 = 0, $spec$select411 = 0, $spec$select419 = 0, $spec$select420 = 0, $spec$select439 = 0;
 var $spec$select440 = 0, $spec$select441 = 0, $spec$select442 = 0, $spec$select443 = 0, $spec$store$select = 0, $storemerge446 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(512|0);
 $3 = sp;
 $4 = ((($0)) + 4|0);
 $5 = ((($0)) + 104|0);
 $$0324 = $1;$$0393 = 0;
 L1: while(1) {
  switch ($$0324|0) {
  case 46:  {
   label = 7;
   break L1;
   break;
  }
  case 48:  {
   break;
  }
  default: {
   $$0390 = 0;$$2 = $$0324;$$2395 = $$0393;$354 = 0;$355 = 0;
   break L1;
  }
  }
  $6 = HEAP32[$4>>2]|0;
  $7 = HEAP32[$5>>2]|0;
  $8 = ($6>>>0)<($7>>>0);
  if ($8) {
   $9 = ((($6)) + 1|0);
   HEAP32[$4>>2] = $9;
   $10 = HEAP8[$6>>0]|0;
   $11 = $10&255;
   $$0324$be = $11;
  } else {
   $12 = (___shgetc($0)|0);
   $$0324$be = $12;
  }
  $$0324 = $$0324$be;$$0393 = 1;
 }
 if ((label|0) == 7) {
  $13 = HEAP32[$4>>2]|0;
  $14 = HEAP32[$5>>2]|0;
  $15 = ($13>>>0)<($14>>>0);
  if ($15) {
   $16 = ((($13)) + 1|0);
   HEAP32[$4>>2] = $16;
   $17 = HEAP8[$13>>0]|0;
   $18 = $17&255;
   $21 = $18;
  } else {
   $19 = (___shgetc($0)|0);
   $21 = $19;
  }
  $20 = ($21|0)==(48);
  if ($20) {
   $22 = 0;$23 = 0;
   while(1) {
    $24 = (_i64Add(($22|0),($23|0),-1,-1)|0);
    $25 = (getTempRet0() | 0);
    $26 = HEAP32[$4>>2]|0;
    $27 = HEAP32[$5>>2]|0;
    $28 = ($26>>>0)<($27>>>0);
    if ($28) {
     $29 = ((($26)) + 1|0);
     HEAP32[$4>>2] = $29;
     $30 = HEAP8[$26>>0]|0;
     $31 = $30&255;
     $34 = $31;
    } else {
     $32 = (___shgetc($0)|0);
     $34 = $32;
    }
    $33 = ($34|0)==(48);
    if ($33) {
     $22 = $24;$23 = $25;
    } else {
     $$0390 = 1;$$2 = $34;$$2395 = 1;$354 = $24;$355 = $25;
     break;
    }
   }
  } else {
   $$0390 = 1;$$2 = $21;$$2395 = $$0393;$354 = 0;$355 = 0;
  }
 }
 HEAP32[$3>>2] = 0;
 $35 = (($$2) + -48)|0;
 $36 = ($35>>>0)<(10);
 $37 = ($$2|0)==(46);
 $38 = $37 | $36;
 L22: do {
  if ($38) {
   $39 = ((($3)) + 496|0);
   $$0336503 = 0;$$0340502 = 0;$$0398499 = 0;$$1391501 = $$0390;$$3396500 = $$2395;$$3504 = $$2;$356 = $37;$357 = $35;$358 = $354;$359 = $355;$42 = 0;$43 = 0;
   L24: while(1) {
    do {
     if ($356) {
      $cond = ($$1391501|0)==(0);
      if ($cond) {
       $$2338 = $$0336503;$$2342 = $$0340502;$$2392 = 1;$$2400 = $$0398499;$$4397 = $$3396500;$360 = $42;$361 = $43;$362 = $42;$363 = $43;
      } else {
       break L24;
      }
     } else {
      $41 = ($$0340502|0)<(125);
      $44 = (_i64Add(($42|0),($43|0),1,0)|0);
      $45 = (getTempRet0() | 0);
      $46 = ($$3504|0)!=(48);
      if (!($41)) {
       if (!($46)) {
        $$2338 = $$0336503;$$2342 = $$0340502;$$2392 = $$1391501;$$2400 = $$0398499;$$4397 = $$3396500;$360 = $358;$361 = $359;$362 = $44;$363 = $45;
        break;
       }
       $56 = HEAP32[$39>>2]|0;
       $57 = $56 | 1;
       HEAP32[$39>>2] = $57;
       $$2338 = $$0336503;$$2342 = $$0340502;$$2392 = $$1391501;$$2400 = $$0398499;$$4397 = $$3396500;$360 = $358;$361 = $359;$362 = $44;$363 = $45;
       break;
      }
      $spec$select = $46 ? $44 : $$0398499;
      $47 = ($$0336503|0)==(0);
      $48 = (($3) + ($$0340502<<2)|0);
      if ($47) {
       $storemerge446 = $357;
      } else {
       $49 = HEAP32[$48>>2]|0;
       $50 = ($49*10)|0;
       $51 = (($$3504) + -48)|0;
       $52 = (($51) + ($50))|0;
       $storemerge446 = $52;
      }
      HEAP32[$48>>2] = $storemerge446;
      $53 = (($$0336503) + 1)|0;
      $54 = ($53|0)==(9);
      $55 = $54&1;
      $spec$select410 = (($$0340502) + ($55))|0;
      $spec$select411 = $54 ? 0 : $53;
      $$2338 = $spec$select411;$$2342 = $spec$select410;$$2392 = $$1391501;$$2400 = $spec$select;$$4397 = 1;$360 = $358;$361 = $359;$362 = $44;$363 = $45;
     }
    } while(0);
    $58 = HEAP32[$4>>2]|0;
    $59 = HEAP32[$5>>2]|0;
    $60 = ($58>>>0)<($59>>>0);
    if ($60) {
     $61 = ((($58)) + 1|0);
     HEAP32[$4>>2] = $61;
     $62 = HEAP8[$58>>0]|0;
     $63 = $62&255;
     $66 = $63;
    } else {
     $64 = (___shgetc($0)|0);
     $66 = $64;
    }
    $65 = (($66) + -48)|0;
    $67 = ($65>>>0)<(10);
    $68 = ($66|0)==(46);
    $69 = $68 | $67;
    if ($69) {
     $$0336503 = $$2338;$$0340502 = $$2342;$$0398499 = $$2400;$$1391501 = $$2392;$$3396500 = $$4397;$$3504 = $66;$356 = $68;$357 = $65;$358 = $360;$359 = $361;$42 = $362;$43 = $363;
    } else {
     $$0336$lcssa = $$2338;$$0340$lcssa = $$2342;$$0398$lcssa = $$2400;$$1391$lcssa = $$2392;$$3$lcssa = $66;$$3396$lcssa = $$4397;$72 = $362;$73 = $360;$75 = $363;$76 = $361;
     label = 31;
     break L22;
    }
   }
   $40 = ($$3396500|0)!=(0);
   $$0336455 = $$0336503;$$0340459 = $$0340502;$$0398465 = $$0398499;$364 = $42;$365 = $43;$366 = $358;$367 = $359;$368 = $40;
   label = 37;
  } else {
   $$0336$lcssa = 0;$$0340$lcssa = 0;$$0398$lcssa = 0;$$1391$lcssa = $$0390;$$3$lcssa = $$2;$$3396$lcssa = $$2395;$72 = 0;$73 = $354;$75 = 0;$76 = $355;
   label = 31;
  }
 } while(0);
 do {
  if ((label|0) == 31) {
   $70 = ($$1391$lcssa|0)==(0);
   $71 = $70 ? $72 : $73;
   $74 = $70 ? $75 : $76;
   $77 = ($$3396$lcssa|0)!=(0);
   $78 = $$3$lcssa | 32;
   $79 = ($78|0)==(101);
   $or$cond414 = $77 & $79;
   if (!($or$cond414)) {
    $93 = ($$3$lcssa|0)>(-1);
    if ($93) {
     $$0336455 = $$0336$lcssa;$$0340459 = $$0340$lcssa;$$0398465 = $$0398$lcssa;$364 = $72;$365 = $75;$366 = $71;$367 = $74;$368 = $77;
     label = 37;
     break;
    } else {
     $$0336454 = $$0336$lcssa;$$0340458 = $$0340$lcssa;$$0398464 = $$0398$lcssa;$369 = $72;$370 = $75;$371 = $77;$372 = $71;$373 = $74;
     label = 39;
     break;
    }
   }
   $80 = (_scanexp($0)|0);
   $81 = (getTempRet0() | 0);
   $82 = ($80|0)==(0);
   $83 = ($81|0)==(-2147483648);
   $84 = $82 & $83;
   if ($84) {
    $85 = HEAP32[$5>>2]|0;
    $86 = ($85|0)==(0|0);
    if ($86) {
     $89 = 0;$90 = 0;
    } else {
     $87 = HEAP32[$4>>2]|0;
     $88 = ((($87)) + -1|0);
     HEAP32[$4>>2] = $88;
     $89 = 0;$90 = 0;
    }
   } else {
    $89 = $80;$90 = $81;
   }
   $91 = (_i64Add(($89|0),($90|0),($71|0),($74|0))|0);
   $92 = (getTempRet0() | 0);
   $$0336453 = $$0336$lcssa;$$0340457 = $$0340$lcssa;$$0398463 = $$0398$lcssa;$103 = $91;$104 = $72;$106 = $92;$107 = $75;
   label = 41;
  }
 } while(0);
 if ((label|0) == 37) {
  $94 = HEAP32[$5>>2]|0;
  $95 = ($94|0)==(0|0);
  if ($95) {
   $$0336454 = $$0336455;$$0340458 = $$0340459;$$0398464 = $$0398465;$369 = $364;$370 = $365;$371 = $368;$372 = $366;$373 = $367;
   label = 39;
  } else {
   $96 = HEAP32[$4>>2]|0;
   $97 = ((($96)) + -1|0);
   HEAP32[$4>>2] = $97;
   if ($368) {
    $$0336453 = $$0336455;$$0340457 = $$0340459;$$0398463 = $$0398465;$103 = $366;$104 = $364;$106 = $367;$107 = $365;
    label = 41;
   } else {
    label = 40;
   }
  }
 }
 if ((label|0) == 39) {
  if ($371) {
   $$0336453 = $$0336454;$$0340457 = $$0340458;$$0398463 = $$0398464;$103 = $372;$104 = $369;$106 = $373;$107 = $370;
   label = 41;
  } else {
   label = 40;
  }
 }
 do {
  if ((label|0) == 40) {
   HEAP32[5168] = 28;
   ___shlim($0);
   $$1 = 0.0;
  }
  else if ((label|0) == 41) {
   $98 = HEAP32[$3>>2]|0;
   $99 = ($98|0)==(0);
   if ($99) {
    $100 = (+($2|0));
    $101 = $100 * 0.0;
    $$1 = $101;
    break;
   }
   $102 = ($103|0)==($104|0);
   $105 = ($106|0)==($107|0);
   $108 = $102 & $105;
   $109 = ($107|0)<(0);
   $110 = ($104>>>0)<(10);
   $111 = ($107|0)==(0);
   $112 = $111 & $110;
   $113 = $109 | $112;
   $or$cond = $113 & $108;
   if ($or$cond) {
    $114 = (+($2|0));
    $115 = (+($98>>>0));
    $116 = $114 * $115;
    $$1 = $116;
    break;
   }
   $117 = ($106|0)>(0);
   $118 = ($103>>>0)>(537);
   $119 = ($106|0)==(0);
   $120 = $119 & $118;
   $121 = $117 | $120;
   if ($121) {
    HEAP32[5168] = 68;
    $122 = (+($2|0));
    $123 = $122 * 1.7976931348623157E+308;
    $124 = $123 * 1.7976931348623157E+308;
    $$1 = $124;
    break;
   }
   $125 = ($106|0)<(-1);
   $126 = ($103>>>0)<(4294966116);
   $127 = ($106|0)==(-1);
   $128 = $127 & $126;
   $129 = $125 | $128;
   if ($129) {
    HEAP32[5168] = 68;
    $130 = (+($2|0));
    $131 = $130 * 2.2250738585072014E-308;
    $132 = $131 * 2.2250738585072014E-308;
    $$1 = $132;
    break;
   }
   $133 = ($$0336453|0)==(0);
   if ($133) {
    $$3343 = $$0340457;
   } else {
    $134 = ($$0336453|0)<(9);
    if ($134) {
     $135 = (($3) + ($$0340457<<2)|0);
     $$promoted = HEAP32[$135>>2]|0;
     $$3339493 = $$0336453;$137 = $$promoted;
     while(1) {
      $136 = ($137*10)|0;
      $138 = (($$3339493) + 1)|0;
      $139 = ($$3339493|0)<(8);
      if ($139) {
       $$3339493 = $138;$137 = $136;
      } else {
       break;
      }
     }
     HEAP32[$135>>2] = $136;
    }
    $140 = (($$0340457) + 1)|0;
    $$3343 = $140;
   }
   $141 = ($$0398463|0)<(9);
   if ($141) {
    $142 = ($$0398463|0)<=($103|0);
    $143 = ($103|0)<(18);
    $or$cond3 = $142 & $143;
    if ($or$cond3) {
     $144 = ($103|0)==(9);
     if ($144) {
      $145 = (+($2|0));
      $146 = HEAP32[$3>>2]|0;
      $147 = (+($146>>>0));
      $148 = $145 * $147;
      $$1 = $148;
      break;
     }
     $149 = ($103|0)<(9);
     if ($149) {
      $150 = (+($2|0));
      $151 = HEAP32[$3>>2]|0;
      $152 = (+($151>>>0));
      $153 = $150 * $152;
      $154 = (8 - ($103))|0;
      $155 = (2464 + ($154<<2)|0);
      $156 = HEAP32[$155>>2]|0;
      $157 = (+($156|0));
      $158 = $153 / $157;
      $$1 = $158;
      break;
     }
     $$neg447 = Math_imul($103, -3)|0;
     $159 = (($$neg447) + 80)|0;
     $160 = ($159|0)>(30);
     $$pre = HEAP32[$3>>2]|0;
     $161 = $$pre >>> $159;
     $162 = ($161|0)==(0);
     $or$cond559 = $160 | $162;
     if ($or$cond559) {
      $163 = (+($2|0));
      $164 = (+($$pre>>>0));
      $165 = $163 * $164;
      $166 = (($103) + -10)|0;
      $167 = (2464 + ($166<<2)|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = (+($168|0));
      $170 = $165 * $169;
      $$1 = $170;
      break;
     }
    }
   }
   $171 = (($103|0) % 9)&-1;
   $172 = ($171|0)==(0);
   if ($172) {
    $$2369$ph = $$3343;$$3348$ph = 0;$$3384$ph = $103;
   } else {
    $173 = ($103|0)>(-1);
    $174 = (($171) + 9)|0;
    $175 = $173 ? $171 : $174;
    $176 = (8 - ($175))|0;
    $177 = (2464 + ($176<<2)|0);
    $178 = HEAP32[$177>>2]|0;
    $179 = ($$3343|0)==(0);
    if ($179) {
     $$0345$lcssa540 = 0;$$0367 = 0;$$0381$lcssa539 = $103;
    } else {
     $180 = (1000000000 / ($178|0))&-1;
     $$0335486 = 0;$$0345484 = 0;$$0381483 = $103;$$4344485 = 0;
     while(1) {
      $181 = (($3) + ($$4344485<<2)|0);
      $182 = HEAP32[$181>>2]|0;
      $183 = (($182>>>0) / ($178>>>0))&-1;
      $184 = Math_imul($183, $178)|0;
      $185 = (($182) - ($184))|0;
      $186 = (($183) + ($$0335486))|0;
      HEAP32[$181>>2] = $186;
      $187 = Math_imul($180, $185)|0;
      $188 = ($$4344485|0)==($$0345484|0);
      $189 = ($186|0)==(0);
      $or$cond417 = $188 & $189;
      $190 = (($$0345484) + 1)|0;
      $191 = $190 & 127;
      $192 = (($$0381483) + -9)|0;
      $spec$select439 = $or$cond417 ? $192 : $$0381483;
      $spec$select440 = $or$cond417 ? $191 : $$0345484;
      $193 = (($$4344485) + 1)|0;
      $194 = ($193|0)==($$3343|0);
      if ($194) {
       break;
      } else {
       $$0335486 = $187;$$0345484 = $spec$select440;$$0381483 = $spec$select439;$$4344485 = $193;
      }
     }
     $195 = ($187|0)==(0);
     if ($195) {
      $$0345$lcssa540 = $spec$select440;$$0367 = $$3343;$$0381$lcssa539 = $spec$select439;
     } else {
      $196 = (($3) + ($$3343<<2)|0);
      $197 = (($$3343) + 1)|0;
      HEAP32[$196>>2] = $187;
      $$0345$lcssa540 = $spec$select440;$$0367 = $197;$$0381$lcssa539 = $spec$select439;
     }
    }
    $198 = (9 - ($175))|0;
    $199 = (($198) + ($$0381$lcssa539))|0;
    $$2369$ph = $$0367;$$3348$ph = $$0345$lcssa540;$$3384$ph = $199;
   }
   $$0376$ph = 0;$$2369$ph579 = $$2369$ph;$$3348$ph580 = $$3348$ph;$$3384$ph578 = $$3384$ph;
   L100: while(1) {
    $200 = ($$3384$ph578|0)<(18);
    $201 = ($$3384$ph578|0)==(18);
    $202 = (($3) + ($$3348$ph580<<2)|0);
    $$0376 = $$0376$ph;$$2369 = $$2369$ph579;
    while(1) {
     if (!($200)) {
      if (!($201)) {
       $$5386$ph = $$3384$ph578;
       break L100;
      }
      $203 = HEAP32[$202>>2]|0;
      $204 = ($203>>>0)<(9007199);
      if (!($204)) {
       $$5386$ph = 18;
       break L100;
      }
     }
     $205 = (($$2369) + 127)|0;
     $$0329 = 0;$$3370 = $$2369;$$5$in = $205;
     while(1) {
      $$5 = $$5$in & 127;
      $206 = (($3) + ($$5<<2)|0);
      $207 = HEAP32[$206>>2]|0;
      $208 = (_bitshift64Shl(($207|0),0,29)|0);
      $209 = (getTempRet0() | 0);
      $210 = (_i64Add(($208|0),($209|0),($$0329|0),0)|0);
      $211 = (getTempRet0() | 0);
      $212 = ($211>>>0)>(0);
      $213 = ($210>>>0)>(1000000000);
      $214 = ($211|0)==(0);
      $215 = $214 & $213;
      $216 = $212 | $215;
      if ($216) {
       $217 = (___udivdi3(($210|0),($211|0),1000000000,0)|0);
       $218 = (getTempRet0() | 0);
       $219 = (___muldi3(($217|0),($218|0),-1000000000,-1)|0);
       $220 = (getTempRet0() | 0);
       $221 = (_i64Add(($210|0),($211|0),($219|0),($220|0))|0);
       $222 = (getTempRet0() | 0);
       $$1330 = $217;$$sink$off0 = $221;
      } else {
       $$1330 = 0;$$sink$off0 = $210;
      }
      HEAP32[$206>>2] = $$sink$off0;
      $223 = (($$3370) + 127)|0;
      $224 = $223 & 127;
      $225 = ($$5|0)!=($224|0);
      $226 = ($$5|0)==($$3348$ph580|0);
      $or$cond418 = $225 | $226;
      $227 = ($$sink$off0|0)==(0);
      $spec$select419 = $227 ? $$5 : $$3370;
      $spec$select441 = $or$cond418 ? $$3370 : $spec$select419;
      $228 = (($$5) + -1)|0;
      if ($226) {
       break;
      } else {
       $$0329 = $$1330;$$3370 = $spec$select441;$$5$in = $228;
      }
     }
     $229 = (($$0376) + -29)|0;
     $230 = ($$1330|0)==(0);
     if ($230) {
      $$0376 = $229;$$2369 = $$3370;
     } else {
      break;
     }
    }
    $231 = (($$3384$ph578) + 9)|0;
    $232 = (($$3348$ph580) + 127)|0;
    $233 = $232 & 127;
    $234 = ($233|0)==($spec$select441|0);
    $235 = (($spec$select441) + 127)|0;
    $236 = $235 & 127;
    $237 = (($spec$select441) + 126)|0;
    $238 = $237 & 127;
    $239 = (($3) + ($238<<2)|0);
    if ($234) {
     $240 = (($3) + ($236<<2)|0);
     $241 = HEAP32[$240>>2]|0;
     $242 = HEAP32[$239>>2]|0;
     $243 = $242 | $241;
     HEAP32[$239>>2] = $243;
     $$5372 = $236;
    } else {
     $$5372 = $$3370;
    }
    $244 = (($3) + ($233<<2)|0);
    HEAP32[$244>>2] = $$1330;
    $$0376$ph = $229;$$2369$ph579 = $$5372;$$3348$ph580 = $233;$$3384$ph578 = $231;
   }
   $$1377$ph$ph = $$0376;$$5350$ph$ph = $$3348$ph580;$$5386$ph576$ph = $$5386$ph;$$7374$ph$ph = $$2369;
   L119: while(1) {
    $281 = (($$7374$ph$ph) + 1)|0;
    $279 = $281 & 127;
    $282 = (($$7374$ph$ph) + 127)|0;
    $283 = $282 & 127;
    $284 = (($3) + ($283<<2)|0);
    $$1377$ph = $$1377$ph$ph;$$5350$ph = $$5350$ph$ph;$$5386$ph576 = $$5386$ph576$ph;
    while(1) {
     $276 = ($$5386$ph576|0)==(18);
     $277 = ($$5386$ph576|0)>(27);
     $spec$select420 = $277 ? 9 : 1;
     $$1377 = $$1377$ph;$$5350 = $$5350$ph;
     while(1) {
      $$0331476 = 0;
      while(1) {
       $245 = (($$0331476) + ($$5350))|0;
       $246 = $245 & 127;
       $247 = ($246|0)==($$7374$ph$ph|0);
       if ($247) {
        label = 89;
        break;
       }
       $248 = (($3) + ($246<<2)|0);
       $249 = HEAP32[$248>>2]|0;
       $250 = (3804 + ($$0331476<<2)|0);
       $251 = HEAP32[$250>>2]|0;
       $252 = ($249>>>0)<($251>>>0);
       if ($252) {
        label = 89;
        break;
       }
       $253 = ($249>>>0)>($251>>>0);
       if ($253) {
        break;
       }
       $254 = (($$0331476) + 1)|0;
       $255 = ($254>>>0)<(2);
       if ($255) {
        $$0331476 = 1;
       } else {
        label = 89;
        break;
       }
      }
      if ((label|0) == 89) {
       label = 0;
       if ($276) {
        break L119;
       }
      }
      $256 = (($spec$select420) + ($$1377))|0;
      $257 = ($$5350|0)==($$7374$ph$ph|0);
      if ($257) {
       $$1377 = $256;$$5350 = $$7374$ph$ph;
      } else {
       break;
      }
     }
     $258 = 1 << $spec$select420;
     $259 = (($258) + -1)|0;
     $260 = 1000000000 >>> $spec$select420;
     $$0327480 = 0;$$6351478 = $$5350;$$6387477 = $$5386$ph576;$$6479 = $$5350;
     while(1) {
      $261 = (($3) + ($$6479<<2)|0);
      $262 = HEAP32[$261>>2]|0;
      $263 = $262 & $259;
      $264 = $262 >>> $spec$select420;
      $265 = (($264) + ($$0327480))|0;
      HEAP32[$261>>2] = $265;
      $266 = Math_imul($263, $260)|0;
      $267 = ($$6479|0)==($$6351478|0);
      $268 = ($265|0)==(0);
      $or$cond421 = $267 & $268;
      $269 = (($$6351478) + 1)|0;
      $270 = $269 & 127;
      $271 = (($$6387477) + -9)|0;
      $spec$select442 = $or$cond421 ? $271 : $$6387477;
      $spec$select443 = $or$cond421 ? $270 : $$6351478;
      $272 = (($$6479) + 1)|0;
      $273 = $272 & 127;
      $274 = ($273|0)==($$7374$ph$ph|0);
      if ($274) {
       break;
      } else {
       $$0327480 = $266;$$6351478 = $spec$select443;$$6387477 = $spec$select442;$$6479 = $273;
      }
     }
     $275 = ($266|0)==(0);
     if (!($275)) {
      $278 = ($279|0)==($spec$select443|0);
      if (!($278)) {
       break;
      }
      $285 = HEAP32[$284>>2]|0;
      $286 = $285 | 1;
      HEAP32[$284>>2] = $286;
     }
     $$1377$ph = $256;$$5350$ph = $spec$select443;$$5386$ph576 = $spec$select442;
    }
    $280 = (($3) + ($$7374$ph$ph<<2)|0);
    HEAP32[$280>>2] = $266;
    $$1377$ph$ph = $256;$$5350$ph$ph = $spec$select443;$$5386$ph576$ph = $spec$select442;$$7374$ph$ph = $279;
   }
   $$0360474 = 0.0;$$10473 = $$7374$ph$ph;$$4475 = 0;
   while(1) {
    $287 = (($$4475) + ($$5350))|0;
    $288 = $287 & 127;
    $289 = ($288|0)==($$10473|0);
    $290 = (($$10473) + 1)|0;
    $291 = $290 & 127;
    if ($289) {
     $292 = (($291) + -1)|0;
     $293 = (($3) + ($292<<2)|0);
     HEAP32[$293>>2] = 0;
     $$11 = $291;
    } else {
     $$11 = $$10473;
    }
    $294 = $$0360474 * 1.0E+9;
    $295 = (($3) + ($288<<2)|0);
    $296 = HEAP32[$295>>2]|0;
    $297 = (+($296>>>0));
    $298 = $294 + $297;
    $299 = (($$4475) + 1)|0;
    $exitcond = ($299|0)==(2);
    if ($exitcond) {
     break;
    } else {
     $$0360474 = $298;$$10473 = $$11;$$4475 = $299;
    }
   }
   $300 = (+($2|0));
   $301 = $298 * $300;
   $302 = (($$1377) + 53)|0;
   $303 = (($$1377) + 1127)|0;
   $304 = ($$1377|0)<(-1074);
   $305 = ($303|0)>(0);
   $spec$store$select = $305 ? $303 : 0;
   $$0328 = $304 ? $spec$store$select : 53;
   $306 = ($$0328|0)<(53);
   if ($306) {
    $307 = (105 - ($$0328))|0;
    $308 = (+_scalbn(1.0,$307));
    $309 = (+_copysignl($308,$301));
    $310 = (53 - ($$0328))|0;
    $311 = (+_scalbn(1.0,$310));
    $312 = (+_fmodl($301,$311));
    $313 = $301 - $312;
    $314 = $309 + $313;
    $$0355 = $309;$$0356 = $312;$$1361 = $314;
   } else {
    $$0355 = 0.0;$$0356 = 0.0;$$1361 = $301;
   }
   $315 = (($$5350) + 2)|0;
   $316 = $315 & 127;
   $317 = ($316|0)==($$11|0);
   if ($317) {
    $$3359 = $$0356;
   } else {
    $318 = (($3) + ($316<<2)|0);
    $319 = HEAP32[$318>>2]|0;
    $320 = ($319>>>0)<(500000000);
    do {
     if ($320) {
      $321 = ($319|0)==(0);
      if ($321) {
       $322 = (($$5350) + 3)|0;
       $323 = $322 & 127;
       $324 = ($323|0)==($$11|0);
       if ($324) {
        $$1357 = $$0356;
        break;
       }
      }
      $325 = $300 * 0.25;
      $326 = $325 + $$0356;
      $$1357 = $326;
     } else {
      $327 = ($319|0)==(500000000);
      if (!($327)) {
       $328 = $300 * 0.75;
       $329 = $328 + $$0356;
       $$1357 = $329;
       break;
      }
      $330 = (($$5350) + 3)|0;
      $331 = $330 & 127;
      $332 = ($331|0)==($$11|0);
      if ($332) {
       $333 = $300 * 0.5;
       $334 = $333 + $$0356;
       $$1357 = $334;
       break;
      } else {
       $335 = $300 * 0.75;
       $336 = $335 + $$0356;
       $$1357 = $336;
       break;
      }
     }
    } while(0);
    $337 = (53 - ($$0328))|0;
    $338 = ($337|0)>(1);
    if ($338) {
     $339 = (+_fmodl($$1357,1.0));
     $340 = $339 != 0.0;
     if ($340) {
      $$3359 = $$1357;
     } else {
      $341 = $$1357 + 1.0;
      $$3359 = $341;
     }
    } else {
     $$3359 = $$1357;
    }
   }
   $342 = $$1361 + $$3359;
   $343 = $342 - $$0355;
   $344 = $302 & 2147483644;
   $345 = ($344>>>0)>(1019);
   do {
    if ($345) {
     $346 = (+Math_abs((+$343)));
     $347 = !($346 >= 9007199254740992.0);
     $348 = $343 * 0.5;
     $not$ = $347 ^ 1;
     $349 = $not$&1;
     $$3379 = (($$1377) + ($349))|0;
     $$2362 = $347 ? $343 : $348;
     $350 = ($$3379|0)>(971);
     if (!($350)) {
      $351 = ($$0328|0)!=($303|0);
      $narrow = $351 | $347;
      $$2366$v = $304 & $narrow;
      $352 = $$3359 != 0.0;
      $or$cond9 = $352 & $$2366$v;
      if (!($or$cond9)) {
       $$3363 = $$2362;$$4380 = $$3379;
       break;
      }
     }
     HEAP32[5168] = 68;
     $$3363 = $$2362;$$4380 = $$3379;
    } else {
     $$3363 = $343;$$4380 = $$1377;
    }
   } while(0);
   $353 = (+_scalbnl($$3363,$$4380));
   $$1 = $353;
  }
 } while(0);
 STACKTOP = sp;return (+$$1);
}
function _scanexp($0) {
 $0 = $0|0;
 var $$03 = 0, $$04858 = 0, $$0492 = 0, $$157 = 0, $$251 = 0, $$pr$pre = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 104|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)<($4>>>0);
 if ($5) {
  $6 = ((($2)) + 1|0);
  HEAP32[$1>>2] = $6;
  $7 = HEAP8[$2>>0]|0;
  $8 = $7&255;
  $10 = $8;
 } else {
  $9 = (___shgetc($0)|0);
  $10 = $9;
 }
 switch ($10|0) {
 case 43: case 45:  {
  $11 = ($10|0)==(45);
  $12 = $11&1;
  $13 = HEAP32[$1>>2]|0;
  $14 = HEAP32[$3>>2]|0;
  $15 = ($13>>>0)<($14>>>0);
  if ($15) {
   $16 = ((($13)) + 1|0);
   HEAP32[$1>>2] = $16;
   $17 = HEAP8[$13>>0]|0;
   $18 = $17&255;
   $21 = $18;
  } else {
   $19 = (___shgetc($0)|0);
   $21 = $19;
  }
  $20 = (($21) + -48)|0;
  $22 = ($20>>>0)>(9);
  if ($22) {
   $23 = HEAP32[$3>>2]|0;
   $24 = ($23|0)==(0|0);
   if ($24) {
    $95 = -2147483648;$96 = 0;
   } else {
    $25 = HEAP32[$1>>2]|0;
    $26 = ((($25)) + -1|0);
    HEAP32[$1>>2] = $26;
    label = 14;
   }
  } else {
   $$03 = $12;$$0492 = $21;
   label = 12;
  }
  break;
 }
 default: {
  $$pre = (($10) + -48)|0;
  $27 = ($$pre>>>0)>(9);
  if ($27) {
   $$pr$pre = HEAP32[$3>>2]|0;
   $28 = ($$pr$pre|0)==(0|0);
   if ($28) {
    $95 = -2147483648;$96 = 0;
   } else {
    label = 14;
   }
  } else {
   $$03 = 0;$$0492 = $10;
   label = 12;
  }
 }
 }
 if ((label|0) == 12) {
  $$04858 = 0;$$157 = $$0492;
  while(1) {
   $31 = ($$04858*10)|0;
   $32 = (($$157) + -48)|0;
   $33 = (($32) + ($31))|0;
   $34 = HEAP32[$1>>2]|0;
   $35 = HEAP32[$3>>2]|0;
   $36 = ($34>>>0)<($35>>>0);
   if ($36) {
    $37 = ((($34)) + 1|0);
    HEAP32[$1>>2] = $37;
    $38 = HEAP8[$34>>0]|0;
    $39 = $38&255;
    $42 = $39;
   } else {
    $40 = (___shgetc($0)|0);
    $42 = $40;
   }
   $41 = (($42) + -48)|0;
   $43 = ($41>>>0)<(10);
   $44 = ($33|0)<(214748364);
   $45 = $43 & $44;
   if ($45) {
    $$04858 = $33;$$157 = $42;
   } else {
    break;
   }
  }
  $46 = ($33|0)<(0);
  $47 = $46 << 31 >> 31;
  if ($43) {
   $$251 = $42;$48 = $33;$49 = $47;
   while(1) {
    $50 = (___muldi3(($48|0),($49|0),10,0)|0);
    $51 = (getTempRet0() | 0);
    $52 = ($$251|0)<(0);
    $53 = $52 << 31 >> 31;
    $54 = (_i64Add(($$251|0),($53|0),-48,-1)|0);
    $55 = (getTempRet0() | 0);
    $56 = (_i64Add(($54|0),($55|0),($50|0),($51|0))|0);
    $57 = (getTempRet0() | 0);
    $58 = HEAP32[$1>>2]|0;
    $59 = HEAP32[$3>>2]|0;
    $60 = ($58>>>0)<($59>>>0);
    if ($60) {
     $61 = ((($58)) + 1|0);
     HEAP32[$1>>2] = $61;
     $62 = HEAP8[$58>>0]|0;
     $63 = $62&255;
     $66 = $63;
    } else {
     $64 = (___shgetc($0)|0);
     $66 = $64;
    }
    $65 = (($66) + -48)|0;
    $67 = ($65>>>0)<(10);
    $68 = ($57|0)<(21474836);
    $69 = ($56>>>0)<(2061584302);
    $70 = ($57|0)==(21474836);
    $71 = $70 & $69;
    $72 = $68 | $71;
    $73 = $67 & $72;
    if ($73) {
     $$251 = $66;$48 = $56;$49 = $57;
    } else {
     break;
    }
   }
   if ($67) {
    while(1) {
     $74 = HEAP32[$1>>2]|0;
     $75 = HEAP32[$3>>2]|0;
     $76 = ($74>>>0)<($75>>>0);
     if ($76) {
      $77 = ((($74)) + 1|0);
      HEAP32[$1>>2] = $77;
      $78 = HEAP8[$74>>0]|0;
      $79 = $78&255;
      $82 = $79;
     } else {
      $80 = (___shgetc($0)|0);
      $82 = $80;
     }
     $81 = (($82) + -48)|0;
     $83 = ($81>>>0)<(10);
     if (!($83)) {
      $89 = $56;$90 = $57;
      break;
     }
    }
   } else {
    $89 = $56;$90 = $57;
   }
  } else {
   $89 = $33;$90 = $47;
  }
  $84 = HEAP32[$3>>2]|0;
  $85 = ($84|0)==(0|0);
  if (!($85)) {
   $86 = HEAP32[$1>>2]|0;
   $87 = ((($86)) + -1|0);
   HEAP32[$1>>2] = $87;
  }
  $88 = ($$03|0)==(0);
  $91 = (_i64Subtract(0,0,($89|0),($90|0))|0);
  $92 = (getTempRet0() | 0);
  $93 = $88 ? $89 : $91;
  $94 = $88 ? $90 : $92;
  $95 = $94;$96 = $93;
 }
 else if ((label|0) == 14) {
  $29 = HEAP32[$1>>2]|0;
  $30 = ((($29)) + -1|0);
  HEAP32[$1>>2] = $30;
  $95 = -2147483648;$96 = 0;
 }
 setTempRet0(($95) | 0);
 return ($96|0);
}
function _scalbn($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$0 = 0.0, $$020 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0;
 var $9 = 0, $spec$select = 0, $spec$select21 = 0.0, $spec$select22 = 0, $spec$select23 = 0.0, $spec$store$select = 0, $spec$store$select1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)>(1023);
 if ($2) {
  $3 = $0 * 8.9884656743115795E+307;
  $4 = (($1) + -1023)|0;
  $5 = ($1|0)>(2046);
  $6 = $3 * 8.9884656743115795E+307;
  $7 = (($1) + -2046)|0;
  $8 = ($7|0)<(1023);
  $spec$store$select = $8 ? $7 : 1023;
  $spec$select = $5 ? $spec$store$select : $4;
  $spec$select21 = $5 ? $6 : $3;
  $$0 = $spec$select21;$$020 = $spec$select;
 } else {
  $9 = ($1|0)<(-1022);
  if ($9) {
   $10 = $0 * 2.2250738585072014E-308;
   $11 = (($1) + 1022)|0;
   $12 = ($1|0)<(-2044);
   $13 = $10 * 2.2250738585072014E-308;
   $14 = (($1) + 2044)|0;
   $15 = ($14|0)>(-1022);
   $spec$store$select1 = $15 ? $14 : -1022;
   $spec$select22 = $12 ? $spec$store$select1 : $11;
   $spec$select23 = $12 ? $13 : $10;
   $$0 = $spec$select23;$$020 = $spec$select22;
  } else {
   $$0 = $0;$$020 = $1;
  }
 }
 $16 = (($$020) + 1023)|0;
 $17 = (_bitshift64Shl(($16|0),0,52)|0);
 $18 = (getTempRet0() | 0);
 HEAP32[tempDoublePtr>>2] = $17;HEAP32[tempDoublePtr+4>>2] = $18;$19 = +HEAPF64[tempDoublePtr>>3];
 $20 = $$0 * $19;
 return (+$20);
}
function _copysignl($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_copysign($0,$1));
 return (+$2);
}
function _fmodl($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_fmod($0,$1));
 return (+$2);
}
function _scalbnl($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_scalbn($0,$1));
 return (+$2);
}
function _fmod($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $$070 = 0.0, $$071$lcssa = 0, $$07194 = 0, $$073$lcssa = 0, $$073100 = 0, $$172 = 0, $$174 = 0, $$275$lcssa = 0, $$27585 = 0, $$376$lcssa = 0, $$37682 = 0, $$lcssa = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0.0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $spec$select = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $1;$4 = HEAP32[tempDoublePtr>>2]|0;
 $5 = HEAP32[tempDoublePtr+4>>2]|0;
 $6 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $7 = (getTempRet0() | 0);
 $8 = $6 & 2047;
 $9 = (_bitshift64Lshr(($4|0),($5|0),52)|0);
 $10 = (getTempRet0() | 0);
 $11 = $9 & 2047;
 $12 = $3 & -2147483648;
 $13 = (_bitshift64Shl(($4|0),($5|0),1)|0);
 $14 = (getTempRet0() | 0);
 $15 = ($13|0)==(0);
 $16 = ($14|0)==(0);
 $17 = $15 & $16;
 L1: do {
  if ($17) {
   label = 3;
  } else {
   $18 = (___DOUBLE_BITS_273($1)|0);
   $19 = (getTempRet0() | 0);
   $20 = $19 & 2147483647;
   $21 = ($20>>>0)>(2146435072);
   $22 = ($18>>>0)>(0);
   $23 = ($20|0)==(2146435072);
   $24 = $23 & $22;
   $25 = $21 | $24;
   $26 = ($8|0)==(2047);
   $or$cond = $26 | $25;
   if ($or$cond) {
    label = 3;
   } else {
    $29 = (_bitshift64Shl(($2|0),($3|0),1)|0);
    $30 = (getTempRet0() | 0);
    $31 = ($30>>>0)>($14>>>0);
    $32 = ($29>>>0)>($13>>>0);
    $33 = ($30|0)==($14|0);
    $34 = $33 & $32;
    $35 = $31 | $34;
    if (!($35)) {
     $36 = ($29|0)==($13|0);
     $37 = ($30|0)==($14|0);
     $38 = $36 & $37;
     $39 = $0 * 0.0;
     $spec$select = $38 ? $39 : $0;
     return (+$spec$select);
    }
    $40 = ($8|0)==(0);
    if ($40) {
     $41 = (_bitshift64Shl(($2|0),($3|0),12)|0);
     $42 = (getTempRet0() | 0);
     $43 = ($42|0)>(-1);
     $44 = ($41>>>0)>(4294967295);
     $45 = ($42|0)==(-1);
     $46 = $45 & $44;
     $47 = $43 | $46;
     if ($47) {
      $$073100 = 0;$49 = $41;$50 = $42;
      while(1) {
       $48 = (($$073100) + -1)|0;
       $51 = (_bitshift64Shl(($49|0),($50|0),1)|0);
       $52 = (getTempRet0() | 0);
       $53 = ($52|0)>(-1);
       $54 = ($51>>>0)>(4294967295);
       $55 = ($52|0)==(-1);
       $56 = $55 & $54;
       $57 = $53 | $56;
       if ($57) {
        $$073100 = $48;$49 = $51;$50 = $52;
       } else {
        $$073$lcssa = $48;
        break;
       }
      }
     } else {
      $$073$lcssa = 0;
     }
     $58 = (1 - ($$073$lcssa))|0;
     $59 = (_bitshift64Shl(($2|0),($3|0),($58|0))|0);
     $60 = (getTempRet0() | 0);
     $$174 = $$073$lcssa;$87 = $59;$88 = $60;
    } else {
     $61 = $3 & 1048575;
     $62 = $61 | 1048576;
     $$174 = $8;$87 = $2;$88 = $62;
    }
    $63 = ($11|0)==(0);
    if ($63) {
     $64 = (_bitshift64Shl(($4|0),($5|0),12)|0);
     $65 = (getTempRet0() | 0);
     $66 = ($65|0)>(-1);
     $67 = ($64>>>0)>(4294967295);
     $68 = ($65|0)==(-1);
     $69 = $68 & $67;
     $70 = $66 | $69;
     if ($70) {
      $$07194 = 0;$72 = $64;$73 = $65;
      while(1) {
       $71 = (($$07194) + -1)|0;
       $74 = (_bitshift64Shl(($72|0),($73|0),1)|0);
       $75 = (getTempRet0() | 0);
       $76 = ($75|0)>(-1);
       $77 = ($74>>>0)>(4294967295);
       $78 = ($75|0)==(-1);
       $79 = $78 & $77;
       $80 = $76 | $79;
       if ($80) {
        $$07194 = $71;$72 = $74;$73 = $75;
       } else {
        $$071$lcssa = $71;
        break;
       }
      }
     } else {
      $$071$lcssa = 0;
     }
     $81 = (1 - ($$071$lcssa))|0;
     $82 = (_bitshift64Shl(($4|0),($5|0),($81|0))|0);
     $83 = (getTempRet0() | 0);
     $$172 = $$071$lcssa;$89 = $82;$90 = $83;
    } else {
     $84 = $5 & 1048575;
     $85 = $84 | 1048576;
     $$172 = $11;$89 = $4;$90 = $85;
    }
    $86 = ($$174|0)>($$172|0);
    $91 = (_i64Subtract(($87|0),($88|0),($89|0),($90|0))|0);
    $92 = (getTempRet0() | 0);
    $93 = ($92|0)>(-1);
    $94 = ($91>>>0)>(4294967295);
    $95 = ($92|0)==(-1);
    $96 = $95 & $94;
    $97 = $93 | $96;
    L25: do {
     if ($86) {
      $$27585 = $$174;$101 = $92;$158 = $97;$159 = $87;$160 = $88;$99 = $91;
      while(1) {
       if ($158) {
        $98 = ($99|0)==(0);
        $100 = ($101|0)==(0);
        $102 = $98 & $100;
        if ($102) {
         break;
        } else {
         $104 = $99;$105 = $101;
        }
       } else {
        $104 = $159;$105 = $160;
       }
       $106 = (_bitshift64Shl(($104|0),($105|0),1)|0);
       $107 = (getTempRet0() | 0);
       $108 = (($$27585) + -1)|0;
       $109 = ($108|0)>($$172|0);
       $110 = (_i64Subtract(($106|0),($107|0),($89|0),($90|0))|0);
       $111 = (getTempRet0() | 0);
       $112 = ($111|0)>(-1);
       $113 = ($110>>>0)>(4294967295);
       $114 = ($111|0)==(-1);
       $115 = $114 & $113;
       $116 = $112 | $115;
       if ($109) {
        $$27585 = $108;$101 = $111;$158 = $116;$159 = $106;$160 = $107;$99 = $110;
       } else {
        $$275$lcssa = $108;$$lcssa = $116;$118 = $110;$120 = $111;$156 = $106;$157 = $107;
        break L25;
       }
      }
      $103 = $0 * 0.0;
      $$070 = $103;
      break L1;
     } else {
      $$275$lcssa = $$174;$$lcssa = $97;$118 = $91;$120 = $92;$156 = $87;$157 = $88;
     }
    } while(0);
    if ($$lcssa) {
     $117 = ($118|0)==(0);
     $119 = ($120|0)==(0);
     $121 = $117 & $119;
     if ($121) {
      $122 = $0 * 0.0;
      $$070 = $122;
      break;
     } else {
      $124 = $120;$126 = $118;
     }
    } else {
     $124 = $157;$126 = $156;
    }
    $123 = ($124>>>0)<(1048576);
    $125 = ($126>>>0)<(0);
    $127 = ($124|0)==(1048576);
    $128 = $127 & $125;
    $129 = $123 | $128;
    if ($129) {
     $$37682 = $$275$lcssa;$130 = $126;$131 = $124;
     while(1) {
      $132 = (_bitshift64Shl(($130|0),($131|0),1)|0);
      $133 = (getTempRet0() | 0);
      $134 = (($$37682) + -1)|0;
      $135 = ($133>>>0)<(1048576);
      $136 = ($132>>>0)<(0);
      $137 = ($133|0)==(1048576);
      $138 = $137 & $136;
      $139 = $135 | $138;
      if ($139) {
       $$37682 = $134;$130 = $132;$131 = $133;
      } else {
       $$376$lcssa = $134;$141 = $132;$142 = $133;
       break;
      }
     }
    } else {
     $$376$lcssa = $$275$lcssa;$141 = $126;$142 = $124;
    }
    $140 = ($$376$lcssa|0)>(0);
    if ($140) {
     $143 = (_i64Add(($141|0),($142|0),0,-1048576)|0);
     $144 = (getTempRet0() | 0);
     $145 = (_bitshift64Shl(($$376$lcssa|0),0,52)|0);
     $146 = (getTempRet0() | 0);
     $147 = $143 | $145;
     $148 = $144 | $146;
     $153 = $148;$155 = $147;
    } else {
     $149 = (1 - ($$376$lcssa))|0;
     $150 = (_bitshift64Lshr(($141|0),($142|0),($149|0))|0);
     $151 = (getTempRet0() | 0);
     $153 = $151;$155 = $150;
    }
    $152 = $153 | $12;
    HEAP32[tempDoublePtr>>2] = $155;HEAP32[tempDoublePtr+4>>2] = $152;$154 = +HEAPF64[tempDoublePtr>>3];
    $$070 = $154;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $27 = $0 * $1;
  $28 = $27 / $27;
  $$070 = $28;
 }
 return (+$$070);
}
function ___DOUBLE_BITS_273($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 setTempRet0(($2) | 0);
 return ($1|0);
}
function _strlen($0) {
 $0 = $0|0;
 var $$0 = 0, $$014 = 0, $$015$lcssa = 0, $$01518 = 0, $$1$lcssa = 0, $$pn = 0, $$pn29 = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0;
 $2 = $1 & 3;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $$015$lcssa = $0;
   label = 5;
  } else {
   $$01518 = $0;$22 = $1;
   while(1) {
    $4 = HEAP8[$$01518>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $$pn = $22;
     break L1;
    }
    $6 = ((($$01518)) + 1|0);
    $7 = $6;
    $8 = $7 & 3;
    $9 = ($8|0)==(0);
    if ($9) {
     $$015$lcssa = $6;
     label = 5;
     break;
    } else {
     $$01518 = $6;$22 = $7;
    }
   }
  }
 } while(0);
 if ((label|0) == 5) {
  $$0 = $$015$lcssa;
  while(1) {
   $10 = HEAP32[$$0>>2]|0;
   $11 = (($10) + -16843009)|0;
   $12 = $10 & -2139062144;
   $13 = $12 ^ -2139062144;
   $14 = $13 & $11;
   $15 = ($14|0)==(0);
   $16 = ((($$0)) + 4|0);
   if ($15) {
    $$0 = $16;
   } else {
    break;
   }
  }
  $17 = $10&255;
  $18 = ($17<<24>>24)==(0);
  if ($18) {
   $$1$lcssa = $$0;
  } else {
   $$pn29 = $$0;
   while(1) {
    $19 = ((($$pn29)) + 1|0);
    $$pre = HEAP8[$19>>0]|0;
    $20 = ($$pre<<24>>24)==(0);
    if ($20) {
     $$1$lcssa = $19;
     break;
    } else {
     $$pn29 = $19;
    }
   }
  }
  $21 = $$1$lcssa;
  $$pn = $21;
 }
 $$014 = (($$pn) - ($1))|0;
 return ($$014|0);
}
function _strchr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___strchrnul($0,$1)|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $1&255;
 $5 = ($3<<24>>24)==($4<<24>>24);
 $6 = $5 ? $2 : 0;
 return ($6|0);
}
function ___strchrnul($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$029$lcssa = 0, $$02936 = 0, $$030$lcssa = 0, $$03039 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond33 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 & 255;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $4 = (_strlen($0)|0);
   $5 = (($0) + ($4)|0);
   $$0 = $5;
  } else {
   $6 = $0;
   $7 = $6 & 3;
   $8 = ($7|0)==(0);
   if ($8) {
    $$030$lcssa = $0;
   } else {
    $9 = $1&255;
    $$03039 = $0;
    while(1) {
     $10 = HEAP8[$$03039>>0]|0;
     $11 = ($10<<24>>24)==(0);
     $12 = ($10<<24>>24)==($9<<24>>24);
     $or$cond = $11 | $12;
     if ($or$cond) {
      $$0 = $$03039;
      break L1;
     }
     $13 = ((($$03039)) + 1|0);
     $14 = $13;
     $15 = $14 & 3;
     $16 = ($15|0)==(0);
     if ($16) {
      $$030$lcssa = $13;
      break;
     } else {
      $$03039 = $13;
     }
    }
   }
   $17 = Math_imul($2, 16843009)|0;
   $18 = HEAP32[$$030$lcssa>>2]|0;
   $19 = (($18) + -16843009)|0;
   $20 = $18 & -2139062144;
   $21 = $20 ^ -2139062144;
   $22 = $21 & $19;
   $23 = ($22|0)==(0);
   L10: do {
    if ($23) {
     $$02936 = $$030$lcssa;$25 = $18;
     while(1) {
      $24 = $25 ^ $17;
      $26 = (($24) + -16843009)|0;
      $27 = $24 & -2139062144;
      $28 = $27 ^ -2139062144;
      $29 = $28 & $26;
      $30 = ($29|0)==(0);
      if (!($30)) {
       $$029$lcssa = $$02936;
       break L10;
      }
      $31 = ((($$02936)) + 4|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = (($32) + -16843009)|0;
      $34 = $32 & -2139062144;
      $35 = $34 ^ -2139062144;
      $36 = $35 & $33;
      $37 = ($36|0)==(0);
      if ($37) {
       $$02936 = $31;$25 = $32;
      } else {
       $$029$lcssa = $31;
       break;
      }
     }
    } else {
     $$029$lcssa = $$030$lcssa;
    }
   } while(0);
   $38 = $1&255;
   $$1 = $$029$lcssa;
   while(1) {
    $39 = HEAP8[$$1>>0]|0;
    $40 = ($39<<24>>24)==(0);
    $41 = ($39<<24>>24)==($38<<24>>24);
    $or$cond33 = $40 | $41;
    $42 = ((($$1)) + 1|0);
    if ($or$cond33) {
     $$0 = $$1;
     break;
    } else {
     $$1 = $42;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function _snprintf($0,$1,$2,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $varargs = $varargs|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 HEAP32[$3>>2] = $varargs;
 _vsnprintf($0,$1,$2,$3);
 STACKTOP = sp;return;
}
function _strcpy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___stpcpy($0,$1);
 return ($0|0);
}
function ___stpcpy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$lcssa = 0, $$025$lcssa = 0, $$02536 = 0, $$026$lcssa = 0, $$02642 = 0, $$027$lcssa = 0, $$02741 = 0, $$037 = 0, $$1 = 0, $$128 = 0, $$22934 = 0, $$235 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1;
 $3 = $0;
 $4 = $2 ^ $3;
 $5 = $4 & 3;
 $6 = ($5|0)==(0);
 L1: do {
  if ($6) {
   $7 = $2 & 3;
   $8 = ($7|0)==(0);
   if ($8) {
    $$026$lcssa = $1;$$027$lcssa = $0;
   } else {
    $$02642 = $1;$$02741 = $0;
    while(1) {
     $9 = HEAP8[$$02642>>0]|0;
     HEAP8[$$02741>>0] = $9;
     $10 = ($9<<24>>24)==(0);
     if ($10) {
      break L1;
     }
     $11 = ((($$02642)) + 1|0);
     $12 = ((($$02741)) + 1|0);
     $13 = $11;
     $14 = $13 & 3;
     $15 = ($14|0)==(0);
     if ($15) {
      $$026$lcssa = $11;$$027$lcssa = $12;
      break;
     } else {
      $$02642 = $11;$$02741 = $12;
     }
    }
   }
   $16 = HEAP32[$$026$lcssa>>2]|0;
   $17 = (($16) + -16843009)|0;
   $18 = $16 & -2139062144;
   $19 = $18 ^ -2139062144;
   $20 = $19 & $17;
   $21 = ($20|0)==(0);
   if ($21) {
    $$02536 = $$027$lcssa;$$037 = $$026$lcssa;$24 = $16;
    while(1) {
     $22 = ((($$037)) + 4|0);
     $23 = ((($$02536)) + 4|0);
     HEAP32[$$02536>>2] = $24;
     $25 = HEAP32[$22>>2]|0;
     $26 = (($25) + -16843009)|0;
     $27 = $25 & -2139062144;
     $28 = $27 ^ -2139062144;
     $29 = $28 & $26;
     $30 = ($29|0)==(0);
     if ($30) {
      $$02536 = $23;$$037 = $22;$24 = $25;
     } else {
      $$0$lcssa = $22;$$025$lcssa = $23;
      break;
     }
    }
   } else {
    $$0$lcssa = $$026$lcssa;$$025$lcssa = $$027$lcssa;
   }
   $$1 = $$0$lcssa;$$128 = $$025$lcssa;
   label = 10;
  } else {
   $$1 = $1;$$128 = $0;
   label = 10;
  }
 } while(0);
 if ((label|0) == 10) {
  $31 = HEAP8[$$1>>0]|0;
  HEAP8[$$128>>0] = $31;
  $32 = ($31<<24>>24)==(0);
  if (!($32)) {
   $$22934 = $$128;$$235 = $$1;
   while(1) {
    $33 = ((($$235)) + 1|0);
    $34 = ((($$22934)) + 1|0);
    $35 = HEAP8[$33>>0]|0;
    HEAP8[$34>>0] = $35;
    $36 = ($35<<24>>24)==(0);
    if ($36) {
     break;
    } else {
     $$22934 = $34;$$235 = $33;
    }
   }
  }
 }
 return;
}
function ___strdup($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strlen($0)|0);
 $2 = (($1) + 1)|0;
 $3 = (_malloc($2)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 0;
 } else {
  $5 = (_memcpy(($3|0),($0|0),($2|0))|0);
  $$0 = $5;
 }
 return ($$0|0);
}
function _fputs($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_strlen($0)|0);
 (_fwrite($0,1,$2,$1)|0);
 return;
}
function _fwrite($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = Math_imul($2, $1)|0;
 $5 = ((($3)) + 76|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (___fwritex($0,$4,$3)|0);
 $8 = ($7|0)==($4|0);
 if ($8) {
  $10 = $2;
 } else {
  $9 = (($7>>>0) / ($1>>>0))&-1;
  $10 = $9;
 }
 return ($10|0);
}
function ___unlist_locked_file($0) {
 $0 = $0|0;
 var $$pre = 0, $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 68|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $4 = ((($0)) + 132|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0|0);
  $7 = $5;
  $$pre = ((($0)) + 128|0);
  if (!($6)) {
   $8 = HEAP32[$$pre>>2]|0;
   $9 = ((($5)) + 128|0);
   HEAP32[$9>>2] = $8;
  }
  $10 = HEAP32[$$pre>>2]|0;
  $11 = ($10|0)==(0|0);
  $12 = ((($10)) + 132|0);
  $$sink = $11 ? (3792) : $12;
  HEAP32[$$sink>>2] = $7;
 }
 return;
}
function ___overflow($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = $1&255;
 HEAP8[$2>>0] = $3;
 $4 = ((($0)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = (___towrite($0)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$pre = HEAP32[$4>>2]|0;
   $12 = $$pre;
   label = 4;
  } else {
   $$0 = -1;
  }
 } else {
  $12 = $5;
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $9 = ((($0)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10>>>0)<($12>>>0);
   if ($11) {
    $13 = $1 & 255;
    $14 = ((($0)) + 75|0);
    $15 = HEAP8[$14>>0]|0;
    $16 = $15 << 24 >> 24;
    $17 = ($13|0)==($16|0);
    if (!($17)) {
     $18 = ((($10)) + 1|0);
     HEAP32[$9>>2] = $18;
     HEAP8[$10>>0] = $3;
     $$0 = $13;
     break;
    }
   }
   $19 = ((($0)) + 36|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (FUNCTION_TABLE_iiii[$20 & 255]($0,$2,1)|0);
   $22 = ($21|0)==(1);
   if ($22) {
    $23 = HEAP8[$2>>0]|0;
    $24 = $23&255;
    $$0 = $24;
   } else {
    $$0 = -1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _fopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (_strchr(16823,$3)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  HEAP32[5168] = 28;
  $$0 = 0;
 } else {
  $6 = (___fmodeflags($1)|0);
  $7 = $0;
  $8 = $6 | 32768;
  HEAP32[$vararg_buffer>>2] = $7;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $8;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 438;
  $9 = (___syscall5(5,($vararg_buffer|0))|0);
  $10 = (___syscall_ret($9)|0);
  $11 = ($10|0)<(0);
  if ($11) {
   $$0 = 0;
  } else {
   $12 = (___fdopen($10,$1)|0);
   $13 = ($12|0)==(0|0);
   if ($13) {
    (___wasi_fd_close(($10|0))|0);
    $$0 = 0;
   } else {
    $$0 = $12;
   }
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___fmodeflags($0) {
 $0 = $0|0;
 var $$ = 0, $$0 = 0, $$2 = 0, $$4 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $spec$select = 0, $spec$select13 = 0, $spec$select14 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strchr($0,43)|0);
 $2 = ($1|0)==(0|0);
 $3 = HEAP8[$0>>0]|0;
 $4 = ($3<<24>>24)!=(114);
 $$ = $4&1;
 $$0 = $2 ? $$ : 2;
 $5 = (_strchr($0,120)|0);
 $6 = ($5|0)==(0|0);
 $7 = $$0 | 128;
 $spec$select = $6 ? $$0 : $7;
 $8 = (_strchr($0,101)|0);
 $9 = ($8|0)==(0|0);
 $10 = $spec$select | 524288;
 $$2 = $9 ? $spec$select : $10;
 $11 = ($3<<24>>24)==(114);
 $12 = $$2 | 64;
 $spec$select13 = $11 ? $$2 : $12;
 $13 = ($3<<24>>24)==(119);
 $14 = $spec$select13 | 512;
 $$4 = $13 ? $14 : $spec$select13;
 $15 = ($3<<24>>24)==(97);
 $16 = $$4 | 1024;
 $spec$select14 = $15 ? $16 : $$4;
 return ($spec$select14|0);
}
function ___fdopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = sp + 40|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = $3 << 24 >> 24;
 $5 = (_strchr(16823,$4)|0);
 $6 = ($5|0)==(0|0);
 if ($6) {
  HEAP32[5168] = 28;
  $$0 = 0;
 } else {
  $7 = (_malloc(1176)|0);
  $8 = ($7|0)==(0|0);
  if ($8) {
   $$0 = 0;
  } else {
   (_memset(($7|0),0,144)|0);
   $9 = (_strchr($1,43)|0);
   $10 = ($9|0)==(0|0);
   $11 = HEAP8[$1>>0]|0;
   if ($10) {
    $12 = ($11<<24>>24)==(114);
    $13 = $12 ? 8 : 4;
    HEAP32[$7>>2] = $13;
   }
   $14 = ($11<<24>>24)==(97);
   if ($14) {
    HEAP32[$vararg_buffer>>2] = $0;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = 3;
    $15 = (___syscall221(221,($vararg_buffer|0))|0);
    $16 = $15 & 1024;
    $17 = ($16|0)==(0);
    if ($17) {
     $18 = $15 | 1024;
     HEAP32[$vararg_buffer2>>2] = $0;
     $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
     HEAP32[$vararg_ptr5>>2] = 4;
     $vararg_ptr6 = ((($vararg_buffer2)) + 8|0);
     HEAP32[$vararg_ptr6>>2] = $18;
     (___syscall221(221,($vararg_buffer2|0))|0);
    }
    $19 = HEAP32[$7>>2]|0;
    $20 = $19 | 128;
    HEAP32[$7>>2] = $20;
    $27 = $20;
   } else {
    $$pre = HEAP32[$7>>2]|0;
    $27 = $$pre;
   }
   $21 = ((($7)) + 60|0);
   HEAP32[$21>>2] = $0;
   $22 = ((($7)) + 152|0);
   $23 = ((($7)) + 44|0);
   HEAP32[$23>>2] = $22;
   $24 = ((($7)) + 48|0);
   HEAP32[$24>>2] = 1024;
   $25 = ((($7)) + 75|0);
   HEAP8[$25>>0] = -1;
   $26 = $27 & 8;
   $28 = ($26|0)==(0);
   if ($28) {
    $29 = $2;
    HEAP32[$vararg_buffer7>>2] = $0;
    $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
    HEAP32[$vararg_ptr10>>2] = 21523;
    $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
    HEAP32[$vararg_ptr11>>2] = $29;
    $30 = (___syscall54(54,($vararg_buffer7|0))|0);
    $31 = ($30|0)==(0);
    if ($31) {
     HEAP8[$25>>0] = 10;
    }
   }
   $32 = ((($7)) + 32|0);
   HEAP32[$32>>2] = 2;
   $33 = ((($7)) + 36|0);
   HEAP32[$33>>2] = 5;
   $34 = ((($7)) + 40|0);
   HEAP32[$34>>2] = 3;
   $35 = ((($7)) + 12|0);
   HEAP32[$35>>2] = 1;
   $36 = HEAP32[(20612)>>2]|0;
   $37 = ($36|0)==(0);
   if ($37) {
    $38 = ((($7)) + 76|0);
    HEAP32[$38>>2] = -1;
   }
   $39 = (___ofl_add($7)|0);
   $$0 = $7;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___ofl_add($0) {
 $0 = $0|0;
 var $$cast = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ___ofl_lock();
 $1 = HEAP32[5171]|0;
 $2 = ((($0)) + 56|0);
 HEAP32[$2>>2] = $1;
 $3 = ($1|0)==(0);
 if (!($3)) {
  $$cast = $1;
  $4 = ((($$cast)) + 52|0);
  HEAP32[$4>>2] = $0;
 }
 HEAP32[5171] = $0;
 ___ofl_unlock();
 return ($0|0);
}
function ___ofl_lock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___lock((20676|0));
 return;
}
function ___ofl_unlock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___unlock((20676|0));
 return;
}
function _fclose($0) {
 $0 = $0|0;
 var $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 ___unlist_locked_file($0);
 $3 = HEAP32[$0>>2]|0;
 $4 = $3 & 1;
 $5 = ($4|0)!=(0);
 if (!($5)) {
  ___ofl_lock();
  $6 = ((($0)) + 52|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0|0);
  $9 = $7;
  $$pre = ((($0)) + 56|0);
  if (!($8)) {
   $10 = HEAP32[$$pre>>2]|0;
   $11 = ((($7)) + 56|0);
   HEAP32[$11>>2] = $10;
  }
  $12 = HEAP32[$$pre>>2]|0;
  $13 = ($12|0)==(0|0);
  $14 = $12;
  if (!($13)) {
   $15 = ((($12)) + 52|0);
   HEAP32[$15>>2] = $9;
  }
  $16 = HEAP32[5171]|0;
  $17 = ($16|0)==($0|0);
  if ($17) {
   HEAP32[5171] = $14;
  }
  ___ofl_unlock();
 }
 (_fflush($0)|0);
 $18 = ((($0)) + 12|0);
 $19 = HEAP32[$18>>2]|0;
 (FUNCTION_TABLE_ii[$19 & 255]($0)|0);
 $20 = ((($0)) + 96|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)==(0|0);
 if (!($22)) {
  _free($21);
 }
 if (!($5)) {
  _free($0);
 }
 return;
}
function _fflush($0) {
 $0 = $0|0;
 var $$0 = 0, $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $5 = HEAP32[889]|0;
  $6 = ($5|0)==(0|0);
  if ($6) {
   $21 = 0;
  } else {
   $7 = HEAP32[889]|0;
   $8 = (_fflush($7)|0);
   $21 = $8;
  }
  ___ofl_lock();
  $$02325 = HEAP32[5171]|0;
  $9 = ($$02325|0)==(0|0);
  if ($9) {
   $$024$lcssa = $21;
  } else {
   $$02327 = $$02325;$$02426 = $21;
   while(1) {
    $10 = ((($$02327)) + 76|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ((($$02327)) + 20|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = ((($$02327)) + 28|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ($13>>>0)>($15>>>0);
    if ($16) {
     $17 = (___fflush_unlocked($$02327)|0);
     $18 = $17 | $$02426;
     $$1 = $18;
    } else {
     $$1 = $$02426;
    }
    $19 = ((($$02327)) + 56|0);
    $$023 = HEAP32[$19>>2]|0;
    $20 = ($$023|0)==(0|0);
    if ($20) {
     $$024$lcssa = $$1;
     break;
    } else {
     $$02327 = $$023;$$02426 = $$1;
    }
   }
  }
  ___ofl_unlock();
  $$0 = $$024$lcssa;
 } else {
  $2 = ((($0)) + 76|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = (___fflush_unlocked($0)|0);
  $$0 = $4;
 }
 return ($$0|0);
}
function ___fflush_unlocked($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)>($4>>>0);
 if ($5) {
  $6 = ((($0)) + 36|0);
  $7 = HEAP32[$6>>2]|0;
  (FUNCTION_TABLE_iiii[$7 & 255]($0,0,0)|0);
  $8 = HEAP32[$1>>2]|0;
  $9 = ($8|0)==(0|0);
  if ($9) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $10 = ((($0)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($11>>>0)<($13>>>0);
  if ($14) {
   $15 = $11;
   $16 = $13;
   $17 = (($15) - ($16))|0;
   $18 = ($17|0)<(0);
   $19 = $18 << 31 >> 31;
   $20 = ((($0)) + 40|0);
   $21 = HEAP32[$20>>2]|0;
   (FUNCTION_TABLE_iiiii[$21 & 255]($0,$17,$19,1)|0);
   $22 = (getTempRet0() | 0);
  }
  $23 = ((($0)) + 16|0);
  HEAP32[$23>>2] = 0;
  HEAP32[$3>>2] = 0;
  HEAP32[$1>>2] = 0;
  HEAP32[$12>>2] = 0;
  HEAP32[$10>>2] = 0;
  $$0 = 0;
 }
 return ($$0|0);
}
function _fgets($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$05963 = 0, $$06065 = 0, $$06164 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond72 = 0, $sext$mask = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 76|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($1) + -1)|0;
 $6 = ($5|0)==(0);
 L1: do {
  if ($6) {
   $$1 = $0;
   label = 10;
  } else {
   $7 = ((($2)) + 4|0);
   $8 = ((($2)) + 8|0);
   $$06065 = $5;$$06164 = $0;
   while(1) {
    $9 = HEAP32[$7>>2]|0;
    $10 = HEAP32[$8>>2]|0;
    $11 = $9;
    $12 = (($10) - ($11))|0;
    $13 = (_memchr($9,10,$12)|0);
    $14 = ($13|0)==(0|0);
    $15 = $13;
    $16 = (1 - ($11))|0;
    $17 = (($16) + ($15))|0;
    $18 = $14 ? $12 : $17;
    $19 = ($18>>>0)<($$06065>>>0);
    $20 = $19 ? $18 : $$06065;
    (_memcpy(($$06164|0),($9|0),($20|0))|0);
    $21 = HEAP32[$7>>2]|0;
    $22 = (($21) + ($20)|0);
    HEAP32[$7>>2] = $22;
    $23 = (($$06164) + ($20)|0);
    $24 = (($$06065) - ($20))|0;
    $25 = ($24|0)!=(0);
    $or$cond = $14 & $25;
    if (!($or$cond)) {
     $$1 = $23;
     label = 10;
     break L1;
    }
    $26 = HEAP32[$8>>2]|0;
    $27 = ($22>>>0)<($26>>>0);
    if ($27) {
     $28 = ((($22)) + 1|0);
     HEAP32[$7>>2] = $28;
     $29 = HEAP8[$22>>0]|0;
     $30 = $29&255;
     $38 = $30;
    } else {
     $31 = (___uflow($2)|0);
     $32 = ($31|0)<(0);
     if ($32) {
      break;
     } else {
      $38 = $31;
     }
    }
    $37 = $38&255;
    $39 = ((($23)) + 1|0);
    HEAP8[$23>>0] = $37;
    $sext$mask = $38 & 255;
    $40 = ($sext$mask|0)==(10);
    $41 = (($24) + -1)|0;
    $42 = ($41|0)==(0);
    $or$cond72 = $40 | $42;
    if ($or$cond72) {
     $$1 = $39;
     label = 10;
     break L1;
    } else {
     $$06065 = $41;$$06164 = $39;
    }
   }
   $33 = ($23|0)==($0|0);
   if ($33) {
    $$05963 = 0;
   } else {
    $34 = HEAP32[$2>>2]|0;
    $35 = $34 & 16;
    $36 = ($35|0)==(0);
    if ($36) {
     $$05963 = 0;
    } else {
     $$1 = $23;
     label = 10;
    }
   }
  }
 } while(0);
 if ((label|0) == 10) {
  $43 = ($0|0)==(0|0);
  if ($43) {
   $$05963 = 0;
  } else {
   HEAP8[$$1>>0] = 0;
   $$05963 = $0;
  }
 }
 return ($$05963|0);
}
function _fseek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1|0)<(0);
 $4 = $3 << 31 >> 31;
 ___fseeko($0,$1,$4,$2);
 return;
}
function _fprintf($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $varargs;
 $3 = (_vfprintf($0,$1,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function ___fseeko($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 76|0);
 $5 = HEAP32[$4>>2]|0;
 (___fseeko_unlocked($0,$1,$2,$3)|0);
 return;
}
function ___fseeko_unlocked($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($3|0)==(1);
 if ($4) {
  $5 = ((($0)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($0)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (($6) - ($8))|0;
  $10 = ($9|0)<(0);
  $11 = $10 << 31 >> 31;
  $12 = (_i64Subtract(($1|0),($2|0),($9|0),($11|0))|0);
  $13 = (getTempRet0() | 0);
  $26 = $12;$27 = $13;
 } else {
  $26 = $1;$27 = $2;
 }
 $14 = ((($0)) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($0)) + 28|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($15>>>0)>($17>>>0);
 if ($18) {
  $19 = ((($0)) + 36|0);
  $20 = HEAP32[$19>>2]|0;
  (FUNCTION_TABLE_iiii[$20 & 255]($0,0,0)|0);
  $21 = HEAP32[$14>>2]|0;
  $22 = ($21|0)==(0|0);
  if ($22) {
   $$0 = -1;
  } else {
   label = 5;
  }
 } else {
  label = 5;
 }
 if ((label|0) == 5) {
  $23 = ((($0)) + 16|0);
  HEAP32[$23>>2] = 0;
  HEAP32[$16>>2] = 0;
  HEAP32[$14>>2] = 0;
  $24 = ((($0)) + 40|0);
  $25 = HEAP32[$24>>2]|0;
  (FUNCTION_TABLE_iiiii[$25 & 255]($0,$26,$27,$3)|0);
  $28 = (getTempRet0() | 0);
  $29 = ($28|0)<(0);
  if ($29) {
   $$0 = -1;
  } else {
   $30 = ((($0)) + 8|0);
   HEAP32[$30>>2] = 0;
   $31 = ((($0)) + 4|0);
   HEAP32[$31>>2] = 0;
   $32 = HEAP32[$0>>2]|0;
   $33 = $32 & -17;
   HEAP32[$0>>2] = $33;
   $$0 = 0;
  }
 }
 return ($$0|0);
}
function _strncpy($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___stpncpy($0,$1,$2);
 return ($0|0);
}
function ___stpncpy($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$037$lcssa = 0, $$03754 = 0, $$038$lcssa = 0, $$03867 = 0, $$039$lcssa = 0, $$03966 = 0, $$042$lcssa = 0, $$04265 = 0, $$055 = 0, $$1$lcssa = 0, $$140 = 0, $$143 = 0, $$153 = 0, $$2 = 0, $$24147 = 0, $$24446 = 0, $$345 = 0, $$348 = 0, $$4 = 0;
 var $$lcssa = 0, $$pr = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond64 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1;
 $4 = $0;
 $5 = $3 ^ $4;
 $6 = $5 & 3;
 $7 = ($6|0)==(0);
 L1: do {
  if ($7) {
   $8 = $3 & 3;
   $9 = ($8|0)!=(0);
   $10 = ($2|0)!=(0);
   $or$cond64 = $10 & $9;
   if ($or$cond64) {
    $$03867 = $2;$$03966 = $1;$$04265 = $0;
    while(1) {
     $11 = HEAP8[$$03966>>0]|0;
     HEAP8[$$04265>>0] = $11;
     $12 = ($11<<24>>24)==(0);
     if ($12) {
      $$345 = $$04265;$$4 = $$03867;
      break L1;
     }
     $13 = (($$03867) + -1)|0;
     $14 = ((($$03966)) + 1|0);
     $15 = ((($$04265)) + 1|0);
     $16 = $14;
     $17 = $16 & 3;
     $18 = ($17|0)!=(0);
     $19 = ($13|0)!=(0);
     $or$cond = $19 & $18;
     if ($or$cond) {
      $$03867 = $13;$$03966 = $14;$$04265 = $15;
     } else {
      $$038$lcssa = $13;$$039$lcssa = $14;$$042$lcssa = $15;$$lcssa = $19;
      break;
     }
    }
   } else {
    $$038$lcssa = $2;$$039$lcssa = $1;$$042$lcssa = $0;$$lcssa = $10;
   }
   if ($$lcssa) {
    $$pr = HEAP8[$$039$lcssa>>0]|0;
    $20 = ($$pr<<24>>24)==(0);
    if ($20) {
     $$345 = $$042$lcssa;$$4 = $$038$lcssa;
    } else {
     $21 = ($$038$lcssa>>>0)>(3);
     L11: do {
      if ($21) {
       $$03754 = $$042$lcssa;$$055 = $$039$lcssa;$$153 = $$038$lcssa;
       while(1) {
        $22 = HEAP32[$$055>>2]|0;
        $23 = (($22) + -16843009)|0;
        $24 = $22 & -2139062144;
        $25 = $24 ^ -2139062144;
        $26 = $25 & $23;
        $27 = ($26|0)==(0);
        if (!($27)) {
         $$0$lcssa = $$055;$$037$lcssa = $$03754;$$1$lcssa = $$153;
         break L11;
        }
        HEAP32[$$03754>>2] = $22;
        $28 = (($$153) + -4)|0;
        $29 = ((($$055)) + 4|0);
        $30 = ((($$03754)) + 4|0);
        $31 = ($28>>>0)>(3);
        if ($31) {
         $$03754 = $30;$$055 = $29;$$153 = $28;
        } else {
         $$0$lcssa = $29;$$037$lcssa = $30;$$1$lcssa = $28;
         break;
        }
       }
      } else {
       $$0$lcssa = $$039$lcssa;$$037$lcssa = $$042$lcssa;$$1$lcssa = $$038$lcssa;
      }
     } while(0);
     $$140 = $$0$lcssa;$$143 = $$037$lcssa;$$2 = $$1$lcssa;
     label = 13;
    }
   } else {
    $$345 = $$042$lcssa;$$4 = 0;
   }
  } else {
   $$140 = $1;$$143 = $0;$$2 = $2;
   label = 13;
  }
 } while(0);
 L17: do {
  if ((label|0) == 13) {
   $32 = ($$2|0)==(0);
   if ($32) {
    $$345 = $$143;$$4 = 0;
   } else {
    $$24147 = $$140;$$24446 = $$143;$$348 = $$2;
    while(1) {
     $33 = HEAP8[$$24147>>0]|0;
     HEAP8[$$24446>>0] = $33;
     $34 = ($33<<24>>24)==(0);
     if ($34) {
      $$345 = $$24446;$$4 = $$348;
      break L17;
     }
     $35 = (($$348) + -1)|0;
     $36 = ((($$24147)) + 1|0);
     $37 = ((($$24446)) + 1|0);
     $38 = ($35|0)==(0);
     if ($38) {
      $$345 = $37;$$4 = 0;
      break;
     } else {
      $$24147 = $36;$$24446 = $37;$$348 = $35;
     }
    }
   }
  }
 } while(0);
 (_memset(($$345|0),0,($$4|0))|0);
 return;
}
function _strspn($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$01924 = 0, $$020 = 0, $$1$lcssa = 0, $$121 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;HEAP32[$2+16>>2]=0|0;HEAP32[$2+20>>2]=0|0;HEAP32[$2+24>>2]=0|0;HEAP32[$2+28>>2]=0|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = ($3<<24>>24)==(0);
 do {
  if ($4) {
   $$0 = 0;
  } else {
   $5 = ((($1)) + 1|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = ($6<<24>>24)==(0);
   if ($7) {
    $$020 = $0;
    while(1) {
     $8 = HEAP8[$$020>>0]|0;
     $9 = ($8<<24>>24)==($3<<24>>24);
     $10 = ((($$020)) + 1|0);
     if ($9) {
      $$020 = $10;
     } else {
      break;
     }
    }
    $11 = $$020;
    $12 = $0;
    $13 = (($11) - ($12))|0;
    $$0 = $13;
    break;
   }
   $$01924 = $1;$15 = $3;
   while(1) {
    $14 = $15&255;
    $16 = $14 & 31;
    $17 = 1 << $16;
    $18 = $14 >>> 5;
    $19 = (($2) + ($18<<2)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $20 | $17;
    HEAP32[$19>>2] = $21;
    $22 = ((($$01924)) + 1|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = ($23<<24>>24)==(0);
    if ($24) {
     break;
    } else {
     $$01924 = $22;$15 = $23;
    }
   }
   $25 = HEAP8[$0>>0]|0;
   $26 = ($25<<24>>24)==(0);
   L12: do {
    if ($26) {
     $$1$lcssa = $0;
    } else {
     $$121 = $0;$28 = $25;
     while(1) {
      $27 = $28&255;
      $29 = $27 >>> 5;
      $30 = (($2) + ($29<<2)|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = $27 & 31;
      $33 = 1 << $32;
      $34 = $31 & $33;
      $35 = ($34|0)==(0);
      if ($35) {
       $$1$lcssa = $$121;
       break L12;
      }
      $36 = ((($$121)) + 1|0);
      $37 = HEAP8[$36>>0]|0;
      $38 = ($37<<24>>24)==(0);
      if ($38) {
       $$1$lcssa = $36;
       break;
      } else {
       $$121 = $36;$28 = $37;
      }
     }
    }
   } while(0);
   $39 = $$1$lcssa;
   $40 = $0;
   $41 = (($39) - ($40))|0;
   $$0 = $41;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _strcat($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_strlen($0)|0);
 $3 = (($0) + ($2)|0);
 (_strcpy($3,$1)|0);
 return ($0|0);
}
function _fgetc($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)<(0);
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5>>>0)<($7>>>0);
 do {
  if ($3) {
   if ($8) {
    $9 = ((($5)) + 1|0);
    HEAP32[$4>>2] = $9;
    $10 = HEAP8[$5>>0]|0;
    $11 = $10&255;
    $$0 = $11;
    break;
   } else {
    $12 = (___uflow($0)|0);
    $$0 = $12;
    break;
   }
  } else {
   if ($8) {
    $13 = ((($5)) + 1|0);
    HEAP32[$4>>2] = $13;
    $14 = HEAP8[$5>>0]|0;
    $15 = $14&255;
    $$0 = $15;
    break;
   } else {
    $16 = (___uflow($0)|0);
    $$0 = $16;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___ftello($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (___ftello_unlocked($0)|0);
 $4 = (getTempRet0() | 0);
 setTempRet0(($4) | 0);
 return ($3|0);
}
function ___ftello_unlocked($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 40|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = $3 & 128;
 $5 = ($4|0)==(0);
 if ($5) {
  $11 = 1;
 } else {
  $6 = ((($0)) + 20|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($0)) + 28|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($7>>>0)>($9>>>0);
  $phitmp = $10 ? 2 : 1;
  $11 = $phitmp;
 }
 $12 = (FUNCTION_TABLE_iiiii[$2 & 255]($0,0,0,$11)|0);
 $13 = (getTempRet0() | 0);
 $14 = ($13|0)<(0);
 if ($14) {
  $33 = $13;$34 = $12;
 } else {
  $15 = ((($0)) + 8|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($0)) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($16) - ($18))|0;
  $20 = ($19|0)<(0);
  $21 = $20 << 31 >> 31;
  $22 = (_i64Subtract(($12|0),($13|0),($19|0),($21|0))|0);
  $23 = (getTempRet0() | 0);
  $24 = ((($0)) + 20|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ((($0)) + 28|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($25) - ($27))|0;
  $29 = ($28|0)<(0);
  $30 = $29 << 31 >> 31;
  $31 = (_i64Add(($22|0),($23|0),($28|0),($30|0))|0);
  $32 = (getTempRet0() | 0);
  $33 = $32;$34 = $31;
 }
 setTempRet0(($33) | 0);
 return ($34|0);
}
function _fputc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<(0);
 do {
  if ($4) {
   label = 3;
  } else {
   $5 = (___lockfile()|0);
   $6 = ($5|0)==(0);
   if ($6) {
    label = 3;
   } else {
    $19 = $0&255;
    $20 = $0 & 255;
    $21 = ((($1)) + 75|0);
    $22 = HEAP8[$21>>0]|0;
    $23 = $22 << 24 >> 24;
    $24 = ($20|0)==($23|0);
    if (!($24)) {
     $25 = ((($1)) + 20|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ((($1)) + 16|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = ($26>>>0)<($28>>>0);
     if ($29) {
      $30 = ((($26)) + 1|0);
      HEAP32[$25>>2] = $30;
      HEAP8[$26>>0] = $19;
      break;
     }
    }
    (___overflow($1,$0)|0);
   }
  }
 } while(0);
 do {
  if ((label|0) == 3) {
   $7 = $0&255;
   $8 = $0 & 255;
   $9 = ((($1)) + 75|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10 << 24 >> 24;
   $12 = ($8|0)==($11|0);
   if (!($12)) {
    $13 = ((($1)) + 20|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($1)) + 16|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($14>>>0)<($16>>>0);
    if ($17) {
     $18 = ((($14)) + 1|0);
     HEAP32[$13>>2] = $18;
     HEAP8[$14>>0] = $7;
     break;
    }
   }
   (___overflow($1,$0)|0);
  }
 } while(0);
 return;
}
function _fread($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0 = 0, $$054 = 0, $$056 = 0, $$15759 = 0, $$160 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1 << 2;
 $4 = ((($2)) + 76|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($2)) + 74|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7 << 24 >> 24;
 $9 = (($8) + 255)|0;
 $10 = $9 | $8;
 $11 = $10&255;
 HEAP8[$6>>0] = $11;
 $12 = ((($2)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($2)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($13) - ($15))|0;
 $17 = ($16|0)>(0);
 if ($17) {
  $18 = $15;
  $19 = ($16>>>0)<($3>>>0);
  $$ = $19 ? $16 : $3;
  (_memcpy(($0|0),($18|0),($$|0))|0);
  $20 = HEAP32[$14>>2]|0;
  $21 = (($20) + ($$)|0);
  HEAP32[$14>>2] = $21;
  $22 = (($0) + ($$)|0);
  $23 = (($3) - ($$))|0;
  $$054 = $23;$$056 = $22;
 } else {
  $$054 = $3;$$056 = $0;
 }
 $24 = ($$054|0)==(0);
 L4: do {
  if ($24) {
   $$0 = $1;
  } else {
   $25 = ((($2)) + 32|0);
   $$15759 = $$056;$$160 = $$054;
   while(1) {
    $26 = (___toread($2)|0);
    $27 = ($26|0)==(0);
    if (!($27)) {
     break;
    }
    $28 = HEAP32[$25>>2]|0;
    $29 = (FUNCTION_TABLE_iiii[$28 & 255]($2,$$15759,$$160)|0);
    $30 = (($29) + 1)|0;
    $31 = ($30>>>0)<(2);
    if ($31) {
     break;
    }
    $34 = (($$160) - ($29))|0;
    $35 = (($$15759) + ($29)|0);
    $36 = ($34|0)==(0);
    if ($36) {
     $$0 = $1;
     break L4;
    } else {
     $$15759 = $35;$$160 = $34;
    }
   }
   $32 = (($3) - ($$160))|0;
   $33 = $32 >>> 2;
   $$0 = $33;
  }
 } while(0);
 return ($$0|0);
}
function _freopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = (___fmodeflags(10592)|0);
 $3 = ((($1)) + 76|0);
 $4 = HEAP32[$3>>2]|0;
 (_fflush($1)|0);
 $5 = ($0|0)==(0|0);
 do {
  if ($5) {
   $6 = $2 & -524481;
   $7 = ((($1)) + 60|0);
   $8 = HEAP32[$7>>2]|0;
   HEAP32[$vararg_buffer>>2] = $8;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = 4;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $6;
   $9 = (___syscall221(221,($vararg_buffer|0))|0);
   $10 = (___syscall_ret($9)|0);
   $11 = ($10|0)<(0);
   if ($11) {
    label = 9;
   } else {
    $$0 = $1;
   }
  } else {
   $12 = (_fopen($0,10592)|0);
   $13 = ($12|0)==(0|0);
   if ($13) {
    label = 9;
   } else {
    $14 = ((($12)) + 60|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ((($1)) + 60|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ($15|0)==($17|0);
    if ($18) {
     HEAP32[$14>>2] = -1;
    } else {
     $19 = $2 & 524288;
     $20 = (___dup3($15,$17,$19)|0);
     $21 = ($20|0)<(0);
     if ($21) {
      _fclose($12);
      label = 9;
      break;
     }
    }
    $22 = HEAP32[$1>>2]|0;
    $23 = $22 & 1;
    $24 = HEAP32[$12>>2]|0;
    $25 = $23 | $24;
    HEAP32[$1>>2] = $25;
    $26 = ((($12)) + 32|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ((($1)) + 32|0);
    HEAP32[$28>>2] = $27;
    $29 = ((($12)) + 36|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = ((($1)) + 36|0);
    HEAP32[$31>>2] = $30;
    $32 = ((($12)) + 40|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = ((($1)) + 40|0);
    HEAP32[$34>>2] = $33;
    $35 = ((($12)) + 12|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ((($1)) + 12|0);
    HEAP32[$37>>2] = $36;
    _fclose($12);
    $$0 = $1;
   }
  }
 } while(0);
 if ((label|0) == 9) {
  _fclose($1);
  $$0 = 0;
 }
 STACKTOP = sp;return ($$0|0);
}
function ___dup3($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sink = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $3 = ($0|0)==($1|0);
 L1: do {
  if ($3) {
   $$sink = -28;
  } else {
   $4 = $2 & 524288;
   $5 = ($4|0)==(0);
   L3: do {
    if (!($5)) {
     while(1) {
      HEAP32[$vararg_buffer>>2] = $0;
      $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
      HEAP32[$vararg_ptr1>>2] = $1;
      $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
      HEAP32[$vararg_ptr2>>2] = $2;
      $6 = (___syscall330(330,($vararg_buffer|0))|0);
      switch ($6|0) {
      case -52:  {
       break L3;
       break;
      }
      case -10:  {
       break;
      }
      default: {
       $$sink = $6;
       break L1;
      }
      }
     }
    }
   } while(0);
   while(1) {
    HEAP32[$vararg_buffer3>>2] = $0;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $1;
    $7 = (___syscall63(63,($vararg_buffer3|0))|0);
    $8 = ($7|0)==(-10);
    if (!($8)) {
     $$sink = $7;
     break;
    }
   }
  }
 } while(0);
 $9 = (___syscall_ret($$sink)|0);
 STACKTOP = sp;return ($9|0);
}
function _ftell($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___ftello($0)|0);
 $2 = (getTempRet0() | 0);
 $3 = ($2|0)>(0);
 $4 = ($1>>>0)>(2147483647);
 $5 = ($2|0)==(0);
 $6 = $5 & $4;
 $7 = $3 | $6;
 if ($7) {
  HEAP32[5168] = 61;
  $$0 = -1;
 } else {
  $$0 = $1;
 }
 return ($$0|0);
}
function _printf($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $varargs;
 (_vfprintf(2712,$0,$1)|0);
 STACKTOP = sp;return;
}
function _remove($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $1;
 $2 = (___syscall10(10,($vararg_buffer|0))|0);
 $3 = ($2|0)==(-31);
 if ($3) {
  HEAP32[$vararg_buffer1>>2] = $1;
  $4 = (___syscall40(40,($vararg_buffer1|0))|0);
  $$0 = $4;
 } else {
  $$0 = $2;
 }
 (___syscall_ret($$0)|0);
 STACKTOP = sp;return;
}
function _rewind($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 (___fseeko_unlocked($0,0,0,0)|0);
 $3 = HEAP32[$0>>2]|0;
 $4 = $3 & -33;
 HEAP32[$0>>2] = $4;
 return;
}
function ___randname($0) {
 $0 = $0|0;
 var $$01112 = 0, $$013 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 (___clock_gettime(0,($1|0))|0);
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3*65537)|0;
 $5 = $1;
 $6 = $5 >>> 4;
 $7 = $0;
 $8 = (($6) + ($7))|0;
 $9 = $4 ^ $8;
 $$01112 = 0;$$013 = $9;
 while(1) {
  $10 = $$013 & 15;
  $11 = (($10) + 65)|0;
  $12 = $$013 << 1;
  $13 = $12 & 32;
  $14 = $11 | $13;
  $15 = $14&255;
  $16 = (($0) + ($$01112)|0);
  HEAP8[$16>>0] = $15;
  $17 = (($$01112) + 1)|0;
  $18 = $$013 >>> 5;
  $exitcond = ($17|0)==(6);
  if ($exitcond) {
   break;
  } else {
   $$01112 = $17;$$013 = $18;
  }
 }
 STACKTOP = sp;return ($0|0);
}
function _atof($0) {
 $0 = $0|0;
 var $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (+_strtod($0,0));
 return (+$1);
}
function _strtod($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_strtox($0,$1));
 return (+$2);
}
function _strtox($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $2 = sp;
 _memset(($2|0),0,144)|0;
 $3 = ((($2)) + 4|0);
 HEAP32[$3>>2] = $0;
 $4 = ((($2)) + 8|0);
 HEAP32[$4>>2] = (-1);
 $5 = ((($2)) + 44|0);
 HEAP32[$5>>2] = $0;
 $6 = ((($2)) + 76|0);
 HEAP32[$6>>2] = -1;
 ___shlim($2);
 $7 = (+___floatscan($2));
 $8 = ((($2)) + 120|0);
 $9 = $8;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = (($9) + 4)|0;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = HEAP32[$3>>2]|0;
 $16 = HEAP32[$4>>2]|0;
 $17 = (($15) - ($16))|0;
 $18 = ($17|0)<(0);
 $19 = $18 << 31 >> 31;
 $20 = (_i64Add(($11|0),($14|0),($17|0),($19|0))|0);
 $21 = (getTempRet0() | 0);
 $22 = ($1|0)==(0|0);
 if (!($22)) {
  $23 = ($20|0)==(0);
  $24 = ($21|0)==(0);
  $25 = $23 & $24;
  $26 = (($0) + ($20)|0);
  $27 = $25 ? $0 : $26;
  HEAP32[$1>>2] = $27;
 }
 STACKTOP = sp;return (+$7);
}
function _atoi($0) {
 $0 = $0|0;
 var $$0 = 0, $$010$lcssa = 0, $$01015 = 0, $$011 = 0, $$1 = 0, $$112 = 0, $$214 = 0, $$neg13 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre16 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$011 = $0;
 while(1) {
  $1 = HEAP8[$$011>>0]|0;
  $2 = $1 << 24 >> 24;
  $3 = (_isspace($2)|0);
  $4 = ($3|0)==(0);
  $5 = ((($$011)) + 1|0);
  if ($4) {
   break;
  } else {
   $$011 = $5;
  }
 }
 switch ($2|0) {
 case 45:  {
  $$0 = 1;
  label = 5;
  break;
 }
 case 43:  {
  $$0 = 0;
  label = 5;
  break;
 }
 default: {
  $$1 = 0;$$112 = $$011;$$pre$phiZ2D = $2;$20 = $1;
 }
 }
 if ((label|0) == 5) {
  $$pre = HEAP8[$5>>0]|0;
  $$pre16 = $$pre << 24 >> 24;
  $$1 = $$0;$$112 = $5;$$pre$phiZ2D = $$pre16;$20 = $$pre;
 }
 $6 = (_isdigit($$pre$phiZ2D)|0);
 $7 = ($6|0)==(0);
 if ($7) {
  $$010$lcssa = 0;
 } else {
  $$01015 = 0;$$214 = $$112;$11 = $20;
  while(1) {
   $8 = ($$01015*10)|0;
   $9 = ((($$214)) + 1|0);
   $10 = $11 << 24 >> 24;
   $$neg13 = (($8) + 48)|0;
   $12 = (($$neg13) - ($10))|0;
   $13 = HEAP8[$9>>0]|0;
   $14 = $13 << 24 >> 24;
   $15 = (_isdigit($14)|0);
   $16 = ($15|0)==(0);
   if ($16) {
    $$010$lcssa = $12;
    break;
   } else {
    $$01015 = $12;$$214 = $9;$11 = $13;
   }
  }
 }
 $17 = ($$1|0)==(0);
 $18 = (0 - ($$010$lcssa))|0;
 $19 = $17 ? $18 : $$010$lcssa;
 return ($19|0);
}
function _atol($0) {
 $0 = $0|0;
 var $$0 = 0, $$010$lcssa = 0, $$01015 = 0, $$011 = 0, $$1 = 0, $$112 = 0, $$214 = 0, $$neg13 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre16 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$011 = $0;
 while(1) {
  $1 = HEAP8[$$011>>0]|0;
  $2 = $1 << 24 >> 24;
  $3 = (_isspace($2)|0);
  $4 = ($3|0)==(0);
  $5 = ((($$011)) + 1|0);
  if ($4) {
   break;
  } else {
   $$011 = $5;
  }
 }
 switch ($2|0) {
 case 45:  {
  $$0 = 1;
  label = 5;
  break;
 }
 case 43:  {
  $$0 = 0;
  label = 5;
  break;
 }
 default: {
  $$1 = 0;$$112 = $$011;$$pre$phiZ2D = $2;$20 = $1;
 }
 }
 if ((label|0) == 5) {
  $$pre = HEAP8[$5>>0]|0;
  $$pre16 = $$pre << 24 >> 24;
  $$1 = $$0;$$112 = $5;$$pre$phiZ2D = $$pre16;$20 = $$pre;
 }
 $6 = (_isdigit($$pre$phiZ2D)|0);
 $7 = ($6|0)==(0);
 if ($7) {
  $$010$lcssa = 0;
 } else {
  $$01015 = 0;$$214 = $$112;$11 = $20;
  while(1) {
   $8 = ($$01015*10)|0;
   $9 = ((($$214)) + 1|0);
   $10 = $11 << 24 >> 24;
   $$neg13 = (($8) + 48)|0;
   $12 = (($$neg13) - ($10))|0;
   $13 = HEAP8[$9>>0]|0;
   $14 = $13 << 24 >> 24;
   $15 = (_isdigit($14)|0);
   $16 = ($15|0)==(0);
   if ($16) {
    $$010$lcssa = $12;
    break;
   } else {
    $$01015 = $12;$$214 = $9;$11 = $13;
   }
  }
 }
 $17 = ($$1|0)==(0);
 $18 = (0 - ($$010$lcssa))|0;
 $19 = $17 ? $18 : $$010$lcssa;
 return ($19|0);
}
function _strcspn($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$01823 = 0, $$019$lcssa$sink = 0, $$01920 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 $3 = HEAP8[$1>>0]|0;
 $4 = ($3<<24>>24)==(0);
 L1: do {
  if ($4) {
   label = 3;
  } else {
   $5 = ((($1)) + 1|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = ($6<<24>>24)==(0);
   if ($7) {
    label = 3;
   } else {
    (_memset(($2|0),0,32)|0);
    $10 = HEAP8[$1>>0]|0;
    $11 = ($10<<24>>24)==(0);
    if (!($11)) {
     $$01823 = $1;$13 = $10;
     while(1) {
      $12 = $13&255;
      $14 = $12 & 31;
      $15 = 1 << $14;
      $16 = $12 >>> 5;
      $17 = (($2) + ($16<<2)|0);
      $18 = HEAP32[$17>>2]|0;
      $19 = $18 | $15;
      HEAP32[$17>>2] = $19;
      $20 = ((($$01823)) + 1|0);
      $21 = HEAP8[$20>>0]|0;
      $22 = ($21<<24>>24)==(0);
      if ($22) {
       break;
      } else {
       $$01823 = $20;$13 = $21;
      }
     }
    }
    $23 = HEAP8[$0>>0]|0;
    $24 = ($23<<24>>24)==(0);
    if ($24) {
     $$019$lcssa$sink = $0;
    } else {
     $$01920 = $0;$26 = $23;
     while(1) {
      $25 = $26&255;
      $27 = $25 >>> 5;
      $28 = (($2) + ($27<<2)|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = $25 & 31;
      $31 = 1 << $30;
      $32 = $29 & $31;
      $33 = ($32|0)==(0);
      if (!($33)) {
       $$019$lcssa$sink = $$01920;
       break L1;
      }
      $34 = ((($$01920)) + 1|0);
      $35 = HEAP8[$34>>0]|0;
      $36 = ($35<<24>>24)==(0);
      if ($36) {
       $$019$lcssa$sink = $34;
       break;
      } else {
       $$01920 = $34;$26 = $35;
      }
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $8 = $3 << 24 >> 24;
  $9 = (___strchrnul($0,$8)|0);
  $$019$lcssa$sink = $9;
 }
 $37 = $$019$lcssa$sink;
 $38 = $0;
 $39 = (($37) - ($38))|0;
 STACKTOP = sp;return ($39|0);
}
function _strncat($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$01013 = 0, $$01112 = 0, $$014 = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_strlen($0)|0);
 $4 = (($0) + ($3)|0);
 $$01013 = $2;$$01112 = $1;$$014 = $4;
 while(1) {
  $5 = HEAP8[$$01112>>0]|0;
  $6 = ($5<<24>>24)==(0);
  if ($6) {
   $$0$lcssa = $$014;
   break;
  }
  $7 = (($$01013) + -1)|0;
  $8 = ((($$01112)) + 1|0);
  $9 = ((($$014)) + 1|0);
  HEAP8[$$014>>0] = $5;
  $10 = ($7|0)==(0);
  if ($10) {
   $$0$lcssa = $9;
   break;
  } else {
   $$01013 = $7;$$01112 = $8;$$014 = $9;
  }
 }
 HEAP8[$$0$lcssa>>0] = 0;
 return ($0|0);
}
function _strpbrk($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strcspn($0,8711)|0);
 $2 = (($0) + ($1)|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)==(0);
 $5 = $4 ? 0 : $2;
 return ($5|0);
}
function _strtok($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$010 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $3 = HEAP32[5172]|0;
  $4 = ($3|0)==(0|0);
  if ($4) {
   $$0 = 0;
  } else {
   $$010 = $3;
   label = 3;
  }
 } else {
  $$010 = $0;
  label = 3;
 }
 do {
  if ((label|0) == 3) {
   $5 = (_strspn($$010,$1)|0);
   $6 = (($$010) + ($5)|0);
   $7 = HEAP8[$6>>0]|0;
   $8 = ($7<<24>>24)==(0);
   if ($8) {
    HEAP32[5172] = 0;
    $$0 = 0;
    break;
   }
   $9 = (_strcspn($6,$1)|0);
   $10 = (($6) + ($9)|0);
   HEAP32[5172] = $10;
   $11 = HEAP8[$10>>0]|0;
   $12 = ($11<<24>>24)==(0);
   if ($12) {
    HEAP32[5172] = 0;
    $$0 = $6;
    break;
   } else {
    $13 = ((($10)) + 1|0);
    HEAP32[5172] = $13;
    HEAP8[$10>>0] = 0;
    $$0 = $6;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___mkostemps($0) {
 $0 = $0|0;
 var $$0 = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = (_strlen($0)|0);
 $2 = ($1>>>0)<(6);
 L1: do {
  if ($2) {
   label = 3;
  } else {
   $3 = (($0) + ($1)|0);
   $4 = ((($3)) + -6|0);
   $5 = (_memcmp($4)|0);
   $6 = ($5|0)==(0);
   if ($6) {
    $$0 = 100;
    while(1) {
     (___randname($4)|0);
     HEAP32[$vararg_buffer>>2] = 384;
     $7 = (_open($0,0,$vararg_buffer)|0);
     $8 = ($7|0)>(-1);
     if ($8) {
      $$1 = $7;
      break L1;
     }
     $9 = (($$0) + -1)|0;
     $10 = ($9|0)!=(0);
     $11 = HEAP32[5168]|0;
     $12 = ($11|0)==(20);
     $or$cond = $10 & $12;
     if ($or$cond) {
      $$0 = $9;
     } else {
      break;
     }
    }
    (_memcpy(($4|0),(16827|0),6)|0);
    $$1 = -1;
   } else {
    label = 3;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  HEAP32[5168] = 28;
  $$1 = -1;
 }
 STACKTOP = sp;return ($$1|0);
}
function _mkstemp($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___mkostemps($0)|0);
 return ($1|0);
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = sp;
 $4 = (__ZL8is_equalPKSt9type_infoS1_b($0,$1,0)|0);
 if ($4) {
  $$2 = 1;
 } else {
  $5 = ($1|0)==(0|0);
  if ($5) {
   $$2 = 0;
  } else {
   $6 = (___dynamic_cast($1,3000)|0);
   $7 = ($6|0)==(0|0);
   if ($7) {
    $$2 = 0;
   } else {
    HEAP32[$3>>2] = $6;
    $8 = ((($3)) + 4|0);
    HEAP32[$8>>2] = 0;
    $9 = ((($3)) + 8|0);
    HEAP32[$9>>2] = $0;
    $10 = ((($3)) + 12|0);
    HEAP32[$10>>2] = -1;
    $11 = ((($3)) + 16|0);
    $12 = ((($3)) + 24|0);
    $13 = ((($3)) + 48|0);
    dest=$11; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));HEAP16[$11+36>>1]=0|0;HEAP8[$11+38>>0]=0|0;
    HEAP32[$13>>2] = 1;
    $14 = HEAP32[$6>>2]|0;
    $15 = ((($14)) + 28|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = HEAP32[$2>>2]|0;
    FUNCTION_TABLE_viiii[$16 & 31]($6,$3,$17,1);
    $18 = HEAP32[$12>>2]|0;
    $19 = ($18|0)==(1);
    if ($19) {
     $20 = HEAP32[$11>>2]|0;
     HEAP32[$2>>2] = $20;
     $$0 = 1;
    } else {
     $$0 = 0;
    }
    $$2 = $$0;
   }
  }
 }
 STACKTOP = sp;return ($$2|0);
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($1)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (__ZL8is_equalPKSt9type_infoS1_b($0,$7,$5)|0);
 if ($8) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($1,$2,$3,$4);
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (__ZL8is_equalPKSt9type_infoS1_b($0,$6,$4)|0);
 do {
  if ($7) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi($1,$2,$3);
  } else {
   $8 = HEAP32[$1>>2]|0;
   $9 = (__ZL8is_equalPKSt9type_infoS1_b($0,$8,$4)|0);
   if ($9) {
    $10 = ((($1)) + 16|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($11|0)==($2|0);
    if (!($12)) {
     $13 = ((($1)) + 20|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = ($14|0)==($2|0);
     if (!($15)) {
      $18 = ((($1)) + 32|0);
      HEAP32[$18>>2] = $3;
      HEAP32[$13>>2] = $2;
      $19 = ((($1)) + 40|0);
      $20 = HEAP32[$19>>2]|0;
      $21 = (($20) + 1)|0;
      HEAP32[$19>>2] = $21;
      $22 = ((($1)) + 36|0);
      $23 = HEAP32[$22>>2]|0;
      $24 = ($23|0)==(1);
      if ($24) {
       $25 = ((($1)) + 24|0);
       $26 = HEAP32[$25>>2]|0;
       $27 = ($26|0)==(2);
       if ($27) {
        $28 = ((($1)) + 54|0);
        HEAP8[$28>>0] = 1;
       }
      }
      $29 = ((($1)) + 44|0);
      HEAP32[$29>>2] = 4;
      break;
     }
    }
    $16 = ($3|0)==(1);
    if ($16) {
     $17 = ((($1)) + 32|0);
     HEAP32[$17>>2] = 1;
    }
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (__ZL8is_equalPKSt9type_infoS1_b($0,$5,0)|0);
 if ($6) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($1,$2,$3);
 }
 return;
}
function __ZL8is_equalPKSt9type_infoS1_b($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 if ($2) {
  $4 = ((($0)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($1)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (_strcmp($5,$7)|0);
  $9 = ($8|0)==(0);
  $$0 = $9;
 } else {
  $3 = ($0|0)==($1|0);
  $$0 = $3;
 }
 return ($$0|0);
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 do {
  if ($5) {
   HEAP32[$3>>2] = $1;
   $6 = ((($0)) + 24|0);
   HEAP32[$6>>2] = $2;
   $7 = ((($0)) + 36|0);
   HEAP32[$7>>2] = 1;
  } else {
   $8 = ($4|0)==($1|0);
   if (!($8)) {
    $12 = ((($0)) + 36|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = (($13) + 1)|0;
    HEAP32[$12>>2] = $14;
    $15 = ((($0)) + 24|0);
    HEAP32[$15>>2] = 2;
    $16 = ((($0)) + 54|0);
    HEAP8[$16>>0] = 1;
    break;
   }
   $9 = ((($0)) + 24|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==(2);
   if ($11) {
    HEAP32[$9>>2] = $2;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==($1|0);
 if ($5) {
  $6 = ((($0)) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(1);
  if (!($8)) {
   HEAP32[$6>>2] = $2;
  }
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond22 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 53|0);
 HEAP8[$4>>0] = 1;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==($2|0);
 do {
  if ($7) {
   $8 = ((($0)) + 52|0);
   HEAP8[$8>>0] = 1;
   $9 = ((($0)) + 16|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==(0|0);
   if ($11) {
    HEAP32[$9>>2] = $1;
    $12 = ((($0)) + 24|0);
    HEAP32[$12>>2] = $3;
    $13 = ((($0)) + 36|0);
    HEAP32[$13>>2] = 1;
    $14 = ((($0)) + 48|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ($15|0)==(1);
    $17 = ($3|0)==(1);
    $or$cond = $17 & $16;
    if (!($or$cond)) {
     break;
    }
    $18 = ((($0)) + 54|0);
    HEAP8[$18>>0] = 1;
    break;
   }
   $19 = ($10|0)==($1|0);
   if (!($19)) {
    $29 = ((($0)) + 36|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = (($30) + 1)|0;
    HEAP32[$29>>2] = $31;
    $32 = ((($0)) + 54|0);
    HEAP8[$32>>0] = 1;
    break;
   }
   $20 = ((($0)) + 24|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ($21|0)==(2);
   if ($22) {
    HEAP32[$20>>2] = $3;
    $27 = $3;
   } else {
    $27 = $21;
   }
   $23 = ((($0)) + 48|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ($24|0)==(1);
   $26 = ($27|0)==(1);
   $or$cond22 = $25 & $26;
   if ($or$cond22) {
    $28 = ((($0)) + 54|0);
    HEAP8[$28>>0] = 1;
   }
  }
 } while(0);
 return;
}
function ___dynamic_cast($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond28 = 0, $or$cond30 = 0, $or$cond32 = 0, $spec$select = 0, $spec$select33 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $2 = sp;
 $3 = HEAP32[$0>>2]|0;
 $4 = ((($3)) + -8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($0) + ($5)|0);
 $7 = ((($3)) + -4|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$2>>2] = $1;
 $9 = ((($2)) + 4|0);
 HEAP32[$9>>2] = $0;
 $10 = ((($2)) + 8|0);
 HEAP32[$10>>2] = 3016;
 $11 = ((($2)) + 12|0);
 $12 = ((($2)) + 16|0);
 $13 = ((($2)) + 20|0);
 $14 = ((($2)) + 24|0);
 $15 = ((($2)) + 28|0);
 $16 = ((($2)) + 32|0);
 $17 = ((($2)) + 40|0);
 dest=$11; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));HEAP16[$11+40>>1]=0|0;HEAP8[$11+42>>0]=0|0;
 $18 = (__ZL8is_equalPKSt9type_infoS1_b($8,$1,0)|0);
 L1: do {
  if ($18) {
   $19 = ((($2)) + 48|0);
   HEAP32[$19>>2] = 1;
   $20 = HEAP32[$8>>2]|0;
   $21 = ((($20)) + 20|0);
   $22 = HEAP32[$21>>2]|0;
   FUNCTION_TABLE_viiiiii[$22 & 31]($8,$2,$6,$6,1,0);
   $23 = HEAP32[$14>>2]|0;
   $24 = ($23|0)==(1);
   $spec$select = $24 ? $6 : 0;
   $$0 = $spec$select;
  } else {
   $25 = ((($2)) + 36|0);
   $26 = HEAP32[$8>>2]|0;
   $27 = ((($26)) + 24|0);
   $28 = HEAP32[$27>>2]|0;
   FUNCTION_TABLE_viiiii[$28 & 31]($8,$2,$6,1,0);
   $29 = HEAP32[$25>>2]|0;
   switch ($29|0) {
   case 0:  {
    $30 = HEAP32[$17>>2]|0;
    $31 = ($30|0)==(1);
    $32 = HEAP32[$15>>2]|0;
    $33 = ($32|0)==(1);
    $or$cond = $31 & $33;
    $34 = HEAP32[$16>>2]|0;
    $35 = ($34|0)==(1);
    $or$cond28 = $or$cond & $35;
    $36 = HEAP32[$13>>2]|0;
    $spec$select33 = $or$cond28 ? $36 : 0;
    $$0 = $spec$select33;
    break L1;
    break;
   }
   case 1:  {
    break;
   }
   default: {
    $$0 = 0;
    break L1;
   }
   }
   $37 = HEAP32[$14>>2]|0;
   $38 = ($37|0)==(1);
   if (!($38)) {
    $39 = HEAP32[$17>>2]|0;
    $40 = ($39|0)==(0);
    $41 = HEAP32[$15>>2]|0;
    $42 = ($41|0)==(1);
    $or$cond30 = $40 & $42;
    $43 = HEAP32[$16>>2]|0;
    $44 = ($43|0)==(1);
    $or$cond32 = $or$cond30 & $44;
    if (!($or$cond32)) {
     $$0 = 0;
     break;
    }
   }
   $45 = HEAP32[$12>>2]|0;
   $$0 = $45;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($1)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (__ZL8is_equalPKSt9type_infoS1_b($0,$7,$5)|0);
 if ($8) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($1,$2,$3,$4);
 } else {
  $9 = ((($0)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($11)) + 20|0);
  $13 = HEAP32[$12>>2]|0;
  FUNCTION_TABLE_viiiiii[$13 & 31]($10,$1,$2,$3,$4,$5);
 }
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (__ZL8is_equalPKSt9type_infoS1_b($0,$6,$4)|0);
 L1: do {
  if ($7) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi($1,$2,$3);
  } else {
   $8 = HEAP32[$1>>2]|0;
   $9 = (__ZL8is_equalPKSt9type_infoS1_b($0,$8,$4)|0);
   if (!($9)) {
    $43 = ((($0)) + 8|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = HEAP32[$44>>2]|0;
    $46 = ((($45)) + 24|0);
    $47 = HEAP32[$46>>2]|0;
    FUNCTION_TABLE_viiiii[$47 & 31]($44,$1,$2,$3,$4);
    break;
   }
   $10 = ((($1)) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==($2|0);
   if (!($12)) {
    $13 = ((($1)) + 20|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($14|0)==($2|0);
    if (!($15)) {
     $18 = ((($1)) + 32|0);
     HEAP32[$18>>2] = $3;
     $19 = ((($1)) + 44|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($20|0)==(4);
     do {
      if (!($21)) {
       $22 = ((($1)) + 52|0);
       HEAP8[$22>>0] = 0;
       $23 = ((($1)) + 53|0);
       HEAP8[$23>>0] = 0;
       $24 = ((($0)) + 8|0);
       $25 = HEAP32[$24>>2]|0;
       $26 = HEAP32[$25>>2]|0;
       $27 = ((($26)) + 20|0);
       $28 = HEAP32[$27>>2]|0;
       FUNCTION_TABLE_viiiiii[$28 & 31]($25,$1,$2,$2,1,$4);
       $29 = HEAP8[$23>>0]|0;
       $30 = ($29<<24>>24)==(0);
       if ($30) {
        HEAP32[$19>>2] = 4;
        break;
       } else {
        $31 = HEAP8[$22>>0]|0;
        $32 = ($31<<24>>24)==(0);
        HEAP32[$19>>2] = 3;
        if ($32) {
         break;
        } else {
         break L1;
        }
       }
      }
     } while(0);
     HEAP32[$13>>2] = $2;
     $33 = ((($1)) + 40|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = (($34) + 1)|0;
     HEAP32[$33>>2] = $35;
     $36 = ((($1)) + 36|0);
     $37 = HEAP32[$36>>2]|0;
     $38 = ($37|0)==(1);
     if (!($38)) {
      break;
     }
     $39 = ((($1)) + 24|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)==(2);
     if (!($41)) {
      break;
     }
     $42 = ((($1)) + 54|0);
     HEAP8[$42>>0] = 1;
     break;
    }
   }
   $16 = ($3|0)==(1);
   if ($16) {
    $17 = ((($1)) + 32|0);
    HEAP32[$17>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (__ZL8is_equalPKSt9type_infoS1_b($0,$5,0)|0);
 if ($6) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($1,$2,$3);
 } else {
  $7 = ((($0)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($9)) + 28|0);
  $11 = HEAP32[$10>>2]|0;
  FUNCTION_TABLE_viiii[$11 & 31]($8,$1,$2,$3);
 }
 return;
}
function __ZdlPv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($0);
 return;
}
function __ZN10__cxxabiv123__fundamental_type_infoD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (__ZL8is_equalPKSt9type_infoS1_b($0,$1,0)|0);
 return ($3|0);
}
function __ZN10__cxxabiv119__pointer_type_infoD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNK10__cxxabiv119__pointer_type_info9can_catchEPKNS_16__shim_type_infoERPv($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$6 = 0, $$pr = 0, $$pr50 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $phitmp = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = sp;
 $4 = (__ZL8is_equalPKSt9type_infoS1_b($1,3144,0)|0);
 do {
  if ($4) {
   HEAP32[$2>>2] = 0;
   $$6 = 1;
  } else {
   $5 = (__ZNK10__cxxabiv117__pbase_type_info9can_catchEPKNS_16__shim_type_infoERPv($0,$1)|0);
   if ($5) {
    $6 = HEAP32[$2>>2]|0;
    $7 = ($6|0)==(0|0);
    if ($7) {
     $$6 = 1;
     break;
    }
    $8 = HEAP32[$6>>2]|0;
    HEAP32[$2>>2] = $8;
    $$6 = 1;
    break;
   }
   $9 = ($1|0)==(0|0);
   if ($9) {
    $$6 = 0;
   } else {
    $10 = (___dynamic_cast($1,3072)|0);
    $11 = ($10|0)==(0|0);
    if ($11) {
     $$6 = 0;
    } else {
     $12 = HEAP32[$2>>2]|0;
     $13 = ($12|0)==(0|0);
     if (!($13)) {
      $14 = HEAP32[$12>>2]|0;
      HEAP32[$2>>2] = $14;
     }
     $15 = ((($10)) + 8|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ((($0)) + 8|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = $18 ^ 7;
     $20 = $16 & 7;
     $21 = $20 & $19;
     $22 = ($21|0)==(0);
     if ($22) {
      $23 = $16 & 96;
      $24 = $23 ^ 96;
      $25 = $24 & $18;
      $26 = ($25|0)==(0);
      if ($26) {
       $27 = ((($0)) + 12|0);
       $28 = HEAP32[$27>>2]|0;
       $29 = ((($10)) + 12|0);
       $30 = HEAP32[$29>>2]|0;
       $31 = (__ZL8is_equalPKSt9type_infoS1_b($28,$30,0)|0);
       if ($31) {
        $$6 = 1;
       } else {
        $32 = (__ZL8is_equalPKSt9type_infoS1_b($28,3136,0)|0);
        if ($32) {
         $33 = ($30|0)==(0|0);
         if ($33) {
          $$6 = 1;
          break;
         }
         $34 = (___dynamic_cast($30,3088)|0);
         $phitmp = ($34|0)==(0|0);
         $$6 = $phitmp;
         break;
        }
        $35 = ($28|0)==(0|0);
        if ($35) {
         $$6 = 0;
        } else {
         $36 = (___dynamic_cast($28,3072)|0);
         $37 = ($36|0)==(0|0);
         if (!($37)) {
          $38 = HEAP32[$17>>2]|0;
          $39 = $38 & 1;
          $40 = ($39|0)==(0);
          if ($40) {
           $$6 = 0;
           break;
          }
          $41 = HEAP32[$29>>2]|0;
          $42 = (__ZNK10__cxxabiv119__pointer_type_info16can_catch_nestedEPKNS_16__shim_type_infoE($36,$41)|0);
          $$6 = $42;
          break;
         }
         $$pr = HEAP32[$27>>2]|0;
         $43 = ($$pr|0)==(0|0);
         if ($43) {
          $$6 = 0;
         } else {
          $44 = (___dynamic_cast($$pr,3104)|0);
          $45 = ($44|0)==(0|0);
          if (!($45)) {
           $46 = HEAP32[$17>>2]|0;
           $47 = $46 & 1;
           $48 = ($47|0)==(0);
           if ($48) {
            $$6 = 0;
            break;
           }
           $49 = HEAP32[$29>>2]|0;
           $50 = (__ZNK10__cxxabiv129__pointer_to_member_type_info16can_catch_nestedEPKNS_16__shim_type_infoE($44,$49)|0);
           $$6 = $50;
           break;
          }
          $$pr50 = HEAP32[$27>>2]|0;
          $51 = ($$pr50|0)==(0|0);
          if ($51) {
           $$6 = 0;
          } else {
           $52 = (___dynamic_cast($$pr50,3000)|0);
           $53 = ($52|0)==(0|0);
           if ($53) {
            $$6 = 0;
           } else {
            $54 = HEAP32[$29>>2]|0;
            $55 = ($54|0)==(0|0);
            if ($55) {
             $$6 = 0;
            } else {
             $56 = (___dynamic_cast($54,3000)|0);
             $57 = ($56|0)==(0|0);
             if ($57) {
              $$6 = 0;
             } else {
              HEAP32[$3>>2] = $56;
              $58 = ((($3)) + 4|0);
              HEAP32[$58>>2] = 0;
              $59 = ((($3)) + 8|0);
              HEAP32[$59>>2] = $52;
              $60 = ((($3)) + 12|0);
              HEAP32[$60>>2] = -1;
              $61 = ((($3)) + 16|0);
              $62 = ((($3)) + 24|0);
              $63 = ((($3)) + 48|0);
              dest=$61; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));HEAP16[$61+36>>1]=0|0;HEAP8[$61+38>>0]=0|0;
              HEAP32[$63>>2] = 1;
              $64 = HEAP32[$56>>2]|0;
              $65 = ((($64)) + 28|0);
              $66 = HEAP32[$65>>2]|0;
              $67 = HEAP32[$2>>2]|0;
              FUNCTION_TABLE_viiii[$66 & 31]($56,$3,$67,1);
              $68 = HEAP32[$62>>2]|0;
              $69 = ($68|0)==(1);
              do {
               if ($69) {
                $70 = HEAP32[$2>>2]|0;
                $71 = ($70|0)==(0|0);
                if ($71) {
                 $$0 = 1;
                 break;
                }
                $72 = HEAP32[$61>>2]|0;
                HEAP32[$2>>2] = $72;
                $$0 = 1;
               } else {
                $$0 = 0;
               }
              } while(0);
              $$6 = $$0;
             }
            }
           }
          }
         }
        }
       }
      } else {
       $$6 = 0;
      }
     } else {
      $$6 = 0;
     }
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$6|0);
}
function __ZNK10__cxxabiv117__pbase_type_info9can_catchEPKNS_16__shim_type_infoERPv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $$111$off0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 24;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = ($1|0)==(0|0);
  if ($6) {
   $$1 = 0;
  } else {
   $7 = (___dynamic_cast($1,3056)|0);
   $8 = ($7|0)==(0|0);
   if ($8) {
    $$1 = 0;
   } else {
    $9 = ((($7)) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = $10 & 24;
    $12 = ($11|0)!=(0);
    $$111$off0 = $12;
    label = 5;
   }
  }
 } else {
  $$111$off0 = 1;
  label = 5;
 }
 if ((label|0) == 5) {
  $13 = (__ZL8is_equalPKSt9type_infoS1_b($0,$1,$$111$off0)|0);
  $$1 = $13;
 }
 return ($$1|0);
}
function __ZNK10__cxxabiv119__pointer_type_info16can_catch_nestedEPKNS_16__shim_type_infoE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$2 = 0, $$pr = 0, $$tr = 0, $$tr20 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$tr = $0;$$tr20 = $1;
 while(1) {
  $2 = ($$tr20|0)==(0|0);
  if ($2) {
   $$2 = 0;
   break;
  }
  $3 = (___dynamic_cast($$tr20,3072)|0);
  $4 = ($3|0)==(0|0);
  if ($4) {
   $$2 = 0;
   break;
  }
  $5 = ((($3)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($$tr)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $8 ^ -1;
  $10 = $6 & $9;
  $11 = ($10|0)==(0);
  if (!($11)) {
   $$2 = 0;
   break;
  }
  $12 = ((($$tr)) + 12|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($3)) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (__ZL8is_equalPKSt9type_infoS1_b($13,$15,0)|0);
  if ($16) {
   $$2 = 1;
   break;
  }
  $17 = $8 & 1;
  $18 = ($17|0)==(0);
  $19 = ($13|0)==(0|0);
  $or$cond = $18 | $19;
  if ($or$cond) {
   $$2 = 0;
   break;
  }
  $20 = (___dynamic_cast($13,3072)|0);
  $21 = ($20|0)==(0|0);
  if ($21) {
   label = 9;
   break;
  }
  $22 = HEAP32[$14>>2]|0;
  $$tr = $20;$$tr20 = $22;
 }
 if ((label|0) == 9) {
  $$pr = HEAP32[$12>>2]|0;
  $23 = ($$pr|0)==(0|0);
  if ($23) {
   $$2 = 0;
  } else {
   $24 = (___dynamic_cast($$pr,3104)|0);
   $25 = ($24|0)==(0|0);
   if ($25) {
    $$2 = 0;
   } else {
    $26 = HEAP32[$14>>2]|0;
    $27 = (__ZNK10__cxxabiv129__pointer_to_member_type_info16can_catch_nestedEPKNS_16__shim_type_infoE($24,$26)|0);
    $$2 = $27;
   }
  }
 }
 return ($$2|0);
}
function __ZNK10__cxxabiv129__pointer_to_member_type_info16can_catch_nestedEPKNS_16__shim_type_infoE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = (___dynamic_cast($1,3104)|0);
  $4 = ($3|0)==(0|0);
  if ($4) {
   $$0 = 0;
  } else {
   $5 = ((($0)) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = $6 ^ -1;
   $8 = ((($3)) + 8|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = $9 & $7;
   $11 = ($10|0)==(0);
   if ($11) {
    $12 = ((($0)) + 12|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = ((($3)) + 12|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = (__ZL8is_equalPKSt9type_infoS1_b($13,$15,0)|0);
    if ($16) {
     $17 = ((($0)) + 16|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ((($3)) + 16|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = (__ZL8is_equalPKSt9type_infoS1_b($18,$20,0)|0);
     $$0 = $21;
    } else {
     $$0 = 0;
    }
   } else {
    $$0 = 0;
   }
  }
 }
 return ($$0|0);
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$046 = 0, $$047 = 0, $$1$off0 = 0, $$1$off0$in = 0, $$148$off0 = 0, $$148$off0$in = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($1)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (__ZL8is_equalPKSt9type_infoS1_b($0,$7,$5)|0);
 if ($8) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($1,$2,$3,$4);
 } else {
  $9 = ((($1)) + 52|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = ((($1)) + 53|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = ((($0)) + 16|0);
  $14 = ((($0)) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (((($0)) + 16|0) + ($15<<3)|0);
  HEAP8[$9>>0] = 0;
  HEAP8[$11>>0] = 0;
  __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($13,$1,$2,$3,$4,$5);
  $17 = HEAP8[$9>>0]|0;
  $18 = $17 | $10;
  $19 = HEAP8[$11>>0]|0;
  $20 = $19 | $12;
  $21 = ($15|0)>(1);
  L4: do {
   if ($21) {
    $22 = ((($0)) + 24|0);
    $23 = ((($1)) + 24|0);
    $24 = ((($0)) + 8|0);
    $25 = ((($1)) + 54|0);
    $$0 = $22;$$046 = $18;$$047 = $20;$31 = $17;$38 = $19;
    while(1) {
     $26 = HEAP8[$25>>0]|0;
     $27 = ($26<<24>>24)==(0);
     $28 = $$047 & 1;
     $29 = $$046 & 1;
     if (!($27)) {
      $$1$off0$in = $29;$$148$off0$in = $28;
      break L4;
     }
     $30 = ($31<<24>>24)==(0);
     if ($30) {
      $37 = ($38<<24>>24)==(0);
      if (!($37)) {
       $39 = HEAP32[$24>>2]|0;
       $40 = $39 & 1;
       $41 = ($40|0)==(0);
       if ($41) {
        $$1$off0$in = $29;$$148$off0$in = $28;
        break L4;
       }
      }
     } else {
      $32 = HEAP32[$23>>2]|0;
      $33 = ($32|0)==(1);
      if ($33) {
       $$1$off0$in = $29;$$148$off0$in = $28;
       break L4;
      }
      $34 = HEAP32[$24>>2]|0;
      $35 = $34 & 2;
      $36 = ($35|0)==(0);
      if ($36) {
       $$1$off0$in = $29;$$148$off0$in = $28;
       break L4;
      }
     }
     HEAP8[$9>>0] = 0;
     HEAP8[$11>>0] = 0;
     __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($$0,$1,$2,$3,$4,$5);
     $42 = HEAP8[$9>>0]|0;
     $43 = $42 | $29;
     $44 = HEAP8[$11>>0]|0;
     $45 = $44 | $28;
     $46 = ((($$0)) + 8|0);
     $47 = ($46>>>0)<($16>>>0);
     if ($47) {
      $$0 = $46;$$046 = $43;$$047 = $45;$31 = $42;$38 = $44;
     } else {
      $$1$off0$in = $43;$$148$off0$in = $45;
      break;
     }
    }
   } else {
    $$1$off0$in = $18;$$148$off0$in = $20;
   }
  } while(0);
  $$1$off0 = ($$1$off0$in<<24>>24)!=(0);
  $$148$off0 = ($$148$off0$in<<24>>24)!=(0);
  $48 = $$1$off0&1;
  HEAP8[$9>>0] = $48;
  $49 = $$148$off0&1;
  HEAP8[$11>>0] = $49;
 }
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$081 = 0, $$084 = 0, $$085$off0 = 0, $$1 = 0, $$182 = 0, $$186$off0 = 0, $$2 = 0, $$28392 = 0, $$28393 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $extract$t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (__ZL8is_equalPKSt9type_infoS1_b($0,$6,$4)|0);
 L1: do {
  if ($7) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi($1,$2,$3);
  } else {
   $8 = HEAP32[$1>>2]|0;
   $9 = (__ZL8is_equalPKSt9type_infoS1_b($0,$8,$4)|0);
   if (!($9)) {
    $59 = ((($0)) + 16|0);
    $60 = ((($0)) + 12|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = (((($0)) + 16|0) + ($61<<3)|0);
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($59,$1,$2,$3,$4);
    $63 = ((($0)) + 24|0);
    $64 = ($61|0)>(1);
    if (!($64)) {
     break;
    }
    $65 = ((($0)) + 8|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = $66 & 2;
    $68 = ($67|0)==(0);
    if ($68) {
     $69 = ((($1)) + 36|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($70|0)==(1);
     if (!($71)) {
      $77 = $66 & 1;
      $78 = ($77|0)==(0);
      if ($78) {
       $89 = ((($1)) + 54|0);
       $$2 = $63;
       while(1) {
        $90 = HEAP8[$89>>0]|0;
        $91 = ($90<<24>>24)==(0);
        if (!($91)) {
         break L1;
        }
        $92 = HEAP32[$69>>2]|0;
        $93 = ($92|0)==(1);
        if ($93) {
         break L1;
        }
        __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$2,$1,$2,$3,$4);
        $94 = ((($$2)) + 8|0);
        $95 = ($94>>>0)<($62>>>0);
        if ($95) {
         $$2 = $94;
        } else {
         break L1;
        }
       }
      }
      $79 = ((($1)) + 24|0);
      $80 = ((($1)) + 54|0);
      $$1 = $63;
      while(1) {
       $81 = HEAP8[$80>>0]|0;
       $82 = ($81<<24>>24)==(0);
       if (!($82)) {
        break L1;
       }
       $83 = HEAP32[$69>>2]|0;
       $84 = ($83|0)==(1);
       if ($84) {
        $85 = HEAP32[$79>>2]|0;
        $86 = ($85|0)==(1);
        if ($86) {
         break L1;
        }
       }
       __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$1,$1,$2,$3,$4);
       $87 = ((($$1)) + 8|0);
       $88 = ($87>>>0)<($62>>>0);
       if ($88) {
        $$1 = $87;
       } else {
        break L1;
       }
      }
     }
    }
    $72 = ((($1)) + 54|0);
    $$0 = $63;
    while(1) {
     $73 = HEAP8[$72>>0]|0;
     $74 = ($73<<24>>24)==(0);
     if (!($74)) {
      break L1;
     }
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$0,$1,$2,$3,$4);
     $75 = ((($$0)) + 8|0);
     $76 = ($75>>>0)<($62>>>0);
     if ($76) {
      $$0 = $75;
     } else {
      break L1;
     }
    }
   }
   $10 = ((($1)) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==($2|0);
   if (!($12)) {
    $13 = ((($1)) + 20|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($14|0)==($2|0);
    if (!($15)) {
     $18 = ((($1)) + 32|0);
     HEAP32[$18>>2] = $3;
     $19 = ((($1)) + 44|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($20|0)==(4);
     if (!($21)) {
      $22 = ((($0)) + 16|0);
      $23 = ((($0)) + 12|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = (((($0)) + 16|0) + ($24<<3)|0);
      $26 = ((($1)) + 52|0);
      $27 = ((($1)) + 53|0);
      $28 = ((($1)) + 54|0);
      $29 = ((($0)) + 8|0);
      $30 = ((($1)) + 24|0);
      $$081 = 0;$$084 = $22;$$085$off0 = 0;
      L33: while(1) {
       $31 = ($$084>>>0)<($25>>>0);
       if (!($31)) {
        label = 18;
        break;
       }
       HEAP8[$26>>0] = 0;
       HEAP8[$27>>0] = 0;
       __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($$084,$1,$2,$2,1,$4);
       $32 = HEAP8[$28>>0]|0;
       $33 = ($32<<24>>24)==(0);
       if (!($33)) {
        label = 18;
        break;
       }
       $34 = HEAP8[$27>>0]|0;
       $35 = ($34<<24>>24)==(0);
       do {
        if ($35) {
         $$182 = $$081;$$186$off0 = $$085$off0;
        } else {
         $36 = HEAP8[$26>>0]|0;
         $37 = ($36<<24>>24)==(0);
         if ($37) {
          $43 = HEAP32[$29>>2]|0;
          $44 = $43 & 1;
          $45 = ($44|0)==(0);
          if ($45) {
           $$28393 = $$081;
           label = 19;
           break L33;
          } else {
           $$182 = $$081;$$186$off0 = 1;
           break;
          }
         }
         $38 = HEAP32[$30>>2]|0;
         $39 = ($38|0)==(1);
         if ($39) {
          $$28393 = 1;
          label = 19;
          break L33;
         }
         $40 = HEAP32[$29>>2]|0;
         $41 = $40 & 2;
         $42 = ($41|0)==(0);
         if ($42) {
          $$28393 = 1;
          label = 19;
          break L33;
         } else {
          $$182 = 1;$$186$off0 = 1;
         }
        }
       } while(0);
       $46 = ((($$084)) + 8|0);
       $$081 = $$182;$$084 = $46;$$085$off0 = $$186$off0;
      }
      if ((label|0) == 18) {
       if ($$085$off0) {
        $$28393 = $$081;
        label = 19;
       } else {
        $$28392 = $$081;$47 = 4;
       }
      }
      if ((label|0) == 19) {
       $$28392 = $$28393;$47 = 3;
      }
      HEAP32[$19>>2] = $47;
      $48 = $$28392 & 1;
      $extract$t = ($48<<24>>24)==(0);
      if (!($extract$t)) {
       break;
      }
     }
     HEAP32[$13>>2] = $2;
     $49 = ((($1)) + 40|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = (($50) + 1)|0;
     HEAP32[$49>>2] = $51;
     $52 = ((($1)) + 36|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ($53|0)==(1);
     if (!($54)) {
      break;
     }
     $55 = ((($1)) + 24|0);
     $56 = HEAP32[$55>>2]|0;
     $57 = ($56|0)==(2);
     if (!($57)) {
      break;
     }
     $58 = ((($1)) + 54|0);
     HEAP8[$58>>0] = 1;
     break;
    }
   }
   $16 = ($3|0)==(1);
   if ($16) {
    $17 = ((($1)) + 32|0);
    HEAP32[$17>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (__ZL8is_equalPKSt9type_infoS1_b($0,$5,0)|0);
 L1: do {
  if ($6) {
   __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($1,$2,$3);
  } else {
   $7 = ((($0)) + 16|0);
   $8 = ((($0)) + 12|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = (((($0)) + 16|0) + ($9<<3)|0);
   __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($7,$1,$2,$3);
   $11 = ($9|0)>(1);
   if ($11) {
    $12 = ((($0)) + 24|0);
    $13 = ((($1)) + 54|0);
    $$0 = $12;
    while(1) {
     __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($$0,$1,$2,$3);
     $14 = HEAP8[$13>>0]|0;
     $15 = ($14<<24>>24)==(0);
     if (!($15)) {
      break L1;
     }
     $16 = ((($$0)) + 8|0);
     $17 = ($16>>>0)<($10>>>0);
     if ($17) {
      $$0 = $16;
     } else {
      break;
     }
    }
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($2|0)==(0|0);
 $$phi$trans$insert = ((($0)) + 4|0);
 $$pre = HEAP32[$$phi$trans$insert>>2]|0;
 if ($4) {
  $$0 = 0;
 } else {
  $5 = $$pre >> 8;
  $6 = $$pre & 1;
  $7 = ($6|0)==(0);
  if ($7) {
   $$0 = $5;
  } else {
   $8 = HEAP32[$2>>2]|0;
   $9 = (($8) + ($5)|0);
   $10 = HEAP32[$9>>2]|0;
   $$0 = $10;
  }
 }
 $11 = HEAP32[$0>>2]|0;
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 28|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($2) + ($$0)|0);
 $16 = $$pre & 2;
 $17 = ($16|0)==(0);
 $18 = $17 ? 2 : $3;
 FUNCTION_TABLE_viiii[$14 & 31]($11,$1,$15,$18);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 >> 8;
 $9 = $7 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  $$0 = $8;
 } else {
  $11 = HEAP32[$3>>2]|0;
  $12 = (($11) + ($8)|0);
  $13 = HEAP32[$12>>2]|0;
  $$0 = $13;
 }
 $14 = HEAP32[$0>>2]|0;
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($15)) + 20|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($3) + ($$0)|0);
 $19 = $7 & 2;
 $20 = ($19|0)==(0);
 $21 = $20 ? 2 : $4;
 FUNCTION_TABLE_viiiiii[$17 & 31]($14,$1,$2,$18,$21,$5);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 >> 8;
 $8 = $6 & 1;
 $9 = ($8|0)==(0);
 if ($9) {
  $$0 = $7;
 } else {
  $10 = HEAP32[$2>>2]|0;
  $11 = (($10) + ($7)|0);
  $12 = HEAP32[$11>>2]|0;
  $$0 = $12;
 }
 $13 = HEAP32[$0>>2]|0;
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($14)) + 24|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($2) + ($$0)|0);
 $18 = $6 & 2;
 $19 = ($18|0)==(0);
 $20 = $19 ? 2 : $3;
 FUNCTION_TABLE_viiiii[$16 & 31]($13,$1,$17,$20,$4);
 return;
}
function __Znwm($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $spec$store$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0);
 $spec$store$select = $1 ? 1 : $0;
 $2 = (_malloc($spec$store$select)|0);
 return ($2|0);
}
function __Znam($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm($0)|0);
 return ($1|0);
}
function __ZdaPv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function ___cxa_can_catch($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $4;
 $5 = HEAP32[$0>>2]|0;
 $6 = ((($5)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_iiii[$7 & 255]($0,$1,$3)|0);
 $9 = $8&1;
 if ($8) {
  $10 = HEAP32[$3>>2]|0;
  HEAP32[$2>>2] = $10;
 }
 STACKTOP = sp;return ($9|0);
}
function ___cxa_is_pointer_type($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $phitmp = 0, $phitmp1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $3 = 0;
 } else {
  $2 = (___dynamic_cast($0,3072)|0);
  $phitmp = ($2|0)!=(0|0);
  $phitmp1 = $phitmp&1;
  $3 = $phitmp1;
 }
 return ($3|0);
}
function ___emscripten_environ_constructor() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___buildEnvironment((20708|0));
 return;
}
function __get_tzname() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (20692|0);
}
function __get_daylight() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (20700|0);
}
function __get_timezone() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (20704|0);
}
function __GLOBAL__sub_I_bind_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init_1380();
 return;
}
function ___cxx_global_var_init_1380() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN53EmscriptenBindingInitializer_native_and_builtin_typesC2Ev();
 return;
}
function __ZN53EmscriptenBindingInitializer_native_and_builtin_typesC2Ev() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___embind_register_native_and_builtin_types();
 return;
}
function ___embind_register_native_and_builtin_types() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_void((3136|0),(17207|0));
 __embind_register_bool((3152|0),(17212|0),1,1,0);
 __ZN12_GLOBAL__N_116register_integerIcEEvPKc();
 __ZN12_GLOBAL__N_116register_integerIaEEvPKc();
 __ZN12_GLOBAL__N_116register_integerIhEEvPKc();
 __ZN12_GLOBAL__N_116register_integerIsEEvPKc();
 __ZN12_GLOBAL__N_116register_integerItEEvPKc();
 __ZN12_GLOBAL__N_116register_integerIiEEvPKc();
 __ZN12_GLOBAL__N_116register_integerIjEEvPKc();
 __ZN12_GLOBAL__N_116register_integerIlEEvPKc();
 __ZN12_GLOBAL__N_116register_integerImEEvPKc();
 __ZN12_GLOBAL__N_114register_floatIfEEvPKc();
 __ZN12_GLOBAL__N_114register_floatIdEEvPKc();
 __embind_register_std_string((2520|0),(17318|0));
 __embind_register_std_string((3392|0),(17330|0));
 __embind_register_std_wstring((3368|0),4,(17363|0));
 __embind_register_emval((3360|0),(17376|0));
 __ZN12_GLOBAL__N_120register_memory_viewIcEEvPKc();
 __ZN12_GLOBAL__N_120register_memory_viewIaEEvPKc(17422);
 __ZN12_GLOBAL__N_120register_memory_viewIhEEvPKc(17459);
 __ZN12_GLOBAL__N_120register_memory_viewIsEEvPKc(17498);
 __ZN12_GLOBAL__N_120register_memory_viewItEEvPKc(17529);
 __ZN12_GLOBAL__N_120register_memory_viewIiEEvPKc(17569);
 __ZN12_GLOBAL__N_120register_memory_viewIjEEvPKc(17598);
 __ZN12_GLOBAL__N_120register_memory_viewIlEEvPKc();
 __ZN12_GLOBAL__N_120register_memory_viewImEEvPKc();
 __ZN12_GLOBAL__N_120register_memory_viewIaEEvPKc(17705);
 __ZN12_GLOBAL__N_120register_memory_viewIhEEvPKc(17737);
 __ZN12_GLOBAL__N_120register_memory_viewIsEEvPKc(17770);
 __ZN12_GLOBAL__N_120register_memory_viewItEEvPKc(17803);
 __ZN12_GLOBAL__N_120register_memory_viewIiEEvPKc(17837);
 __ZN12_GLOBAL__N_120register_memory_viewIjEEvPKc(17870);
 __ZN12_GLOBAL__N_120register_memory_viewIfEEvPKc();
 __ZN12_GLOBAL__N_120register_memory_viewIdEEvPKc();
 __ZN12_GLOBAL__N_120register_memory_viewIeEEvPKc();
 return;
}
function __ZN12_GLOBAL__N_116register_integerIcEEvPKc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_integer((3160|0),(17217|0),1,-128,127);
 return;
}
function __ZN12_GLOBAL__N_116register_integerIaEEvPKc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_integer((3176|0),(17222|0),1,-128,127);
 return;
}
function __ZN12_GLOBAL__N_116register_integerIhEEvPKc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_integer((3168|0),(17234|0),1,0,255);
 return;
}
function __ZN12_GLOBAL__N_116register_integerIsEEvPKc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_integer((3184|0),(17248|0),2,-32768,32767);
 return;
}
function __ZN12_GLOBAL__N_116register_integerItEEvPKc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_integer((3192|0),(17254|0),2,0,65535);
 return;
}
function __ZN12_GLOBAL__N_116register_integerIiEEvPKc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_integer((3200|0),(17269|0),4,-2147483648,2147483647);
 return;
}
function __ZN12_GLOBAL__N_116register_integerIjEEvPKc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_integer((3208|0),(17273|0),4,0,-1);
 return;
}
function __ZN12_GLOBAL__N_116register_integerIlEEvPKc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_integer((3216|0),(17286|0),4,-2147483648,2147483647);
 return;
}
function __ZN12_GLOBAL__N_116register_integerImEEvPKc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_integer((3224|0),(17291|0),4,0,-1);
 return;
}
function __ZN12_GLOBAL__N_114register_floatIfEEvPKc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_float((3232|0),(17305|0),4);
 return;
}
function __ZN12_GLOBAL__N_114register_floatIdEEvPKc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_float((3240|0),(17311|0),8);
 return;
}
function __ZN12_GLOBAL__N_120register_memory_viewIcEEvPKc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_memory_view((3352|0),0,(17392|0));
 return;
}
function __ZN12_GLOBAL__N_120register_memory_viewIaEEvPKc($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_memory_view((3344|0),0,($0|0));
 return;
}
function __ZN12_GLOBAL__N_120register_memory_viewIhEEvPKc($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_memory_view((3336|0),1,($0|0));
 return;
}
function __ZN12_GLOBAL__N_120register_memory_viewIsEEvPKc($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_memory_view((3328|0),2,($0|0));
 return;
}
function __ZN12_GLOBAL__N_120register_memory_viewItEEvPKc($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_memory_view((3320|0),3,($0|0));
 return;
}
function __ZN12_GLOBAL__N_120register_memory_viewIiEEvPKc($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_memory_view((3312|0),4,($0|0));
 return;
}
function __ZN12_GLOBAL__N_120register_memory_viewIjEEvPKc($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_memory_view((3304|0),5,($0|0));
 return;
}
function __ZN12_GLOBAL__N_120register_memory_viewIlEEvPKc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_memory_view((3296|0),4,(17636|0));
 return;
}
function __ZN12_GLOBAL__N_120register_memory_viewImEEvPKc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_memory_view((3288|0),5,(17666|0));
 return;
}
function __ZN12_GLOBAL__N_120register_memory_viewIfEEvPKc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_memory_view((3280|0),6,(17904|0));
 return;
}
function __ZN12_GLOBAL__N_120register_memory_viewIdEEvPKc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_memory_view((3272|0),7,(17935|0));
 return;
}
function __ZN12_GLOBAL__N_120register_memory_viewIeEEvPKc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __embind_register_memory_view((3264|0),7,(17967|0));
 return;
}
function ___getTypeName($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (___strdup($2)|0);
 return ($3|0);
}
function __ZSt18uncaught_exceptionv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _abort();
 // unreachable;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2>>>0)>(4294967279);
 if ($3) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv();
  // unreachable;
 }
 $4 = ($2>>>0)<(11);
 if ($4) {
  $5 = $2&255;
  $6 = ((($0)) + 11|0);
  HEAP8[$6>>0] = $5;
  $$0 = $0;
 } else {
  $7 = (($2) + 16)|0;
  $8 = $7 & -16;
  $9 = (__Znwm($8)|0);
  HEAP32[$0>>2] = $9;
  $10 = $8 | -2147483648;
  $11 = ((($0)) + 8|0);
  HEAP32[$11>>2] = $10;
  $12 = ((($0)) + 4|0);
  HEAP32[$12>>2] = $2;
  $$0 = $9;
 }
 (__ZNSt3__211char_traitsIcE4copyEPcPKcm($$0,$1,$2)|0);
 $13 = (($$0) + ($2)|0);
 __ZNSt3__211char_traitsIcE6assignERcRKc($13,0);
 return;
}
function __ZNSt3__211char_traitsIcE4copyEPcPKcm($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if (!($3)) {
  _memcpy(($0|0),($1|0),($2|0))|0;
 }
 return ($0|0);
}
function __ZNSt3__211char_traitsIcE6assignERcRKc($0,$$val) {
 $0 = $0|0;
 $$val = $$val|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$0>>0] = $$val;
 return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 11|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)<(0);
 if ($3) {
  $4 = HEAP32[$0>>2]|0;
  __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($4);
 }
 return;
}
function __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__217_DeallocateCaller9__do_callEPv($0);
 return;
}
function __ZNSt3__217_DeallocateCaller9__do_callEPv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function _malloc($0) {
 $0 = $0|0;
 var $$0 = 0, $$0$i = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i20$i = 0, $$0169$i = 0, $$0170$i = 0, $$0171$i = 0, $$0192 = 0, $$0194 = 0, $$02014$i$i = 0, $$0202$lcssa$i$i = 0, $$02023$i$i = 0, $$0206$i$i = 0, $$0207$i$i = 0, $$024372$i = 0, $$0259$i$i = 0, $$02604$i$i = 0, $$0261$lcssa$i$i = 0, $$02613$i$i = 0;
 var $$0267$i$i = 0, $$0268$i$i = 0, $$0318$i = 0, $$032012$i = 0, $$0321$lcssa$i = 0, $$032111$i = 0, $$0323$i = 0, $$0329$i = 0, $$0335$i = 0, $$0336$i = 0, $$0338$i = 0, $$0339$i = 0, $$0344$i = 0, $$1174$i = 0, $$1174$i$be = 0, $$1174$i$ph = 0, $$1176$i = 0, $$1176$i$be = 0, $$1176$i$ph = 0, $$124471$i = 0;
 var $$1263$i$i = 0, $$1263$i$i$be = 0, $$1263$i$i$ph = 0, $$1265$i$i = 0, $$1265$i$i$be = 0, $$1265$i$i$ph = 0, $$1319$i = 0, $$1324$i = 0, $$1340$i = 0, $$1346$i = 0, $$1346$i$be = 0, $$1346$i$ph = 0, $$1350$i = 0, $$1350$i$be = 0, $$1350$i$ph = 0, $$2234243136$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2331$i = 0, $$3$i = 0;
 var $$3$i$i = 0, $$3$i198 = 0, $$3$i198211 = 0, $$3326$i = 0, $$3348$i = 0, $$4$lcssa$i = 0, $$415$i = 0, $$415$i$ph = 0, $$4236$i = 0, $$4327$lcssa$i = 0, $$432714$i = 0, $$432714$i$ph = 0, $$4333$i = 0, $$533413$i = 0, $$533413$i$ph = 0, $$723947$i = 0, $$748$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0;
 var $$pre$i16$i = 0, $$pre$i195 = 0, $$pre$i204 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i17$iZ2D = 0, $$pre$phi$i205Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phiZ2D = 0, $$sink = 0, $$sink320 = 0, $$sink321 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0;
 var $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0;
 var $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0;
 var $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0;
 var $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0;
 var $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0;
 var $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0;
 var $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0;
 var $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0;
 var $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0;
 var $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0;
 var $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0;
 var $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0;
 var $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0;
 var $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0;
 var $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0;
 var $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0;
 var $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0;
 var $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0;
 var $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0;
 var $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0;
 var $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0;
 var $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0;
 var $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0;
 var $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0;
 var $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0;
 var $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0;
 var $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0;
 var $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0;
 var $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0;
 var $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0;
 var $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0;
 var $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0;
 var $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0;
 var $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0;
 var $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0;
 var $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0;
 var $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0;
 var $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $98 = 0, $99 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i203 = 0, $not$$i = 0, $or$cond$i = 0, $or$cond$i199 = 0, $or$cond1$i = 0, $or$cond1$i197 = 0, $or$cond11$i = 0, $or$cond2$i = 0, $or$cond5$i = 0, $or$cond50$i = 0, $or$cond51$i = 0;
 var $or$cond6$i = 0, $or$cond7$i = 0, $or$cond8$i = 0, $or$cond8$not$i = 0, $spec$select$i = 0, $spec$select$i201 = 0, $spec$select1$i = 0, $spec$select2$i = 0, $spec$select4$i = 0, $spec$select49$i = 0, $spec$select9$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ($0>>>0)<(245);
 do {
  if ($2) {
   $3 = ($0>>>0)<(11);
   $4 = (($0) + 11)|0;
   $5 = $4 & -8;
   $6 = $3 ? 16 : $5;
   $7 = $6 >>> 3;
   $8 = HEAP32[5178]|0;
   $9 = $8 >>> $7;
   $10 = $9 & 3;
   $11 = ($10|0)==(0);
   if (!($11)) {
    $12 = $9 & 1;
    $13 = $12 ^ 1;
    $14 = (($13) + ($7))|0;
    $15 = $14 << 1;
    $16 = (20752 + ($15<<2)|0);
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($18)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==($16|0);
    if ($21) {
     $22 = 1 << $14;
     $23 = $22 ^ -1;
     $24 = $8 & $23;
     HEAP32[5178] = $24;
    } else {
     $25 = ((($20)) + 12|0);
     HEAP32[$25>>2] = $16;
     HEAP32[$17>>2] = $20;
    }
    $26 = $14 << 3;
    $27 = $26 | 3;
    $28 = ((($18)) + 4|0);
    HEAP32[$28>>2] = $27;
    $29 = (($18) + ($26)|0);
    $30 = ((($29)) + 4|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = $31 | 1;
    HEAP32[$30>>2] = $32;
    $$0 = $19;
    STACKTOP = sp;return ($$0|0);
   }
   $33 = HEAP32[(20720)>>2]|0;
   $34 = ($6>>>0)>($33>>>0);
   if ($34) {
    $35 = ($9|0)==(0);
    if (!($35)) {
     $36 = $9 << $7;
     $37 = 2 << $7;
     $38 = (0 - ($37))|0;
     $39 = $37 | $38;
     $40 = $36 & $39;
     $41 = (0 - ($40))|0;
     $42 = $40 & $41;
     $43 = (($42) + -1)|0;
     $44 = $43 >>> 12;
     $45 = $44 & 16;
     $46 = $43 >>> $45;
     $47 = $46 >>> 5;
     $48 = $47 & 8;
     $49 = $48 | $45;
     $50 = $46 >>> $48;
     $51 = $50 >>> 2;
     $52 = $51 & 4;
     $53 = $49 | $52;
     $54 = $50 >>> $52;
     $55 = $54 >>> 1;
     $56 = $55 & 2;
     $57 = $53 | $56;
     $58 = $54 >>> $56;
     $59 = $58 >>> 1;
     $60 = $59 & 1;
     $61 = $57 | $60;
     $62 = $58 >>> $60;
     $63 = (($61) + ($62))|0;
     $64 = $63 << 1;
     $65 = (20752 + ($64<<2)|0);
     $66 = ((($65)) + 8|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = ((($67)) + 8|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = ($69|0)==($65|0);
     if ($70) {
      $71 = 1 << $63;
      $72 = $71 ^ -1;
      $73 = $8 & $72;
      HEAP32[5178] = $73;
      $90 = $73;
     } else {
      $74 = ((($69)) + 12|0);
      HEAP32[$74>>2] = $65;
      HEAP32[$66>>2] = $69;
      $90 = $8;
     }
     $75 = $63 << 3;
     $76 = (($75) - ($6))|0;
     $77 = $6 | 3;
     $78 = ((($67)) + 4|0);
     HEAP32[$78>>2] = $77;
     $79 = (($67) + ($6)|0);
     $80 = $76 | 1;
     $81 = ((($79)) + 4|0);
     HEAP32[$81>>2] = $80;
     $82 = (($67) + ($75)|0);
     HEAP32[$82>>2] = $76;
     $83 = ($33|0)==(0);
     if (!($83)) {
      $84 = HEAP32[(20732)>>2]|0;
      $85 = $33 >>> 3;
      $86 = $85 << 1;
      $87 = (20752 + ($86<<2)|0);
      $88 = 1 << $85;
      $89 = $90 & $88;
      $91 = ($89|0)==(0);
      if ($91) {
       $92 = $90 | $88;
       HEAP32[5178] = $92;
       $$pre = ((($87)) + 8|0);
       $$0194 = $87;$$pre$phiZ2D = $$pre;
      } else {
       $93 = ((($87)) + 8|0);
       $94 = HEAP32[$93>>2]|0;
       $$0194 = $94;$$pre$phiZ2D = $93;
      }
      HEAP32[$$pre$phiZ2D>>2] = $84;
      $95 = ((($$0194)) + 12|0);
      HEAP32[$95>>2] = $84;
      $96 = ((($84)) + 8|0);
      HEAP32[$96>>2] = $$0194;
      $97 = ((($84)) + 12|0);
      HEAP32[$97>>2] = $87;
     }
     HEAP32[(20720)>>2] = $76;
     HEAP32[(20732)>>2] = $79;
     $$0 = $68;
     STACKTOP = sp;return ($$0|0);
    }
    $98 = HEAP32[(20716)>>2]|0;
    $99 = ($98|0)==(0);
    if ($99) {
     $$0192 = $6;
    } else {
     $100 = (0 - ($98))|0;
     $101 = $98 & $100;
     $102 = (($101) + -1)|0;
     $103 = $102 >>> 12;
     $104 = $103 & 16;
     $105 = $102 >>> $104;
     $106 = $105 >>> 5;
     $107 = $106 & 8;
     $108 = $107 | $104;
     $109 = $105 >>> $107;
     $110 = $109 >>> 2;
     $111 = $110 & 4;
     $112 = $108 | $111;
     $113 = $109 >>> $111;
     $114 = $113 >>> 1;
     $115 = $114 & 2;
     $116 = $112 | $115;
     $117 = $113 >>> $115;
     $118 = $117 >>> 1;
     $119 = $118 & 1;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = (($120) + ($121))|0;
     $123 = (21016 + ($122<<2)|0);
     $124 = HEAP32[$123>>2]|0;
     $125 = ((($124)) + 4|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = $126 & -8;
     $128 = (($127) - ($6))|0;
     $$0169$i = $124;$$0170$i = $124;$$0171$i = $128;
     while(1) {
      $129 = ((($$0169$i)) + 16|0);
      $130 = HEAP32[$129>>2]|0;
      $131 = ($130|0)==(0|0);
      if ($131) {
       $132 = ((($$0169$i)) + 20|0);
       $133 = HEAP32[$132>>2]|0;
       $134 = ($133|0)==(0|0);
       if ($134) {
        break;
       } else {
        $136 = $133;
       }
      } else {
       $136 = $130;
      }
      $135 = ((($136)) + 4|0);
      $137 = HEAP32[$135>>2]|0;
      $138 = $137 & -8;
      $139 = (($138) - ($6))|0;
      $140 = ($139>>>0)<($$0171$i>>>0);
      $spec$select$i = $140 ? $139 : $$0171$i;
      $spec$select1$i = $140 ? $136 : $$0170$i;
      $$0169$i = $136;$$0170$i = $spec$select1$i;$$0171$i = $spec$select$i;
     }
     $141 = (($$0170$i) + ($6)|0);
     $142 = ($141>>>0)>($$0170$i>>>0);
     if ($142) {
      $143 = ((($$0170$i)) + 24|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ((($$0170$i)) + 12|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = ($146|0)==($$0170$i|0);
      do {
       if ($147) {
        $152 = ((($$0170$i)) + 20|0);
        $153 = HEAP32[$152>>2]|0;
        $154 = ($153|0)==(0|0);
        if ($154) {
         $155 = ((($$0170$i)) + 16|0);
         $156 = HEAP32[$155>>2]|0;
         $157 = ($156|0)==(0|0);
         if ($157) {
          $$3$i = 0;
          break;
         } else {
          $$1174$i$ph = $156;$$1176$i$ph = $155;
         }
        } else {
         $$1174$i$ph = $153;$$1176$i$ph = $152;
        }
        $$1174$i = $$1174$i$ph;$$1176$i = $$1176$i$ph;
        while(1) {
         $158 = ((($$1174$i)) + 20|0);
         $159 = HEAP32[$158>>2]|0;
         $160 = ($159|0)==(0|0);
         if ($160) {
          $161 = ((($$1174$i)) + 16|0);
          $162 = HEAP32[$161>>2]|0;
          $163 = ($162|0)==(0|0);
          if ($163) {
           break;
          } else {
           $$1174$i$be = $162;$$1176$i$be = $161;
          }
         } else {
          $$1174$i$be = $159;$$1176$i$be = $158;
         }
         $$1174$i = $$1174$i$be;$$1176$i = $$1176$i$be;
        }
        HEAP32[$$1176$i>>2] = 0;
        $$3$i = $$1174$i;
       } else {
        $148 = ((($$0170$i)) + 8|0);
        $149 = HEAP32[$148>>2]|0;
        $150 = ((($149)) + 12|0);
        HEAP32[$150>>2] = $146;
        $151 = ((($146)) + 8|0);
        HEAP32[$151>>2] = $149;
        $$3$i = $146;
       }
      } while(0);
      $164 = ($144|0)==(0|0);
      do {
       if (!($164)) {
        $165 = ((($$0170$i)) + 28|0);
        $166 = HEAP32[$165>>2]|0;
        $167 = (21016 + ($166<<2)|0);
        $168 = HEAP32[$167>>2]|0;
        $169 = ($$0170$i|0)==($168|0);
        if ($169) {
         HEAP32[$167>>2] = $$3$i;
         $cond$i = ($$3$i|0)==(0|0);
         if ($cond$i) {
          $170 = 1 << $166;
          $171 = $170 ^ -1;
          $172 = $98 & $171;
          HEAP32[(20716)>>2] = $172;
          break;
         }
        } else {
         $173 = ((($144)) + 16|0);
         $174 = HEAP32[$173>>2]|0;
         $175 = ($174|0)==($$0170$i|0);
         $176 = ((($144)) + 20|0);
         $$sink = $175 ? $173 : $176;
         HEAP32[$$sink>>2] = $$3$i;
         $177 = ($$3$i|0)==(0|0);
         if ($177) {
          break;
         }
        }
        $178 = ((($$3$i)) + 24|0);
        HEAP32[$178>>2] = $144;
        $179 = ((($$0170$i)) + 16|0);
        $180 = HEAP32[$179>>2]|0;
        $181 = ($180|0)==(0|0);
        if (!($181)) {
         $182 = ((($$3$i)) + 16|0);
         HEAP32[$182>>2] = $180;
         $183 = ((($180)) + 24|0);
         HEAP32[$183>>2] = $$3$i;
        }
        $184 = ((($$0170$i)) + 20|0);
        $185 = HEAP32[$184>>2]|0;
        $186 = ($185|0)==(0|0);
        if (!($186)) {
         $187 = ((($$3$i)) + 20|0);
         HEAP32[$187>>2] = $185;
         $188 = ((($185)) + 24|0);
         HEAP32[$188>>2] = $$3$i;
        }
       }
      } while(0);
      $189 = ($$0171$i>>>0)<(16);
      if ($189) {
       $190 = (($$0171$i) + ($6))|0;
       $191 = $190 | 3;
       $192 = ((($$0170$i)) + 4|0);
       HEAP32[$192>>2] = $191;
       $193 = (($$0170$i) + ($190)|0);
       $194 = ((($193)) + 4|0);
       $195 = HEAP32[$194>>2]|0;
       $196 = $195 | 1;
       HEAP32[$194>>2] = $196;
      } else {
       $197 = $6 | 3;
       $198 = ((($$0170$i)) + 4|0);
       HEAP32[$198>>2] = $197;
       $199 = $$0171$i | 1;
       $200 = ((($141)) + 4|0);
       HEAP32[$200>>2] = $199;
       $201 = (($141) + ($$0171$i)|0);
       HEAP32[$201>>2] = $$0171$i;
       $202 = ($33|0)==(0);
       if (!($202)) {
        $203 = HEAP32[(20732)>>2]|0;
        $204 = $33 >>> 3;
        $205 = $204 << 1;
        $206 = (20752 + ($205<<2)|0);
        $207 = 1 << $204;
        $208 = $207 & $8;
        $209 = ($208|0)==(0);
        if ($209) {
         $210 = $207 | $8;
         HEAP32[5178] = $210;
         $$pre$i = ((($206)) + 8|0);
         $$0$i = $206;$$pre$phi$iZ2D = $$pre$i;
        } else {
         $211 = ((($206)) + 8|0);
         $212 = HEAP32[$211>>2]|0;
         $$0$i = $212;$$pre$phi$iZ2D = $211;
        }
        HEAP32[$$pre$phi$iZ2D>>2] = $203;
        $213 = ((($$0$i)) + 12|0);
        HEAP32[$213>>2] = $203;
        $214 = ((($203)) + 8|0);
        HEAP32[$214>>2] = $$0$i;
        $215 = ((($203)) + 12|0);
        HEAP32[$215>>2] = $206;
       }
       HEAP32[(20720)>>2] = $$0171$i;
       HEAP32[(20732)>>2] = $141;
      }
      $216 = ((($$0170$i)) + 8|0);
      $$0 = $216;
      STACKTOP = sp;return ($$0|0);
     } else {
      $$0192 = $6;
     }
    }
   } else {
    $$0192 = $6;
   }
  } else {
   $217 = ($0>>>0)>(4294967231);
   if ($217) {
    $$0192 = -1;
   } else {
    $218 = (($0) + 11)|0;
    $219 = $218 & -8;
    $220 = HEAP32[(20716)>>2]|0;
    $221 = ($220|0)==(0);
    if ($221) {
     $$0192 = $219;
    } else {
     $222 = (0 - ($219))|0;
     $223 = $218 >>> 8;
     $224 = ($223|0)==(0);
     if ($224) {
      $$0335$i = 0;
     } else {
      $225 = ($219>>>0)>(16777215);
      if ($225) {
       $$0335$i = 31;
      } else {
       $226 = (($223) + 1048320)|0;
       $227 = $226 >>> 16;
       $228 = $227 & 8;
       $229 = $223 << $228;
       $230 = (($229) + 520192)|0;
       $231 = $230 >>> 16;
       $232 = $231 & 4;
       $233 = $232 | $228;
       $234 = $229 << $232;
       $235 = (($234) + 245760)|0;
       $236 = $235 >>> 16;
       $237 = $236 & 2;
       $238 = $233 | $237;
       $239 = (14 - ($238))|0;
       $240 = $234 << $237;
       $241 = $240 >>> 15;
       $242 = (($239) + ($241))|0;
       $243 = $242 << 1;
       $244 = (($242) + 7)|0;
       $245 = $219 >>> $244;
       $246 = $245 & 1;
       $247 = $246 | $243;
       $$0335$i = $247;
      }
     }
     $248 = (21016 + ($$0335$i<<2)|0);
     $249 = HEAP32[$248>>2]|0;
     $250 = ($249|0)==(0|0);
     L79: do {
      if ($250) {
       $$2331$i = 0;$$3$i198 = 0;$$3326$i = $222;
       label = 61;
      } else {
       $251 = ($$0335$i|0)==(31);
       $252 = $$0335$i >>> 1;
       $253 = (25 - ($252))|0;
       $254 = $251 ? 0 : $253;
       $255 = $219 << $254;
       $$0318$i = 0;$$0323$i = $222;$$0329$i = $249;$$0336$i = $255;$$0339$i = 0;
       while(1) {
        $256 = ((($$0329$i)) + 4|0);
        $257 = HEAP32[$256>>2]|0;
        $258 = $257 & -8;
        $259 = (($258) - ($219))|0;
        $260 = ($259>>>0)<($$0323$i>>>0);
        if ($260) {
         $261 = ($259|0)==(0);
         if ($261) {
          $$415$i$ph = $$0329$i;$$432714$i$ph = 0;$$533413$i$ph = $$0329$i;
          label = 65;
          break L79;
         } else {
          $$1319$i = $$0329$i;$$1324$i = $259;
         }
        } else {
         $$1319$i = $$0318$i;$$1324$i = $$0323$i;
        }
        $262 = ((($$0329$i)) + 20|0);
        $263 = HEAP32[$262>>2]|0;
        $264 = $$0336$i >>> 31;
        $265 = (((($$0329$i)) + 16|0) + ($264<<2)|0);
        $266 = HEAP32[$265>>2]|0;
        $267 = ($263|0)==(0|0);
        $268 = ($263|0)==($266|0);
        $or$cond1$i197 = $267 | $268;
        $$1340$i = $or$cond1$i197 ? $$0339$i : $263;
        $269 = ($266|0)==(0|0);
        $spec$select4$i = $$0336$i << 1;
        if ($269) {
         $$2331$i = $$1340$i;$$3$i198 = $$1319$i;$$3326$i = $$1324$i;
         label = 61;
         break;
        } else {
         $$0318$i = $$1319$i;$$0323$i = $$1324$i;$$0329$i = $266;$$0336$i = $spec$select4$i;$$0339$i = $$1340$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 61) {
      $270 = ($$2331$i|0)==(0|0);
      $271 = ($$3$i198|0)==(0|0);
      $or$cond$i199 = $270 & $271;
      if ($or$cond$i199) {
       $272 = 2 << $$0335$i;
       $273 = (0 - ($272))|0;
       $274 = $272 | $273;
       $275 = $274 & $220;
       $276 = ($275|0)==(0);
       if ($276) {
        $$0192 = $219;
        break;
       }
       $277 = (0 - ($275))|0;
       $278 = $275 & $277;
       $279 = (($278) + -1)|0;
       $280 = $279 >>> 12;
       $281 = $280 & 16;
       $282 = $279 >>> $281;
       $283 = $282 >>> 5;
       $284 = $283 & 8;
       $285 = $284 | $281;
       $286 = $282 >>> $284;
       $287 = $286 >>> 2;
       $288 = $287 & 4;
       $289 = $285 | $288;
       $290 = $286 >>> $288;
       $291 = $290 >>> 1;
       $292 = $291 & 2;
       $293 = $289 | $292;
       $294 = $290 >>> $292;
       $295 = $294 >>> 1;
       $296 = $295 & 1;
       $297 = $293 | $296;
       $298 = $294 >>> $296;
       $299 = (($297) + ($298))|0;
       $300 = (21016 + ($299<<2)|0);
       $301 = HEAP32[$300>>2]|0;
       $$3$i198211 = 0;$$4333$i = $301;
      } else {
       $$3$i198211 = $$3$i198;$$4333$i = $$2331$i;
      }
      $302 = ($$4333$i|0)==(0|0);
      if ($302) {
       $$4$lcssa$i = $$3$i198211;$$4327$lcssa$i = $$3326$i;
      } else {
       $$415$i$ph = $$3$i198211;$$432714$i$ph = $$3326$i;$$533413$i$ph = $$4333$i;
       label = 65;
      }
     }
     if ((label|0) == 65) {
      $$415$i = $$415$i$ph;$$432714$i = $$432714$i$ph;$$533413$i = $$533413$i$ph;
      while(1) {
       $303 = ((($$533413$i)) + 4|0);
       $304 = HEAP32[$303>>2]|0;
       $305 = $304 & -8;
       $306 = (($305) - ($219))|0;
       $307 = ($306>>>0)<($$432714$i>>>0);
       $spec$select$i201 = $307 ? $306 : $$432714$i;
       $spec$select2$i = $307 ? $$533413$i : $$415$i;
       $308 = ((($$533413$i)) + 16|0);
       $309 = HEAP32[$308>>2]|0;
       $310 = ($309|0)==(0|0);
       if ($310) {
        $311 = ((($$533413$i)) + 20|0);
        $312 = HEAP32[$311>>2]|0;
        $314 = $312;
       } else {
        $314 = $309;
       }
       $313 = ($314|0)==(0|0);
       if ($313) {
        $$4$lcssa$i = $spec$select2$i;$$4327$lcssa$i = $spec$select$i201;
        break;
       } else {
        $$415$i = $spec$select2$i;$$432714$i = $spec$select$i201;$$533413$i = $314;
       }
      }
     }
     $315 = ($$4$lcssa$i|0)==(0|0);
     if ($315) {
      $$0192 = $219;
     } else {
      $316 = HEAP32[(20720)>>2]|0;
      $317 = (($316) - ($219))|0;
      $318 = ($$4327$lcssa$i>>>0)<($317>>>0);
      if ($318) {
       $319 = (($$4$lcssa$i) + ($219)|0);
       $320 = ($319>>>0)>($$4$lcssa$i>>>0);
       if ($320) {
        $321 = ((($$4$lcssa$i)) + 24|0);
        $322 = HEAP32[$321>>2]|0;
        $323 = ((($$4$lcssa$i)) + 12|0);
        $324 = HEAP32[$323>>2]|0;
        $325 = ($324|0)==($$4$lcssa$i|0);
        do {
         if ($325) {
          $330 = ((($$4$lcssa$i)) + 20|0);
          $331 = HEAP32[$330>>2]|0;
          $332 = ($331|0)==(0|0);
          if ($332) {
           $333 = ((($$4$lcssa$i)) + 16|0);
           $334 = HEAP32[$333>>2]|0;
           $335 = ($334|0)==(0|0);
           if ($335) {
            $$3348$i = 0;
            break;
           } else {
            $$1346$i$ph = $334;$$1350$i$ph = $333;
           }
          } else {
           $$1346$i$ph = $331;$$1350$i$ph = $330;
          }
          $$1346$i = $$1346$i$ph;$$1350$i = $$1350$i$ph;
          while(1) {
           $336 = ((($$1346$i)) + 20|0);
           $337 = HEAP32[$336>>2]|0;
           $338 = ($337|0)==(0|0);
           if ($338) {
            $339 = ((($$1346$i)) + 16|0);
            $340 = HEAP32[$339>>2]|0;
            $341 = ($340|0)==(0|0);
            if ($341) {
             break;
            } else {
             $$1346$i$be = $340;$$1350$i$be = $339;
            }
           } else {
            $$1346$i$be = $337;$$1350$i$be = $336;
           }
           $$1346$i = $$1346$i$be;$$1350$i = $$1350$i$be;
          }
          HEAP32[$$1350$i>>2] = 0;
          $$3348$i = $$1346$i;
         } else {
          $326 = ((($$4$lcssa$i)) + 8|0);
          $327 = HEAP32[$326>>2]|0;
          $328 = ((($327)) + 12|0);
          HEAP32[$328>>2] = $324;
          $329 = ((($324)) + 8|0);
          HEAP32[$329>>2] = $327;
          $$3348$i = $324;
         }
        } while(0);
        $342 = ($322|0)==(0|0);
        do {
         if ($342) {
          $425 = $220;
         } else {
          $343 = ((($$4$lcssa$i)) + 28|0);
          $344 = HEAP32[$343>>2]|0;
          $345 = (21016 + ($344<<2)|0);
          $346 = HEAP32[$345>>2]|0;
          $347 = ($$4$lcssa$i|0)==($346|0);
          if ($347) {
           HEAP32[$345>>2] = $$3348$i;
           $cond$i203 = ($$3348$i|0)==(0|0);
           if ($cond$i203) {
            $348 = 1 << $344;
            $349 = $348 ^ -1;
            $350 = $220 & $349;
            HEAP32[(20716)>>2] = $350;
            $425 = $350;
            break;
           }
          } else {
           $351 = ((($322)) + 16|0);
           $352 = HEAP32[$351>>2]|0;
           $353 = ($352|0)==($$4$lcssa$i|0);
           $354 = ((($322)) + 20|0);
           $$sink320 = $353 ? $351 : $354;
           HEAP32[$$sink320>>2] = $$3348$i;
           $355 = ($$3348$i|0)==(0|0);
           if ($355) {
            $425 = $220;
            break;
           }
          }
          $356 = ((($$3348$i)) + 24|0);
          HEAP32[$356>>2] = $322;
          $357 = ((($$4$lcssa$i)) + 16|0);
          $358 = HEAP32[$357>>2]|0;
          $359 = ($358|0)==(0|0);
          if (!($359)) {
           $360 = ((($$3348$i)) + 16|0);
           HEAP32[$360>>2] = $358;
           $361 = ((($358)) + 24|0);
           HEAP32[$361>>2] = $$3348$i;
          }
          $362 = ((($$4$lcssa$i)) + 20|0);
          $363 = HEAP32[$362>>2]|0;
          $364 = ($363|0)==(0|0);
          if ($364) {
           $425 = $220;
          } else {
           $365 = ((($$3348$i)) + 20|0);
           HEAP32[$365>>2] = $363;
           $366 = ((($363)) + 24|0);
           HEAP32[$366>>2] = $$3348$i;
           $425 = $220;
          }
         }
        } while(0);
        $367 = ($$4327$lcssa$i>>>0)<(16);
        L128: do {
         if ($367) {
          $368 = (($$4327$lcssa$i) + ($219))|0;
          $369 = $368 | 3;
          $370 = ((($$4$lcssa$i)) + 4|0);
          HEAP32[$370>>2] = $369;
          $371 = (($$4$lcssa$i) + ($368)|0);
          $372 = ((($371)) + 4|0);
          $373 = HEAP32[$372>>2]|0;
          $374 = $373 | 1;
          HEAP32[$372>>2] = $374;
         } else {
          $375 = $219 | 3;
          $376 = ((($$4$lcssa$i)) + 4|0);
          HEAP32[$376>>2] = $375;
          $377 = $$4327$lcssa$i | 1;
          $378 = ((($319)) + 4|0);
          HEAP32[$378>>2] = $377;
          $379 = (($319) + ($$4327$lcssa$i)|0);
          HEAP32[$379>>2] = $$4327$lcssa$i;
          $380 = $$4327$lcssa$i >>> 3;
          $381 = ($$4327$lcssa$i>>>0)<(256);
          if ($381) {
           $382 = $380 << 1;
           $383 = (20752 + ($382<<2)|0);
           $384 = HEAP32[5178]|0;
           $385 = 1 << $380;
           $386 = $384 & $385;
           $387 = ($386|0)==(0);
           if ($387) {
            $388 = $384 | $385;
            HEAP32[5178] = $388;
            $$pre$i204 = ((($383)) + 8|0);
            $$0344$i = $383;$$pre$phi$i205Z2D = $$pre$i204;
           } else {
            $389 = ((($383)) + 8|0);
            $390 = HEAP32[$389>>2]|0;
            $$0344$i = $390;$$pre$phi$i205Z2D = $389;
           }
           HEAP32[$$pre$phi$i205Z2D>>2] = $319;
           $391 = ((($$0344$i)) + 12|0);
           HEAP32[$391>>2] = $319;
           $392 = ((($319)) + 8|0);
           HEAP32[$392>>2] = $$0344$i;
           $393 = ((($319)) + 12|0);
           HEAP32[$393>>2] = $383;
           break;
          }
          $394 = $$4327$lcssa$i >>> 8;
          $395 = ($394|0)==(0);
          if ($395) {
           $$0338$i = 0;
          } else {
           $396 = ($$4327$lcssa$i>>>0)>(16777215);
           if ($396) {
            $$0338$i = 31;
           } else {
            $397 = (($394) + 1048320)|0;
            $398 = $397 >>> 16;
            $399 = $398 & 8;
            $400 = $394 << $399;
            $401 = (($400) + 520192)|0;
            $402 = $401 >>> 16;
            $403 = $402 & 4;
            $404 = $403 | $399;
            $405 = $400 << $403;
            $406 = (($405) + 245760)|0;
            $407 = $406 >>> 16;
            $408 = $407 & 2;
            $409 = $404 | $408;
            $410 = (14 - ($409))|0;
            $411 = $405 << $408;
            $412 = $411 >>> 15;
            $413 = (($410) + ($412))|0;
            $414 = $413 << 1;
            $415 = (($413) + 7)|0;
            $416 = $$4327$lcssa$i >>> $415;
            $417 = $416 & 1;
            $418 = $417 | $414;
            $$0338$i = $418;
           }
          }
          $419 = (21016 + ($$0338$i<<2)|0);
          $420 = ((($319)) + 28|0);
          HEAP32[$420>>2] = $$0338$i;
          $421 = ((($319)) + 16|0);
          $422 = ((($421)) + 4|0);
          HEAP32[$422>>2] = 0;
          HEAP32[$421>>2] = 0;
          $423 = 1 << $$0338$i;
          $424 = $425 & $423;
          $426 = ($424|0)==(0);
          if ($426) {
           $427 = $425 | $423;
           HEAP32[(20716)>>2] = $427;
           HEAP32[$419>>2] = $319;
           $428 = ((($319)) + 24|0);
           HEAP32[$428>>2] = $419;
           $429 = ((($319)) + 12|0);
           HEAP32[$429>>2] = $319;
           $430 = ((($319)) + 8|0);
           HEAP32[$430>>2] = $319;
           break;
          }
          $431 = HEAP32[$419>>2]|0;
          $432 = ((($431)) + 4|0);
          $433 = HEAP32[$432>>2]|0;
          $434 = $433 & -8;
          $435 = ($434|0)==($$4327$lcssa$i|0);
          L145: do {
           if ($435) {
            $$0321$lcssa$i = $431;
           } else {
            $436 = ($$0338$i|0)==(31);
            $437 = $$0338$i >>> 1;
            $438 = (25 - ($437))|0;
            $439 = $436 ? 0 : $438;
            $440 = $$4327$lcssa$i << $439;
            $$032012$i = $440;$$032111$i = $431;
            while(1) {
             $447 = $$032012$i >>> 31;
             $448 = (((($$032111$i)) + 16|0) + ($447<<2)|0);
             $443 = HEAP32[$448>>2]|0;
             $449 = ($443|0)==(0|0);
             if ($449) {
              break;
             }
             $441 = $$032012$i << 1;
             $442 = ((($443)) + 4|0);
             $444 = HEAP32[$442>>2]|0;
             $445 = $444 & -8;
             $446 = ($445|0)==($$4327$lcssa$i|0);
             if ($446) {
              $$0321$lcssa$i = $443;
              break L145;
             } else {
              $$032012$i = $441;$$032111$i = $443;
             }
            }
            HEAP32[$448>>2] = $319;
            $450 = ((($319)) + 24|0);
            HEAP32[$450>>2] = $$032111$i;
            $451 = ((($319)) + 12|0);
            HEAP32[$451>>2] = $319;
            $452 = ((($319)) + 8|0);
            HEAP32[$452>>2] = $319;
            break L128;
           }
          } while(0);
          $453 = ((($$0321$lcssa$i)) + 8|0);
          $454 = HEAP32[$453>>2]|0;
          $455 = ((($454)) + 12|0);
          HEAP32[$455>>2] = $319;
          HEAP32[$453>>2] = $319;
          $456 = ((($319)) + 8|0);
          HEAP32[$456>>2] = $454;
          $457 = ((($319)) + 12|0);
          HEAP32[$457>>2] = $$0321$lcssa$i;
          $458 = ((($319)) + 24|0);
          HEAP32[$458>>2] = 0;
         }
        } while(0);
        $459 = ((($$4$lcssa$i)) + 8|0);
        $$0 = $459;
        STACKTOP = sp;return ($$0|0);
       } else {
        $$0192 = $219;
       }
      } else {
       $$0192 = $219;
      }
     }
    }
   }
  }
 } while(0);
 $460 = HEAP32[(20720)>>2]|0;
 $461 = ($460>>>0)<($$0192>>>0);
 if (!($461)) {
  $462 = (($460) - ($$0192))|0;
  $463 = HEAP32[(20732)>>2]|0;
  $464 = ($462>>>0)>(15);
  if ($464) {
   $465 = (($463) + ($$0192)|0);
   HEAP32[(20732)>>2] = $465;
   HEAP32[(20720)>>2] = $462;
   $466 = $462 | 1;
   $467 = ((($465)) + 4|0);
   HEAP32[$467>>2] = $466;
   $468 = (($463) + ($460)|0);
   HEAP32[$468>>2] = $462;
   $469 = $$0192 | 3;
   $470 = ((($463)) + 4|0);
   HEAP32[$470>>2] = $469;
  } else {
   HEAP32[(20720)>>2] = 0;
   HEAP32[(20732)>>2] = 0;
   $471 = $460 | 3;
   $472 = ((($463)) + 4|0);
   HEAP32[$472>>2] = $471;
   $473 = (($463) + ($460)|0);
   $474 = ((($473)) + 4|0);
   $475 = HEAP32[$474>>2]|0;
   $476 = $475 | 1;
   HEAP32[$474>>2] = $476;
  }
  $477 = ((($463)) + 8|0);
  $$0 = $477;
  STACKTOP = sp;return ($$0|0);
 }
 $478 = HEAP32[(20724)>>2]|0;
 $479 = ($478>>>0)>($$0192>>>0);
 if ($479) {
  $480 = (($478) - ($$0192))|0;
  HEAP32[(20724)>>2] = $480;
  $481 = HEAP32[(20736)>>2]|0;
  $482 = (($481) + ($$0192)|0);
  HEAP32[(20736)>>2] = $482;
  $483 = $480 | 1;
  $484 = ((($482)) + 4|0);
  HEAP32[$484>>2] = $483;
  $485 = $$0192 | 3;
  $486 = ((($481)) + 4|0);
  HEAP32[$486>>2] = $485;
  $487 = ((($481)) + 8|0);
  $$0 = $487;
  STACKTOP = sp;return ($$0|0);
 }
 $488 = HEAP32[5296]|0;
 $489 = ($488|0)==(0);
 if ($489) {
  HEAP32[(21192)>>2] = 4096;
  HEAP32[(21188)>>2] = 4096;
  HEAP32[(21196)>>2] = -1;
  HEAP32[(21200)>>2] = -1;
  HEAP32[(21204)>>2] = 0;
  HEAP32[(21156)>>2] = 0;
  $490 = $1;
  $491 = $490 & -16;
  $492 = $491 ^ 1431655768;
  HEAP32[5296] = $492;
  $496 = 4096;
 } else {
  $$pre$i195 = HEAP32[(21192)>>2]|0;
  $496 = $$pre$i195;
 }
 $493 = (($$0192) + 48)|0;
 $494 = (($$0192) + 47)|0;
 $495 = (($496) + ($494))|0;
 $497 = (0 - ($496))|0;
 $498 = $495 & $497;
 $499 = ($498>>>0)>($$0192>>>0);
 if (!($499)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $500 = HEAP32[(21152)>>2]|0;
 $501 = ($500|0)==(0);
 if (!($501)) {
  $502 = HEAP32[(21144)>>2]|0;
  $503 = (($502) + ($498))|0;
  $504 = ($503>>>0)<=($502>>>0);
  $505 = ($503>>>0)>($500>>>0);
  $or$cond1$i = $504 | $505;
  if ($or$cond1$i) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $506 = HEAP32[(21156)>>2]|0;
 $507 = $506 & 4;
 $508 = ($507|0)==(0);
 L178: do {
  if ($508) {
   $509 = HEAP32[(20736)>>2]|0;
   $510 = ($509|0)==(0|0);
   L180: do {
    if ($510) {
     label = 128;
    } else {
     $$0$i20$i = (21160);
     while(1) {
      $511 = HEAP32[$$0$i20$i>>2]|0;
      $512 = ($511>>>0)>($509>>>0);
      if (!($512)) {
       $513 = ((($$0$i20$i)) + 4|0);
       $514 = HEAP32[$513>>2]|0;
       $515 = (($511) + ($514)|0);
       $516 = ($515>>>0)>($509>>>0);
       if ($516) {
        break;
       }
      }
      $517 = ((($$0$i20$i)) + 8|0);
      $518 = HEAP32[$517>>2]|0;
      $519 = ($518|0)==(0|0);
      if ($519) {
       label = 128;
       break L180;
      } else {
       $$0$i20$i = $518;
      }
     }
     $542 = (($495) - ($478))|0;
     $543 = $542 & $497;
     $544 = ($543>>>0)<(2147483647);
     if ($544) {
      $545 = (_sbrk($543)|0);
      $546 = HEAP32[$$0$i20$i>>2]|0;
      $547 = HEAP32[$513>>2]|0;
      $548 = (($546) + ($547)|0);
      $549 = ($545|0)==($548|0);
      if ($549) {
       $550 = ($545|0)==((-1)|0);
       if ($550) {
        $$2234243136$i = $543;
       } else {
        $$723947$i = $543;$$748$i = $545;
        label = 145;
        break L178;
       }
      } else {
       $$2247$ph$i = $545;$$2253$ph$i = $543;
       label = 136;
      }
     } else {
      $$2234243136$i = 0;
     }
    }
   } while(0);
   do {
    if ((label|0) == 128) {
     $520 = (_sbrk(0)|0);
     $521 = ($520|0)==((-1)|0);
     if ($521) {
      $$2234243136$i = 0;
     } else {
      $522 = $520;
      $523 = HEAP32[(21188)>>2]|0;
      $524 = (($523) + -1)|0;
      $525 = $524 & $522;
      $526 = ($525|0)==(0);
      $527 = (($524) + ($522))|0;
      $528 = (0 - ($523))|0;
      $529 = $527 & $528;
      $530 = (($529) - ($522))|0;
      $531 = $526 ? 0 : $530;
      $spec$select49$i = (($531) + ($498))|0;
      $532 = HEAP32[(21144)>>2]|0;
      $533 = (($spec$select49$i) + ($532))|0;
      $534 = ($spec$select49$i>>>0)>($$0192>>>0);
      $535 = ($spec$select49$i>>>0)<(2147483647);
      $or$cond$i = $534 & $535;
      if ($or$cond$i) {
       $536 = HEAP32[(21152)>>2]|0;
       $537 = ($536|0)==(0);
       if (!($537)) {
        $538 = ($533>>>0)<=($532>>>0);
        $539 = ($533>>>0)>($536>>>0);
        $or$cond2$i = $538 | $539;
        if ($or$cond2$i) {
         $$2234243136$i = 0;
         break;
        }
       }
       $540 = (_sbrk($spec$select49$i)|0);
       $541 = ($540|0)==($520|0);
       if ($541) {
        $$723947$i = $spec$select49$i;$$748$i = $520;
        label = 145;
        break L178;
       } else {
        $$2247$ph$i = $540;$$2253$ph$i = $spec$select49$i;
        label = 136;
       }
      } else {
       $$2234243136$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 136) {
     $551 = (0 - ($$2253$ph$i))|0;
     $552 = ($$2247$ph$i|0)!=((-1)|0);
     $553 = ($$2253$ph$i>>>0)<(2147483647);
     $or$cond7$i = $553 & $552;
     $554 = ($493>>>0)>($$2253$ph$i>>>0);
     $or$cond6$i = $554 & $or$cond7$i;
     if (!($or$cond6$i)) {
      $564 = ($$2247$ph$i|0)==((-1)|0);
      if ($564) {
       $$2234243136$i = 0;
       break;
      } else {
       $$723947$i = $$2253$ph$i;$$748$i = $$2247$ph$i;
       label = 145;
       break L178;
      }
     }
     $555 = HEAP32[(21192)>>2]|0;
     $556 = (($494) - ($$2253$ph$i))|0;
     $557 = (($556) + ($555))|0;
     $558 = (0 - ($555))|0;
     $559 = $557 & $558;
     $560 = ($559>>>0)<(2147483647);
     if (!($560)) {
      $$723947$i = $$2253$ph$i;$$748$i = $$2247$ph$i;
      label = 145;
      break L178;
     }
     $561 = (_sbrk($559)|0);
     $562 = ($561|0)==((-1)|0);
     if ($562) {
      (_sbrk($551)|0);
      $$2234243136$i = 0;
      break;
     } else {
      $563 = (($559) + ($$2253$ph$i))|0;
      $$723947$i = $563;$$748$i = $$2247$ph$i;
      label = 145;
      break L178;
     }
    }
   } while(0);
   $565 = HEAP32[(21156)>>2]|0;
   $566 = $565 | 4;
   HEAP32[(21156)>>2] = $566;
   $$4236$i = $$2234243136$i;
   label = 143;
  } else {
   $$4236$i = 0;
   label = 143;
  }
 } while(0);
 if ((label|0) == 143) {
  $567 = ($498>>>0)<(2147483647);
  if ($567) {
   $568 = (_sbrk($498)|0);
   $569 = (_sbrk(0)|0);
   $570 = ($568|0)!=((-1)|0);
   $571 = ($569|0)!=((-1)|0);
   $or$cond5$i = $570 & $571;
   $572 = ($568>>>0)<($569>>>0);
   $or$cond8$i = $572 & $or$cond5$i;
   $573 = $569;
   $574 = $568;
   $575 = (($573) - ($574))|0;
   $576 = (($$0192) + 40)|0;
   $577 = ($575>>>0)>($576>>>0);
   $spec$select9$i = $577 ? $575 : $$4236$i;
   $or$cond8$not$i = $or$cond8$i ^ 1;
   $578 = ($568|0)==((-1)|0);
   $not$$i = $577 ^ 1;
   $579 = $578 | $not$$i;
   $or$cond50$i = $579 | $or$cond8$not$i;
   if (!($or$cond50$i)) {
    $$723947$i = $spec$select9$i;$$748$i = $568;
    label = 145;
   }
  }
 }
 if ((label|0) == 145) {
  $580 = HEAP32[(21144)>>2]|0;
  $581 = (($580) + ($$723947$i))|0;
  HEAP32[(21144)>>2] = $581;
  $582 = HEAP32[(21148)>>2]|0;
  $583 = ($581>>>0)>($582>>>0);
  if ($583) {
   HEAP32[(21148)>>2] = $581;
  }
  $584 = HEAP32[(20736)>>2]|0;
  $585 = ($584|0)==(0|0);
  L215: do {
   if ($585) {
    $586 = HEAP32[(20728)>>2]|0;
    $587 = ($586|0)==(0|0);
    $588 = ($$748$i>>>0)<($586>>>0);
    $or$cond11$i = $587 | $588;
    if ($or$cond11$i) {
     HEAP32[(20728)>>2] = $$748$i;
    }
    HEAP32[(21160)>>2] = $$748$i;
    HEAP32[(21164)>>2] = $$723947$i;
    HEAP32[(21172)>>2] = 0;
    $589 = HEAP32[5296]|0;
    HEAP32[(20748)>>2] = $589;
    HEAP32[(20744)>>2] = -1;
    HEAP32[(20764)>>2] = (20752);
    HEAP32[(20760)>>2] = (20752);
    HEAP32[(20772)>>2] = (20760);
    HEAP32[(20768)>>2] = (20760);
    HEAP32[(20780)>>2] = (20768);
    HEAP32[(20776)>>2] = (20768);
    HEAP32[(20788)>>2] = (20776);
    HEAP32[(20784)>>2] = (20776);
    HEAP32[(20796)>>2] = (20784);
    HEAP32[(20792)>>2] = (20784);
    HEAP32[(20804)>>2] = (20792);
    HEAP32[(20800)>>2] = (20792);
    HEAP32[(20812)>>2] = (20800);
    HEAP32[(20808)>>2] = (20800);
    HEAP32[(20820)>>2] = (20808);
    HEAP32[(20816)>>2] = (20808);
    HEAP32[(20828)>>2] = (20816);
    HEAP32[(20824)>>2] = (20816);
    HEAP32[(20836)>>2] = (20824);
    HEAP32[(20832)>>2] = (20824);
    HEAP32[(20844)>>2] = (20832);
    HEAP32[(20840)>>2] = (20832);
    HEAP32[(20852)>>2] = (20840);
    HEAP32[(20848)>>2] = (20840);
    HEAP32[(20860)>>2] = (20848);
    HEAP32[(20856)>>2] = (20848);
    HEAP32[(20868)>>2] = (20856);
    HEAP32[(20864)>>2] = (20856);
    HEAP32[(20876)>>2] = (20864);
    HEAP32[(20872)>>2] = (20864);
    HEAP32[(20884)>>2] = (20872);
    HEAP32[(20880)>>2] = (20872);
    HEAP32[(20892)>>2] = (20880);
    HEAP32[(20888)>>2] = (20880);
    HEAP32[(20900)>>2] = (20888);
    HEAP32[(20896)>>2] = (20888);
    HEAP32[(20908)>>2] = (20896);
    HEAP32[(20904)>>2] = (20896);
    HEAP32[(20916)>>2] = (20904);
    HEAP32[(20912)>>2] = (20904);
    HEAP32[(20924)>>2] = (20912);
    HEAP32[(20920)>>2] = (20912);
    HEAP32[(20932)>>2] = (20920);
    HEAP32[(20928)>>2] = (20920);
    HEAP32[(20940)>>2] = (20928);
    HEAP32[(20936)>>2] = (20928);
    HEAP32[(20948)>>2] = (20936);
    HEAP32[(20944)>>2] = (20936);
    HEAP32[(20956)>>2] = (20944);
    HEAP32[(20952)>>2] = (20944);
    HEAP32[(20964)>>2] = (20952);
    HEAP32[(20960)>>2] = (20952);
    HEAP32[(20972)>>2] = (20960);
    HEAP32[(20968)>>2] = (20960);
    HEAP32[(20980)>>2] = (20968);
    HEAP32[(20976)>>2] = (20968);
    HEAP32[(20988)>>2] = (20976);
    HEAP32[(20984)>>2] = (20976);
    HEAP32[(20996)>>2] = (20984);
    HEAP32[(20992)>>2] = (20984);
    HEAP32[(21004)>>2] = (20992);
    HEAP32[(21000)>>2] = (20992);
    HEAP32[(21012)>>2] = (21000);
    HEAP32[(21008)>>2] = (21000);
    $590 = (($$723947$i) + -40)|0;
    $591 = ((($$748$i)) + 8|0);
    $592 = $591;
    $593 = $592 & 7;
    $594 = ($593|0)==(0);
    $595 = (0 - ($592))|0;
    $596 = $595 & 7;
    $597 = $594 ? 0 : $596;
    $598 = (($$748$i) + ($597)|0);
    $599 = (($590) - ($597))|0;
    HEAP32[(20736)>>2] = $598;
    HEAP32[(20724)>>2] = $599;
    $600 = $599 | 1;
    $601 = ((($598)) + 4|0);
    HEAP32[$601>>2] = $600;
    $602 = (($$748$i) + ($590)|0);
    $603 = ((($602)) + 4|0);
    HEAP32[$603>>2] = 40;
    $604 = HEAP32[(21200)>>2]|0;
    HEAP32[(20740)>>2] = $604;
   } else {
    $$024372$i = (21160);
    while(1) {
     $605 = HEAP32[$$024372$i>>2]|0;
     $606 = ((($$024372$i)) + 4|0);
     $607 = HEAP32[$606>>2]|0;
     $608 = (($605) + ($607)|0);
     $609 = ($$748$i|0)==($608|0);
     if ($609) {
      label = 154;
      break;
     }
     $610 = ((($$024372$i)) + 8|0);
     $611 = HEAP32[$610>>2]|0;
     $612 = ($611|0)==(0|0);
     if ($612) {
      break;
     } else {
      $$024372$i = $611;
     }
    }
    if ((label|0) == 154) {
     $613 = ((($$024372$i)) + 12|0);
     $614 = HEAP32[$613>>2]|0;
     $615 = $614 & 8;
     $616 = ($615|0)==(0);
     if ($616) {
      $617 = ($605>>>0)<=($584>>>0);
      $618 = ($$748$i>>>0)>($584>>>0);
      $or$cond51$i = $618 & $617;
      if ($or$cond51$i) {
       $619 = (($607) + ($$723947$i))|0;
       HEAP32[$606>>2] = $619;
       $620 = HEAP32[(20724)>>2]|0;
       $621 = (($620) + ($$723947$i))|0;
       $622 = ((($584)) + 8|0);
       $623 = $622;
       $624 = $623 & 7;
       $625 = ($624|0)==(0);
       $626 = (0 - ($623))|0;
       $627 = $626 & 7;
       $628 = $625 ? 0 : $627;
       $629 = (($584) + ($628)|0);
       $630 = (($621) - ($628))|0;
       HEAP32[(20736)>>2] = $629;
       HEAP32[(20724)>>2] = $630;
       $631 = $630 | 1;
       $632 = ((($629)) + 4|0);
       HEAP32[$632>>2] = $631;
       $633 = (($584) + ($621)|0);
       $634 = ((($633)) + 4|0);
       HEAP32[$634>>2] = 40;
       $635 = HEAP32[(21200)>>2]|0;
       HEAP32[(20740)>>2] = $635;
       break;
      }
     }
    }
    $636 = HEAP32[(20728)>>2]|0;
    $637 = ($$748$i>>>0)<($636>>>0);
    if ($637) {
     HEAP32[(20728)>>2] = $$748$i;
    }
    $638 = (($$748$i) + ($$723947$i)|0);
    $$124471$i = (21160);
    while(1) {
     $639 = HEAP32[$$124471$i>>2]|0;
     $640 = ($639|0)==($638|0);
     if ($640) {
      label = 162;
      break;
     }
     $641 = ((($$124471$i)) + 8|0);
     $642 = HEAP32[$641>>2]|0;
     $643 = ($642|0)==(0|0);
     if ($643) {
      break;
     } else {
      $$124471$i = $642;
     }
    }
    if ((label|0) == 162) {
     $644 = ((($$124471$i)) + 12|0);
     $645 = HEAP32[$644>>2]|0;
     $646 = $645 & 8;
     $647 = ($646|0)==(0);
     if ($647) {
      HEAP32[$$124471$i>>2] = $$748$i;
      $648 = ((($$124471$i)) + 4|0);
      $649 = HEAP32[$648>>2]|0;
      $650 = (($649) + ($$723947$i))|0;
      HEAP32[$648>>2] = $650;
      $651 = ((($$748$i)) + 8|0);
      $652 = $651;
      $653 = $652 & 7;
      $654 = ($653|0)==(0);
      $655 = (0 - ($652))|0;
      $656 = $655 & 7;
      $657 = $654 ? 0 : $656;
      $658 = (($$748$i) + ($657)|0);
      $659 = ((($638)) + 8|0);
      $660 = $659;
      $661 = $660 & 7;
      $662 = ($661|0)==(0);
      $663 = (0 - ($660))|0;
      $664 = $663 & 7;
      $665 = $662 ? 0 : $664;
      $666 = (($638) + ($665)|0);
      $667 = $666;
      $668 = $658;
      $669 = (($667) - ($668))|0;
      $670 = (($658) + ($$0192)|0);
      $671 = (($669) - ($$0192))|0;
      $672 = $$0192 | 3;
      $673 = ((($658)) + 4|0);
      HEAP32[$673>>2] = $672;
      $674 = ($584|0)==($666|0);
      L238: do {
       if ($674) {
        $675 = HEAP32[(20724)>>2]|0;
        $676 = (($675) + ($671))|0;
        HEAP32[(20724)>>2] = $676;
        HEAP32[(20736)>>2] = $670;
        $677 = $676 | 1;
        $678 = ((($670)) + 4|0);
        HEAP32[$678>>2] = $677;
       } else {
        $679 = HEAP32[(20732)>>2]|0;
        $680 = ($679|0)==($666|0);
        if ($680) {
         $681 = HEAP32[(20720)>>2]|0;
         $682 = (($681) + ($671))|0;
         HEAP32[(20720)>>2] = $682;
         HEAP32[(20732)>>2] = $670;
         $683 = $682 | 1;
         $684 = ((($670)) + 4|0);
         HEAP32[$684>>2] = $683;
         $685 = (($670) + ($682)|0);
         HEAP32[$685>>2] = $682;
         break;
        }
        $686 = ((($666)) + 4|0);
        $687 = HEAP32[$686>>2]|0;
        $688 = $687 & 3;
        $689 = ($688|0)==(1);
        if ($689) {
         $690 = $687 & -8;
         $691 = $687 >>> 3;
         $692 = ($687>>>0)<(256);
         L246: do {
          if ($692) {
           $693 = ((($666)) + 8|0);
           $694 = HEAP32[$693>>2]|0;
           $695 = ((($666)) + 12|0);
           $696 = HEAP32[$695>>2]|0;
           $697 = ($696|0)==($694|0);
           if ($697) {
            $698 = 1 << $691;
            $699 = $698 ^ -1;
            $700 = HEAP32[5178]|0;
            $701 = $700 & $699;
            HEAP32[5178] = $701;
            break;
           } else {
            $702 = ((($694)) + 12|0);
            HEAP32[$702>>2] = $696;
            $703 = ((($696)) + 8|0);
            HEAP32[$703>>2] = $694;
            break;
           }
          } else {
           $704 = ((($666)) + 24|0);
           $705 = HEAP32[$704>>2]|0;
           $706 = ((($666)) + 12|0);
           $707 = HEAP32[$706>>2]|0;
           $708 = ($707|0)==($666|0);
           do {
            if ($708) {
             $713 = ((($666)) + 16|0);
             $714 = ((($713)) + 4|0);
             $715 = HEAP32[$714>>2]|0;
             $716 = ($715|0)==(0|0);
             if ($716) {
              $717 = HEAP32[$713>>2]|0;
              $718 = ($717|0)==(0|0);
              if ($718) {
               $$3$i$i = 0;
               break;
              } else {
               $$1263$i$i$ph = $717;$$1265$i$i$ph = $713;
              }
             } else {
              $$1263$i$i$ph = $715;$$1265$i$i$ph = $714;
             }
             $$1263$i$i = $$1263$i$i$ph;$$1265$i$i = $$1265$i$i$ph;
             while(1) {
              $719 = ((($$1263$i$i)) + 20|0);
              $720 = HEAP32[$719>>2]|0;
              $721 = ($720|0)==(0|0);
              if ($721) {
               $722 = ((($$1263$i$i)) + 16|0);
               $723 = HEAP32[$722>>2]|0;
               $724 = ($723|0)==(0|0);
               if ($724) {
                break;
               } else {
                $$1263$i$i$be = $723;$$1265$i$i$be = $722;
               }
              } else {
               $$1263$i$i$be = $720;$$1265$i$i$be = $719;
              }
              $$1263$i$i = $$1263$i$i$be;$$1265$i$i = $$1265$i$i$be;
             }
             HEAP32[$$1265$i$i>>2] = 0;
             $$3$i$i = $$1263$i$i;
            } else {
             $709 = ((($666)) + 8|0);
             $710 = HEAP32[$709>>2]|0;
             $711 = ((($710)) + 12|0);
             HEAP32[$711>>2] = $707;
             $712 = ((($707)) + 8|0);
             HEAP32[$712>>2] = $710;
             $$3$i$i = $707;
            }
           } while(0);
           $725 = ($705|0)==(0|0);
           if ($725) {
            break;
           }
           $726 = ((($666)) + 28|0);
           $727 = HEAP32[$726>>2]|0;
           $728 = (21016 + ($727<<2)|0);
           $729 = HEAP32[$728>>2]|0;
           $730 = ($729|0)==($666|0);
           do {
            if ($730) {
             HEAP32[$728>>2] = $$3$i$i;
             $cond$i$i = ($$3$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $731 = 1 << $727;
             $732 = $731 ^ -1;
             $733 = HEAP32[(20716)>>2]|0;
             $734 = $733 & $732;
             HEAP32[(20716)>>2] = $734;
             break L246;
            } else {
             $735 = ((($705)) + 16|0);
             $736 = HEAP32[$735>>2]|0;
             $737 = ($736|0)==($666|0);
             $738 = ((($705)) + 20|0);
             $$sink321 = $737 ? $735 : $738;
             HEAP32[$$sink321>>2] = $$3$i$i;
             $739 = ($$3$i$i|0)==(0|0);
             if ($739) {
              break L246;
             }
            }
           } while(0);
           $740 = ((($$3$i$i)) + 24|0);
           HEAP32[$740>>2] = $705;
           $741 = ((($666)) + 16|0);
           $742 = HEAP32[$741>>2]|0;
           $743 = ($742|0)==(0|0);
           if (!($743)) {
            $744 = ((($$3$i$i)) + 16|0);
            HEAP32[$744>>2] = $742;
            $745 = ((($742)) + 24|0);
            HEAP32[$745>>2] = $$3$i$i;
           }
           $746 = ((($741)) + 4|0);
           $747 = HEAP32[$746>>2]|0;
           $748 = ($747|0)==(0|0);
           if ($748) {
            break;
           }
           $749 = ((($$3$i$i)) + 20|0);
           HEAP32[$749>>2] = $747;
           $750 = ((($747)) + 24|0);
           HEAP32[$750>>2] = $$3$i$i;
          }
         } while(0);
         $751 = (($666) + ($690)|0);
         $752 = (($690) + ($671))|0;
         $$0$i$i = $751;$$0259$i$i = $752;
        } else {
         $$0$i$i = $666;$$0259$i$i = $671;
        }
        $753 = ((($$0$i$i)) + 4|0);
        $754 = HEAP32[$753>>2]|0;
        $755 = $754 & -2;
        HEAP32[$753>>2] = $755;
        $756 = $$0259$i$i | 1;
        $757 = ((($670)) + 4|0);
        HEAP32[$757>>2] = $756;
        $758 = (($670) + ($$0259$i$i)|0);
        HEAP32[$758>>2] = $$0259$i$i;
        $759 = $$0259$i$i >>> 3;
        $760 = ($$0259$i$i>>>0)<(256);
        if ($760) {
         $761 = $759 << 1;
         $762 = (20752 + ($761<<2)|0);
         $763 = HEAP32[5178]|0;
         $764 = 1 << $759;
         $765 = $763 & $764;
         $766 = ($765|0)==(0);
         if ($766) {
          $767 = $763 | $764;
          HEAP32[5178] = $767;
          $$pre$i16$i = ((($762)) + 8|0);
          $$0267$i$i = $762;$$pre$phi$i17$iZ2D = $$pre$i16$i;
         } else {
          $768 = ((($762)) + 8|0);
          $769 = HEAP32[$768>>2]|0;
          $$0267$i$i = $769;$$pre$phi$i17$iZ2D = $768;
         }
         HEAP32[$$pre$phi$i17$iZ2D>>2] = $670;
         $770 = ((($$0267$i$i)) + 12|0);
         HEAP32[$770>>2] = $670;
         $771 = ((($670)) + 8|0);
         HEAP32[$771>>2] = $$0267$i$i;
         $772 = ((($670)) + 12|0);
         HEAP32[$772>>2] = $762;
         break;
        }
        $773 = $$0259$i$i >>> 8;
        $774 = ($773|0)==(0);
        do {
         if ($774) {
          $$0268$i$i = 0;
         } else {
          $775 = ($$0259$i$i>>>0)>(16777215);
          if ($775) {
           $$0268$i$i = 31;
           break;
          }
          $776 = (($773) + 1048320)|0;
          $777 = $776 >>> 16;
          $778 = $777 & 8;
          $779 = $773 << $778;
          $780 = (($779) + 520192)|0;
          $781 = $780 >>> 16;
          $782 = $781 & 4;
          $783 = $782 | $778;
          $784 = $779 << $782;
          $785 = (($784) + 245760)|0;
          $786 = $785 >>> 16;
          $787 = $786 & 2;
          $788 = $783 | $787;
          $789 = (14 - ($788))|0;
          $790 = $784 << $787;
          $791 = $790 >>> 15;
          $792 = (($789) + ($791))|0;
          $793 = $792 << 1;
          $794 = (($792) + 7)|0;
          $795 = $$0259$i$i >>> $794;
          $796 = $795 & 1;
          $797 = $796 | $793;
          $$0268$i$i = $797;
         }
        } while(0);
        $798 = (21016 + ($$0268$i$i<<2)|0);
        $799 = ((($670)) + 28|0);
        HEAP32[$799>>2] = $$0268$i$i;
        $800 = ((($670)) + 16|0);
        $801 = ((($800)) + 4|0);
        HEAP32[$801>>2] = 0;
        HEAP32[$800>>2] = 0;
        $802 = HEAP32[(20716)>>2]|0;
        $803 = 1 << $$0268$i$i;
        $804 = $802 & $803;
        $805 = ($804|0)==(0);
        if ($805) {
         $806 = $802 | $803;
         HEAP32[(20716)>>2] = $806;
         HEAP32[$798>>2] = $670;
         $807 = ((($670)) + 24|0);
         HEAP32[$807>>2] = $798;
         $808 = ((($670)) + 12|0);
         HEAP32[$808>>2] = $670;
         $809 = ((($670)) + 8|0);
         HEAP32[$809>>2] = $670;
         break;
        }
        $810 = HEAP32[$798>>2]|0;
        $811 = ((($810)) + 4|0);
        $812 = HEAP32[$811>>2]|0;
        $813 = $812 & -8;
        $814 = ($813|0)==($$0259$i$i|0);
        L291: do {
         if ($814) {
          $$0261$lcssa$i$i = $810;
         } else {
          $815 = ($$0268$i$i|0)==(31);
          $816 = $$0268$i$i >>> 1;
          $817 = (25 - ($816))|0;
          $818 = $815 ? 0 : $817;
          $819 = $$0259$i$i << $818;
          $$02604$i$i = $819;$$02613$i$i = $810;
          while(1) {
           $826 = $$02604$i$i >>> 31;
           $827 = (((($$02613$i$i)) + 16|0) + ($826<<2)|0);
           $822 = HEAP32[$827>>2]|0;
           $828 = ($822|0)==(0|0);
           if ($828) {
            break;
           }
           $820 = $$02604$i$i << 1;
           $821 = ((($822)) + 4|0);
           $823 = HEAP32[$821>>2]|0;
           $824 = $823 & -8;
           $825 = ($824|0)==($$0259$i$i|0);
           if ($825) {
            $$0261$lcssa$i$i = $822;
            break L291;
           } else {
            $$02604$i$i = $820;$$02613$i$i = $822;
           }
          }
          HEAP32[$827>>2] = $670;
          $829 = ((($670)) + 24|0);
          HEAP32[$829>>2] = $$02613$i$i;
          $830 = ((($670)) + 12|0);
          HEAP32[$830>>2] = $670;
          $831 = ((($670)) + 8|0);
          HEAP32[$831>>2] = $670;
          break L238;
         }
        } while(0);
        $832 = ((($$0261$lcssa$i$i)) + 8|0);
        $833 = HEAP32[$832>>2]|0;
        $834 = ((($833)) + 12|0);
        HEAP32[$834>>2] = $670;
        HEAP32[$832>>2] = $670;
        $835 = ((($670)) + 8|0);
        HEAP32[$835>>2] = $833;
        $836 = ((($670)) + 12|0);
        HEAP32[$836>>2] = $$0261$lcssa$i$i;
        $837 = ((($670)) + 24|0);
        HEAP32[$837>>2] = 0;
       }
      } while(0);
      $966 = ((($658)) + 8|0);
      $$0 = $966;
      STACKTOP = sp;return ($$0|0);
     }
    }
    $$0$i$i$i = (21160);
    while(1) {
     $838 = HEAP32[$$0$i$i$i>>2]|0;
     $839 = ($838>>>0)>($584>>>0);
     if (!($839)) {
      $840 = ((($$0$i$i$i)) + 4|0);
      $841 = HEAP32[$840>>2]|0;
      $842 = (($838) + ($841)|0);
      $843 = ($842>>>0)>($584>>>0);
      if ($843) {
       break;
      }
     }
     $844 = ((($$0$i$i$i)) + 8|0);
     $845 = HEAP32[$844>>2]|0;
     $$0$i$i$i = $845;
    }
    $846 = ((($842)) + -47|0);
    $847 = ((($846)) + 8|0);
    $848 = $847;
    $849 = $848 & 7;
    $850 = ($849|0)==(0);
    $851 = (0 - ($848))|0;
    $852 = $851 & 7;
    $853 = $850 ? 0 : $852;
    $854 = (($846) + ($853)|0);
    $855 = ((($584)) + 16|0);
    $856 = ($854>>>0)<($855>>>0);
    $857 = $856 ? $584 : $854;
    $858 = ((($857)) + 8|0);
    $859 = ((($857)) + 24|0);
    $860 = (($$723947$i) + -40)|0;
    $861 = ((($$748$i)) + 8|0);
    $862 = $861;
    $863 = $862 & 7;
    $864 = ($863|0)==(0);
    $865 = (0 - ($862))|0;
    $866 = $865 & 7;
    $867 = $864 ? 0 : $866;
    $868 = (($$748$i) + ($867)|0);
    $869 = (($860) - ($867))|0;
    HEAP32[(20736)>>2] = $868;
    HEAP32[(20724)>>2] = $869;
    $870 = $869 | 1;
    $871 = ((($868)) + 4|0);
    HEAP32[$871>>2] = $870;
    $872 = (($$748$i) + ($860)|0);
    $873 = ((($872)) + 4|0);
    HEAP32[$873>>2] = 40;
    $874 = HEAP32[(21200)>>2]|0;
    HEAP32[(20740)>>2] = $874;
    $875 = ((($857)) + 4|0);
    HEAP32[$875>>2] = 27;
    ;HEAP32[$858>>2]=HEAP32[(21160)>>2]|0;HEAP32[$858+4>>2]=HEAP32[(21160)+4>>2]|0;HEAP32[$858+8>>2]=HEAP32[(21160)+8>>2]|0;HEAP32[$858+12>>2]=HEAP32[(21160)+12>>2]|0;
    HEAP32[(21160)>>2] = $$748$i;
    HEAP32[(21164)>>2] = $$723947$i;
    HEAP32[(21172)>>2] = 0;
    HEAP32[(21168)>>2] = $858;
    $877 = $859;
    while(1) {
     $876 = ((($877)) + 4|0);
     HEAP32[$876>>2] = 7;
     $878 = ((($877)) + 8|0);
     $879 = ($878>>>0)<($842>>>0);
     if ($879) {
      $877 = $876;
     } else {
      break;
     }
    }
    $880 = ($857|0)==($584|0);
    if (!($880)) {
     $881 = $857;
     $882 = $584;
     $883 = (($881) - ($882))|0;
     $884 = HEAP32[$875>>2]|0;
     $885 = $884 & -2;
     HEAP32[$875>>2] = $885;
     $886 = $883 | 1;
     $887 = ((($584)) + 4|0);
     HEAP32[$887>>2] = $886;
     HEAP32[$857>>2] = $883;
     $888 = $883 >>> 3;
     $889 = ($883>>>0)<(256);
     if ($889) {
      $890 = $888 << 1;
      $891 = (20752 + ($890<<2)|0);
      $892 = HEAP32[5178]|0;
      $893 = 1 << $888;
      $894 = $892 & $893;
      $895 = ($894|0)==(0);
      if ($895) {
       $896 = $892 | $893;
       HEAP32[5178] = $896;
       $$pre$i$i = ((($891)) + 8|0);
       $$0206$i$i = $891;$$pre$phi$i$iZ2D = $$pre$i$i;
      } else {
       $897 = ((($891)) + 8|0);
       $898 = HEAP32[$897>>2]|0;
       $$0206$i$i = $898;$$pre$phi$i$iZ2D = $897;
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $584;
      $899 = ((($$0206$i$i)) + 12|0);
      HEAP32[$899>>2] = $584;
      $900 = ((($584)) + 8|0);
      HEAP32[$900>>2] = $$0206$i$i;
      $901 = ((($584)) + 12|0);
      HEAP32[$901>>2] = $891;
      break;
     }
     $902 = $883 >>> 8;
     $903 = ($902|0)==(0);
     if ($903) {
      $$0207$i$i = 0;
     } else {
      $904 = ($883>>>0)>(16777215);
      if ($904) {
       $$0207$i$i = 31;
      } else {
       $905 = (($902) + 1048320)|0;
       $906 = $905 >>> 16;
       $907 = $906 & 8;
       $908 = $902 << $907;
       $909 = (($908) + 520192)|0;
       $910 = $909 >>> 16;
       $911 = $910 & 4;
       $912 = $911 | $907;
       $913 = $908 << $911;
       $914 = (($913) + 245760)|0;
       $915 = $914 >>> 16;
       $916 = $915 & 2;
       $917 = $912 | $916;
       $918 = (14 - ($917))|0;
       $919 = $913 << $916;
       $920 = $919 >>> 15;
       $921 = (($918) + ($920))|0;
       $922 = $921 << 1;
       $923 = (($921) + 7)|0;
       $924 = $883 >>> $923;
       $925 = $924 & 1;
       $926 = $925 | $922;
       $$0207$i$i = $926;
      }
     }
     $927 = (21016 + ($$0207$i$i<<2)|0);
     $928 = ((($584)) + 28|0);
     HEAP32[$928>>2] = $$0207$i$i;
     $929 = ((($584)) + 20|0);
     HEAP32[$929>>2] = 0;
     HEAP32[$855>>2] = 0;
     $930 = HEAP32[(20716)>>2]|0;
     $931 = 1 << $$0207$i$i;
     $932 = $930 & $931;
     $933 = ($932|0)==(0);
     if ($933) {
      $934 = $930 | $931;
      HEAP32[(20716)>>2] = $934;
      HEAP32[$927>>2] = $584;
      $935 = ((($584)) + 24|0);
      HEAP32[$935>>2] = $927;
      $936 = ((($584)) + 12|0);
      HEAP32[$936>>2] = $584;
      $937 = ((($584)) + 8|0);
      HEAP32[$937>>2] = $584;
      break;
     }
     $938 = HEAP32[$927>>2]|0;
     $939 = ((($938)) + 4|0);
     $940 = HEAP32[$939>>2]|0;
     $941 = $940 & -8;
     $942 = ($941|0)==($883|0);
     L325: do {
      if ($942) {
       $$0202$lcssa$i$i = $938;
      } else {
       $943 = ($$0207$i$i|0)==(31);
       $944 = $$0207$i$i >>> 1;
       $945 = (25 - ($944))|0;
       $946 = $943 ? 0 : $945;
       $947 = $883 << $946;
       $$02014$i$i = $947;$$02023$i$i = $938;
       while(1) {
        $954 = $$02014$i$i >>> 31;
        $955 = (((($$02023$i$i)) + 16|0) + ($954<<2)|0);
        $950 = HEAP32[$955>>2]|0;
        $956 = ($950|0)==(0|0);
        if ($956) {
         break;
        }
        $948 = $$02014$i$i << 1;
        $949 = ((($950)) + 4|0);
        $951 = HEAP32[$949>>2]|0;
        $952 = $951 & -8;
        $953 = ($952|0)==($883|0);
        if ($953) {
         $$0202$lcssa$i$i = $950;
         break L325;
        } else {
         $$02014$i$i = $948;$$02023$i$i = $950;
        }
       }
       HEAP32[$955>>2] = $584;
       $957 = ((($584)) + 24|0);
       HEAP32[$957>>2] = $$02023$i$i;
       $958 = ((($584)) + 12|0);
       HEAP32[$958>>2] = $584;
       $959 = ((($584)) + 8|0);
       HEAP32[$959>>2] = $584;
       break L215;
      }
     } while(0);
     $960 = ((($$0202$lcssa$i$i)) + 8|0);
     $961 = HEAP32[$960>>2]|0;
     $962 = ((($961)) + 12|0);
     HEAP32[$962>>2] = $584;
     HEAP32[$960>>2] = $584;
     $963 = ((($584)) + 8|0);
     HEAP32[$963>>2] = $961;
     $964 = ((($584)) + 12|0);
     HEAP32[$964>>2] = $$0202$lcssa$i$i;
     $965 = ((($584)) + 24|0);
     HEAP32[$965>>2] = 0;
    }
   }
  } while(0);
  $967 = HEAP32[(20724)>>2]|0;
  $968 = ($967>>>0)>($$0192>>>0);
  if ($968) {
   $969 = (($967) - ($$0192))|0;
   HEAP32[(20724)>>2] = $969;
   $970 = HEAP32[(20736)>>2]|0;
   $971 = (($970) + ($$0192)|0);
   HEAP32[(20736)>>2] = $971;
   $972 = $969 | 1;
   $973 = ((($971)) + 4|0);
   HEAP32[$973>>2] = $972;
   $974 = $$0192 | 3;
   $975 = ((($970)) + 4|0);
   HEAP32[$975>>2] = $974;
   $976 = ((($970)) + 8|0);
   $$0 = $976;
   STACKTOP = sp;return ($$0|0);
  }
 }
 HEAP32[5168] = 48;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _free($0) {
 $0 = $0|0;
 var $$0194$i = 0, $$0194$in$i = 0, $$0346381 = 0, $$0347$lcssa = 0, $$0347380 = 0, $$0359 = 0, $$0366 = 0, $$1 = 0, $$1345 = 0, $$1350 = 0, $$1350$be = 0, $$1350$ph = 0, $$1353 = 0, $$1353$be = 0, $$1353$ph = 0, $$1361 = 0, $$1361$be = 0, $$1361$ph = 0, $$1365 = 0, $$1365$be = 0;
 var $$1365$ph = 0, $$2 = 0, $$3 = 0, $$3363 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink = 0, $$sink395 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond371 = 0, $cond372 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + -8|0);
 $3 = HEAP32[(20728)>>2]|0;
 $4 = ((($0)) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & -8;
 $7 = (($2) + ($6)|0);
 $8 = $5 & 1;
 $9 = ($8|0)==(0);
 do {
  if ($9) {
   $10 = HEAP32[$2>>2]|0;
   $11 = $5 & 3;
   $12 = ($11|0)==(0);
   if ($12) {
    return;
   }
   $13 = (0 - ($10))|0;
   $14 = (($2) + ($13)|0);
   $15 = (($10) + ($6))|0;
   $16 = ($14>>>0)<($3>>>0);
   if ($16) {
    return;
   }
   $17 = HEAP32[(20732)>>2]|0;
   $18 = ($17|0)==($14|0);
   if ($18) {
    $79 = ((($7)) + 4|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = $80 & 3;
    $82 = ($81|0)==(3);
    if (!($82)) {
     $$1 = $14;$$1345 = $15;$88 = $14;
     break;
    }
    $83 = (($14) + ($15)|0);
    $84 = ((($14)) + 4|0);
    $85 = $15 | 1;
    $86 = $80 & -2;
    HEAP32[(20720)>>2] = $15;
    HEAP32[$79>>2] = $86;
    HEAP32[$84>>2] = $85;
    HEAP32[$83>>2] = $15;
    return;
   }
   $19 = $10 >>> 3;
   $20 = ($10>>>0)<(256);
   if ($20) {
    $21 = ((($14)) + 8|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ((($14)) + 12|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ($24|0)==($22|0);
    if ($25) {
     $26 = 1 << $19;
     $27 = $26 ^ -1;
     $28 = HEAP32[5178]|0;
     $29 = $28 & $27;
     HEAP32[5178] = $29;
     $$1 = $14;$$1345 = $15;$88 = $14;
     break;
    } else {
     $30 = ((($22)) + 12|0);
     HEAP32[$30>>2] = $24;
     $31 = ((($24)) + 8|0);
     HEAP32[$31>>2] = $22;
     $$1 = $14;$$1345 = $15;$88 = $14;
     break;
    }
   }
   $32 = ((($14)) + 24|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ((($14)) + 12|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($35|0)==($14|0);
   do {
    if ($36) {
     $41 = ((($14)) + 16|0);
     $42 = ((($41)) + 4|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = ($43|0)==(0|0);
     if ($44) {
      $45 = HEAP32[$41>>2]|0;
      $46 = ($45|0)==(0|0);
      if ($46) {
       $$3 = 0;
       break;
      } else {
       $$1350$ph = $45;$$1353$ph = $41;
      }
     } else {
      $$1350$ph = $43;$$1353$ph = $42;
     }
     $$1350 = $$1350$ph;$$1353 = $$1353$ph;
     while(1) {
      $47 = ((($$1350)) + 20|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = ($48|0)==(0|0);
      if ($49) {
       $50 = ((($$1350)) + 16|0);
       $51 = HEAP32[$50>>2]|0;
       $52 = ($51|0)==(0|0);
       if ($52) {
        break;
       } else {
        $$1350$be = $51;$$1353$be = $50;
       }
      } else {
       $$1350$be = $48;$$1353$be = $47;
      }
      $$1350 = $$1350$be;$$1353 = $$1353$be;
     }
     HEAP32[$$1353>>2] = 0;
     $$3 = $$1350;
    } else {
     $37 = ((($14)) + 8|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = ((($38)) + 12|0);
     HEAP32[$39>>2] = $35;
     $40 = ((($35)) + 8|0);
     HEAP32[$40>>2] = $38;
     $$3 = $35;
    }
   } while(0);
   $53 = ($33|0)==(0|0);
   if ($53) {
    $$1 = $14;$$1345 = $15;$88 = $14;
   } else {
    $54 = ((($14)) + 28|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = (21016 + ($55<<2)|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = ($57|0)==($14|0);
    if ($58) {
     HEAP32[$56>>2] = $$3;
     $cond371 = ($$3|0)==(0|0);
     if ($cond371) {
      $59 = 1 << $55;
      $60 = $59 ^ -1;
      $61 = HEAP32[(20716)>>2]|0;
      $62 = $61 & $60;
      HEAP32[(20716)>>2] = $62;
      $$1 = $14;$$1345 = $15;$88 = $14;
      break;
     }
    } else {
     $63 = ((($33)) + 16|0);
     $64 = HEAP32[$63>>2]|0;
     $65 = ($64|0)==($14|0);
     $66 = ((($33)) + 20|0);
     $$sink = $65 ? $63 : $66;
     HEAP32[$$sink>>2] = $$3;
     $67 = ($$3|0)==(0|0);
     if ($67) {
      $$1 = $14;$$1345 = $15;$88 = $14;
      break;
     }
    }
    $68 = ((($$3)) + 24|0);
    HEAP32[$68>>2] = $33;
    $69 = ((($14)) + 16|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($70|0)==(0|0);
    if (!($71)) {
     $72 = ((($$3)) + 16|0);
     HEAP32[$72>>2] = $70;
     $73 = ((($70)) + 24|0);
     HEAP32[$73>>2] = $$3;
    }
    $74 = ((($69)) + 4|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = ($75|0)==(0|0);
    if ($76) {
     $$1 = $14;$$1345 = $15;$88 = $14;
    } else {
     $77 = ((($$3)) + 20|0);
     HEAP32[$77>>2] = $75;
     $78 = ((($75)) + 24|0);
     HEAP32[$78>>2] = $$3;
     $$1 = $14;$$1345 = $15;$88 = $14;
    }
   }
  } else {
   $$1 = $2;$$1345 = $6;$88 = $2;
  }
 } while(0);
 $87 = ($88>>>0)<($7>>>0);
 if (!($87)) {
  return;
 }
 $89 = ((($7)) + 4|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = $90 & 1;
 $92 = ($91|0)==(0);
 if ($92) {
  return;
 }
 $93 = $90 & 2;
 $94 = ($93|0)==(0);
 if ($94) {
  $95 = HEAP32[(20736)>>2]|0;
  $96 = ($95|0)==($7|0);
  if ($96) {
   $97 = HEAP32[(20724)>>2]|0;
   $98 = (($97) + ($$1345))|0;
   HEAP32[(20724)>>2] = $98;
   HEAP32[(20736)>>2] = $$1;
   $99 = $98 | 1;
   $100 = ((($$1)) + 4|0);
   HEAP32[$100>>2] = $99;
   $101 = HEAP32[(20732)>>2]|0;
   $102 = ($$1|0)==($101|0);
   if (!($102)) {
    return;
   }
   HEAP32[(20732)>>2] = 0;
   HEAP32[(20720)>>2] = 0;
   return;
  }
  $103 = HEAP32[(20732)>>2]|0;
  $104 = ($103|0)==($7|0);
  if ($104) {
   $105 = HEAP32[(20720)>>2]|0;
   $106 = (($105) + ($$1345))|0;
   HEAP32[(20720)>>2] = $106;
   HEAP32[(20732)>>2] = $88;
   $107 = $106 | 1;
   $108 = ((($$1)) + 4|0);
   HEAP32[$108>>2] = $107;
   $109 = (($88) + ($106)|0);
   HEAP32[$109>>2] = $106;
   return;
  }
  $110 = $90 & -8;
  $111 = (($110) + ($$1345))|0;
  $112 = $90 >>> 3;
  $113 = ($90>>>0)<(256);
  do {
   if ($113) {
    $114 = ((($7)) + 8|0);
    $115 = HEAP32[$114>>2]|0;
    $116 = ((($7)) + 12|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = ($117|0)==($115|0);
    if ($118) {
     $119 = 1 << $112;
     $120 = $119 ^ -1;
     $121 = HEAP32[5178]|0;
     $122 = $121 & $120;
     HEAP32[5178] = $122;
     break;
    } else {
     $123 = ((($115)) + 12|0);
     HEAP32[$123>>2] = $117;
     $124 = ((($117)) + 8|0);
     HEAP32[$124>>2] = $115;
     break;
    }
   } else {
    $125 = ((($7)) + 24|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ((($7)) + 12|0);
    $128 = HEAP32[$127>>2]|0;
    $129 = ($128|0)==($7|0);
    do {
     if ($129) {
      $134 = ((($7)) + 16|0);
      $135 = ((($134)) + 4|0);
      $136 = HEAP32[$135>>2]|0;
      $137 = ($136|0)==(0|0);
      if ($137) {
       $138 = HEAP32[$134>>2]|0;
       $139 = ($138|0)==(0|0);
       if ($139) {
        $$3363 = 0;
        break;
       } else {
        $$1361$ph = $138;$$1365$ph = $134;
       }
      } else {
       $$1361$ph = $136;$$1365$ph = $135;
      }
      $$1361 = $$1361$ph;$$1365 = $$1365$ph;
      while(1) {
       $140 = ((($$1361)) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if ($142) {
        $143 = ((($$1361)) + 16|0);
        $144 = HEAP32[$143>>2]|0;
        $145 = ($144|0)==(0|0);
        if ($145) {
         break;
        } else {
         $$1361$be = $144;$$1365$be = $143;
        }
       } else {
        $$1361$be = $141;$$1365$be = $140;
       }
       $$1361 = $$1361$be;$$1365 = $$1365$be;
      }
      HEAP32[$$1365>>2] = 0;
      $$3363 = $$1361;
     } else {
      $130 = ((($7)) + 8|0);
      $131 = HEAP32[$130>>2]|0;
      $132 = ((($131)) + 12|0);
      HEAP32[$132>>2] = $128;
      $133 = ((($128)) + 8|0);
      HEAP32[$133>>2] = $131;
      $$3363 = $128;
     }
    } while(0);
    $146 = ($126|0)==(0|0);
    if (!($146)) {
     $147 = ((($7)) + 28|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = (21016 + ($148<<2)|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = ($150|0)==($7|0);
     if ($151) {
      HEAP32[$149>>2] = $$3363;
      $cond372 = ($$3363|0)==(0|0);
      if ($cond372) {
       $152 = 1 << $148;
       $153 = $152 ^ -1;
       $154 = HEAP32[(20716)>>2]|0;
       $155 = $154 & $153;
       HEAP32[(20716)>>2] = $155;
       break;
      }
     } else {
      $156 = ((($126)) + 16|0);
      $157 = HEAP32[$156>>2]|0;
      $158 = ($157|0)==($7|0);
      $159 = ((($126)) + 20|0);
      $$sink395 = $158 ? $156 : $159;
      HEAP32[$$sink395>>2] = $$3363;
      $160 = ($$3363|0)==(0|0);
      if ($160) {
       break;
      }
     }
     $161 = ((($$3363)) + 24|0);
     HEAP32[$161>>2] = $126;
     $162 = ((($7)) + 16|0);
     $163 = HEAP32[$162>>2]|0;
     $164 = ($163|0)==(0|0);
     if (!($164)) {
      $165 = ((($$3363)) + 16|0);
      HEAP32[$165>>2] = $163;
      $166 = ((($163)) + 24|0);
      HEAP32[$166>>2] = $$3363;
     }
     $167 = ((($162)) + 4|0);
     $168 = HEAP32[$167>>2]|0;
     $169 = ($168|0)==(0|0);
     if (!($169)) {
      $170 = ((($$3363)) + 20|0);
      HEAP32[$170>>2] = $168;
      $171 = ((($168)) + 24|0);
      HEAP32[$171>>2] = $$3363;
     }
    }
   }
  } while(0);
  $172 = $111 | 1;
  $173 = ((($$1)) + 4|0);
  HEAP32[$173>>2] = $172;
  $174 = (($88) + ($111)|0);
  HEAP32[$174>>2] = $111;
  $175 = HEAP32[(20732)>>2]|0;
  $176 = ($$1|0)==($175|0);
  if ($176) {
   HEAP32[(20720)>>2] = $111;
   return;
  } else {
   $$2 = $111;
  }
 } else {
  $177 = $90 & -2;
  HEAP32[$89>>2] = $177;
  $178 = $$1345 | 1;
  $179 = ((($$1)) + 4|0);
  HEAP32[$179>>2] = $178;
  $180 = (($88) + ($$1345)|0);
  HEAP32[$180>>2] = $$1345;
  $$2 = $$1345;
 }
 $181 = $$2 >>> 3;
 $182 = ($$2>>>0)<(256);
 if ($182) {
  $183 = $181 << 1;
  $184 = (20752 + ($183<<2)|0);
  $185 = HEAP32[5178]|0;
  $186 = 1 << $181;
  $187 = $185 & $186;
  $188 = ($187|0)==(0);
  if ($188) {
   $189 = $185 | $186;
   HEAP32[5178] = $189;
   $$pre = ((($184)) + 8|0);
   $$0366 = $184;$$pre$phiZ2D = $$pre;
  } else {
   $190 = ((($184)) + 8|0);
   $191 = HEAP32[$190>>2]|0;
   $$0366 = $191;$$pre$phiZ2D = $190;
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $192 = ((($$0366)) + 12|0);
  HEAP32[$192>>2] = $$1;
  $193 = ((($$1)) + 8|0);
  HEAP32[$193>>2] = $$0366;
  $194 = ((($$1)) + 12|0);
  HEAP32[$194>>2] = $184;
  return;
 }
 $195 = $$2 >>> 8;
 $196 = ($195|0)==(0);
 if ($196) {
  $$0359 = 0;
 } else {
  $197 = ($$2>>>0)>(16777215);
  if ($197) {
   $$0359 = 31;
  } else {
   $198 = (($195) + 1048320)|0;
   $199 = $198 >>> 16;
   $200 = $199 & 8;
   $201 = $195 << $200;
   $202 = (($201) + 520192)|0;
   $203 = $202 >>> 16;
   $204 = $203 & 4;
   $205 = $204 | $200;
   $206 = $201 << $204;
   $207 = (($206) + 245760)|0;
   $208 = $207 >>> 16;
   $209 = $208 & 2;
   $210 = $205 | $209;
   $211 = (14 - ($210))|0;
   $212 = $206 << $209;
   $213 = $212 >>> 15;
   $214 = (($211) + ($213))|0;
   $215 = $214 << 1;
   $216 = (($214) + 7)|0;
   $217 = $$2 >>> $216;
   $218 = $217 & 1;
   $219 = $218 | $215;
   $$0359 = $219;
  }
 }
 $220 = (21016 + ($$0359<<2)|0);
 $221 = ((($$1)) + 28|0);
 HEAP32[$221>>2] = $$0359;
 $222 = ((($$1)) + 16|0);
 $223 = ((($$1)) + 20|0);
 HEAP32[$223>>2] = 0;
 HEAP32[$222>>2] = 0;
 $224 = HEAP32[(20716)>>2]|0;
 $225 = 1 << $$0359;
 $226 = $224 & $225;
 $227 = ($226|0)==(0);
 L112: do {
  if ($227) {
   $228 = $224 | $225;
   HEAP32[(20716)>>2] = $228;
   HEAP32[$220>>2] = $$1;
   $229 = ((($$1)) + 24|0);
   HEAP32[$229>>2] = $220;
   $230 = ((($$1)) + 12|0);
   HEAP32[$230>>2] = $$1;
   $231 = ((($$1)) + 8|0);
   HEAP32[$231>>2] = $$1;
  } else {
   $232 = HEAP32[$220>>2]|0;
   $233 = ((($232)) + 4|0);
   $234 = HEAP32[$233>>2]|0;
   $235 = $234 & -8;
   $236 = ($235|0)==($$2|0);
   L115: do {
    if ($236) {
     $$0347$lcssa = $232;
    } else {
     $237 = ($$0359|0)==(31);
     $238 = $$0359 >>> 1;
     $239 = (25 - ($238))|0;
     $240 = $237 ? 0 : $239;
     $241 = $$2 << $240;
     $$0346381 = $241;$$0347380 = $232;
     while(1) {
      $248 = $$0346381 >>> 31;
      $249 = (((($$0347380)) + 16|0) + ($248<<2)|0);
      $244 = HEAP32[$249>>2]|0;
      $250 = ($244|0)==(0|0);
      if ($250) {
       break;
      }
      $242 = $$0346381 << 1;
      $243 = ((($244)) + 4|0);
      $245 = HEAP32[$243>>2]|0;
      $246 = $245 & -8;
      $247 = ($246|0)==($$2|0);
      if ($247) {
       $$0347$lcssa = $244;
       break L115;
      } else {
       $$0346381 = $242;$$0347380 = $244;
      }
     }
     HEAP32[$249>>2] = $$1;
     $251 = ((($$1)) + 24|0);
     HEAP32[$251>>2] = $$0347380;
     $252 = ((($$1)) + 12|0);
     HEAP32[$252>>2] = $$1;
     $253 = ((($$1)) + 8|0);
     HEAP32[$253>>2] = $$1;
     break L112;
    }
   } while(0);
   $254 = ((($$0347$lcssa)) + 8|0);
   $255 = HEAP32[$254>>2]|0;
   $256 = ((($255)) + 12|0);
   HEAP32[$256>>2] = $$1;
   HEAP32[$254>>2] = $$1;
   $257 = ((($$1)) + 8|0);
   HEAP32[$257>>2] = $255;
   $258 = ((($$1)) + 12|0);
   HEAP32[$258>>2] = $$0347$lcssa;
   $259 = ((($$1)) + 24|0);
   HEAP32[$259>>2] = 0;
  }
 } while(0);
 $260 = HEAP32[(20744)>>2]|0;
 $261 = (($260) + -1)|0;
 HEAP32[(20744)>>2] = $261;
 $262 = ($261|0)==(0);
 if (!($262)) {
  return;
 }
 $$0194$in$i = (21168);
 while(1) {
  $$0194$i = HEAP32[$$0194$in$i>>2]|0;
  $263 = ($$0194$i|0)==(0|0);
  $264 = ((($$0194$i)) + 8|0);
  if ($263) {
   break;
  } else {
   $$0194$in$i = $264;
  }
 }
 HEAP32[(20744)>>2] = -1;
 return;
}
function _calloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = Math_imul($1, $0)|0;
  $4 = $1 | $0;
  $5 = ($4>>>0)>(65535);
  if ($5) {
   $6 = (($3>>>0) / ($0>>>0))&-1;
   $7 = ($6|0)==($1|0);
   $spec$select = $7 ? $3 : -1;
   $$0 = $spec$select;
  } else {
   $$0 = $3;
  }
 }
 $8 = (_malloc($$0)|0);
 $9 = ($8|0)==(0|0);
 if ($9) {
  return ($8|0);
 }
 $10 = ((($8)) + -4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 & 3;
 $13 = ($12|0)==(0);
 if ($13) {
  return ($8|0);
 }
 (_memset(($8|0),0,($$0|0))|0);
 return ($8|0);
}
function _realloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $3 = (_malloc($1)|0);
  $$1 = $3;
  return ($$1|0);
 }
 $4 = ($1>>>0)>(4294967231);
 if ($4) {
  HEAP32[5168] = 48;
  $$1 = 0;
  return ($$1|0);
 }
 $5 = ($1>>>0)<(11);
 $6 = (($1) + 11)|0;
 $7 = $6 & -8;
 $8 = $5 ? 16 : $7;
 $9 = ((($0)) + -8|0);
 $10 = (_try_realloc_chunk($9,$8)|0);
 $11 = ($10|0)==(0|0);
 if (!($11)) {
  $12 = ((($10)) + 8|0);
  $$1 = $12;
  return ($$1|0);
 }
 $13 = (_malloc($1)|0);
 $14 = ($13|0)==(0|0);
 if ($14) {
  $$1 = 0;
  return ($$1|0);
 }
 $15 = ((($0)) + -4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $16 & -8;
 $18 = $16 & 3;
 $19 = ($18|0)==(0);
 $20 = $19 ? 8 : 4;
 $21 = (($17) - ($20))|0;
 $22 = ($21>>>0)<($1>>>0);
 $23 = $22 ? $21 : $1;
 (_memcpy(($13|0),($0|0),($23|0))|0);
 _free($0);
 $$1 = $13;
 return ($$1|0);
}
function _try_realloc_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1245 = 0, $$1245$be = 0, $$1245$ph = 0, $$1248 = 0, $$1248$be = 0, $$1248$ph = 0, $$2 = 0, $$3 = 0, $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $storemerge = 0, $storemerge1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & -8;
 $5 = (($0) + ($4)|0);
 $6 = $3 & 3;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ($1>>>0)<(256);
  if ($8) {
   $$2 = 0;
   return ($$2|0);
  }
  $9 = (($1) + 4)|0;
  $10 = ($4>>>0)<($9>>>0);
  if (!($10)) {
   $11 = (($4) - ($1))|0;
   $12 = HEAP32[(21192)>>2]|0;
   $13 = $12 << 1;
   $14 = ($11>>>0)>($13>>>0);
   if (!($14)) {
    $$2 = $0;
    return ($$2|0);
   }
  }
  $$2 = 0;
  return ($$2|0);
 }
 $15 = ($4>>>0)<($1>>>0);
 if (!($15)) {
  $16 = (($4) - ($1))|0;
  $17 = ($16>>>0)>(15);
  if (!($17)) {
   $$2 = $0;
   return ($$2|0);
  }
  $18 = (($0) + ($1)|0);
  $19 = $3 & 1;
  $20 = $19 | $1;
  $21 = $20 | 2;
  HEAP32[$2>>2] = $21;
  $22 = ((($18)) + 4|0);
  $23 = $16 | 3;
  HEAP32[$22>>2] = $23;
  $24 = ((($5)) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $25 | 1;
  HEAP32[$24>>2] = $26;
  _dispose_chunk($18,$16);
  $$2 = $0;
  return ($$2|0);
 }
 $27 = HEAP32[(20736)>>2]|0;
 $28 = ($27|0)==($5|0);
 if ($28) {
  $29 = HEAP32[(20724)>>2]|0;
  $30 = (($29) + ($4))|0;
  $31 = ($30>>>0)>($1>>>0);
  $32 = (($30) - ($1))|0;
  $33 = (($0) + ($1)|0);
  if (!($31)) {
   $$2 = 0;
   return ($$2|0);
  }
  $34 = $32 | 1;
  $35 = ((($33)) + 4|0);
  $36 = $3 & 1;
  $37 = $36 | $1;
  $38 = $37 | 2;
  HEAP32[$2>>2] = $38;
  HEAP32[$35>>2] = $34;
  HEAP32[(20736)>>2] = $33;
  HEAP32[(20724)>>2] = $32;
  $$2 = $0;
  return ($$2|0);
 }
 $39 = HEAP32[(20732)>>2]|0;
 $40 = ($39|0)==($5|0);
 if ($40) {
  $41 = HEAP32[(20720)>>2]|0;
  $42 = (($41) + ($4))|0;
  $43 = ($42>>>0)<($1>>>0);
  if ($43) {
   $$2 = 0;
   return ($$2|0);
  }
  $44 = (($42) - ($1))|0;
  $45 = ($44>>>0)>(15);
  if ($45) {
   $46 = (($0) + ($1)|0);
   $47 = (($0) + ($42)|0);
   $48 = $3 & 1;
   $49 = $48 | $1;
   $50 = $49 | 2;
   HEAP32[$2>>2] = $50;
   $51 = ((($46)) + 4|0);
   $52 = $44 | 1;
   HEAP32[$51>>2] = $52;
   HEAP32[$47>>2] = $44;
   $53 = ((($47)) + 4|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = $54 & -2;
   HEAP32[$53>>2] = $55;
   $storemerge = $46;$storemerge1 = $44;
  } else {
   $56 = $3 & 1;
   $57 = $56 | $42;
   $58 = $57 | 2;
   HEAP32[$2>>2] = $58;
   $59 = (($0) + ($42)|0);
   $60 = ((($59)) + 4|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $61 | 1;
   HEAP32[$60>>2] = $62;
   $storemerge = 0;$storemerge1 = 0;
  }
  HEAP32[(20720)>>2] = $storemerge1;
  HEAP32[(20732)>>2] = $storemerge;
  $$2 = $0;
  return ($$2|0);
 }
 $63 = ((($5)) + 4|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = $64 & 2;
 $66 = ($65|0)==(0);
 if (!($66)) {
  $$2 = 0;
  return ($$2|0);
 }
 $67 = $64 & -8;
 $68 = (($67) + ($4))|0;
 $69 = ($68>>>0)<($1>>>0);
 if ($69) {
  $$2 = 0;
  return ($$2|0);
 }
 $70 = (($68) - ($1))|0;
 $71 = $64 >>> 3;
 $72 = ($64>>>0)<(256);
 do {
  if ($72) {
   $73 = ((($5)) + 8|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = ((($5)) + 12|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = ($76|0)==($74|0);
   if ($77) {
    $78 = 1 << $71;
    $79 = $78 ^ -1;
    $80 = HEAP32[5178]|0;
    $81 = $80 & $79;
    HEAP32[5178] = $81;
    break;
   } else {
    $82 = ((($74)) + 12|0);
    HEAP32[$82>>2] = $76;
    $83 = ((($76)) + 8|0);
    HEAP32[$83>>2] = $74;
    break;
   }
  } else {
   $84 = ((($5)) + 24|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = ((($5)) + 12|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = ($87|0)==($5|0);
   do {
    if ($88) {
     $93 = ((($5)) + 16|0);
     $94 = ((($93)) + 4|0);
     $95 = HEAP32[$94>>2]|0;
     $96 = ($95|0)==(0|0);
     if ($96) {
      $97 = HEAP32[$93>>2]|0;
      $98 = ($97|0)==(0|0);
      if ($98) {
       $$3 = 0;
       break;
      } else {
       $$1245$ph = $97;$$1248$ph = $93;
      }
     } else {
      $$1245$ph = $95;$$1248$ph = $94;
     }
     $$1245 = $$1245$ph;$$1248 = $$1248$ph;
     while(1) {
      $99 = ((($$1245)) + 20|0);
      $100 = HEAP32[$99>>2]|0;
      $101 = ($100|0)==(0|0);
      if ($101) {
       $102 = ((($$1245)) + 16|0);
       $103 = HEAP32[$102>>2]|0;
       $104 = ($103|0)==(0|0);
       if ($104) {
        break;
       } else {
        $$1245$be = $103;$$1248$be = $102;
       }
      } else {
       $$1245$be = $100;$$1248$be = $99;
      }
      $$1245 = $$1245$be;$$1248 = $$1248$be;
     }
     HEAP32[$$1248>>2] = 0;
     $$3 = $$1245;
    } else {
     $89 = ((($5)) + 8|0);
     $90 = HEAP32[$89>>2]|0;
     $91 = ((($90)) + 12|0);
     HEAP32[$91>>2] = $87;
     $92 = ((($87)) + 8|0);
     HEAP32[$92>>2] = $90;
     $$3 = $87;
    }
   } while(0);
   $105 = ($85|0)==(0|0);
   if (!($105)) {
    $106 = ((($5)) + 28|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = (21016 + ($107<<2)|0);
    $109 = HEAP32[$108>>2]|0;
    $110 = ($109|0)==($5|0);
    if ($110) {
     HEAP32[$108>>2] = $$3;
     $cond = ($$3|0)==(0|0);
     if ($cond) {
      $111 = 1 << $107;
      $112 = $111 ^ -1;
      $113 = HEAP32[(20716)>>2]|0;
      $114 = $113 & $112;
      HEAP32[(20716)>>2] = $114;
      break;
     }
    } else {
     $115 = ((($85)) + 16|0);
     $116 = HEAP32[$115>>2]|0;
     $117 = ($116|0)==($5|0);
     $118 = ((($85)) + 20|0);
     $$sink = $117 ? $115 : $118;
     HEAP32[$$sink>>2] = $$3;
     $119 = ($$3|0)==(0|0);
     if ($119) {
      break;
     }
    }
    $120 = ((($$3)) + 24|0);
    HEAP32[$120>>2] = $85;
    $121 = ((($5)) + 16|0);
    $122 = HEAP32[$121>>2]|0;
    $123 = ($122|0)==(0|0);
    if (!($123)) {
     $124 = ((($$3)) + 16|0);
     HEAP32[$124>>2] = $122;
     $125 = ((($122)) + 24|0);
     HEAP32[$125>>2] = $$3;
    }
    $126 = ((($121)) + 4|0);
    $127 = HEAP32[$126>>2]|0;
    $128 = ($127|0)==(0|0);
    if (!($128)) {
     $129 = ((($$3)) + 20|0);
     HEAP32[$129>>2] = $127;
     $130 = ((($127)) + 24|0);
     HEAP32[$130>>2] = $$3;
    }
   }
  }
 } while(0);
 $131 = ($70>>>0)<(16);
 if ($131) {
  $132 = $3 & 1;
  $133 = $132 | $68;
  $134 = $133 | 2;
  HEAP32[$2>>2] = $134;
  $135 = (($0) + ($68)|0);
  $136 = ((($135)) + 4|0);
  $137 = HEAP32[$136>>2]|0;
  $138 = $137 | 1;
  HEAP32[$136>>2] = $138;
  $$2 = $0;
  return ($$2|0);
 } else {
  $139 = (($0) + ($1)|0);
  $140 = $3 & 1;
  $141 = $140 | $1;
  $142 = $141 | 2;
  HEAP32[$2>>2] = $142;
  $143 = ((($139)) + 4|0);
  $144 = $70 | 3;
  HEAP32[$143>>2] = $144;
  $145 = (($0) + ($68)|0);
  $146 = ((($145)) + 4|0);
  $147 = HEAP32[$146>>2]|0;
  $148 = $147 | 1;
  HEAP32[$146>>2] = $148;
  _dispose_chunk($139,$70);
  $$2 = $0;
  return ($$2|0);
 }
 return (0)|0;
}
function _dispose_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$03649 = 0, $$0365$lcssa = 0, $$03658 = 0, $$0376 = 0, $$0383 = 0, $$1 = 0, $$1363 = 0, $$1371 = 0, $$1371$be = 0, $$1371$ph = 0, $$1374 = 0, $$1374$be = 0, $$1374$ph = 0, $$1378 = 0, $$1378$be = 0, $$1378$ph = 0, $$1382 = 0, $$1382$be = 0, $$1382$ph = 0, $$2 = 0;
 var $$3 = 0, $$3380 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink = 0, $$sink24 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $cond4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($0) + ($1)|0);
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)==(0);
 do {
  if ($6) {
   $7 = HEAP32[$0>>2]|0;
   $8 = $4 & 3;
   $9 = ($8|0)==(0);
   if ($9) {
    return;
   }
   $10 = (0 - ($7))|0;
   $11 = (($0) + ($10)|0);
   $12 = (($7) + ($1))|0;
   $13 = HEAP32[(20732)>>2]|0;
   $14 = ($13|0)==($11|0);
   if ($14) {
    $75 = ((($2)) + 4|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = $76 & 3;
    $78 = ($77|0)==(3);
    if (!($78)) {
     $$1 = $11;$$1363 = $12;
     break;
    }
    $79 = ((($11)) + 4|0);
    $80 = $12 | 1;
    $81 = $76 & -2;
    HEAP32[(20720)>>2] = $12;
    HEAP32[$75>>2] = $81;
    HEAP32[$79>>2] = $80;
    HEAP32[$2>>2] = $12;
    return;
   }
   $15 = $7 >>> 3;
   $16 = ($7>>>0)<(256);
   if ($16) {
    $17 = ((($11)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($11)) + 12|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==($18|0);
    if ($21) {
     $22 = 1 << $15;
     $23 = $22 ^ -1;
     $24 = HEAP32[5178]|0;
     $25 = $24 & $23;
     HEAP32[5178] = $25;
     $$1 = $11;$$1363 = $12;
     break;
    } else {
     $26 = ((($18)) + 12|0);
     HEAP32[$26>>2] = $20;
     $27 = ((($20)) + 8|0);
     HEAP32[$27>>2] = $18;
     $$1 = $11;$$1363 = $12;
     break;
    }
   }
   $28 = ((($11)) + 24|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ((($11)) + 12|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ($31|0)==($11|0);
   do {
    if ($32) {
     $37 = ((($11)) + 16|0);
     $38 = ((($37)) + 4|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = ($39|0)==(0|0);
     if ($40) {
      $41 = HEAP32[$37>>2]|0;
      $42 = ($41|0)==(0|0);
      if ($42) {
       $$3 = 0;
       break;
      } else {
       $$1371$ph = $41;$$1374$ph = $37;
      }
     } else {
      $$1371$ph = $39;$$1374$ph = $38;
     }
     $$1371 = $$1371$ph;$$1374 = $$1374$ph;
     while(1) {
      $43 = ((($$1371)) + 20|0);
      $44 = HEAP32[$43>>2]|0;
      $45 = ($44|0)==(0|0);
      if ($45) {
       $46 = ((($$1371)) + 16|0);
       $47 = HEAP32[$46>>2]|0;
       $48 = ($47|0)==(0|0);
       if ($48) {
        break;
       } else {
        $$1371$be = $47;$$1374$be = $46;
       }
      } else {
       $$1371$be = $44;$$1374$be = $43;
      }
      $$1371 = $$1371$be;$$1374 = $$1374$be;
     }
     HEAP32[$$1374>>2] = 0;
     $$3 = $$1371;
    } else {
     $33 = ((($11)) + 8|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = ((($34)) + 12|0);
     HEAP32[$35>>2] = $31;
     $36 = ((($31)) + 8|0);
     HEAP32[$36>>2] = $34;
     $$3 = $31;
    }
   } while(0);
   $49 = ($29|0)==(0|0);
   if ($49) {
    $$1 = $11;$$1363 = $12;
   } else {
    $50 = ((($11)) + 28|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = (21016 + ($51<<2)|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = ($53|0)==($11|0);
    if ($54) {
     HEAP32[$52>>2] = $$3;
     $cond = ($$3|0)==(0|0);
     if ($cond) {
      $55 = 1 << $51;
      $56 = $55 ^ -1;
      $57 = HEAP32[(20716)>>2]|0;
      $58 = $57 & $56;
      HEAP32[(20716)>>2] = $58;
      $$1 = $11;$$1363 = $12;
      break;
     }
    } else {
     $59 = ((($29)) + 16|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = ($60|0)==($11|0);
     $62 = ((($29)) + 20|0);
     $$sink = $61 ? $59 : $62;
     HEAP32[$$sink>>2] = $$3;
     $63 = ($$3|0)==(0|0);
     if ($63) {
      $$1 = $11;$$1363 = $12;
      break;
     }
    }
    $64 = ((($$3)) + 24|0);
    HEAP32[$64>>2] = $29;
    $65 = ((($11)) + 16|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = ($66|0)==(0|0);
    if (!($67)) {
     $68 = ((($$3)) + 16|0);
     HEAP32[$68>>2] = $66;
     $69 = ((($66)) + 24|0);
     HEAP32[$69>>2] = $$3;
    }
    $70 = ((($65)) + 4|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = ($71|0)==(0|0);
    if ($72) {
     $$1 = $11;$$1363 = $12;
    } else {
     $73 = ((($$3)) + 20|0);
     HEAP32[$73>>2] = $71;
     $74 = ((($71)) + 24|0);
     HEAP32[$74>>2] = $$3;
     $$1 = $11;$$1363 = $12;
    }
   }
  } else {
   $$1 = $0;$$1363 = $1;
  }
 } while(0);
 $82 = ((($2)) + 4|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = $83 & 2;
 $85 = ($84|0)==(0);
 if ($85) {
  $86 = HEAP32[(20736)>>2]|0;
  $87 = ($86|0)==($2|0);
  if ($87) {
   $88 = HEAP32[(20724)>>2]|0;
   $89 = (($88) + ($$1363))|0;
   HEAP32[(20724)>>2] = $89;
   HEAP32[(20736)>>2] = $$1;
   $90 = $89 | 1;
   $91 = ((($$1)) + 4|0);
   HEAP32[$91>>2] = $90;
   $92 = HEAP32[(20732)>>2]|0;
   $93 = ($$1|0)==($92|0);
   if (!($93)) {
    return;
   }
   HEAP32[(20732)>>2] = 0;
   HEAP32[(20720)>>2] = 0;
   return;
  }
  $94 = HEAP32[(20732)>>2]|0;
  $95 = ($94|0)==($2|0);
  if ($95) {
   $96 = HEAP32[(20720)>>2]|0;
   $97 = (($96) + ($$1363))|0;
   HEAP32[(20720)>>2] = $97;
   HEAP32[(20732)>>2] = $$1;
   $98 = $97 | 1;
   $99 = ((($$1)) + 4|0);
   HEAP32[$99>>2] = $98;
   $100 = (($$1) + ($97)|0);
   HEAP32[$100>>2] = $97;
   return;
  }
  $101 = $83 & -8;
  $102 = (($101) + ($$1363))|0;
  $103 = $83 >>> 3;
  $104 = ($83>>>0)<(256);
  do {
   if ($104) {
    $105 = ((($2)) + 8|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = ((($2)) + 12|0);
    $108 = HEAP32[$107>>2]|0;
    $109 = ($108|0)==($106|0);
    if ($109) {
     $110 = 1 << $103;
     $111 = $110 ^ -1;
     $112 = HEAP32[5178]|0;
     $113 = $112 & $111;
     HEAP32[5178] = $113;
     break;
    } else {
     $114 = ((($106)) + 12|0);
     HEAP32[$114>>2] = $108;
     $115 = ((($108)) + 8|0);
     HEAP32[$115>>2] = $106;
     break;
    }
   } else {
    $116 = ((($2)) + 24|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = ((($2)) + 12|0);
    $119 = HEAP32[$118>>2]|0;
    $120 = ($119|0)==($2|0);
    do {
     if ($120) {
      $125 = ((($2)) + 16|0);
      $126 = ((($125)) + 4|0);
      $127 = HEAP32[$126>>2]|0;
      $128 = ($127|0)==(0|0);
      if ($128) {
       $129 = HEAP32[$125>>2]|0;
       $130 = ($129|0)==(0|0);
       if ($130) {
        $$3380 = 0;
        break;
       } else {
        $$1378$ph = $129;$$1382$ph = $125;
       }
      } else {
       $$1378$ph = $127;$$1382$ph = $126;
      }
      $$1378 = $$1378$ph;$$1382 = $$1382$ph;
      while(1) {
       $131 = ((($$1378)) + 20|0);
       $132 = HEAP32[$131>>2]|0;
       $133 = ($132|0)==(0|0);
       if ($133) {
        $134 = ((($$1378)) + 16|0);
        $135 = HEAP32[$134>>2]|0;
        $136 = ($135|0)==(0|0);
        if ($136) {
         break;
        } else {
         $$1378$be = $135;$$1382$be = $134;
        }
       } else {
        $$1378$be = $132;$$1382$be = $131;
       }
       $$1378 = $$1378$be;$$1382 = $$1382$be;
      }
      HEAP32[$$1382>>2] = 0;
      $$3380 = $$1378;
     } else {
      $121 = ((($2)) + 8|0);
      $122 = HEAP32[$121>>2]|0;
      $123 = ((($122)) + 12|0);
      HEAP32[$123>>2] = $119;
      $124 = ((($119)) + 8|0);
      HEAP32[$124>>2] = $122;
      $$3380 = $119;
     }
    } while(0);
    $137 = ($117|0)==(0|0);
    if (!($137)) {
     $138 = ((($2)) + 28|0);
     $139 = HEAP32[$138>>2]|0;
     $140 = (21016 + ($139<<2)|0);
     $141 = HEAP32[$140>>2]|0;
     $142 = ($141|0)==($2|0);
     if ($142) {
      HEAP32[$140>>2] = $$3380;
      $cond4 = ($$3380|0)==(0|0);
      if ($cond4) {
       $143 = 1 << $139;
       $144 = $143 ^ -1;
       $145 = HEAP32[(20716)>>2]|0;
       $146 = $145 & $144;
       HEAP32[(20716)>>2] = $146;
       break;
      }
     } else {
      $147 = ((($117)) + 16|0);
      $148 = HEAP32[$147>>2]|0;
      $149 = ($148|0)==($2|0);
      $150 = ((($117)) + 20|0);
      $$sink24 = $149 ? $147 : $150;
      HEAP32[$$sink24>>2] = $$3380;
      $151 = ($$3380|0)==(0|0);
      if ($151) {
       break;
      }
     }
     $152 = ((($$3380)) + 24|0);
     HEAP32[$152>>2] = $117;
     $153 = ((($2)) + 16|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = ($154|0)==(0|0);
     if (!($155)) {
      $156 = ((($$3380)) + 16|0);
      HEAP32[$156>>2] = $154;
      $157 = ((($154)) + 24|0);
      HEAP32[$157>>2] = $$3380;
     }
     $158 = ((($153)) + 4|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = ($159|0)==(0|0);
     if (!($160)) {
      $161 = ((($$3380)) + 20|0);
      HEAP32[$161>>2] = $159;
      $162 = ((($159)) + 24|0);
      HEAP32[$162>>2] = $$3380;
     }
    }
   }
  } while(0);
  $163 = $102 | 1;
  $164 = ((($$1)) + 4|0);
  HEAP32[$164>>2] = $163;
  $165 = (($$1) + ($102)|0);
  HEAP32[$165>>2] = $102;
  $166 = HEAP32[(20732)>>2]|0;
  $167 = ($$1|0)==($166|0);
  if ($167) {
   HEAP32[(20720)>>2] = $102;
   return;
  } else {
   $$2 = $102;
  }
 } else {
  $168 = $83 & -2;
  HEAP32[$82>>2] = $168;
  $169 = $$1363 | 1;
  $170 = ((($$1)) + 4|0);
  HEAP32[$170>>2] = $169;
  $171 = (($$1) + ($$1363)|0);
  HEAP32[$171>>2] = $$1363;
  $$2 = $$1363;
 }
 $172 = $$2 >>> 3;
 $173 = ($$2>>>0)<(256);
 if ($173) {
  $174 = $172 << 1;
  $175 = (20752 + ($174<<2)|0);
  $176 = HEAP32[5178]|0;
  $177 = 1 << $172;
  $178 = $176 & $177;
  $179 = ($178|0)==(0);
  if ($179) {
   $180 = $176 | $177;
   HEAP32[5178] = $180;
   $$pre = ((($175)) + 8|0);
   $$0383 = $175;$$pre$phiZ2D = $$pre;
  } else {
   $181 = ((($175)) + 8|0);
   $182 = HEAP32[$181>>2]|0;
   $$0383 = $182;$$pre$phiZ2D = $181;
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $183 = ((($$0383)) + 12|0);
  HEAP32[$183>>2] = $$1;
  $184 = ((($$1)) + 8|0);
  HEAP32[$184>>2] = $$0383;
  $185 = ((($$1)) + 12|0);
  HEAP32[$185>>2] = $175;
  return;
 }
 $186 = $$2 >>> 8;
 $187 = ($186|0)==(0);
 if ($187) {
  $$0376 = 0;
 } else {
  $188 = ($$2>>>0)>(16777215);
  if ($188) {
   $$0376 = 31;
  } else {
   $189 = (($186) + 1048320)|0;
   $190 = $189 >>> 16;
   $191 = $190 & 8;
   $192 = $186 << $191;
   $193 = (($192) + 520192)|0;
   $194 = $193 >>> 16;
   $195 = $194 & 4;
   $196 = $195 | $191;
   $197 = $192 << $195;
   $198 = (($197) + 245760)|0;
   $199 = $198 >>> 16;
   $200 = $199 & 2;
   $201 = $196 | $200;
   $202 = (14 - ($201))|0;
   $203 = $197 << $200;
   $204 = $203 >>> 15;
   $205 = (($202) + ($204))|0;
   $206 = $205 << 1;
   $207 = (($205) + 7)|0;
   $208 = $$2 >>> $207;
   $209 = $208 & 1;
   $210 = $209 | $206;
   $$0376 = $210;
  }
 }
 $211 = (21016 + ($$0376<<2)|0);
 $212 = ((($$1)) + 28|0);
 HEAP32[$212>>2] = $$0376;
 $213 = ((($$1)) + 16|0);
 $214 = ((($$1)) + 20|0);
 HEAP32[$214>>2] = 0;
 HEAP32[$213>>2] = 0;
 $215 = HEAP32[(20716)>>2]|0;
 $216 = 1 << $$0376;
 $217 = $215 & $216;
 $218 = ($217|0)==(0);
 if ($218) {
  $219 = $215 | $216;
  HEAP32[(20716)>>2] = $219;
  HEAP32[$211>>2] = $$1;
  $220 = ((($$1)) + 24|0);
  HEAP32[$220>>2] = $211;
  $221 = ((($$1)) + 12|0);
  HEAP32[$221>>2] = $$1;
  $222 = ((($$1)) + 8|0);
  HEAP32[$222>>2] = $$1;
  return;
 }
 $223 = HEAP32[$211>>2]|0;
 $224 = ((($223)) + 4|0);
 $225 = HEAP32[$224>>2]|0;
 $226 = $225 & -8;
 $227 = ($226|0)==($$2|0);
 L104: do {
  if ($227) {
   $$0365$lcssa = $223;
  } else {
   $228 = ($$0376|0)==(31);
   $229 = $$0376 >>> 1;
   $230 = (25 - ($229))|0;
   $231 = $228 ? 0 : $230;
   $232 = $$2 << $231;
   $$03649 = $232;$$03658 = $223;
   while(1) {
    $239 = $$03649 >>> 31;
    $240 = (((($$03658)) + 16|0) + ($239<<2)|0);
    $235 = HEAP32[$240>>2]|0;
    $241 = ($235|0)==(0|0);
    if ($241) {
     break;
    }
    $233 = $$03649 << 1;
    $234 = ((($235)) + 4|0);
    $236 = HEAP32[$234>>2]|0;
    $237 = $236 & -8;
    $238 = ($237|0)==($$2|0);
    if ($238) {
     $$0365$lcssa = $235;
     break L104;
    } else {
     $$03649 = $233;$$03658 = $235;
    }
   }
   HEAP32[$240>>2] = $$1;
   $242 = ((($$1)) + 24|0);
   HEAP32[$242>>2] = $$03658;
   $243 = ((($$1)) + 12|0);
   HEAP32[$243>>2] = $$1;
   $244 = ((($$1)) + 8|0);
   HEAP32[$244>>2] = $$1;
   return;
  }
 } while(0);
 $245 = ((($$0365$lcssa)) + 8|0);
 $246 = HEAP32[$245>>2]|0;
 $247 = ((($246)) + 12|0);
 HEAP32[$247>>2] = $$1;
 HEAP32[$245>>2] = $$1;
 $248 = ((($$1)) + 8|0);
 HEAP32[$248>>2] = $246;
 $249 = ((($$1)) + 12|0);
 HEAP32[$249>>2] = $$0365$lcssa;
 $250 = ((($$1)) + 24|0);
 HEAP32[$250>>2] = 0;
 return;
}
function _sbrk($0) {
 $0 = $0|0;
 var $$2 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_emscripten_get_sbrk_ptr()|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + ($0))|0;
 $4 = ($3|0)<(0);
 if ($4) {
  HEAP32[5168] = 48;
  $$2 = (-1);
  return ($$2|0);
 }
 $5 = (_emscripten_get_heap_size()|0);
 $6 = ($3>>>0)>($5>>>0);
 if ($6) {
  $7 = (_emscripten_resize_heap(($3|0))|0);
  $8 = ($7|0)==(0);
  if ($8) {
   HEAP32[5168] = 48;
   $$2 = (-1);
   return ($$2|0);
  }
 }
 HEAP32[$1>>2] = $3;
 $9 = $2;
 $$2 = $9;
 return ($$2|0);
}
function ___muldsi3($a, $b) {
    $a = $a | 0;
    $b = $b | 0;
    var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
    $1 = $a & 65535;
    $2 = $b & 65535;
    $3 = Math_imul($2, $1) | 0;
    $6 = $a >>> 16;
    $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
    $11 = $b >>> 16;
    $12 = Math_imul($11, $1) | 0;
    return (setTempRet0(((($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0) | 0), 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
    $x_sroa_0_0_extract_trunc = $a$0;
    $y_sroa_0_0_extract_trunc = $b$0;
    $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
    $1$1 = (getTempRet0() | 0);
    $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
    return (setTempRet0((((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0) | 0), 0 | $1$0 & -1) | 0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((setTempRet0((h) | 0),l|0)|0);
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((setTempRet0((h) | 0),l|0)|0);
}
function _llvm_cttz_i32(x) { // Note: Currently doesn't take isZeroUndef()
    x = x | 0;
    return (x ? (31 - (Math_clz32((x ^ (x - 1))) | 0) | 0) : 32) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    $rem = $rem | 0;
    var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
    $n_sroa_0_0_extract_trunc = $a$0;
    $n_sroa_1_4_extract_shift$0 = $a$1;
    $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
    $d_sroa_0_0_extract_trunc = $b$0;
    $d_sroa_1_4_extract_shift$0 = $b$1;
    $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
    if (($n_sroa_1_4_extract_trunc | 0) == 0) {
      $4 = ($rem | 0) != 0;
      if (($d_sroa_1_4_extract_trunc | 0) == 0) {
        if ($4) {
          HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
      } else {
        if (!$4) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
      }
    }
    $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
    do {
      if (($d_sroa_0_0_extract_trunc | 0) == 0) {
        if ($17) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
            HEAP32[$rem + 4 >> 2] = 0;
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        if (($n_sroa_0_0_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0;
            HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
        if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0 | $a$0 & -1;
            HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
          }
          $_0$1 = 0;
          $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($51 >>> 0 <= 30) {
          $57 = $51 + 1 | 0;
          $58 = 31 - $51 | 0;
          $sr_1_ph = $57;
          $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
      } else {
        if (!$17) {
          $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
          $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          if ($119 >>> 0 <= 31) {
            $125 = $119 + 1 | 0;
            $126 = 31 - $119 | 0;
            $130 = $119 - 31 >> 31;
            $sr_1_ph = $125;
            $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
            $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
            $q_sroa_0_1_ph = 0;
            $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
            break;
          }
          if (($rem | 0) == 0) {
            $_0$1 = 0;
            $_0$0 = 0;
            return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
          }
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$1 = 0;
          $_0$0 = 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
        if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
          $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
          $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          $89 = 64 - $88 | 0;
          $91 = 32 - $88 | 0;
          $92 = $91 >> 31;
          $95 = $88 - 32 | 0;
          $105 = $95 >> 31;
          $sr_1_ph = $88;
          $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
          $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
          $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
          $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
          break;
        }
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
          HEAP32[$rem + 4 >> 2] = 0;
        }
        if (($d_sroa_0_0_extract_trunc | 0) == 1) {
          $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$0 = 0 | $a$0 & -1;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        } else {
          $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
          $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
          $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
      }
    } while (0);
    if (($sr_1_ph | 0) == 0) {
      $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
      $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
      $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
      $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = 0;
    } else {
      $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
      $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
      $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
      $137$1 = (getTempRet0() | 0);
      $q_sroa_1_1198 = $q_sroa_1_1_ph;
      $q_sroa_0_1199 = $q_sroa_0_1_ph;
      $r_sroa_1_1200 = $r_sroa_1_1_ph;
      $r_sroa_0_1201 = $r_sroa_0_1_ph;
      $sr_1202 = $sr_1_ph;
      $carry_0203 = 0;
      while (1) {
        $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
        $149 = $carry_0203 | $q_sroa_0_1199 << 1;
        $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
        $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
        _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
        $150$1 = (getTempRet0() | 0);
        $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
        $152 = $151$0 & 1;
        $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
        $r_sroa_0_0_extract_trunc = $154$0;
        $r_sroa_1_4_extract_trunc = (getTempRet0() | 0);
        $155 = $sr_1202 - 1 | 0;
        if (($155 | 0) == 0) {
          break;
        } else {
          $q_sroa_1_1198 = $147;
          $q_sroa_0_1199 = $149;
          $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
          $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
          $sr_1202 = $155;
          $carry_0203 = $152;
        }
      }
      $q_sroa_1_1_lcssa = $147;
      $q_sroa_0_1_lcssa = $149;
      $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
      $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = $152;
    }
    $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
    $q_sroa_0_0_insert_ext75$1 = 0;
    $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
    if (($rem | 0) != 0) {
      HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
      HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
    }
    $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
    $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
    return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $1$0 = 0;
    $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
    return $1$0 | 0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      setTempRet0((high >>> bits) | 0);
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    setTempRet0((0) | 0);
    return (high >>> (bits - 32))|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      setTempRet0(((high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits))) | 0);
      return low << bits;
    }
    setTempRet0((low << (bits - 32)) | 0);
    return 0;
}
function _emscripten_get_sbrk_ptr() {
    return 21232;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    var aligned_dest_end = 0;
    var block_aligned_dest_end = 0;
    var dest_end = 0;
    // Test against a benchmarked cutoff limit for when HEAPU8.set() becomes faster to use.
    if ((num|0) >= 8192) {
      _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
      return dest|0;
    }

    ret = dest|0;
    dest_end = (dest + num)|0;
    if ((dest&3) == (src&3)) {
      // The initial unaligned < 4-byte front.
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      aligned_dest_end = (dest_end & -4)|0;
      block_aligned_dest_end = (aligned_dest_end - 64)|0;
      while ((dest|0) <= (block_aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        HEAP32[(((dest)+(4))>>2)]=((HEAP32[(((src)+(4))>>2)])|0);
        HEAP32[(((dest)+(8))>>2)]=((HEAP32[(((src)+(8))>>2)])|0);
        HEAP32[(((dest)+(12))>>2)]=((HEAP32[(((src)+(12))>>2)])|0);
        HEAP32[(((dest)+(16))>>2)]=((HEAP32[(((src)+(16))>>2)])|0);
        HEAP32[(((dest)+(20))>>2)]=((HEAP32[(((src)+(20))>>2)])|0);
        HEAP32[(((dest)+(24))>>2)]=((HEAP32[(((src)+(24))>>2)])|0);
        HEAP32[(((dest)+(28))>>2)]=((HEAP32[(((src)+(28))>>2)])|0);
        HEAP32[(((dest)+(32))>>2)]=((HEAP32[(((src)+(32))>>2)])|0);
        HEAP32[(((dest)+(36))>>2)]=((HEAP32[(((src)+(36))>>2)])|0);
        HEAP32[(((dest)+(40))>>2)]=((HEAP32[(((src)+(40))>>2)])|0);
        HEAP32[(((dest)+(44))>>2)]=((HEAP32[(((src)+(44))>>2)])|0);
        HEAP32[(((dest)+(48))>>2)]=((HEAP32[(((src)+(48))>>2)])|0);
        HEAP32[(((dest)+(52))>>2)]=((HEAP32[(((src)+(52))>>2)])|0);
        HEAP32[(((dest)+(56))>>2)]=((HEAP32[(((src)+(56))>>2)])|0);
        HEAP32[(((dest)+(60))>>2)]=((HEAP32[(((src)+(60))>>2)])|0);
        dest = (dest+64)|0;
        src = (src+64)|0;
      }
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    } else {
      // In the unaligned copy case, unroll a bit as well.
      aligned_dest_end = (dest_end - 4)|0;
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        HEAP8[(((dest)+(1))>>0)]=((HEAP8[(((src)+(1))>>0)])|0);
        HEAP8[(((dest)+(2))>>0)]=((HEAP8[(((src)+(2))>>0)])|0);
        HEAP8[(((dest)+(3))>>0)]=((HEAP8[(((src)+(3))>>0)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    }
    // The remaining unaligned < 4 byte tail.
    while ((dest|0) < (dest_end|0)) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
    }
    return ret|0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
    end = (ptr + num)|0;

    value = value & 0xff;
    if ((num|0) >= 67 /* 64 bytes for an unrolled loop + 3 bytes for unaligned head*/) {
      while ((ptr&3) != 0) {
        HEAP8[((ptr)>>0)]=value;
        ptr = (ptr+1)|0;
      }

      aligned_end = (end & -4)|0;
      value4 = value | (value << 8) | (value << 16) | (value << 24);

      block_aligned_end = (aligned_end - 64)|0;

      while((ptr|0) <= (block_aligned_end|0)) {
        HEAP32[((ptr)>>2)]=value4;
        HEAP32[(((ptr)+(4))>>2)]=value4;
        HEAP32[(((ptr)+(8))>>2)]=value4;
        HEAP32[(((ptr)+(12))>>2)]=value4;
        HEAP32[(((ptr)+(16))>>2)]=value4;
        HEAP32[(((ptr)+(20))>>2)]=value4;
        HEAP32[(((ptr)+(24))>>2)]=value4;
        HEAP32[(((ptr)+(28))>>2)]=value4;
        HEAP32[(((ptr)+(32))>>2)]=value4;
        HEAP32[(((ptr)+(36))>>2)]=value4;
        HEAP32[(((ptr)+(40))>>2)]=value4;
        HEAP32[(((ptr)+(44))>>2)]=value4;
        HEAP32[(((ptr)+(48))>>2)]=value4;
        HEAP32[(((ptr)+(52))>>2)]=value4;
        HEAP32[(((ptr)+(56))>>2)]=value4;
        HEAP32[(((ptr)+(60))>>2)]=value4;
        ptr = (ptr + 64)|0;
      }

      while ((ptr|0) < (aligned_end|0) ) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    // The remaining bytes.
    while ((ptr|0) < (end|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (end-num)|0;
}

  
function dynCall_i(index) {
  index = index|0;
  
  return FUNCTION_TABLE_i[index&31]()|0;
}


function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&255](a1|0)|0;
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&255](a1|0,a2|0)|0;
}


function dynCall_iiid(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=+a3;
  return FUNCTION_TABLE_iiid[index&255](a1|0,a2|0,+a3)|0;
}


function dynCall_iiidd(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=+a3; a4=+a4;
  return FUNCTION_TABLE_iiidd[index&127](a1|0,a2|0,+a3,+a4)|0;
}


function dynCall_iiiddd(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=+a3; a4=+a4; a5=+a5;
  return FUNCTION_TABLE_iiiddd[index&127](a1|0,a2|0,+a3,+a4,+a5)|0;
}


function dynCall_iiidddd(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=+a3; a4=+a4; a5=+a5; a6=+a6;
  return FUNCTION_TABLE_iiidddd[index&127](a1|0,a2|0,+a3,+a4,+a5,+a6)|0;
}


function dynCall_iiiddddddi(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=+a3; a4=+a4; a5=+a5; a6=+a6; a7=+a7; a8=+a8; a9=a9|0;
  return FUNCTION_TABLE_iiiddddddi[index&127](a1|0,a2|0,+a3,+a4,+a5,+a6,+a7,+a8,a9|0)|0;
}


function dynCall_iiiddi(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=+a3; a4=+a4; a5=a5|0;
  return FUNCTION_TABLE_iiiddi[index&127](a1|0,a2|0,+a3,+a4,a5|0)|0;
}


function dynCall_iiidii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=+a3; a4=a4|0; a5=a5|0;
  return FUNCTION_TABLE_iiidii[index&127](a1|0,a2|0,+a3,a4|0,a5|0)|0;
}


function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&255](a1|0,a2|0,a3|0)|0;
}


function dynCall_iiiid(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=+a4;
  return FUNCTION_TABLE_iiiid[index&255](a1|0,a2|0,a3|0,+a4)|0;
}


function dynCall_iiiidd(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=+a4; a5=+a5;
  return FUNCTION_TABLE_iiiidd[index&255](a1|0,a2|0,a3|0,+a4,+a5)|0;
}


function dynCall_iiiiddd(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=+a4; a5=+a5; a6=+a6;
  return FUNCTION_TABLE_iiiiddd[index&255](a1|0,a2|0,a3|0,+a4,+a5,+a6)|0;
}


function dynCall_iiiidddd(index,a1,a2,a3,a4,a5,a6,a7) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=+a4; a5=+a5; a6=+a6; a7=+a7;
  return FUNCTION_TABLE_iiiidddd[index&255](a1|0,a2|0,a3|0,+a4,+a5,+a6,+a7)|0;
}


function dynCall_iiiiddddddi(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=+a4; a5=+a5; a6=+a6; a7=+a7; a8=+a8; a9=+a9; a10=a10|0;
  return FUNCTION_TABLE_iiiiddddddi[index&255](a1|0,a2|0,a3|0,+a4,+a5,+a6,+a7,+a8,+a9,a10|0)|0;
}


function dynCall_iiiiddi(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=+a4; a5=+a5; a6=a6|0;
  return FUNCTION_TABLE_iiiiddi[index&255](a1|0,a2|0,a3|0,+a4,+a5,a6|0)|0;
}


function dynCall_iiiididi(index,a1,a2,a3,a4,a5,a6,a7) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=+a4; a5=a5|0; a6=+a6; a7=a7|0;
  return FUNCTION_TABLE_iiiididi[index&255](a1|0,a2|0,a3|0,+a4,a5|0,+a6,a7|0)|0;
}


function dynCall_iiiidii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=+a4; a5=a5|0; a6=a6|0;
  return FUNCTION_TABLE_iiiidii[index&255](a1|0,a2|0,a3|0,+a4,a5|0,a6|0)|0;
}


function dynCall_iiiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return FUNCTION_TABLE_iiiii[index&255](a1|0,a2|0,a3|0,a4|0)|0;
}


function dynCall_iiiiid(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=+a5;
  return FUNCTION_TABLE_iiiiid[index&255](a1|0,a2|0,a3|0,a4|0,+a5)|0;
}


function dynCall_iiiiidd(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=+a5; a6=+a6;
  return FUNCTION_TABLE_iiiiidd[index&255](a1|0,a2|0,a3|0,a4|0,+a5,+a6)|0;
}


function dynCall_iiiiidid(index,a1,a2,a3,a4,a5,a6,a7) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=+a5; a6=a6|0; a7=+a7;
  return FUNCTION_TABLE_iiiiidid[index&255](a1|0,a2|0,a3|0,a4|0,+a5,a6|0,+a7)|0;
}


function dynCall_iiiiididi(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=+a5; a6=a6|0; a7=+a7; a8=a8|0;
  return FUNCTION_TABLE_iiiiididi[index&255](a1|0,a2|0,a3|0,a4|0,+a5,a6|0,+a7,a8|0)|0;
}


function dynCall_iiiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  return FUNCTION_TABLE_iiiiii[index&255](a1|0,a2|0,a3|0,a4|0,a5|0)|0;
}


function dynCall_iiiiiid(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=+a6;
  return FUNCTION_TABLE_iiiiiid[index&255](a1|0,a2|0,a3|0,a4|0,a5|0,+a6)|0;
}


function dynCall_iiiiiidid(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=+a6; a7=a7|0; a8=+a8;
  return FUNCTION_TABLE_iiiiiidid[index&255](a1|0,a2|0,a3|0,a4|0,a5|0,+a6,a7|0,+a8)|0;
}


function dynCall_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  return FUNCTION_TABLE_iiiiiii[index&255](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0)|0;
}


function dynCall_iiiiiiid(index,a1,a2,a3,a4,a5,a6,a7) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=+a7;
  return FUNCTION_TABLE_iiiiiiid[index&255](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,+a7)|0;
}


function dynCall_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
  return FUNCTION_TABLE_iiiiiiii[index&255](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0)|0;
}


function dynCall_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
  return FUNCTION_TABLE_iiiiiiiii[index&255](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0)|0;
}


function dynCall_iiiiiiiiiid(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=+a10;
  return FUNCTION_TABLE_iiiiiiiiiid[index&255](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,+a10)|0;
}


function dynCall_iiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0;
  return FUNCTION_TABLE_iiiiiiiiiii[index&255](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0)|0;
}


function dynCall_iiiiiiiiiiid(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=+a11;
  return FUNCTION_TABLE_iiiiiiiiiiid[index&255](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,+a11)|0;
}


function dynCall_iiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0;
  return FUNCTION_TABLE_iiiiiiiiiiii[index&255](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0)|0;
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&31](a1|0);
}


function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&31](a1|0,a2|0,a3|0,a4|0);
}


function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  FUNCTION_TABLE_viiiii[index&31](a1|0,a2|0,a3|0,a4|0,a5|0);
}


function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  FUNCTION_TABLE_viiiiii[index&31](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}

function b0() {
 ; nullFunc_i(0);return 0;
}
function b1(p0) {
 p0 = p0|0; nullFunc_ii(1);return 0;
}
function b2(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(2);return 0;
}
function b3(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = +p2; nullFunc_iiid(3);return 0;
}
function b4(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = +p2;p3 = +p3; nullFunc_iiidd(4);return 0;
}
function b5(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = +p2;p3 = +p3;p4 = +p4; nullFunc_iiiddd(5);return 0;
}
function b6(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = +p2;p3 = +p3;p4 = +p4;p5 = +p5; nullFunc_iiidddd(6);return 0;
}
function b7(p0,p1,p2,p3,p4,p5,p6,p7,p8) {
 p0 = p0|0;p1 = p1|0;p2 = +p2;p3 = +p3;p4 = +p4;p5 = +p5;p6 = +p6;p7 = +p7;p8 = p8|0; nullFunc_iiiddddddi(7);return 0;
}
function b8(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = +p2;p3 = +p3;p4 = p4|0; nullFunc_iiiddi(8);return 0;
}
function b9(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = +p2;p3 = p3|0;p4 = p4|0; nullFunc_iiidii(9);return 0;
}
function b10(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(10);return 0;
}
function b11(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = +p3; nullFunc_iiiid(11);return 0;
}
function b12(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = +p3;p4 = +p4; nullFunc_iiiidd(12);return 0;
}
function b13(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = +p3;p4 = +p4;p5 = +p5; nullFunc_iiiiddd(13);return 0;
}
function b14(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = +p3;p4 = +p4;p5 = +p5;p6 = +p6; nullFunc_iiiidddd(14);return 0;
}
function b15(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = +p3;p4 = +p4;p5 = +p5;p6 = +p6;p7 = +p7;p8 = +p8;p9 = p9|0; nullFunc_iiiiddddddi(15);return 0;
}
function b16(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = +p3;p4 = +p4;p5 = p5|0; nullFunc_iiiiddi(16);return 0;
}
function b17(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = +p3;p4 = p4|0;p5 = +p5;p6 = p6|0; nullFunc_iiiididi(17);return 0;
}
function b18(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = +p3;p4 = p4|0;p5 = p5|0; nullFunc_iiiidii(18);return 0;
}
function b19(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(19);return 0;
}
function b20(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = +p4; nullFunc_iiiiid(20);return 0;
}
function b21(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = +p4;p5 = +p5; nullFunc_iiiiidd(21);return 0;
}
function b22(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = +p4;p5 = p5|0;p6 = +p6; nullFunc_iiiiidid(22);return 0;
}
function b23(p0,p1,p2,p3,p4,p5,p6,p7) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = +p4;p5 = p5|0;p6 = +p6;p7 = p7|0; nullFunc_iiiiididi(23);return 0;
}
function b24(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(24);return 0;
}
function b25(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = +p5; nullFunc_iiiiiid(25);return 0;
}
function b26(p0,p1,p2,p3,p4,p5,p6,p7) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = +p5;p6 = p6|0;p7 = +p7; nullFunc_iiiiiidid(26);return 0;
}
function b27(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iiiiiii(27);return 0;
}
function b28(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = +p6; nullFunc_iiiiiiid(28);return 0;
}
function b29(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_iiiiiiii(29);return 0;
}
function b30(p0,p1,p2,p3,p4,p5,p6,p7) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0; nullFunc_iiiiiiiii(30);return 0;
}
function b31(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0;p9 = +p9; nullFunc_iiiiiiiiiid(31);return 0;
}
function b32(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0;p9 = p9|0; nullFunc_iiiiiiiiiii(32);return 0;
}
function b33(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0;p9 = p9|0;p10 = +p10; nullFunc_iiiiiiiiiiid(33);return 0;
}
function b34(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0;p9 = p9|0;p10 = p10|0; nullFunc_iiiiiiiiiiii(34);return 0;
}
function b35(p0) {
 p0 = p0|0; nullFunc_vi(35);
}
function b36(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(36);
}
function b37(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(37);
}
function b38(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(38);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_i = [b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,__ZN10emscripten8internal12operator_newI6EpanetJEEEPT_DpOT0_];
var FUNCTION_TABLE_ii = [b1,___stdio_close,b1,b1,___emscripten_stdout_close,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,__ZN10emscripten8internal13getActualTypeI6EpanetEEPKvPT_,b1,b1,b1,__ZN6Epanet5closeEv,b1,b1,b1,b1,b1,b1,__ZN6Epanet6solveHEv,b1,__ZN6Epanet5openHEv,b1,b1,b1,__ZN6Epanet5saveHEv,b1,__ZN6Epanet6closeHEv,__ZN6Epanet6closeQEv,b1,b1,__ZN6Epanet5openQEv,b1,__ZN6Epanet6solveQEv,b1,__ZN6Epanet11clearreportEv,b1,b1
,b1,__ZN6Epanet6reportEv,__ZN6Epanet11resetreportEv,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,__Z10getversionm,b1,b1,__ZN10emscripten8internal7InvokerIP6EpanetJEE6invokeEPFS3_vE,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1];
var FUNCTION_TABLE_iii = [b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZN6Epanet11saveinpfileENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,b2,__ZN6Epanet10usehydfileENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,b2,__ZN6Epanet5initHEi,__ZN6Epanet4runHEm,__ZN6Epanet5nextHEm,b2,__ZN6Epanet11savehydfileENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,b2,b2,__ZN6Epanet5initQEi,__ZN6Epanet5nextQEm,b2,__ZN6Epanet4runQEm,b2,__ZN6Epanet5stepQEm,b2,__ZN6Epanet10copyreportENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,b2
,b2,b2,b2,__ZN6Epanet9setreportENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,__ZN6Epanet15setstatusreportEi,__ZN6Epanet9writelineENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,__ZN6Epanet12getflowunitsEm,b2,b2,b2,b2,__ZN6Epanet12setflowunitsEi,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZN6Epanet10addpatternENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,__ZN6Epanet13deletepatternEi,b2
,b2,b2,b2,b2,b2,b2,b2,__ZN6Epanet8addcurveENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,__ZN6Epanet11deletecurveEi,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZN6Epanet13deletecontrolEi,b2,b2,__ZN6Epanet7addruleENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,__ZN6Epanet10deleteruleEi,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,__ZN10emscripten8internal7InvokerIiJmEE6invokeEPFimEm,b2,b2,__Z8geterroril,b2,b2,__ZN10emscripten8internal13MethodInvokerIM6EpanetFivEiPS2_JEE6invokeERKS4_S5_,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2];
var FUNCTION_TABLE_iiid = [b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN6Epanet9setoptionEid,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,__ZN6Epanet15setrulepriorityEid,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3];
var FUNCTION_TABLE_iiidd = [b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZN6Epanet8setcoordEidd,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4];
var FUNCTION_TABLE_iiiddd = [b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,__ZN6Epanet14setdemandmodelEiddd,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5];
var FUNCTION_TABLE_iiidddd = [b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN6Epanet11setpipedataEidddd,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6];
var FUNCTION_TABLE_iiiddddddi = [b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZN6Epanet11settankdataEiddddddNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7];
var FUNCTION_TABLE_iiiddi = [b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZN6Epanet11setjuncdataEiddNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8];
var FUNCTION_TABLE_iiidii = [b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZN6Epanet9adddemandEidNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES6_,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9];
var FUNCTION_TABLE_iiii = [b10,b10,___stdio_read,b10,b10,___stdio_write,b10,_sn_write,b10,b10,b10,b10,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,b10,b10,b10,b10,b10,b10,b10,b10,__ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv,b10,__ZNK10__cxxabiv119__pointer_type_info9can_catchEPKNS_16__shim_type_infoERPv,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,__ZN6Epanet8getcountEim,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,__ZN6Epanet12getstatisticEil,b10,b10,b10,b10,b10,b10,__ZN6Epanet9getoptionEim,b10,__ZN6Epanet11getqualtypeEmm,__ZN6Epanet12gettimeparamEim,b10,b10,b10,__ZN6Epanet12settimeparamEil,b10,__ZN6Epanet10deletenodeEii,b10,__ZN6Epanet9getnodeidEil,__ZN6Epanet12getnodeindexENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEl,__ZN6Epanet11getnodetypeEil,b10,b10,b10,__ZN6Epanet9setnodeidEiNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,b10,b10,b10,__ZN6Epanet12deletedemandEii,b10
,b10,b10,b10,b10,__ZN6Epanet13getnumdemandsEil,b10,b10,b10,b10,b10,__ZN6Epanet10deletelinkEii,__ZN6Epanet17getheadcurveindexEil,__ZN6Epanet9getlinkidEil,__ZN6Epanet12getlinkindexENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEl,b10,__ZN6Epanet11getlinktypeEil,b10,__ZN6Epanet11getpumptypeEil,b10,__ZN6Epanet14getvertexcountEil,__ZN6Epanet17setheadcurveindexEii,__ZN6Epanet9setlinkidEiNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,b10,b10,b10,b10,b10,b10,b10,__ZN6Epanet22getaveragepatternvalueEil
,__ZN6Epanet12getpatternidEil,__ZN6Epanet15getpatternindexENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEl,__ZN6Epanet13getpatternlenEil,b10,b10,__ZN6Epanet12setpatternidEiNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,b10,b10,b10,__ZN6Epanet10getcurveidEil,__ZN6Epanet13getcurveindexENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEl,__ZN6Epanet11getcurvelenEil,__ZN6Epanet12getcurvetypeEil,b10,b10,__ZN6Epanet10setcurveidEiNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZN6Epanet9getruleIDEil,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,__ZN10emscripten8internal7InvokerIiJilEE6invokeEPFiilEil,b10,b10,b10,b10,b10,b10,b10,__ZN10emscripten8internal13MethodInvokerIM6EpanetFiNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEiPS2_JS9_EE6invokeERKSB_SC_PNS0_11BindingTypeIS9_vEUt_E,__ZN10emscripten8internal13MethodInvokerIM6EpanetFiiEiPS2_JiEE6invokeERKS4_S5_i,__ZN10emscripten8internal13MethodInvokerIM6EpanetFimEiPS2_JmEE6invokeERKS4_S5_m,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10];
var FUNCTION_TABLE_iiiid = [b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,__ZN6Epanet12setnodevalueEiid,b11,b11,b11,b11
,b11,b11,b11,b11,b11,__ZN6Epanet13setbasedemandEiid,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,__ZN6Epanet12setlinkvalueEiid,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,__ZN6Epanet15setpatternvalueEiid,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,__ZN6Epanet15setpremisevalueEiid,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,__ZN10emscripten8internal13MethodInvokerIM6EpanetFiidEiPS2_JidEE6invokeERKS4_S5_id,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11];
var FUNCTION_TABLE_iiiidd = [b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZN6Epanet13setcurvevalueEiidd,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZN10emscripten8internal13MethodInvokerIM6EpanetFiiddEiPS2_JiddEE6invokeERKS4_S5_idd,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12];
var FUNCTION_TABLE_iiiiddd = [b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,__ZN10emscripten8internal13MethodInvokerIM6EpanetFiidddEiPS2_JidddEE6invokeERKS4_S5_iddd,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13];
var FUNCTION_TABLE_iiiidddd = [b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,__ZN10emscripten8internal13MethodInvokerIM6EpanetFiiddddEiPS2_JiddddEE6invokeERKS4_S5_idddd,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14];
var FUNCTION_TABLE_iiiiddddddi = [b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,__ZN10emscripten8internal13MethodInvokerIM6EpanetFiiddddddNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEiPS2_JiddddddS9_EE6invokeERKSB_SC_iddddddPNS0_11BindingTypeIS9_vEUt_E,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15];
var FUNCTION_TABLE_iiiiddi = [b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,__ZN10emscripten8internal13MethodInvokerIM6EpanetFiiddNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEiPS2_JiddS9_EE6invokeERKSB_SC_iddPNS0_11BindingTypeIS9_vEUt_E
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16];
var FUNCTION_TABLE_iiiididi = [b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,__ZN6Epanet10addcontrolEiididl,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17];
var FUNCTION_TABLE_iiiidii = [b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,__ZN10emscripten8internal13MethodInvokerIM6EpanetFiidNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEES9_EiPS2_JidS9_S9_EE6invokeERKSB_SC_idPNS0_11BindingTypeIS9_vEUt_ESJ_,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18];
var FUNCTION_TABLE_iiiii = [b19,b19,b19,___stdio_seek,b19,b19,___emscripten_stdout_seek,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,__ZN6Epanet4openENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES6_S6_,b19,__ZN6Epanet10runprojectENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES6_S6_,b19,b19,__ZN6Epanet8gettitleElll,__ZN6Epanet8settitleENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES6_S6_,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,__ZN6Epanet14getresultindexEiil
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,__ZN6Epanet7addnodeENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEil,b19,__ZN6Epanet8getcoordEill,b19,b19,b19,__ZN6Epanet12getnodevalueEiil,b19,b19,b19,b19,b19,b19,b19,__ZN6Epanet13getbasedemandEiil
,__ZN6Epanet14getdemandindexEiNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEl,b19,__ZN6Epanet13getdemandnameEiil,__ZN6Epanet16getdemandpatternEiil,b19,b19,b19,__ZN6Epanet13setdemandnameEiiNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,__ZN6Epanet16setdemandpatternEiii,b19,b19,b19,b19,b19,__ZN6Epanet12getlinknodesEill,b19,__ZN6Epanet12getlinkvalueEiil,b19,b19,b19,b19,b19,__ZN6Epanet12setlinknodesEiii,__ZN6Epanet11setlinktypeElii,b19,b19,b19,b19,b19,b19
,b19,b19,b19,__ZN6Epanet15getpatternvalueEiil,__ZN6Epanet10setpatternEili,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,__ZN6Epanet15setpremiseindexEiii,__ZN6Epanet16setpremisestatusEiii,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,__ZN10emscripten8internal13MethodInvokerIM6EpanetFiimEiPS2_JimEE6invokeERKS4_S5_im,b19,b19,b19,b19,b19,__ZN10emscripten8internal13MethodInvokerIM6EpanetFiilEiPS2_JilEE6invokeERKS4_S5_il,b19,__ZN10emscripten8internal13MethodInvokerIM6EpanetFimmEiPS2_JmmEE6invokeERKS4_S5_mm,b19,b19,b19,__ZN10emscripten8internal13MethodInvokerIM6EpanetFiiiEiPS2_JiiEE6invokeERKS4_S5_ii,b19,__ZN10emscripten8internal13MethodInvokerIM6EpanetFiNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEElEiPS2_JS9_lEE6invokeERKSB_SC_PNS0_11BindingTypeIS9_vEUt_El,b19,b19
,__ZN10emscripten8internal13MethodInvokerIM6EpanetFiiNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEiPS2_JiS9_EE6invokeERKSB_SC_iPNS0_11BindingTypeIS9_vEUt_E,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19];
var FUNCTION_TABLE_iiiiid = [b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,__ZN10emscripten8internal13MethodInvokerIM6EpanetFiiidEiPS2_JiidEE6invokeERKS4_S5_iid,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20];
var FUNCTION_TABLE_iiiiidd = [b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,__ZN10emscripten8internal13MethodInvokerIM6EpanetFiiiddEiPS2_JiiddEE6invokeERKS4_S5_iidd,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21];
var FUNCTION_TABLE_iiiiidid = [b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,__ZN6Epanet10setcontrolEiiidid,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22];
var FUNCTION_TABLE_iiiiididi = [b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,__ZN10emscripten8internal13MethodInvokerIM6EpanetFiiididlEiPS2_JiididlEE6invokeERKS4_S5_iididl,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23];
var FUNCTION_TABLE_iiiiii = [b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,__ZN6Epanet4initENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES6_ii,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,__ZN6Epanet11getqualinfoEmmmm,b24,b24,b24,b24,__ZN6Epanet11setqualtypeEiNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES6_S6_,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,__ZN6Epanet14getdemandmodelEllll,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,__ZN6Epanet9getvertexEiill,b24,b24,b24,b24,b24,b24,b24,__ZN6Epanet11setverticesEilli,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,__ZN6Epanet13getcurvevalueEiill,__ZN6Epanet8setcurveEilli,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,__ZN10emscripten8internal13MethodInvokerIM6EpanetFiNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEES9_S9_EiPS2_JS9_S9_S9_EE6invokeERKSB_SC_PNS0_11BindingTypeIS9_vEUt_ESJ_SJ_,b24,b24,b24,__ZN10emscripten8internal13MethodInvokerIM6EpanetFilllEiPS2_JlllEE6invokeERKS4_S5_lll,b24,b24,b24,__ZN10emscripten8internal13MethodInvokerIM6EpanetFiiilEiPS2_JiilEE6invokeERKS4_S5_iil,b24,b24,b24,b24,b24,__ZN10emscripten8internal13MethodInvokerIM6EpanetFiNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEilEiPS2_JS9_ilEE6invokeERKSB_SC_PNS0_11BindingTypeIS9_vEUt_Eil,b24,__ZN10emscripten8internal13MethodInvokerIM6EpanetFiillEiPS2_JillEE6invokeERKS4_S5_ill,b24,b24,b24
,b24,b24,b24,b24,__ZN10emscripten8internal13MethodInvokerIM6EpanetFiiNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEElEiPS2_JiS9_lEE6invokeERKSB_SC_iPNS0_11BindingTypeIS9_vEUt_El,b24,b24,__ZN10emscripten8internal13MethodInvokerIM6EpanetFiiiNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEiPS2_JiiS9_EE6invokeERKSB_SC_iiPNS0_11BindingTypeIS9_vEUt_E,__ZN10emscripten8internal13MethodInvokerIM6EpanetFiiiiEiPS2_JiiiEE6invokeERKS4_S5_iii,b24,b24,__ZN10emscripten8internal13MethodInvokerIM6EpanetFiliiEiPS2_JliiEE6invokeERKS4_S5_lii,b24,b24,__ZN10emscripten8internal13MethodInvokerIM6EpanetFiiliEiPS2_JiliEE6invokeERKS4_S5_ili,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24];
var FUNCTION_TABLE_iiiiiid = [b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,__ZN6Epanet13setelseactionEiiiid,b25
,b25,b25,b25,b25,__ZN6Epanet13setthenactionEiiiid,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25];
var FUNCTION_TABLE_iiiiiidid = [b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,__ZN10emscripten8internal13MethodInvokerIM6EpanetFiiiididEiPS2_JiiididEE6invokeERKS4_S5_iiidid,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26];
var FUNCTION_TABLE_iiiiiii = [b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,__ZN6Epanet7addlinkENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEiS6_S6_l,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,__ZN6Epanet13getelseactionEiilll,b27,__ZN6Epanet7getruleEillll,b27,__ZN6Epanet13getthenactionEiilll,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,__ZN10emscripten8internal13MethodInvokerIM6EpanetFiNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEES9_iiEiPS2_JS9_S9_iiEE6invokeERKSB_SC_PNS0_11BindingTypeIS9_vEUt_ESJ_ii,b27,b27,b27,b27,b27,b27,b27,__ZN10emscripten8internal13MethodInvokerIM6EpanetFimmmmEiPS2_JmmmmEE6invokeERKS4_S5_mmmm,b27,b27,__ZN10emscripten8internal13MethodInvokerIM6EpanetFiiNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEES9_S9_EiPS2_JiS9_S9_S9_EE6invokeERKSB_SC_iPNS0_11BindingTypeIS9_vEUt_ESJ_SJ_,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,__ZN10emscripten8internal13MethodInvokerIM6EpanetFillllEiPS2_JllllEE6invokeERKS4_S5_llll,b27,b27,b27,b27,__ZN10emscripten8internal13MethodInvokerIM6EpanetFiiillEiPS2_JiillEE6invokeERKS4_S5_iill,b27,b27,__ZN10emscripten8internal13MethodInvokerIM6EpanetFiilliEiPS2_JilliEE6invokeERKS4_S5_illi,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27];
var FUNCTION_TABLE_iiiiiiid = [b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,__ZN10emscripten8internal13MethodInvokerIM6EpanetFiiiiidEiPS2_JiiiidEE6invokeERKS4_S5_iiiid,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28];
var FUNCTION_TABLE_iiiiiiii = [b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,__ZN6Epanet10getcontrolEilllll,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,__ZN10emscripten8internal13MethodInvokerIM6EpanetFiNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEiS9_S9_lEiPS2_JS9_iS9_S9_lEE6invokeERKSB_SC_PNS0_11BindingTypeIS9_vEUt_EiSJ_SJ_l,b29,b29,b29,b29,b29,b29,b29,b29,b29,__ZN10emscripten8internal13MethodInvokerIM6EpanetFiiilllEiPS2_JiilllEE6invokeERKS4_S5_iilll,b29,__ZN10emscripten8internal13MethodInvokerIM6EpanetFiillllEiPS2_JillllEE6invokeERKS4_S5_illll,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29];
var FUNCTION_TABLE_iiiiiiiii = [b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,__ZN10emscripten8internal13MethodInvokerIM6EpanetFiilllllEiPS2_JilllllEE6invokeERKS4_S5_illlll,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30
,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30,b30];
var FUNCTION_TABLE_iiiiiiiiiid = [b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,__ZN6Epanet10setpremiseEiiiiiiiid
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31];
var FUNCTION_TABLE_iiiiiiiiiii = [b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,__ZN6Epanet10getpremiseEiilllllll,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32
,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32,b32];
var FUNCTION_TABLE_iiiiiiiiiiid = [b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,__ZN10emscripten8internal13MethodInvokerIM6EpanetFiiiiiiiiidEiPS2_JiiiiiiiidEE6invokeERKS4_S5_iiiiiiiid,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33];
var FUNCTION_TABLE_iiiiiiiiiiii = [b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34
,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34
,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34
,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34
,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34
,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34
,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,__ZN10emscripten8internal13MethodInvokerIM6EpanetFiiilllllllEiPS2_JiilllllllEE6invokeERKS4_S5_iilllllll,b34,b34,b34,b34,b34,b34,b34,b34,b34
,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34
,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34,b34];
var FUNCTION_TABLE_vi = [b35,b35,b35,b35,b35,b35,b35,b35,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,b35,b35,b35,b35,__ZN10__cxxabiv120__si_class_type_infoD0Ev,b35,b35,b35,__ZN10__cxxabiv123__fundamental_type_infoD0Ev,b35,__ZN10__cxxabiv119__pointer_type_infoD0Ev,b35,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,b35,b35,b35,_writeConsole
,b35,__ZN10emscripten8internal14raw_destructorI6EpanetEEvPT_,b35];
var FUNCTION_TABLE_viiii = [b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,b36,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b36,b36,b36,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b36,b36,b36,b36,b36,b36,b36,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b36
,b36,b36,b36];
var FUNCTION_TABLE_viiiii = [b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,b37,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b37,b37,b37,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b37,b37,b37,b37,b37,b37,b37,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b37,b37
,b37,b37,b37];
var FUNCTION_TABLE_viiiiii = [b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,b38,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b38,b38,b38,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b38,b38,b38,b38,b38,b38,b38,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b38,b38,b38
,b38,b38,b38];

  return { _EN_geterror: _EN_geterror, _EN_getversion: _EN_getversion, __ZSt18uncaught_exceptionv: __ZSt18uncaught_exceptionv, ___cxa_can_catch: ___cxa_can_catch, ___cxa_is_pointer_type: ___cxa_is_pointer_type, ___embind_register_native_and_builtin_types: ___embind_register_native_and_builtin_types, ___errno_location: ___errno_location, ___getTypeName: ___getTypeName, ___muldi3: ___muldi3, ___udivdi3: ___udivdi3, __get_daylight: __get_daylight, __get_timezone: __get_timezone, __get_tzname: __get_tzname, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _emscripten_get_sbrk_ptr: _emscripten_get_sbrk_ptr, _emscripten_replace_memory: _emscripten_replace_memory, _fflush: _fflush, _free: _free, _getversion2: _getversion2, _i64Add: _i64Add, _i64Subtract: _i64Subtract, _malloc: _malloc, _memcpy: _memcpy, _memset: _memset, _netbuilder: _netbuilder, _runEpanet: _runEpanet, _test: _test, dynCall_i: dynCall_i, dynCall_ii: dynCall_ii, dynCall_iii: dynCall_iii, dynCall_iiid: dynCall_iiid, dynCall_iiidd: dynCall_iiidd, dynCall_iiiddd: dynCall_iiiddd, dynCall_iiidddd: dynCall_iiidddd, dynCall_iiiddddddi: dynCall_iiiddddddi, dynCall_iiiddi: dynCall_iiiddi, dynCall_iiidii: dynCall_iiidii, dynCall_iiii: dynCall_iiii, dynCall_iiiid: dynCall_iiiid, dynCall_iiiidd: dynCall_iiiidd, dynCall_iiiiddd: dynCall_iiiiddd, dynCall_iiiidddd: dynCall_iiiidddd, dynCall_iiiiddddddi: dynCall_iiiiddddddi, dynCall_iiiiddi: dynCall_iiiiddi, dynCall_iiiididi: dynCall_iiiididi, dynCall_iiiidii: dynCall_iiiidii, dynCall_iiiii: dynCall_iiiii, dynCall_iiiiid: dynCall_iiiiid, dynCall_iiiiidd: dynCall_iiiiidd, dynCall_iiiiidid: dynCall_iiiiidid, dynCall_iiiiididi: dynCall_iiiiididi, dynCall_iiiiii: dynCall_iiiiii, dynCall_iiiiiid: dynCall_iiiiiid, dynCall_iiiiiidid: dynCall_iiiiiidid, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_iiiiiiid: dynCall_iiiiiiid, dynCall_iiiiiiii: dynCall_iiiiiiii, dynCall_iiiiiiiii: dynCall_iiiiiiiii, dynCall_iiiiiiiiiid: dynCall_iiiiiiiiiid, dynCall_iiiiiiiiiii: dynCall_iiiiiiiiiii, dynCall_iiiiiiiiiiid: dynCall_iiiiiiiiiiid, dynCall_iiiiiiiiiiii: dynCall_iiiiiiiiiiii, dynCall_vi: dynCall_vi, dynCall_viiii: dynCall_viiii, dynCall_viiiii: dynCall_viiiii, dynCall_viiiiii: dynCall_viiiiii, establishStackSpace: establishStackSpace, globalCtors: globalCtors, stackAlloc: stackAlloc, stackRestore: stackRestore, stackSave: stackSave };
})
// EMSCRIPTEN_END_ASM
(asmGlobalArg, asmLibraryArg, buffer);

var real__EN_geterror = asm["_EN_geterror"];
asm["_EN_geterror"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__EN_geterror.apply(null, arguments);
};

var real__EN_getversion = asm["_EN_getversion"];
asm["_EN_getversion"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__EN_getversion.apply(null, arguments);
};

var real___ZSt18uncaught_exceptionv = asm["__ZSt18uncaught_exceptionv"];
asm["__ZSt18uncaught_exceptionv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZSt18uncaught_exceptionv.apply(null, arguments);
};

var real____cxa_can_catch = asm["___cxa_can_catch"];
asm["___cxa_can_catch"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_can_catch.apply(null, arguments);
};

var real____cxa_is_pointer_type = asm["___cxa_is_pointer_type"];
asm["___cxa_is_pointer_type"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_is_pointer_type.apply(null, arguments);
};

var real____embind_register_native_and_builtin_types = asm["___embind_register_native_and_builtin_types"];
asm["___embind_register_native_and_builtin_types"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____embind_register_native_and_builtin_types.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"];
asm["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____errno_location.apply(null, arguments);
};

var real____getTypeName = asm["___getTypeName"];
asm["___getTypeName"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____getTypeName.apply(null, arguments);
};

var real____muldi3 = asm["___muldi3"];
asm["___muldi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____muldi3.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"];
asm["___udivdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____udivdi3.apply(null, arguments);
};

var real___get_daylight = asm["__get_daylight"];
asm["__get_daylight"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___get_daylight.apply(null, arguments);
};

var real___get_timezone = asm["__get_timezone"];
asm["__get_timezone"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___get_timezone.apply(null, arguments);
};

var real___get_tzname = asm["__get_tzname"];
asm["__get_tzname"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___get_tzname.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"];
asm["_bitshift64Lshr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"];
asm["_bitshift64Shl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Shl.apply(null, arguments);
};

var real__emscripten_get_sbrk_ptr = asm["_emscripten_get_sbrk_ptr"];
asm["_emscripten_get_sbrk_ptr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_get_sbrk_ptr.apply(null, arguments);
};

var real__fflush = asm["_fflush"];
asm["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fflush.apply(null, arguments);
};

var real__free = asm["_free"];
asm["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__free.apply(null, arguments);
};

var real__getversion2 = asm["_getversion2"];
asm["_getversion2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__getversion2.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"];
asm["_i64Add"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Add.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"];
asm["_i64Subtract"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Subtract.apply(null, arguments);
};

var real__malloc = asm["_malloc"];
asm["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__malloc.apply(null, arguments);
};

var real__netbuilder = asm["_netbuilder"];
asm["_netbuilder"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__netbuilder.apply(null, arguments);
};

var real__runEpanet = asm["_runEpanet"];
asm["_runEpanet"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__runEpanet.apply(null, arguments);
};

var real__test = asm["_test"];
asm["_test"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__test.apply(null, arguments);
};

var real_establishStackSpace = asm["establishStackSpace"];
asm["establishStackSpace"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_establishStackSpace.apply(null, arguments);
};

var real_globalCtors = asm["globalCtors"];
asm["globalCtors"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_globalCtors.apply(null, arguments);
};

var real_stackAlloc = asm["stackAlloc"];
asm["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackAlloc.apply(null, arguments);
};

var real_stackRestore = asm["stackRestore"];
asm["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackRestore.apply(null, arguments);
};

var real_stackSave = asm["stackSave"];
asm["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackSave.apply(null, arguments);
};
var _EN_geterror = Module["_EN_geterror"] = asm["_EN_geterror"];
var _EN_getversion = Module["_EN_getversion"] = asm["_EN_getversion"];
var __ZSt18uncaught_exceptionv = Module["__ZSt18uncaught_exceptionv"] = asm["__ZSt18uncaught_exceptionv"];
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var ___embind_register_native_and_builtin_types = Module["___embind_register_native_and_builtin_types"] = asm["___embind_register_native_and_builtin_types"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___getTypeName = Module["___getTypeName"] = asm["___getTypeName"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var __get_daylight = Module["__get_daylight"] = asm["__get_daylight"];
var __get_timezone = Module["__get_timezone"] = asm["__get_timezone"];
var __get_tzname = Module["__get_tzname"] = asm["__get_tzname"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _emscripten_get_sbrk_ptr = Module["_emscripten_get_sbrk_ptr"] = asm["_emscripten_get_sbrk_ptr"];
var _emscripten_replace_memory = Module["_emscripten_replace_memory"] = asm["_emscripten_replace_memory"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _free = Module["_free"] = asm["_free"];
var _getversion2 = Module["_getversion2"] = asm["_getversion2"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _memset = Module["_memset"] = asm["_memset"];
var _netbuilder = Module["_netbuilder"] = asm["_netbuilder"];
var _runEpanet = Module["_runEpanet"] = asm["_runEpanet"];
var _test = Module["_test"] = asm["_test"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var globalCtors = Module["globalCtors"] = asm["globalCtors"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiid = Module["dynCall_iiid"] = asm["dynCall_iiid"];
var dynCall_iiidd = Module["dynCall_iiidd"] = asm["dynCall_iiidd"];
var dynCall_iiiddd = Module["dynCall_iiiddd"] = asm["dynCall_iiiddd"];
var dynCall_iiidddd = Module["dynCall_iiidddd"] = asm["dynCall_iiidddd"];
var dynCall_iiiddddddi = Module["dynCall_iiiddddddi"] = asm["dynCall_iiiddddddi"];
var dynCall_iiiddi = Module["dynCall_iiiddi"] = asm["dynCall_iiiddi"];
var dynCall_iiidii = Module["dynCall_iiidii"] = asm["dynCall_iiidii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_iiiid = Module["dynCall_iiiid"] = asm["dynCall_iiiid"];
var dynCall_iiiidd = Module["dynCall_iiiidd"] = asm["dynCall_iiiidd"];
var dynCall_iiiiddd = Module["dynCall_iiiiddd"] = asm["dynCall_iiiiddd"];
var dynCall_iiiidddd = Module["dynCall_iiiidddd"] = asm["dynCall_iiiidddd"];
var dynCall_iiiiddddddi = Module["dynCall_iiiiddddddi"] = asm["dynCall_iiiiddddddi"];
var dynCall_iiiiddi = Module["dynCall_iiiiddi"] = asm["dynCall_iiiiddi"];
var dynCall_iiiididi = Module["dynCall_iiiididi"] = asm["dynCall_iiiididi"];
var dynCall_iiiidii = Module["dynCall_iiiidii"] = asm["dynCall_iiiidii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_iiiiid = Module["dynCall_iiiiid"] = asm["dynCall_iiiiid"];
var dynCall_iiiiidd = Module["dynCall_iiiiidd"] = asm["dynCall_iiiiidd"];
var dynCall_iiiiidid = Module["dynCall_iiiiidid"] = asm["dynCall_iiiiidid"];
var dynCall_iiiiididi = Module["dynCall_iiiiididi"] = asm["dynCall_iiiiididi"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_iiiiiid = Module["dynCall_iiiiiid"] = asm["dynCall_iiiiiid"];
var dynCall_iiiiiidid = Module["dynCall_iiiiiidid"] = asm["dynCall_iiiiiidid"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_iiiiiiid = Module["dynCall_iiiiiiid"] = asm["dynCall_iiiiiiid"];
var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = asm["dynCall_iiiiiiii"];
var dynCall_iiiiiiiii = Module["dynCall_iiiiiiiii"] = asm["dynCall_iiiiiiiii"];
var dynCall_iiiiiiiiiid = Module["dynCall_iiiiiiiiiid"] = asm["dynCall_iiiiiiiiiid"];
var dynCall_iiiiiiiiiii = Module["dynCall_iiiiiiiiiii"] = asm["dynCall_iiiiiiiiiii"];
var dynCall_iiiiiiiiiiid = Module["dynCall_iiiiiiiiiiid"] = asm["dynCall_iiiiiiiiiiid"];
var dynCall_iiiiiiiiiiii = Module["dynCall_iiiiiiiiiiii"] = asm["dynCall_iiiiiiiiiiii"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
;



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;

if (!Object.getOwnPropertyDescriptor(Module, "intArrayFromString")) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["intArrayToString"] = intArrayToString;
Module["ccall"] = ccall;
if (!Object.getOwnPropertyDescriptor(Module, "cwrap")) Module["cwrap"] = function() { abort("'cwrap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setValue")) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["getValue"] = getValue;
if (!Object.getOwnPropertyDescriptor(Module, "allocate")) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["getMemory"] = getMemory;
if (!Object.getOwnPropertyDescriptor(Module, "AsciiToString")) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToAscii")) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF8ArrayToString")) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["UTF8ToString"] = UTF8ToString;
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF8Array")) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF8")) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF8")) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF16ToString")) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF16")) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF16")) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF32ToString")) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF32")) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF32")) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocateUTF8")) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackTrace")) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPreRun")) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnInit")) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPreMain")) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnExit")) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPostRun")) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeStringToMemory")) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeArrayToMemory")) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeAsciiToMemory")) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["addRunDependency"] = addRunDependency;
Module["removeRunDependency"] = removeRunDependency;
if (!Object.getOwnPropertyDescriptor(Module, "ENV")) Module["ENV"] = function() { abort("'ENV' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["FS"] = FS;
Module["FS_createFolder"] = FS.createFolder;
Module["FS_createPath"] = FS.createPath;
Module["FS_createDataFile"] = FS.createDataFile;
Module["FS_createPreloadedFile"] = FS.createPreloadedFile;
Module["FS_createLazyFile"] = FS.createLazyFile;
Module["FS_createLink"] = FS.createLink;
Module["FS_createDevice"] = FS.createDevice;
Module["FS_unlink"] = FS.unlink;
if (!Object.getOwnPropertyDescriptor(Module, "GL")) Module["GL"] = function() { abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "dynamicAlloc")) Module["dynamicAlloc"] = function() { abort("'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "loadDynamicLibrary")) Module["loadDynamicLibrary"] = function() { abort("'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "loadWebAssemblyModule")) Module["loadWebAssemblyModule"] = function() { abort("'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getLEB")) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFunctionTables")) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "alignFunctionTables")) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerFunctions")) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addFunction")) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "removeFunction")) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFuncWrapper")) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "prettyPrint")) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "makeBigInt")) Module["makeBigInt"] = function() { abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "dynCall")) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getCompilerSetting")) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackSave")) Module["stackSave"] = function() { abort("'stackSave' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackRestore")) Module["stackRestore"] = function() { abort("'stackRestore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackAlloc")) Module["stackAlloc"] = function() { abort("'stackAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "establishStackSpace")) Module["establishStackSpace"] = function() { abort("'establishStackSpace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "print")) Module["print"] = function() { abort("'print' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "printErr")) Module["printErr"] = function() { abort("'printErr' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getTempRet0")) Module["getTempRet0"] = function() { abort("'getTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setTempRet0")) Module["setTempRet0"] = function() { abort("'setTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "callMain")) Module["callMain"] = function() { abort("'callMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "abort")) Module["abort"] = function() { abort("'abort' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Pointer_stringify")) Module["Pointer_stringify"] = function() { abort("'Pointer_stringify' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "warnOnce")) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["writeStackCookie"] = writeStackCookie;
Module["checkStackCookie"] = checkStackCookie;
Module["abortStackOverflow"] = abortStackOverflow;
if (!Object.getOwnPropertyDescriptor(Module, "intArrayFromBase64")) Module["intArrayFromBase64"] = function() { abort("'intArrayFromBase64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "tryParseAsDataURI")) Module["tryParseAsDataURI"] = function() { abort("'tryParseAsDataURI' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_NORMAL")) Object.defineProperty(Module, "ALLOC_NORMAL", { configurable: true, get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_STACK")) Object.defineProperty(Module, "ALLOC_STACK", { configurable: true, get: function() { abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_DYNAMIC")) Object.defineProperty(Module, "ALLOC_DYNAMIC", { configurable: true, get: function() { abort("'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_NONE")) Object.defineProperty(Module, "ALLOC_NONE", { configurable: true, get: function() { abort("'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
Module["calledRun"] = calledRun;

if (memoryInitializer) {
  if (!isDataURI(memoryInitializer)) {
    memoryInitializer = locateFile(memoryInitializer);
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = readBinary(memoryInitializer);
    HEAPU8.set(data, GLOBAL_BASE);
  } else {
    addRunDependency('memory initializer');
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[GLOBAL_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, GLOBAL_BASE);
      // Delete the typed array that contains the large blob of the memory initializer request response so that
      // we won't keep unnecessary memory lying around. However, keep the XHR object itself alive so that e.g.
      // its .status field can still be accessed later.
      if (Module['memoryInitializerRequest']) delete Module['memoryInitializerRequest'].response;
      removeRunDependency('memory initializer');
    };
    var doBrowserLoad = function() {
      readAsync(memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    };
    var memoryInitializerBytes = tryParseAsDataURI(memoryInitializer);
    if (memoryInitializerBytes) {
      applyMemoryInitializer(memoryInitializerBytes.buffer);
    } else
    if (Module['memoryInitializerRequest']) {
      // a network request has already been created, just use that
      var useRequest = function() {
        var request = Module['memoryInitializerRequest'];
        var response = request.response;
        if (request.status !== 200 && request.status !== 0) {
          var data = tryParseAsDataURI(Module['memoryInitializerRequestURL']);
          if (data) {
            response = data.buffer;
          } else {
            // If you see this warning, the issue may be that you are using locateFile and defining it in JS. That
            // means that the HTML file doesn't know about it, and when it tries to create the mem init request early, does it to the wrong place.
            // Look in your browser's devtools network console to see what's going on.
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status + ', retrying ' + memoryInitializer);
            doBrowserLoad();
            return;
          }
        }
        applyMemoryInitializer(response);
      };
      if (Module['memoryInitializerRequest'].response) {
        setTimeout(useRequest, 0); // it's already here; but, apply it asynchronously
      } else {
        Module['memoryInitializerRequest'].addEventListener('load', useRequest); // wait for it
      }
    } else {
      // fetch it from the network ourselves
      doBrowserLoad();
    }
  }
}


var calledRun;


/**
 * @constructor
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
}

var calledMain = false;


dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!calledRun) run();
  if (!calledRun) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
};





/** @type {function(Array=)} */
function run(args) {
  args = args || arguments_;

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later

  function doRun() {
    // run may have just been called through dependencies being fulfilled just in this very frame,
    // or while the async setStatus time below was happening
    if (calledRun) return;
    calledRun = true;
    Module['calledRun'] = true;

    if (ABORT) return;

    initRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    assert(!Module['_main'], 'compiled without a main, but one is present. if you added it from JS, use Module["onRuntimeInitialized"]');

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else
  {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in SYSCALLS_REQUIRE_FILESYSTEM=0
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var print = out;
  var printErr = err;
  var has = false;
  out = err = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = Module['_fflush'];
    if (flush) flush(0);
    // also flush in the JS FS layer
    ['stdout', 'stderr'].forEach(function(name) {
      var info = FS.analyzePath('/dev/' + name);
      if (!info) return;
      var stream = info.object;
      var rdev = stream.rdev;
      var tty = TTY.ttys[rdev];
      if (tty && tty.output && tty.output.length) {
        has = true;
      }
    });
  } catch(e) {}
  out = print;
  err = printErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc.');
  }
}

function exit(status, implicit) {
  checkUnflushedContent();

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && noExitRuntime && status === 0) {
    return;
  }

  if (noExitRuntime) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      err('program exited (with status: ' + status + '), but EXIT_RUNTIME is not set, so halting execution but not exiting the runtime or preventing further async execution (build with EXIT_RUNTIME=1, if you want a true shutdown)');
    }
  } else {

    ABORT = true;
    EXITSTATUS = status;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  quit_(status, new ExitStatus(status));
}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}


  noExitRuntime = true;

run();





// {{MODULE_ADDITIONS}}




export {  Module as epanetEngine }
